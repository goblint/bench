/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_17 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic64_64.h"
union __anonunion___u_71 {
   s64 __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/semaphore.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in.h"
struct in_addr {
   __be32 s_addr ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_bonding.h"
struct ad_info {
   __u16 aggregator_id ;
   __u16 ports ;
   __u16 actor_key ;
   __u16 partner_key ;
   __u8 partner_system[6U] ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netpoll.h"
union inet_addr {
   __u32 all[4U] ;
   __be32 ip ;
   __be32 ip6[4U] ;
   struct in_addr in ;
   struct in6_addr in6 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netpoll.h"
struct netpoll {
   struct net_device *dev ;
   char dev_name[16U] ;
   char *name ;
   union inet_addr local_ip ;
   union inet_addr remote_ip ;
   bool ipv6 ;
   u16 local_port ;
   u16 remote_port ;
   u8 remote_mac[6U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netpoll.h"
struct netpoll_info {
   refcount_t refcnt ;
   struct semaphore dev_lock ;
   struct sk_buff_head txq ;
   struct delayed_work tx_work ;
   struct netpoll *netpoll ;
   struct callback_head rcu ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[32U] ;
   unsigned long state[1U] ;
};
#line 25 
struct in_ifaddr;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   refcount_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned long mr_qi ;
   unsigned long mr_qri ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __u32 ifa_rt_priority ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/reciprocal_div.h"
struct reciprocal_value {
   u32 m ;
   u8 sh1 ;
   u8 sh2 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct mac_addr {
   u8 mac_addr_value[6U] ;
} __attribute__((__packed__));
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
typedef int rx_states_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
typedef int periodic_states_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
typedef int mux_states_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
typedef int tx_states_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
typedef int churn_state_t;
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct lacpdu {
   u8 subtype ;
   u8 version_number ;
   u8 tlv_type_actor_info ;
   u8 actor_information_length ;
   __be16 actor_system_priority ;
   struct mac_addr actor_system ;
   __be16 actor_key ;
   __be16 actor_port_priority ;
   __be16 actor_port ;
   u8 actor_state ;
   u8 reserved_3_1[3U] ;
   u8 tlv_type_partner_info ;
   u8 partner_information_length ;
   __be16 partner_system_priority ;
   struct mac_addr partner_system ;
   __be16 partner_key ;
   __be16 partner_port_priority ;
   __be16 partner_port ;
   u8 partner_state ;
   u8 reserved_3_2[3U] ;
   u8 tlv_type_collector_info ;
   u8 collector_information_length ;
   __be16 collector_max_delay ;
   u8 reserved_12[12U] ;
   u8 tlv_type_terminator ;
   u8 terminator_length ;
   u8 reserved_50[50U] ;
} __attribute__((__packed__));
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct lacpdu_header {
   struct ethhdr hdr ;
   struct lacpdu lacpdu ;
} __attribute__((__packed__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct bond_marker {
   u8 subtype ;
   u8 version_number ;
   u8 tlv_type ;
   u8 marker_length ;
   u16 requester_port ;
   struct mac_addr requester_system ;
   u32 requester_transaction_id ;
   u16 pad ;
   u8 tlv_type_terminator ;
   u8 terminator_length ;
   u8 reserved_90[90U] ;
} __attribute__((__packed__));
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct bond_marker_header {
   struct ethhdr hdr ;
   struct bond_marker marker ;
} __attribute__((__packed__));
#line 154 
struct slave;
#line 155 
struct bonding;
#line 156 
struct port;
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct bond_3ad_stats {
   atomic64_t lacpdu_rx ;
   atomic64_t lacpdu_tx ;
   atomic64_t lacpdu_unknown_rx ;
   atomic64_t lacpdu_illegal_rx ;
   atomic64_t marker_rx ;
   atomic64_t marker_tx ;
   atomic64_t marker_resp_rx ;
   atomic64_t marker_resp_tx ;
   atomic64_t marker_unknown_rx ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct aggregator {
   struct mac_addr aggregator_mac_address ;
   u16 aggregator_identifier ;
   bool is_individual ;
   u16 actor_admin_aggregator_key ;
   u16 actor_oper_aggregator_key ;
   struct mac_addr partner_system ;
   u16 partner_system_priority ;
   u16 partner_oper_aggregator_key ;
   u16 receive_state ;
   u16 transmit_state ;
   struct port *lag_ports ;
   struct slave *slave ;
   u16 is_active ;
   u16 num_of_ports ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct port_params {
   struct mac_addr system ;
   u16 system_priority ;
   u16 key ;
   u16 port_number ;
   u16 port_priority ;
   u16 port_state ;
};
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct port {
   u16 actor_port_number ;
   u16 actor_port_priority ;
   struct mac_addr actor_system ;
   u16 actor_system_priority ;
   u16 actor_port_aggregator_identifier ;
   bool ntt ;
   u16 actor_admin_port_key ;
   u16 actor_oper_port_key ;
   u8 actor_admin_port_state ;
   u8 actor_oper_port_state ;
   struct port_params partner_admin ;
   struct port_params partner_oper ;
   bool is_enabled ;
   u16 sm_vars ;
   rx_states_t sm_rx_state ;
   u16 sm_rx_timer_counter ;
   periodic_states_t sm_periodic_state ;
   u16 sm_periodic_timer_counter ;
   mux_states_t sm_mux_state ;
   u16 sm_mux_timer_counter ;
   tx_states_t sm_tx_state ;
   u16 sm_tx_timer_counter ;
   u16 sm_churn_actor_timer_counter ;
   u16 sm_churn_partner_timer_counter ;
   u32 churn_actor_count ;
   u32 churn_partner_count ;
   churn_state_t sm_churn_actor_state ;
   churn_state_t sm_churn_partner_state ;
   struct slave *slave ;
   struct aggregator *aggregator ;
   struct port *next_port_in_aggregator ;
   u32 transaction_id ;
   struct lacpdu lacpdu ;
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct ad_system {
   u16 sys_priority ;
   struct mac_addr sys_mac_addr ;
};
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct ad_bond_info {
   struct ad_system system ;
   struct bond_3ad_stats stats ;
   u32 agg_select_timer ;
   u16 aggregator_identifier ;
};
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
struct ad_slave_info {
   struct aggregator aggregator ;
   struct port port ;
   struct bond_3ad_stats stats ;
   u16 id ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_alb.h"
struct tlb_client_info {
   struct slave *tx_slave ;
   u32 tx_bytes ;
   u32 load_history ;
   u32 next ;
   u32 prev ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_alb.h"
struct rlb_client_info {
   __be32 ip_src ;
   __be32 ip_dst ;
   u8 mac_src[6U] ;
   u8 mac_dst[6U] ;
   u32 used_next ;
   u32 used_prev ;
   u32 src_next ;
   u32 src_prev ;
   u32 src_first ;
   u8 assigned ;
   u8 ntt ;
   struct slave *slave ;
   unsigned short vlan_id ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_alb.h"
struct tlb_slave_info {
   u32 head ;
   u32 load ;
};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_alb.h"
struct alb_bond_info {
   struct tlb_client_info *tx_hashtbl ;
   u32 unbalanced_load ;
   int tx_rebalance_counter ;
   int lp_counter ;
   int rlb_enabled ;
   struct rlb_client_info *rx_hashtbl ;
   u32 rx_hashtbl_used_head ;
   u8 rx_ntt ;
   struct slave *rx_slave ;
   u8 primary_is_promisc ;
   u32 rlb_promisc_timeout_counter ;
   u32 rlb_update_delay_counter ;
   u32 rlb_update_retry_counter ;
   u8 rlb_rebalance ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
struct bond_params {
   int mode ;
   int xmit_policy ;
   int miimon ;
   u8 num_peer_notif ;
   int arp_interval ;
   int arp_validate ;
   int arp_all_targets ;
   int use_carrier ;
   int fail_over_mac ;
   int updelay ;
   int downdelay ;
   int peer_notif_delay ;
   int lacp_fast ;
   unsigned int min_links ;
   int ad_select ;
   char primary[16U] ;
   int primary_reselect ;
   __be32 arp_targets[16U] ;
   int tx_queues ;
   int all_slaves_active ;
   int resend_igmp ;
   int lp_interval ;
   int packets_per_slave ;
   int tlb_dynamic_lb ;
   struct reciprocal_value reciprocal_packets_per_slave ;
   u16 ad_actor_sys_prio ;
   u16 ad_user_port_key ;
   u8 ad_actor_system[8U] ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
struct slave {
   struct net_device *dev ;
   struct bonding *bond ;
   int delay ;
   unsigned long last_link_up ;
   unsigned long last_rx ;
   unsigned long target_last_arp_rx[16U] ;
   s8 link ;
   s8 link_new_state ;
   u8 backup : 1 ;
   u8 inactive : 1 ;
   u8 should_notify : 1 ;
   u8 should_notify_link : 1 ;
   u8 duplex ;
   u32 original_mtu ;
   u32 link_failure_count ;
   u32 speed ;
   u16 queue_id ;
   u8 perm_hwaddr[32U] ;
   struct ad_slave_info *ad_info ;
   struct tlb_slave_info tlb_info ;
   struct netpoll *np ;
   struct delayed_work notify_work ;
   struct kobject kobj ;
   struct rtnl_link_stats64 slave_stats ;
};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
struct bond_up_slave {
   unsigned int count ;
   struct callback_head rcu ;
   struct slave *arr[0U] ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
struct bonding {
   struct net_device *dev ;
   struct slave *curr_active_slave ;
   struct slave *current_arp_slave ;
   struct slave *primary_slave ;
   struct bond_up_slave *slave_arr ;
   bool force_primary ;
   s32 slave_cnt ;
   int (*recv_probe)(struct sk_buff *, struct bonding *, struct slave *) ;
   spinlock_t mode_lock ;
   spinlock_t stats_lock ;
   u8 send_peer_notif ;
   u8 igmp_retrans ;
   struct proc_dir_entry *proc_entry ;
   char proc_file_name[16U] ;
   struct list_head bond_list ;
   u32 rr_tx_counter ;
   struct ad_bond_info ad_info ;
   struct alb_bond_info alb_info ;
   struct bond_params params ;
   struct workqueue_struct *wq ;
   struct delayed_work mii_work ;
   struct delayed_work arp_work ;
   struct delayed_work alb_work ;
   struct delayed_work ad_work ;
   struct delayed_work mcast_work ;
   struct delayed_work slave_arr_work ;
   struct dentry *debug_dir ;
   struct rtnl_link_stats64 bond_stats ;
   struct lock_class_key stats_lock_key ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long uintptr_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_721 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_723 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_725 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct idt_bits {
   u16 ist : 3 ;
   u16 zero : 5 ;
   u16 type : 5 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
} __attribute__((__packed__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct gate_struct {
   u16 offset_low ;
   u16 segment ;
   struct idt_bits bits ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 reserved ;
} __attribute__((__packed__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct gate_desc;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__));
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long p4dval_t;
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_p4d_t_763 {
   p4dval_t p4d ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_p4d_t_763 p4d_t;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct flush_tlb_info;
#line 364 
struct mmu_gather;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_init_ops {
   unsigned int (*patch)(u8 , void *, unsigned long , unsigned int ) ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
   void (*flush)(void) ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_time_ops {
   unsigned long long (*sched_clock)(void) ;
   unsigned long long (*steal_clock)(int ) ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_cpu_ops {
   void (*io_delay)(void) ;
   unsigned long (*get_debugreg)(int ) ;
   void (*set_debugreg)(int , unsigned long ) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long ) ;
   void (*write_cr4)(unsigned long ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr *) ;
   void (*load_idt)(struct desc_ptr *) ;
   void (*set_ldt)(void *, unsigned int ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *, unsigned int ) ;
   void (*load_gs_index)(unsigned int ) ;
   void (*write_ldt_entry)(struct desc_struct *, int , void *) ;
   void (*write_gdt_entry)(struct desc_struct *, int , void *, int ) ;
   void (*write_idt_entry)(gate_desc *, int , gate_desc *) ;
   void (*alloc_ldt)(struct desc_struct *, unsigned int ) ;
   void (*free_ldt)(struct desc_struct *, unsigned int ) ;
   void (*load_sp0)(unsigned long ) ;
   void (*wbinvd)(void) ;
   void (*cpuid)(unsigned int *, unsigned int *, unsigned int *, unsigned int *) ;
   u64 (*read_msr)(unsigned int ) ;
   void (*write_msr)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_msr_safe)(unsigned int , int *) ;
   int (*write_msr_safe)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_pmc)(int ) ;
   void (*usergs_sysret64)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct *) ;
   void (*end_context_switch)(struct task_struct *) ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_mmu_ops {
   void (*flush_tlb_user)(void) ;
   void (*flush_tlb_kernel)(void) ;
   void (*flush_tlb_one_user)(unsigned long ) ;
   void (*flush_tlb_others)(struct cpumask *, struct flush_tlb_info *) ;
   void (*tlb_remove_table)(struct mmu_gather *, void *) ;
   void (*exit_mmap)(struct mm_struct *) ;
   struct paravirt_callee_save read_cr2 ;
   void (*write_cr2)(unsigned long ) ;
   unsigned long (*read_cr3)(void) ;
   void (*write_cr3)(unsigned long ) ;
   void (*activate_mm)(struct mm_struct *, struct mm_struct *) ;
   void (*dup_mmap)(struct mm_struct *, struct mm_struct *) ;
   int (*pgd_alloc)(struct mm_struct *) ;
   void (*pgd_free)(struct mm_struct *, pgd_t *) ;
   void (*alloc_pte)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pmd)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pud)(struct mm_struct *, unsigned long ) ;
   void (*alloc_p4d)(struct mm_struct *, unsigned long ) ;
   void (*release_pte)(unsigned long ) ;
   void (*release_pmd)(unsigned long ) ;
   void (*release_pud)(unsigned long ) ;
   void (*release_p4d)(unsigned long ) ;
   void (*set_pte)(pte_t *, pte_t ) ;
   void (*set_pte_at)(struct mm_struct *, unsigned long , pte_t *, pte_t ) ;
   void (*set_pmd)(pmd_t *, pmd_t ) ;
   pte_t (*ptep_modify_prot_start)(struct vm_area_struct *, unsigned long , pte_t *) ;
   void (*ptep_modify_prot_commit)(struct vm_area_struct *, unsigned long , pte_t *, pte_t ) ;
   struct paravirt_callee_save pte_val ;
   struct paravirt_callee_save make_pte ;
   struct paravirt_callee_save pgd_val ;
   struct paravirt_callee_save make_pgd ;
   void (*set_pud)(pud_t *, pud_t ) ;
   struct paravirt_callee_save pmd_val ;
   struct paravirt_callee_save make_pmd ;
   struct paravirt_callee_save pud_val ;
   struct paravirt_callee_save make_pud ;
   void (*set_p4d)(p4d_t *, p4d_t ) ;
   struct paravirt_callee_save p4d_val ;
   struct paravirt_callee_save make_p4d ;
   void (*set_pgd)(pgd_t *, pgd_t ) ;
   struct pv_lazy_ops lazy_mode ;
   void (*set_fixmap)(unsigned int , phys_addr_t , pgprot_t ) ;
};
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lock_ops {
   void (*queued_spin_lock_slowpath)(struct qspinlock *, u32 ) ;
   struct paravirt_callee_save queued_spin_unlock ;
   void (*wait)(u8 *, u8 ) ;
   void (*kick)(int ) ;
   struct paravirt_callee_save vcpu_is_preempted ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_patch_template {
   struct pv_init_ops init ;
   struct pv_time_ops time ;
   struct pv_cpu_ops cpu ;
   struct pv_irq_ops irq ;
   struct pv_mmu_ops mmu ;
   struct pv_lock_ops lock ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_775 {
   int __val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_967 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_967 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_1159 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_1158 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_1159 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_1158 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct fs_pin;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid_namespace.h"
struct pid_namespace {
   struct kref kref ;
   struct idr idr ;
   struct callback_head rcu ;
   unsigned int pid_allocated ;
   struct task_struct *child_reaper ;
   struct kmem_cache *pid_cachep ;
   unsigned int level ;
   struct pid_namespace *parent ;
   struct vfsmount *proc_mnt ;
   struct dentry *proc_self ;
   struct dentry *proc_thread_self ;
   struct fs_pin *bacct ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct work_struct proc_work ;
   kgid_t pid_gid ;
   int hide_pid ;
   int reboot ;
   struct ns_common ns ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct __anonstruct_1194 {
   __kernel_sa_family_t ss_family ;
   char __data[126U] ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
union __anonunion_1193 {
   struct __anonstruct_1194 __anonCompField___anonunion_1193_84 ;
   void *__align ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct __kernel_sockaddr_storage {
   union __anonunion_1193 __anonCompField___kernel_sockaddr_storage_85 ;
};
#line 28 
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_10154 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_10154 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char *, size_t ) ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tags {
   u32 flow_label ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_1215 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_1214 {
   struct __anonstruct_1215 __anonCompField___anonunion_1214_86 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_1214 __anonCompField_flow_dissector_key_vlan_87 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tipc {
   __be32 key ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_1216 {
   struct flow_dissector_key_ipv4_addrs v4addrs ;
   struct flow_dissector_key_ipv6_addrs v6addrs ;
   struct flow_dissector_key_tipc tipckey ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_addrs {
   union __anonunion_1216 __anonCompField_flow_dissector_key_addrs_88 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_1218 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_1217 {
   __be32 ports ;
   struct __anonstruct_1218 __anonCompField___anonunion_1217_89 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_1217 __anonCompField_flow_dissector_key_ports_90 ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_1219 {
   u8 type ;
   u8 code ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
   struct __anonstruct_1219 __anonCompField_flow_dissector_key_icmp_91 ;
   u16 id ;
};
#line 231 
enum flow_dissector_key_id {
    FLOW_DISSECTOR_KEY_CONTROL = 0,
    FLOW_DISSECTOR_KEY_BASIC = 1,
    FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
    FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
    FLOW_DISSECTOR_KEY_PORTS = 4,
    FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
    FLOW_DISSECTOR_KEY_ICMP = 6,
    FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
    FLOW_DISSECTOR_KEY_TIPC = 8,
    FLOW_DISSECTOR_KEY_ARP = 9,
    FLOW_DISSECTOR_KEY_VLAN = 10,
    FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
    FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
    FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
    FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
    FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
    FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
    FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
    FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
    FLOW_DISSECTOR_KEY_MPLS = 19,
    FLOW_DISSECTOR_KEY_TCP = 20,
    FLOW_DISSECTOR_KEY_IP = 21,
    FLOW_DISSECTOR_KEY_CVLAN = 22,
    FLOW_DISSECTOR_KEY_ENC_IP = 23,
    FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
    FLOW_DISSECTOR_KEY_META = 25,
    FLOW_DISSECTOR_KEY_CT = 26,
    FLOW_DISSECTOR_KEY_MAX = 27
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key {
   enum flow_dissector_key_id key_id ;
   size_t offset ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_keys {
   struct flow_dissector_key_control control ;
   struct flow_dissector_key_basic basic ;
   struct flow_dissector_key_tags tags ;
   struct flow_dissector_key_vlan vlan ;
   struct flow_dissector_key_vlan cvlan ;
   struct flow_dissector_key_keyid keyid ;
   struct flow_dissector_key_ports ports ;
   struct flow_dissector_key_icmp icmp ;
   struct flow_dissector_key_addrs addrs ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_1223 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_1224 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_1225 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_1226 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_1223 ports ;
   struct __anonstruct_icmpt_1224 icmpt ;
   struct __anonstruct_dnports_1225 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_1226 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_1227 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_1227 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 973 
struct rtable;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct pernet_operations {
   struct list_head list ;
   int (*init)(struct net *) ;
   void (*pre_exit)(struct net *) ;
   void (*exit)(struct net *) ;
   void (*exit_batch)(struct list_head *) ;
   unsigned int *id ;
   size_t size ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_1373 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_1372 {
   struct __anonstruct_1373 __anonCompField___anonunion_1372_153 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_1372 __anonCompField_sock_cgroup_data_154 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_bonding.h"
struct ifbond {
   __s32 bond_mode ;
   __s32 num_slaves ;
   __s32 miimon ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_bonding.h"
typedef struct ifbond ifbond;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_bonding.h"
struct ifslave {
   __s32 slave_id ;
   char slave_name[16U] ;
   __s8 link ;
   __s8 state ;
   __u32 link_failure_count ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_bonding.h"
typedef struct ifslave ifslave;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 2425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_lag_tx_type {
    NETDEV_LAG_TX_TYPE_UNKNOWN = 0,
    NETDEV_LAG_TX_TYPE_RANDOM = 1,
    NETDEV_LAG_TX_TYPE_BROADCAST = 2,
    NETDEV_LAG_TX_TYPE_ROUNDROBIN = 3,
    NETDEV_LAG_TX_TYPE_ACTIVEBACKUP = 4,
    NETDEV_LAG_TX_TYPE_HASH = 5
};
#line 2434 
enum netdev_lag_hash {
    NETDEV_LAG_HASH_NONE = 0,
    NETDEV_LAG_HASH_L2 = 1,
    NETDEV_LAG_HASH_L34 = 2,
    NETDEV_LAG_HASH_L23 = 3,
    NETDEV_LAG_HASH_E23 = 4,
    NETDEV_LAG_HASH_E34 = 5,
    NETDEV_LAG_HASH_UNKNOWN = 6
};
#line 2462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_lag_upper_info {
   enum netdev_lag_tx_type tx_type ;
   enum netdev_lag_hash hash_type ;
};
#line 2467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_lag_lower_state_info {
   u8 link_up : 1 ;
   u8 tx_enabled : 1 ;
};
#line 2471 
enum netdev_cmd {
    NETDEV_UP = 1,
    NETDEV_DOWN = 2,
    NETDEV_REBOOT = 3,
    NETDEV_CHANGE = 4,
    NETDEV_REGISTER = 5,
    NETDEV_UNREGISTER = 6,
    NETDEV_CHANGEMTU = 7,
    NETDEV_CHANGEADDR = 8,
    NETDEV_PRE_CHANGEADDR = 9,
    NETDEV_GOING_DOWN = 10,
    NETDEV_CHANGENAME = 11,
    NETDEV_FEAT_CHANGE = 12,
    NETDEV_BONDING_FAILOVER = 13,
    NETDEV_PRE_UP = 14,
    NETDEV_PRE_TYPE_CHANGE = 15,
    NETDEV_POST_TYPE_CHANGE = 16,
    NETDEV_POST_INIT = 17,
    NETDEV_RELEASE = 18,
    NETDEV_NOTIFY_PEERS = 19,
    NETDEV_JOIN = 20,
    NETDEV_CHANGEUPPER = 21,
    NETDEV_RESEND_IGMP = 22,
    NETDEV_PRECHANGEMTU = 23,
    NETDEV_CHANGEINFODATA = 24,
    NETDEV_BONDING_INFO = 25,
    NETDEV_PRECHANGEUPPER = 26,
    NETDEV_CHANGELOWERSTATE = 27,
    NETDEV_UDP_TUNNEL_PUSH_INFO = 28,
    NETDEV_UDP_TUNNEL_DROP_INFO = 29,
    NETDEV_CHANGE_TX_QUEUE_LEN = 30,
    NETDEV_CVLAN_FILTER_PUSH_INFO = 31,
    NETDEV_CVLAN_FILTER_DROP_INFO = 32,
    NETDEV_SVLAN_FILTER_PUSH_INFO = 33,
    NETDEV_SVLAN_FILTER_DROP_INFO = 34
};
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 4383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bonding_info {
   ifslave slave ;
   ifbond master ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_1407 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_1407 __anonCompField_bdi_writeback_162 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_1408 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_1408 __anonCompField_bio_163 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1411 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1412 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_1414 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_1415 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1413 {
   struct __anonstruct_elv_1414 elv ;
   struct __anonstruct_flush_1415 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1416 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_1411 __anonCompField_request_164 ;
   union __anonunion_1412 __anonCompField_request_165 ;
   union __anonunion_1413 __anonCompField_request_166 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_1416 __anonCompField_request_167 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_1443 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_1442 {
   void *validation_data ;
   struct __anonstruct_1443 __anonCompField___anonunion_1442_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_1442 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1517 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1518 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_1516 {
   struct __anonstruct_1517 __anonCompField___anonunion_1516_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_1518 __anonCompField___anonunion_1516_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_1516 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1519 {
   unsigned int pkt_len ;
   u16 slave_dev_queue_mapping ;
   u16 tc_classid ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_cb {
   struct __anonstruct_1519 __anonCompField_qdisc_skb_cb_174 ;
   unsigned char data[20U] ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_1520 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_1520 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_1533 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_1533 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_1555 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_1555 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1557 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1556 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1557 __anonCompField___anonunion_1556_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1558 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1560 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1559 {
   __portpair skc_portpair ;
   struct __anonstruct_1560 __anonCompField___anonunion_1559_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1561 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1562 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1563 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1564 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1565 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_1556 __anonCompField_sock_common_178 ;
   union __anonunion_1558 __anonCompField_sock_common_179 ;
   union __anonunion_1559 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1561 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_1562 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1563 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_1564 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_1565 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_1566 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1567 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1568 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1566 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_1567 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_1568 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_1603 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1603 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_arp.h"
struct arphdr {
   __be16 ar_hrd ;
   __be16 ar_pro ;
   unsigned char ar_hln ;
   unsigned char ar_pln ;
   __be16 ar_op ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/route.h"
struct uncached_list;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
union __anonunion_1699 {
   __be32 rt_gw4 ;
   struct in6_addr rt_gw6 ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   u8 rt_gw_family ;
   union __anonunion_1699 __anonCompField_rtable_195 ;
   u32 rt_mtu_locked : 1 ;
   u32 rt_pmtu : 31 ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1700 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1700 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
union __anonunion___u_1711 {
   struct in_device *__val ;
   char __c[1U] ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/igmp.h"
struct ip_sf_list {
   struct ip_sf_list *sf_next ;
   unsigned long sf_count[2U] ;
   __be32 sf_inaddr ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/igmp.h"
union __anonunion_1714 {
   struct ip_mc_list *next ;
   struct ip_mc_list *next_rcu ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/igmp.h"
struct ip_mc_list {
   struct in_device *interface ;
   __be32 multiaddr ;
   unsigned int sfmode ;
   struct ip_sf_list *sources ;
   struct ip_sf_list *tomb ;
   unsigned long sfcount[2U] ;
   union __anonunion_1714 __anonCompField_ip_mc_list_197 ;
   struct ip_mc_list *next_hash ;
   struct timer_list timer ;
   int users ;
   refcount_t refcnt ;
   spinlock_t lock ;
   char tm_running ;
   char reporter ;
   char unsolicit_count ;
   char loaded ;
   unsigned char gsquery ;
   unsigned char crcount ;
   struct callback_head rcu ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct __anonstruct_s_1716 {
   unsigned int len ;
   struct callback_head rcu ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion_1715 {
   struct __anonstruct_s_1716 s ;
   void *ptr[0U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
struct net_generic {
   union __anonunion_1715 __anonCompField_net_generic_198 ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion___u_1718 {
   struct net_generic *__val ;
   char __c[1U] ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/pkt_sched.h"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc *, unsigned long , struct qdisc_walker *) ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
struct bond_opt_value {
   char *string ;
   u64 value ;
   u32 flags ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
struct bond_option {
   int id ;
   char *name ;
   char *desc ;
   u32 flags ;
   unsigned long unsuppmodes ;
   struct bond_opt_value *values ;
   int (*set)(struct bonding *, struct bond_opt_value *) ;
};
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
struct bond_vlan_tag {
   __be16 vlan_proto ;
   unsigned short vlan_id ;
};
#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
struct bond_net {
   struct net *net ;
   struct list_head dev_list ;
   struct proc_dir_entry *proc_dir ;
   struct class_attribute class_attr_bonding_masters ;
};
#line 839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1727 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1731 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1733 {
   void *__val ;
   char __c[1U] ;
};
#line 1239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1735 {
   int (*__val)(struct sk_buff *, struct bonding *, struct slave *) ;
   char __c[1U] ;
};
#line 1699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1739 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1743 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1745 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1747 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1749 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1751 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1753 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1755 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1978  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1757 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1759 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1761 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1763 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1765 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1767 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1769 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1771 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1773 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1775 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1777 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 2959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1779 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1783 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1785 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1789 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1791 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1793 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3972  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1795 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 3982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1797 {
   s32 __val ;
   char __c[1U] ;
};
#line 4001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1799 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 4079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1801 {
   struct bond_up_slave *__val ;
   char __c[1U] ;
};
#line 4106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1805 {
   struct bond_up_slave *__val ;
   char __c[1U] ;
};
#line 4146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1807 {
   struct bond_up_slave *__val ;
   char __c[1U] ;
};
#line 4147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1809 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 4440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
union __anonunion___u_1811 {
   struct bond_up_slave *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
struct slave_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct slave *, char *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
union __anonunion___u_3230 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
union __anonunion___u_3234 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3251 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
union __anonunion___u_3942 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
union __anonunion___u_3944 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
union __anonunion___u_3948 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
union __anonunion___u_3950 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
union __anonunion___u_5218 {
   struct net_generic *__val ;
   char __c[1U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
union __anonunion___u_5372 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
union __anonunion___u_5374 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
union __anonunion___u_6084 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_6103 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipx.h"
struct ipx_address {
   __be32 net ;
   __u8 node[6U] ;
   __be16 sock ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipx.h"
struct ipxhdr {
   __be16 ipx_checksum ;
   __be16 ipx_pktsize ;
   __u8 ipx_tctrl ;
   __u8 ipx_type ;
   struct ipx_address ipx_dest ;
   struct ipx_address ipx_source ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
struct learning_pkt {
   u8 mac_dst[6U] ;
   u8 mac_src[6U] ;
   __be16 type ;
   u8 padding[46U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
struct arp_pkt {
   __be16 hw_addr_space ;
   __be16 prot_addr_space ;
   u8 hw_addr_len ;
   u8 prot_addr_len ;
   __be16 op_code ;
   u8 mac_src[6U] ;
   __be32 ip_src ;
   u8 mac_dst[6U] ;
   __be32 ip_dst ;
};
#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7073 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
struct alb_walk_data {
   struct bonding *bond ;
   struct slave *slave ;
   u8 *mac_addr ;
   bool strict_match ;
};
#line 1147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7075 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7077 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7079 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7081 {
   struct bond_up_slave *__val ;
   char __c[1U] ;
};
#line 1364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7083 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7085 {
   struct bond_up_slave *__val ;
   char __c[1U] ;
};
#line 1478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7087 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7089 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7091 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 1686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
union __anonunion___u_7095 {
   struct slave *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8874 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_8874 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8875 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_8875 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_8891 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_8891 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_8895 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_8895 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8896 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_8897 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_8896 __anonCompField_media_link_90 ;
   union __anonunion_8897 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_8899 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_8898 {
   struct __anonstruct_dev_8899 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_8898 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_8913 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_8914 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_8912 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_8913 i2c ;
   struct __anonstruct_custom_8914 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_8912 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_9815 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_9815 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 56 
void __dynamic_pr_debug(struct _ddebug *, char * , ...);
#line 70 
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_17 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic64_64.h"
__inline static s64 arch_atomic64_read(atomic64_t *v)
{
  #line 23 
  union __anonunion___u_71 __u;
  #line 22 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),8);
  #line 22 
  return (__u.__val);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic64_64.h"
__inline static void arch_atomic64_inc(atomic64_t *v)
{
  #line 88 
  ldv_inline_asm();
  #line 89 
  return;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static s64 atomic64_read(atomic64_t *v)
{
  #line 836 
  kasan_check_read((void *)v,8U);
  #line 837 
  return arch_atomic64_read(v);
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic64_inc(atomic64_t *v)
{
  #line 1049 
  kasan_check_read((void *)v,8U);
  #line 1050 
  arch_atomic64_inc(v);
  #line 1051 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 348 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);
#line 352 
#line 352 
void lock_release(struct lockdep_map *, unsigned long);
#line 658 
#line 658 
void lockdep_rcu_suspicious(char *, int, char *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_lock_mode_lock_of_bonding(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 657  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_lock_bh_mode_lock_of_bonding(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_unlock_mode_lock_of_bonding(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_unlock_bh_mode_lock_of_bonding(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  #line 59 
  __preempt_count_add(1);
  #line 60 
  ldv_inline_asm();
  #line 62 
  return;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  #line 66 
  ldv_inline_asm();
  #line 64 
  __preempt_count_sub(1);
  #line 66 
  return;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 56 
bool rcu_is_watching(void);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  #line 208 
  __here_0: 
            #line 208 
  ;
  #line 208 
  ;
  #line 208 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  #line 210 
  return;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  #line 213 
  __here_0: 
            #line 213 
  ;
  #line 213 
  ;
  #line 213 
  lock_release(map,(unsigned long)((void *)0));
  #line 215 
  return;
}

#line 216 
#line 216 
extern struct lockdep_map rcu_lock_map;
#line 220 
#line 220 
int debug_lockdep_rcu_enabled(void);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  #line 615 
  __rcu_read_lock();
  #line 617 
  rcu_lock_acquire(& rcu_lock_map);
  {
    #line 618 
    bool __warned;
    #line 618 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 618 
      if (! __warned) {
        #line 618 
        if (! rcu_is_watching()) {
          #line 618 
          __warned = (_Bool)1;
          #line 618 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",618,(char *)"rcu_read_lock() used illegally while idle");
        }
      }
  }
  #line 621 
  return;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    #line 667 
    bool __warned;
    #line 667 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 667 
      if (! __warned) {
        #line 667 
        if (! rcu_is_watching()) {
          #line 667 
          __warned = (_Bool)1;
          #line 667 
          lockdep_rcu_suspicious((char *)"./include/linux/rcupdate.h",667,(char *)"rcu_read_unlock() used illegally while idle");
        }
      }
  }
  #line 670 
  __rcu_read_unlock();
  #line 671 
  rcu_lock_release(& rcu_lock_map);
  #line 672 
  return;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_mac_header(struct sk_buff *skb)
{
  #line 2493 
  return skb->head + (unsigned long)skb->mac_header;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  #line 2794 
  return netdev_alloc_skb((struct net_device *)0,length);
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 3563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_header_pointer(struct sk_buff *skb, int offset, int len, void *data, int hlen, void *buffer)
{
  #line 3566 
  if (hlen - offset >= len) 
                            #line 3567 
                            return data + (unsigned long)offset;
  #line 3569 
  if (skb == (struct sk_buff *)0) 
                                  #line 3571 
                                  return (void *)0;
  else {
    #line 3569 
    if (skb_copy_bits(skb,offset,buffer,len) < 0) 
                                                  #line 3571 
                                                  return (void *)0;
  }
  #line 3573 
  return buffer;
}

#line 3577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff *skb, int offset, int len, void *buffer)
{
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  ;
  #line 3579 
  return __skb_header_pointer(skb,offset,len,(void *)skb->data,
                             (int)skb_headlen(skb),buffer);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_ether.h"
__inline static struct ethhdr *eth_hdr(struct sk_buff *skb)
{
  #line 24 
  return (struct ethhdr *)skb_mac_header(skb);
}

#line 2666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2666 
int dev_queue_xmit(struct sk_buff *);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4300 
#line 4300 
void *netdev_lower_get_next_private(struct net_device *, struct list_head **);
#line 4302 
#line 4302 
void *netdev_lower_get_next_private_rcu(struct net_device *, struct list_head **);
#line 4341 
#line 4341 
void *netdev_lower_get_first_private_rcu(struct net_device *);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal_64bits(u8 *addr1, u8 *addr2)
{
  #line 348 
  u64 fold = *((u64 *)addr1) ^ *((u64 *)addr2);
  #line 353 
  return (_Bool)(fold << 16 == 0ULL);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 34 
void rtnl_unlock(void);
#line 35 
#line 35 
int rtnl_trylock(void);
#line 36 
#line 36 
int rtnl_is_locked(void);
#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 1997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_initialize(struct bonding *bond, u16 tick_resolution);
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_bind_slave(struct slave *slave);
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_unbind_slave(struct slave *slave);
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_state_machine_handler(struct work_struct *work);
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_initiate_agg_selection(struct bonding *bond, int timeout);
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_adapter_speed_duplex_changed(struct slave *slave);
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_handle_link_change(struct slave *slave, char link);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_get_active_agg_info(struct bonding *bond, struct ad_info *ad_info);
#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int __bond_3ad_get_active_agg_info(struct bonding *bond, struct ad_info *ad_info);
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_lacpdu_recv(struct sk_buff *skb, struct bonding *bond, struct slave *slave);
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_set_carrier(struct bonding *bond);
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_update_lacp_rate(struct bonding *bond);
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_update_ad_actor_settings(struct bonding *bond);
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_stats_fill(struct sk_buff *skb, struct bond_3ad_stats *stats);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
#line 2705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
size_t bond_3ad_stats_size(void);
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 249 
void bond_queue_slave_event(struct slave *slave);
#line 250 
#line 250 
void bond_lower_state_changed(struct slave *slave);
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static struct bonding *bond_get_bond_by_slave(struct slave *slave)
{
  #line 270 
  return slave->bond;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_is_lb(struct bonding *bond)
{
  #line 281 
  return (_Bool)((unsigned int)bond->params.mode + 4294967291U <= 1U);
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_slave_is_up(struct slave *slave)
{
  #line 336 
  int tmp_1;
  #line 336 
  if ((int)netif_running(slave->dev) != 0) {
    #line 336 
    if ((int)netif_carrier_ok(slave->dev) != 0) 
                                                #line 336 
                                                tmp_1 = 1; else 
                                                                #line 336 
                                                                tmp_1 = 0;
  }
  else 
       #line 336 
       tmp_1 = 0;
  #line 336 
  return (_Bool)(tmp_1 != 0);
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_set_slave_state(struct slave *slave, int slave_state, bool notify)
{
  #line 360 
  if ((int)slave->backup == slave_state) 
                                         #line 361 
                                         return;
  #line 363 
  slave->backup = (unsigned char)slave_state;
  #line 364 
  if ((int)notify != 0) {
    #line 365 
    bond_lower_state_changed(slave);
    #line 366 
    bond_queue_slave_event(slave);
    #line 367 
    slave->should_notify = (unsigned char)0U;
  }
  else 
    #line 369 
    if ((unsigned int)slave->should_notify != 0U) 
                                                  #line 370 
                                                  slave->should_notify = (unsigned char)0U; else 
                                                                    #line 372 
                                                                    slave->should_notify = (unsigned char)1U;
  #line 373 
  return;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_slave_state_notify(struct bonding *bond)
{
  #line 391 
  struct list_head *iter;
  #line 392 
  struct slave *tmp;
  #line 394 
  iter = (bond->dev)->adj_list.lower.next;
  #line 394 
  tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 394 
  while (tmp != (struct slave *)0) {
    #line 395 
    if ((unsigned int)tmp->should_notify != 0U) {
      #line 396 
      bond_lower_state_changed(tmp);
      #line 397 
      tmp->should_notify = (unsigned char)0U;
    }
    #line 394 
    tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 399 
  return;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static int bond_slave_state(struct slave *slave)
{
  #line 404 
  return (int)slave->backup;
}

#line 407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_is_active_slave(struct slave *slave)
{
  #line 409 
  return (_Bool)(bond_slave_state(slave) == 0);
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_set_slave_inactive_flags(struct slave *slave, bool notify)
{
  #line 526 
  if (! bond_is_lb(slave->bond)) 
                                 #line 527 
                                 bond_set_slave_state(slave,1,(_Bool)((bool)((int)notify) != 0));
  #line 528 
  if ((slave->bond)->params.all_slaves_active == 0) 
                                                    #line 529 
                                                    slave->inactive = (unsigned char)1U;
  #line 530 
  return;
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_set_slave_active_flags(struct slave *slave, bool notify)
{
  #line 535 
  bond_set_slave_state(slave,0,(_Bool)((bool)((int)notify) != 0));
  #line 536 
  slave->inactive = (unsigned char)0U;
  #line 537 
  return;
}

#line 642 
#line 642 
int bond_update_slave_arr(struct bonding *bond, struct slave *skipslave);
#line 643 
#line 643 
void bond_slave_arr_work_rearm(struct bonding *bond, unsigned long delay);
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 461 
int nla_put_64bit(struct sk_buff *, int, int, void *, int);
#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_attr_size(int payload)
{
  #line 1038 
  return payload + 4;
}

#line 1295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_u64_64bit(struct sk_buff *skb, int attrtype, u64 value, int padattr)
{
  #line 1298 
  u64 tmp = value;
  #line 1300 
  return nla_put_64bit(skb,attrtype,8,(void *)(& tmp),padattr);
}

#line 1824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_total_size_64bit(int payload)
{
  #line 1826 
  return (nla_attr_size(payload) + 3) & -4;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u8 null_mac_addr[8U] = {(unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U, (unsigned char)0U};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u16 ad_ticks_per_sec;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u8 lacpdu_mcast_addr[8U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, [5] = (unsigned char)2U};
#line 102 
#line 830 
static int ad_lacpdu_send(struct port *port);
#line 103 
#line 874 
static int ad_marker_send(struct port *port, struct bond_marker *marker);
#line 104 
#line 924 
static void ad_mux_machine(struct port *port, bool *update_slave_arr);
#line 105 
#line 1081 
static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port);
#line 106 
#line 1257 
static void ad_tx_machine(struct port *port);
#line 107 
#line 1292 
static void ad_periodic_machine(struct port *port);
#line 108 
#line 1384 
static void ad_port_selection_logic(struct port *port, bool *update_slave_arr);
#line 109 
#line 1663 
static void ad_agg_selection_logic(struct aggregator *agg, bool *update_slave_arr);
#line 111 
#line 1785 
static void ad_clear_agg(struct aggregator *aggregator);
#line 112 
#line 1810 
static void ad_initialize_agg(struct aggregator *aggregator);
#line 113 
#line 1826 
static void ad_initialize_port(struct port *port, int lacp_fast);
#line 114 
#line 1894 
static void ad_enable_collecting_distributing(struct port *port, bool *update_slave_arr);
#line 116 
#line 1913 
static void ad_disable_collecting_distributing(struct port *port, bool *update_slave_arr);
#line 118 
#line 1934 
static void ad_marker_info_received(struct bond_marker *marker_info, struct port *port);
#line 120 
#line 1963 
static void ad_marker_response_received(struct bond_marker *marker, struct port *port);
#line 122 
#line 2446 
static void ad_update_actor_keys(struct port *port, bool reset);
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static struct bonding *__get_bond_by_port(struct port *port)
{
  #line 135 
  if (port->slave == (struct slave *)0) 
                                        #line 136 
                                        return (struct bonding *)0;
  #line 138 
  return bond_get_bond_by_slave(port->slave);
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static struct aggregator *__get_first_agg(struct port *port)
{
  #line 152 
  struct slave *first_slave;
  #line 153 
  struct aggregator *agg;
  #line 151 
  struct bonding *bond = __get_bond_by_port(port);
  #line 156 
  if (bond == (struct bonding *)0) 
                                   #line 157 
                                   return (struct aggregator *)0;
  #line 159 
  rcu_read_lock();
  #line 160 
  first_slave = (struct slave *)netdev_lower_get_first_private_rcu(bond->dev);
  #line 161 
  if (first_slave != (struct slave *)0) 
                                        #line 161 
                                        agg = & (first_slave->ad_info)->aggregator; else 
                                                                    #line 161 
                                                                    agg = (struct aggregator *)0;
  #line 162 
  rcu_read_unlock();
  #line 164 
  return agg;
}

#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static int __agg_has_partner(struct aggregator *agg)
{
  #line 176 
  int tmp_0;
  #line 176 
  if (is_zero_ether_addr((u8 *)(& agg->partner_system.mac_addr_value))) 
    #line 176 
    tmp_0 = 0; else 
                    #line 176 
                    tmp_0 = 1;
  #line 176 
  return tmp_0;
}

#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static void __disable_port(struct port *port)
{
  #line 185 
  bond_set_slave_inactive_flags(port->slave,(_Bool)0);
  #line 186 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static void __enable_port(struct port *port)
{
  #line 194 
  struct slave *slave = port->slave;
  #line 196 
  if ((int)slave->link == 0) {
    #line 196 
    if ((int)bond_slave_is_up(slave) != 0) 
                                           #line 197 
                                           bond_set_slave_active_flags(slave,(_Bool)0);
  }
  #line 198 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static int __port_is_enabled(struct port *port)
{
  #line 206 
  return (int)bond_is_active_slave(port->slave);
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static u32 __get_agg_selection_mode(struct port *port)
{
  #line 217 
  struct bonding *bond = __get_bond_by_port(port);
  #line 219 
  if (bond == (struct bonding *)0) 
                                   #line 220 
                                   return 0U;
  #line 222 
  return (unsigned int)bond->params.ad_select;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static int __check_agg_selection_timer(struct port *port)
{
  #line 231 
  struct bonding *bond = __get_bond_by_port(port);
  #line 233 
  if (bond == (struct bonding *)0) 
                                   #line 234 
                                   return 0;
  #line 236 
  return bond->ad_info.agg_select_timer != 0U;
}

#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u16 __get_link_speed(struct port *port)
{
  #line 262 
  u16 speed;
  #line 261 
  struct slave *slave = port->slave;
  #line 269 
  if ((int)slave->link != 0) 
                             #line 270 
                             speed = (unsigned short)0U;
  else 
    #line 272 
    switch (slave->speed) {
      #line 273 
      case (u32)10: 
                    #line 273 
      ;
      #line 274 
      speed = (unsigned short)2U;
      #line 275 
      break;
      #line 277 
      case (u32)100: 
                     #line 277 
      ;
      #line 278 
      speed = (unsigned short)3U;
      #line 279 
      break;
      #line 281 
      case (u32)1000: 
                      #line 281 
      ;
      #line 282 
      speed = (unsigned short)4U;
      #line 283 
      break;
      #line 285 
      case (u32)2500: 
                      #line 285 
      ;
      #line 286 
      speed = (unsigned short)5U;
      #line 287 
      break;
      #line 289 
      case (u32)5000: 
                      #line 289 
      ;
      #line 290 
      speed = (unsigned short)6U;
      #line 291 
      break;
      #line 293 
      case (u32)10000: 
                       #line 293 
      ;
      #line 294 
      speed = (unsigned short)7U;
      #line 295 
      break;
      #line 297 
      case (u32)14000: 
                       #line 297 
      ;
      #line 298 
      speed = (unsigned short)8U;
      #line 299 
      break;
      #line 301 
      case (u32)20000: 
                       #line 301 
      ;
      #line 302 
      speed = (unsigned short)9U;
      #line 303 
      break;
      #line 305 
      case (u32)25000: 
                       #line 305 
      ;
      #line 306 
      speed = (unsigned short)10U;
      #line 307 
      break;
      #line 309 
      case (u32)40000: 
                       #line 309 
      ;
      #line 310 
      speed = (unsigned short)11U;
      #line 311 
      break;
      #line 313 
      case (u32)50000: 
                       #line 313 
      ;
      #line 314 
      speed = (unsigned short)12U;
      #line 315 
      break;
      #line 317 
      case (u32)56000: 
                       #line 317 
      ;
      #line 318 
      speed = (unsigned short)13U;
      #line 319 
      break;
      #line 321 
      case (u32)100000: 
                        #line 321 
      ;
      #line 322 
      speed = (unsigned short)14U;
      #line 323 
      break;
      #line 325 
      default: 
               #line 325 
      ;
      #line 327 
      if (slave->speed != 4294967295U) {
        #line 328 
        bool __print_once;
        #line 328 
        bool __ret_print_once = (_Bool)(! ((int)__print_once != 0));
        #line 328 
        if (! __print_once) {
          #line 328 
          __print_once = (_Bool)1;
          #line 328 
          printk((char *)"\001",(char *)(& ((slave->bond)->dev)->name),(char *)(& (slave->dev)->name),slave->speed,(int)port->actor_port_number);
        }
        #line 328 
        long tmp = (long)((int)__ret_print_once != 0);
      }
      #line 332 
      speed = (unsigned short)0U;
      #line 333 
      break;
    }
  {
    #line 337 
    bool branch;
    #line 337 
    struct _ddebug __UNIQUE_ID_ddebug437 = {.modname = (char *)"bonding", .function = (char *)"__get_link_speed", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)337U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 337 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug437.key.dd_key_false.key,(_Bool)0);
    #line 337 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 337 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug437,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number,(int)speed);
  }
  #line 339 
  return speed;
}

#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u8 __get_duplex(struct port *port)
{
  #line 352 
  struct slave *slave = port->slave;
  #line 353 
  u8 retval = (unsigned char)0U;
  #line 358 
  if ((int)slave->link == 0) 
    #line 359 
    switch ((int)slave->duplex) {
      #line 360 
      case 1: 
              #line 360 
      ;
      #line 361 
      retval = (unsigned char)1U;
      {
        #line 362 
        bool branch;
        #line 362 
        struct _ddebug __UNIQUE_ID_ddebug438 = {.modname = (char *)"bonding", .function = (char *)"__get_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)362U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 362 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug438.key.dd_key_false.key,(_Bool)0);
        #line 362 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 362 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug438,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
      }
      #line 364 
      break;
      #line 365 
      case 0: 
              #line 365 
      ;
      #line 366 
      default: 
               #line 366 
      ;
      #line 367 
      retval = (unsigned char)0U;
      {
        #line 368 
        bool branch_0;
        #line 368 
        struct _ddebug __UNIQUE_ID_ddebug439 = {.modname = (char *)"bonding", .function = (char *)"__get_duplex", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)368U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 368 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug439.key.dd_key_false.key,(_Bool)0);
        #line 368 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 368 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug439,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
      }
      #line 370 
      break;
    }
  #line 373 
  return retval;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __ad_actor_update_port(struct port *port)
{
  #line 378 
  struct bonding *bond = bond_get_bond_by_slave(port->slave);
  #line 380 
  port->actor_system = bond->ad_info.system.sys_mac_addr;
  #line 381 
  port->actor_system_priority = bond->ad_info.system.sys_priority;
  #line 382 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u16 __ad_timer_to_ticks(u16 timer_type, u16 par)
{
  #line 397 
  u16 retval = (unsigned short)0U;
  #line 399 
  switch ((int)timer_type) {
    #line 400 
    case 0: 
            #line 400 
    ;
    #line 401 
    if ((unsigned int)par != 0U) 
                                 #line 402 
                                 retval = (unsigned short)((unsigned int)ad_ticks_per_sec * 3U); else 
                                                                    #line 404 
                                                                    retval = (unsigned short)((unsigned int)ad_ticks_per_sec * 90U);
    #line 405 
    break;
    #line 406 
    case 1: 
            #line 406 
    ;
    #line 407 
    retval = (unsigned short)((unsigned int)ad_ticks_per_sec * 60U);
    #line 408 
    break;
    #line 409 
    case 2: 
            #line 409 
    ;
    #line 410 
    retval = (unsigned short)((int)par * (int)ad_ticks_per_sec);
    #line 411 
    break;
    #line 412 
    case 3: 
            #line 412 
    ;
    #line 413 
    retval = (unsigned short)((unsigned int)ad_ticks_per_sec * 60U);
    #line 414 
    break;
    #line 415 
    case 4: 
            #line 415 
    ;
    #line 416 
    retval = (unsigned short)((unsigned int)ad_ticks_per_sec * 2U);
    #line 417 
    break;
  }
  #line 420 
  return retval;
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __choose_matched(struct lacpdu *lacpdu, struct port *port)
{
  #line 455 
  ;
  #line 455 
  if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_port)) == (int)port->actor_port_number) {
    #line 455 
    ;
    #line 455 
    if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_port_priority)) == (int)port->actor_port_priority) {
      #line 456 
      if ((int)ether_addr_equal_64bits((u8 *)(& lacpdu->partner_system),
                                (u8 *)(& port->actor_system)) != 0) {
        #line 457 
        ;
        #line 457 
        if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_system_priority)) == (int)port->actor_system_priority) {
          #line 458 
          ;
          #line 458 
          if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_key)) == (int)port->actor_oper_port_key) {
            #line 459 
            if ((((int)lacpdu->partner_state ^ (int)port->actor_oper_port_state) & 4) == 0) 
              #line 455 
              goto _LOR; else 
                              #line 455 
                              goto _LAND_3;
          }
          else 
               #line 455 
               goto _LAND_3;
        }
        else 
             #line 455 
             goto _LAND_3;
      }
      else 
           #line 455 
           goto _LAND_3;
    }
    else 
         #line 455 
         goto _LAND_3;
  }
  else {
    #line 455 
    _LAND_3: 
             #line 460 
    ;
    #line 460 
    if (((int)lacpdu->actor_state & 4) == 0) 
                                             #line 455 
                                             _LOR: 
                                                   #line 463 
                                                   port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 64U); else 
                                                                    #line 465 
                                                                    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65471U);
  }
  #line 466 
  return;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __record_pdu(struct lacpdu *lacpdu, struct port *port)
{
  #line 480 
  if (lacpdu != (struct lacpdu *)0 && port != (struct port *)0) {
    #line 481 
    struct port_params *partner = & port->partner_oper;
    #line 483 
    __choose_matched(lacpdu,port);
    #line 487 
    partner->port_number = __builtin_bswap16((unsigned short)((int)lacpdu->actor_port));
    #line 488 
    partner->port_priority = __builtin_bswap16((unsigned short)((int)lacpdu->actor_port_priority));
    #line 489 
    partner->system = lacpdu->actor_system;
    #line 490 
    partner->system_priority = __builtin_bswap16((unsigned short)((int)lacpdu->actor_system_priority));
    #line 491 
    partner->key = __builtin_bswap16((unsigned short)((int)lacpdu->actor_key));
    #line 492 
    partner->port_state = (unsigned short)lacpdu->actor_state;
    #line 495 
    port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 191U);
    #line 500 
    if (((int)port->sm_vars & 64) != 0 && ((int)lacpdu->actor_state & 8) != 0) {
      #line 502 
      partner->port_state = (unsigned short)((unsigned int)partner->port_state | 8U);
      {
        #line 503 
        bool branch;
        #line 503 
        struct _ddebug __UNIQUE_ID_ddebug440 = {.modname = (char *)"bonding", .function = (char *)"__record_pdu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)503U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 503 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug440.key.dd_key_false.key,(_Bool)0);
        #line 503 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 503 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug440,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name));
      }
    }
    else {
      #line 506 
      partner->port_state = (unsigned short)((unsigned int)partner->port_state & 65527U);
      {
        #line 507 
        bool branch_0;
        #line 507 
        struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"bonding", .function = (char *)"__record_pdu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)507U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 507 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
        #line 507 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 507 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name));
      }
    }
  }
  #line 511 
  return;
}

#line 521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __record_default(struct port *port)
{
  #line 523 
  if (port != (struct port *)0) {
    #line 525 
    memcpy((void *)(& port->partner_oper),(void *)(& port->partner_admin),16UL);
    #line 529 
    port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 64U);
  }
  #line 531 
  return;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __update_selected(struct lacpdu *lacpdu, struct port *port)
{
  #line 548 
  if (lacpdu != (struct lacpdu *)0 && port != (struct port *)0) {
    #line 549 
    struct port_params *partner = & port->partner_oper;
    #line 554 
    ;
    #line 554 
    if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->actor_port)) != (int)partner->port_number) 
      #line 560 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
    else {
      #line 554 
      ;
      #line 554 
      if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->actor_port_priority)) != (int)partner->port_priority) 
        #line 560 
        port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
      else {
        #line 556 
        if (ether_addr_equal_64bits((u8 *)(& lacpdu->actor_system),
                                (u8 *)(& partner->system))) {
          #line 556 
          ;
          #line 556 
          if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->actor_system_priority)) != (int)partner->system_priority) 
            #line 560 
            port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
          else {
            #line 557 
            ;
            #line 557 
            if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->actor_key)) != (int)partner->key) 
              #line 560 
              port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
            else 
              #line 558 
              if ((((int)lacpdu->actor_state ^ (int)partner->port_state) & 4) != 0) 
                #line 560 
                port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
          }
        }
        else 
             #line 560 
             port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
      }
    }
  }
  #line 562 
  return;
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __update_default_selected(struct port *port)
{
  #line 579 
  if (port != (struct port *)0) {
    #line 580 
    struct port_params *admin = & port->partner_admin;
    #line 581 
    struct port_params *oper = & port->partner_oper;
    #line 586 
    if ((int)admin->port_number != (int)oper->port_number || (int)admin->port_priority != (int)oper->port_priority) 
      #line 593 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
    else {
      #line 588 
      if (ether_addr_equal_64bits((u8 *)(& admin->system),(u8 *)(& oper->system))) {
        #line 588 
        if ((int)admin->system_priority != (int)oper->system_priority) 
          #line 593 
          port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
        else 
          #line 589 
          if ((int)admin->key != (int)oper->key) 
                                                 #line 593 
                                                 port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
          else 
            #line 590 
            if ((((int)admin->port_state ^ (int)oper->port_state) & 4) != 0) 
              #line 593 
              port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
      }
      else 
           #line 593 
           port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
    }
  }
  #line 595 
  return;
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __update_ntt(struct lacpdu *lacpdu, struct port *port)
{
  #line 613 
  if (lacpdu != (struct lacpdu *)0 && port != (struct port *)0) {
    #line 617 
    ;
    #line 617 
    if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_port)) != (int)port->actor_port_number) 
      #line 627 
      port->ntt = (_Bool)1;
    else {
      #line 617 
      ;
      #line 617 
      if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_port_priority)) != (int)port->actor_port_priority) 
        #line 627 
        port->ntt = (_Bool)1;
      else {
        #line 619 
        if (ether_addr_equal_64bits((u8 *)(& lacpdu->partner_system),
                                (u8 *)(& port->actor_system))) {
          #line 619 
          ;
          #line 619 
          if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_system_priority)) != (int)port->actor_system_priority) 
            #line 627 
            port->ntt = (_Bool)1;
          else {
            #line 620 
            ;
            #line 620 
            if ((int)__builtin_bswap16((unsigned short)((int)lacpdu->partner_key)) != (int)port->actor_oper_port_key) 
              #line 627 
              port->ntt = (_Bool)1;
            else 
              #line 621 
              if ((((int)lacpdu->partner_state ^ (int)port->actor_oper_port_state) & 1) != 0) 
                #line 627 
                port->ntt = (_Bool)1;
              else 
                #line 622 
                if ((((int)lacpdu->partner_state ^ (int)port->actor_oper_port_state) & 2) != 0) 
                  #line 627 
                  port->ntt = (_Bool)1;
                else 
                  #line 623 
                  if ((((int)lacpdu->partner_state ^ (int)port->actor_oper_port_state) & 8) != 0) 
                    #line 627 
                    port->ntt = (_Bool)1;
                  else 
                    #line 624 
                    if ((((int)lacpdu->partner_state ^ (int)port->actor_oper_port_state) & 4) != 0) 
                      #line 627 
                      port->ntt = (_Bool)1;
          }
        }
        else 
             #line 627 
             port->ntt = (_Bool)1;
      }
    }
  }
  #line 628 
  return;
}

#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static int __agg_ports_are_ready(struct aggregator *aggregator)
{
  #line 639 
  struct port *port;
  #line 640 
  int retval = 1;
  #line 642 
  if (aggregator != (struct aggregator *)0) {
    #line 646 
    port = aggregator->lag_ports;
    #line 646 
    while (port != (struct port *)0) {
      #line 649 
      if (((int)port->sm_vars & 32) == 0) {
        #line 650 
        retval = 0;
        #line 651 
        break;
      }
      #line 647 
      port = port->next_port_in_aggregator;
    }
  }
  #line 656 
  return retval;
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void __set_agg_ports_ready(struct aggregator *aggregator, int val)
{
  #line 667 
  struct port *port;
  #line 669 
  port = aggregator->lag_ports;
  #line 669 
  while (port != (struct port *)0) {
    #line 671 
    if (val != 0) 
                  #line 672 
                  port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 16U); else 
                                                                    #line 674 
                                                                    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65519U);
    #line 669 
    port = port->next_port_in_aggregator;
  }
  #line 675 
  return;
}

#line 678  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static int __agg_active_ports(struct aggregator *agg)
{
  #line 680 
  struct port *port;
  #line 681 
  int active = 0;
  #line 683 
  port = agg->lag_ports;
  #line 683 
  while (port != (struct port *)0) {
    #line 685 
    if ((int)port->is_enabled != 0) 
                                    #line 686 
                                    active ++;
    #line 683 
    port = port->next_port_in_aggregator;
  }
  #line 689 
  return active;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static u32 __get_agg_bandwidth(struct aggregator *aggregator)
{
  #line 699 
  int nports = __agg_active_ports(aggregator);
  #line 700 
  u32 bandwidth = 0U;
  #line 702 
  if (nports != 0) {
    #line 703 
    switch ((int)__get_link_speed(aggregator->lag_ports)) {
      #line 704 
      case 1: 
              #line 704 
      ;
      #line 705 
      bandwidth = (unsigned int)nports;
      #line 706 
      break;
      #line 707 
      case 2: 
              #line 707 
      ;
      #line 708 
      bandwidth = (unsigned int)(nports * 10);
      #line 709 
      break;
      #line 710 
      case 3: 
              #line 710 
      ;
      #line 711 
      bandwidth = (unsigned int)(nports * 100);
      #line 712 
      break;
      #line 713 
      case 4: 
              #line 713 
      ;
      #line 714 
      bandwidth = (unsigned int)(nports * 1000);
      #line 715 
      break;
      #line 716 
      case 5: 
              #line 716 
      ;
      #line 717 
      bandwidth = (unsigned int)(nports * 2500);
      #line 718 
      break;
      #line 719 
      case 6: 
              #line 719 
      ;
      #line 720 
      bandwidth = (unsigned int)(nports * 5000);
      #line 721 
      break;
      #line 722 
      case 7: 
              #line 722 
      ;
      #line 723 
      bandwidth = (unsigned int)(nports * 10000);
      #line 724 
      break;
      #line 725 
      case 8: 
              #line 725 
      ;
      #line 726 
      bandwidth = (unsigned int)(nports * 14000);
      #line 727 
      break;
      #line 728 
      case 9: 
              #line 728 
      ;
      #line 729 
      bandwidth = (unsigned int)(nports * 20000);
      #line 730 
      break;
      #line 731 
      case 10: 
               #line 731 
      ;
      #line 732 
      bandwidth = (unsigned int)(nports * 25000);
      #line 733 
      break;
      #line 734 
      case 11: 
               #line 734 
      ;
      #line 735 
      bandwidth = (unsigned int)(nports * 40000);
      #line 736 
      break;
      #line 737 
      case 12: 
               #line 737 
      ;
      #line 738 
      bandwidth = (unsigned int)(nports * 50000);
      #line 739 
      break;
      #line 740 
      case 13: 
               #line 740 
      ;
      #line 741 
      bandwidth = (unsigned int)(nports * 56000);
      #line 742 
      break;
      #line 743 
      case 14: 
               #line 743 
      ;
      #line 744 
      bandwidth = (unsigned int)(nports * 100000);
      #line 745 
      break;
      #line 746 
      default: 
               #line 746 
      ;
      #line 747 
      bandwidth = 0U;
    }
  }
  #line 750 
  return bandwidth;
}

#line 759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static struct aggregator *__get_active_agg(struct aggregator *aggregator)
{
  #line 762 
  struct list_head *iter;
  #line 763 
  struct slave *slave;
  #line 761 
  struct bonding *bond = (aggregator->slave)->bond;
  #line 765 
  iter = & (bond->dev)->adj_list.lower;
  #line 765 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 765 
  while (slave != (struct slave *)0) {
    #line 766 
    if ((unsigned int)(slave->ad_info)->aggregator.is_active != 0U) 
                                                                    #line 767 
                                                                    return & (slave->ad_info)->aggregator;
    #line 765 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 769 
  return (struct aggregator *)0;
}

#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
__inline static void __update_lacpdu_from_port(struct port *port)
{
  #line 778 
  struct lacpdu *lacpdu = & port->lacpdu;
  #line 779 
  struct port_params *partner = & port->partner_oper;
  #line 788 
  lacpdu->actor_system_priority = __builtin_bswap16((unsigned short)((int)port->actor_system_priority));
  #line 789 
  lacpdu->actor_system = port->actor_system;
  #line 790 
  lacpdu->actor_key = __builtin_bswap16((unsigned short)((int)port->actor_oper_port_key));
  #line 791 
  lacpdu->actor_port_priority = __builtin_bswap16((unsigned short)((int)port->actor_port_priority));
  #line 792 
  lacpdu->actor_port = __builtin_bswap16((unsigned short)((int)port->actor_port_number));
  #line 793 
  lacpdu->actor_state = port->actor_oper_port_state;
  {
    #line 794 
    bool branch;
    #line 794 
    struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"bonding", .function = (char *)"__update_lacpdu_from_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)794U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 794 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
    #line 794 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 794 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_oper_port_state);
  }
  #line 803 
  lacpdu->partner_system_priority = __builtin_bswap16((unsigned short)((int)partner->system_priority));
  #line 804 
  lacpdu->partner_system = partner->system;
  #line 805 
  lacpdu->partner_key = __builtin_bswap16((unsigned short)((int)partner->key));
  #line 806 
  lacpdu->partner_port_priority = __builtin_bswap16((unsigned short)((int)partner->port_priority));
  #line 807 
  lacpdu->partner_port = __builtin_bswap16((unsigned short)((int)partner->port_number));
  #line 808 
  lacpdu->partner_state = (unsigned char)partner->port_state;
  #line 809 
  return;
}

#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static int ad_lacpdu_send(struct port *port)
{
  #line 833 
  struct sk_buff *skb;
  #line 834 
  struct lacpdu_header *lacpdu_header;
  #line 832 
  struct slave *slave = port->slave;
  #line 835 
  int length = 124;
  #line 837 
  skb = dev_alloc_skb((unsigned int)length);
  #line 838 
  if (skb == (struct sk_buff *)0) 
                                  #line 839 
                                  return -12;
  #line 841 
  atomic64_inc(& (slave->ad_info)->stats.lacpdu_tx);
  #line 842 
  atomic64_inc(& (slave->bond)->ad_info.stats.lacpdu_tx);
  #line 844 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = slave->dev;
  #line 845 
  skb_reset_mac_header(skb);
  #line 846 
  skb->network_header = (unsigned short)((unsigned int)skb->mac_header + 14U);
  #line 847 
  skb->protocol = (unsigned short)2440U;
  #line 848 
  skb->priority = 7U;
  #line 850 
  lacpdu_header = (struct lacpdu_header *)skb_put(skb,(unsigned int)length);
  #line 852 
  ether_addr_copy((u8 *)(& lacpdu_header->hdr.h_dest),(u8 *)(& lacpdu_mcast_addr));
  #line 856 
  ether_addr_copy((u8 *)(& lacpdu_header->hdr.h_source),(u8 *)(& slave->perm_hwaddr));
  #line 857 
  lacpdu_header->hdr.h_proto = (unsigned short)2440U;
  #line 859 
  lacpdu_header->lacpdu = port->lacpdu;
  #line 861 
  dev_queue_xmit(skb);
  #line 863 
  return 0;
}

#line 874  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static int ad_marker_send(struct port *port, struct bond_marker *marker)
{
  #line 877 
  struct sk_buff *skb;
  #line 878 
  struct bond_marker_header *marker_header;
  #line 876 
  struct slave *slave = port->slave;
  #line 879 
  int length = 124;
  #line 881 
  skb = dev_alloc_skb((unsigned int)(length + 16));
  #line 882 
  if (skb == (struct sk_buff *)0) 
                                  #line 883 
                                  return -12;
  #line 885 
  switch ((int)marker->tlv_type) {
    #line 886 
    case 1: 
            #line 886 
    ;
    #line 887 
    atomic64_inc(& (slave->ad_info)->stats.marker_tx);
    #line 888 
    atomic64_inc(& (slave->bond)->ad_info.stats.marker_tx);
    #line 889 
    break;
    #line 890 
    case 2: 
            #line 890 
    ;
    #line 891 
    atomic64_inc(& (slave->ad_info)->stats.marker_resp_tx);
    #line 892 
    atomic64_inc(& (slave->bond)->ad_info.stats.marker_resp_tx);
    #line 893 
    break;
  }
  #line 896 
  skb_reserve(skb,16);
  #line 898 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = slave->dev;
  #line 899 
  skb_reset_mac_header(skb);
  #line 900 
  skb->network_header = (unsigned short)((unsigned int)skb->mac_header + 14U);
  #line 901 
  skb->protocol = (unsigned short)2440U;
  #line 903 
  marker_header = (struct bond_marker_header *)skb_put(skb,(unsigned int)length);
  #line 905 
  ether_addr_copy((u8 *)(& marker_header->hdr.h_dest),(u8 *)(& lacpdu_mcast_addr));
  #line 909 
  ether_addr_copy((u8 *)(& marker_header->hdr.h_source),(u8 *)(& slave->perm_hwaddr));
  #line 910 
  marker_header->hdr.h_proto = (unsigned short)2440U;
  #line 912 
  marker_header->marker = *marker;
  #line 914 
  dev_queue_xmit(skb);
  #line 916 
  return 0;
}

#line 924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_mux_machine(struct port *port, bool *update_slave_arr)
{
  #line 926 
  mux_states_t last_state;
  #line 931 
  last_state = port->sm_mux_state;
  #line 933 
  if (((int)port->sm_vars & 1) != 0) 
                                     #line 934 
                                     port->sm_mux_state = 1;
  else 
    #line 936 
    switch ((unsigned int)port->sm_mux_state) {
      #line 937 
      case (unsigned int)1: 
                            #line 937 
      ;
      #line 938 
      if (((int)port->sm_vars & 256) != 0 || ((int)port->sm_vars & 128) != 0) 
        #line 941 
        port->sm_mux_state = 2;
      #line 942 
      break;
      #line 943 
      case (unsigned int)2: 
                            #line 943 
      ;
      #line 945 
      if (((int)port->sm_vars & 256) == 0) {
        #line 946 
        port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65503U);
        #line 952 
        ;
        #line 952 
        __set_agg_ports_ready(port->aggregator,__agg_ports_are_ready(port->aggregator));
        #line 953 
        port->sm_mux_state = 1;
        #line 954 
        break;
      }
      #line 958 
      if ((unsigned int)port->sm_mux_timer_counter != 0U) {
        #line 959 
        port->sm_mux_timer_counter = (u16)((int)port->sm_mux_timer_counter - 1);
        #line 959 
        if ((unsigned int)port->sm_mux_timer_counter == 0U) 
                                                            #line 960 
                                                            port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 32U);
      }
      #line 967 
      ;
      #line 967 
      __set_agg_ports_ready(port->aggregator,__agg_ports_are_ready(port->aggregator));
      #line 972 
      if (((int)port->sm_vars & 16) != 0 && (unsigned int)port->sm_mux_timer_counter == 0U) 
        #line 974 
        port->sm_mux_state = 3;
      #line 975 
      break;
      #line 976 
      case (unsigned int)3: 
                            #line 976 
      ;
      #line 980 
      if (((int)port->sm_vars & 256) != 0 && ((int)port->partner_oper.port_state & 8) != 0) {
        #line 981 
        if (__check_agg_selection_timer(port) == 0) {
          #line 983 
          if ((unsigned int)(port->aggregator)->is_active != 0U) 
                                                                 #line 984 
                                                                 port->sm_mux_state = 4;
        }
        else 
             #line 980 
             goto _LAND;
      }
      else 
        #line 980 
        _LAND: 
               #line 986 
               if (((int)port->sm_vars & 256) == 0 || ((int)port->sm_vars & 128) != 0) {
                 #line 989 
                 port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65503U);
                 #line 995 
                 ;
                 #line 995 
                 __set_agg_ports_ready(port->aggregator,__agg_ports_are_ready(port->aggregator));
                 #line 996 
                 port->sm_mux_state = 1;
               }
               else 
                 #line 997 
                 if ((unsigned int)(port->aggregator)->is_active != 0U) 
                   #line 998 
                   port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 8U);
      #line 1001 
      break;
      #line 1002 
      case (unsigned int)4: 
                            #line 1002 
      ;
      #line 1003 
      if (((((int)port->sm_vars & 256) == 0 || ((int)port->sm_vars & 128) != 0) || ((int)port->partner_oper.port_state & 8) == 0) || ((int)port->actor_oper_port_state & 8) == 0) 
        #line 1007 
        port->sm_mux_state = 3;
      else 
        #line 1013 
        if (port->aggregator != (struct aggregator *)0 && (unsigned int)(port->aggregator)->is_active != 0U) {
          #line 1014 
          if (__port_is_enabled(port) == 0) 
                                            #line 1017 
                                            __enable_port(port);
        }
      #line 1020 
      break;
      #line 1021 
      default: 
               #line 1021 
      ;
      #line 1022 
      break;
    }
  #line 1027 
  if (port->sm_mux_state != last_state) {
    {
      #line 1028 
      bool branch;
      #line 1028 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"bonding", .function = (char *)"ad_mux_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1028U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1028 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 1028 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1028 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(unsigned int)last_state,(unsigned int)port->sm_mux_state);
    }
    #line 1033 
    switch ((unsigned int)port->sm_mux_state) {
      #line 1034 
      case (unsigned int)1: 
                            #line 1034 
      ;
      #line 1035 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 247U);
      #line 1036 
      ad_disable_collecting_distributing(port,update_slave_arr);
      #line 1038 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 239U);
      #line 1039 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 223U);
      #line 1040 
      port->ntt = (_Bool)1;
      #line 1041 
      break;
      #line 1042 
      case (unsigned int)2: 
                            #line 1042 
      ;
      #line 1043 
      port->sm_mux_timer_counter = __ad_timer_to_ticks((unsigned short)4,(unsigned short)0);
      #line 1044 
      break;
      #line 1045 
      case (unsigned int)3: 
                            #line 1045 
      ;
      #line 1046 
      if ((unsigned int)(port->aggregator)->is_active != 0U) 
                                                             #line 1047 
                                                             port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 8U); else 
                                                                    #line 1050 
                                                                    port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 247U);
      #line 1052 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 239U);
      #line 1053 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 223U);
      #line 1054 
      ad_disable_collecting_distributing(port,update_slave_arr);
      #line 1056 
      port->ntt = (_Bool)1;
      #line 1057 
      break;
      #line 1058 
      case (unsigned int)4: 
                            #line 1058 
      ;
      #line 1059 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 16U);
      #line 1060 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 32U);
      #line 1061 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 8U);
      #line 1062 
      ad_enable_collecting_distributing(port,update_slave_arr);
      #line 1064 
      port->ntt = (_Bool)1;
      #line 1065 
      break;
      #line 1066 
      default: 
               #line 1066 
      ;
      #line 1067 
      break;
    }
  }
  #line 1070 
  return;
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_rx_machine(struct lacpdu *lacpdu, struct port *port)
{
  #line 1083 
  rx_states_t last_state;
  #line 1088 
  last_state = port->sm_rx_state;
  #line 1090 
  if (lacpdu != (struct lacpdu *)0) {
    #line 1091 
    atomic64_inc(& ((port->slave)->ad_info)->stats.lacpdu_rx);
    #line 1092 
    atomic64_inc(& ((port->slave)->bond)->ad_info.stats.lacpdu_rx);
  }
  #line 1097 
  if (((int)port->sm_vars & 1) != 0) {
    #line 1098 
    port->sm_rx_state = 1;
    #line 1099 
    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 12U);
  }
  else 
    #line 1101 
    if (((int)port->sm_vars & 1) == 0 && ! port->is_enabled) 
                                                             #line 1102 
                                                             port->sm_rx_state = 2;
    else 
      #line 1104 
      if (lacpdu != (struct lacpdu *)0 && (unsigned int)port->sm_rx_state + 4294967292U <= 2U) {
        #line 1107 
        if (port->sm_rx_state != (unsigned int)6) 
                                                  #line 1108 
                                                  port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 12U);
        #line 1109 
        port->sm_rx_timer_counter = (unsigned short)0U;
        #line 1110 
        port->sm_rx_state = 6;
      }
      else 
        #line 1113 
        if ((unsigned int)port->sm_rx_timer_counter != 0U) {
          #line 1114 
          port->sm_rx_timer_counter = (u16)((int)port->sm_rx_timer_counter - 1);
          #line 1114 
          if ((unsigned int)port->sm_rx_timer_counter == 0U) 
            #line 1115 
            switch ((unsigned int)port->sm_rx_state) {
              #line 1116 
              case (unsigned int)4: 
                                    #line 1116 
              ;
              #line 1117 
              port->sm_rx_state = 5;
              #line 1118 
              break;
              #line 1119 
              case (unsigned int)6: 
                                    #line 1119 
              ;
              #line 1120 
              port->sm_rx_state = 4;
              #line 1121 
              break;
              #line 1122 
              default: 
                       #line 1122 
              ;
              #line 1123 
              break;
            }
          else 
               #line 1113 
               goto _LAND;
        }
        else {
          #line 1113 
          _LAND: 
                 #line 1127 
          ;
          #line 1127 
          switch ((unsigned int)port->sm_rx_state) {
            #line 1128 
            case (unsigned int)2: 
                                  #line 1128 
            ;
            #line 1129 
            if ((int)port->is_enabled != 0 && ((int)port->sm_vars & 2) != 0) 
              #line 1131 
              port->sm_rx_state = 4;
            else 
              #line 1132 
              if ((int)port->is_enabled != 0 && ((int)port->sm_vars & 2) == 0) 
                #line 1135 
                port->sm_rx_state = 3;
            #line 1136 
            break;
            #line 1137 
            default: 
                     #line 1137 
            ;
            #line 1138 
            break;
          }
        }
  #line 1145 
  if (port->sm_rx_state != last_state || lacpdu != (struct lacpdu *)0) {
    {
      #line 1146 
      bool branch;
      #line 1146 
      struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"bonding", .function = (char *)"ad_rx_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1146U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1146 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
      #line 1146 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1146 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(unsigned int)last_state,(unsigned int)port->sm_rx_state);
    }
    #line 1151 
    switch ((unsigned int)port->sm_rx_state) {
      #line 1152 
      case (unsigned int)1: 
                            #line 1152 
      ;
      #line 1153 
      if (((int)port->actor_oper_port_key & 1) == 0) 
                                                     #line 1154 
                                                     port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65533U); else 
                                                                    #line 1156 
                                                                    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 2U);
      #line 1157 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
      #line 1158 
      __record_default(port);
      #line 1159 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 127U);
      #line 1160 
      port->sm_rx_state = 2;
      #line 1163 
      case (unsigned int)2: 
                            #line 1163 
      ;
      #line 1164 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65471U);
      #line 1165 
      break;
      #line 1166 
      case (unsigned int)3: 
                            #line 1166 
      ;
      #line 1167 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65279U);
      #line 1168 
      __record_default(port);
      #line 1169 
      port->partner_oper.port_state = (unsigned short)((unsigned int)port->partner_oper.port_state & 65531U);
      #line 1170 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 64U);
      #line 1171 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 127U);
      #line 1172 
      break;
      #line 1173 
      case (unsigned int)4: 
                            #line 1173 
      ;
      #line 1180 
      port->partner_oper.port_state = (unsigned short)((unsigned int)port->partner_oper.port_state & 65527U);
      #line 1181 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65471U);
      #line 1182 
      port->partner_oper.port_state = (unsigned short)((unsigned int)port->partner_oper.port_state | 2U);
      #line 1183 
      port->partner_oper.port_state = (unsigned short)((unsigned int)port->partner_oper.port_state | 1U);
      #line 1184 
      port->sm_rx_timer_counter = __ad_timer_to_ticks((unsigned short)0,(unsigned short)1);
      #line 1185 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 128U);
      #line 1186 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 12U);
      #line 1187 
      break;
      #line 1188 
      case (unsigned int)5: 
                            #line 1188 
      ;
      #line 1189 
      __update_default_selected(port);
      #line 1190 
      __record_default(port);
      #line 1191 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 64U);
      #line 1192 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 127U);
      #line 1193 
      break;
      #line 1194 
      case (unsigned int)6: 
                            #line 1194 
      ;
      #line 1196 
      if ((int)ether_addr_equal_64bits((u8 *)(& lacpdu->actor_system),
                                (u8 *)(& port->actor_system)) != 0) {
        #line 1198 
        netdev_err(((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name));
        #line 1200 
        return;
      }
      #line 1202 
      __update_selected(lacpdu,port);
      #line 1203 
      __update_ntt(lacpdu,port);
      #line 1204 
      __record_pdu(lacpdu,port);
      #line 1205 
      port->sm_rx_timer_counter = __ad_timer_to_ticks((unsigned short)0,(unsigned short)((int)port->actor_oper_port_state & 2));
      #line 1206 
      port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 127U);
      #line 1207 
      break;
      #line 1208 
      default: 
               #line 1208 
      ;
      #line 1209 
      break;
    }
  }
  #line 1212 
  return;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_churn_machine(struct port *port)
{
  #line 1221 
  if (((int)port->sm_vars & 12) != 0) {
    #line 1222 
    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65523U);
    #line 1223 
    port->sm_churn_actor_state = 0;
    #line 1224 
    port->sm_churn_partner_state = 0;
    #line 1225 
    port->sm_churn_actor_timer_counter = __ad_timer_to_ticks((unsigned short)1,(unsigned short)0);
    #line 1227 
    port->sm_churn_partner_timer_counter = __ad_timer_to_ticks((unsigned short)3,(unsigned short)0);
    #line 1229 
    return;
  }
  #line 1231 
  if ((unsigned int)port->sm_churn_actor_timer_counter != 0U) {
    #line 1232 
    port->sm_churn_actor_timer_counter = (u16)((int)port->sm_churn_actor_timer_counter - 1);
    #line 1232 
    if ((unsigned int)port->sm_churn_actor_timer_counter == 0U) 
      #line 1232 
      if (port->sm_churn_actor_state == (unsigned int)0) 
        #line 1234 
        if (((int)port->actor_oper_port_state & 8) != 0) 
                                                         #line 1235 
                                                         port->sm_churn_actor_state = 2;
        else {
          #line 1237 
          (port->churn_actor_count) ++;
          #line 1238 
          port->sm_churn_actor_state = 1;
        }
  }
  #line 1241 
  if ((unsigned int)port->sm_churn_partner_timer_counter != 0U) {
    #line 1242 
    port->sm_churn_partner_timer_counter = (u16)((int)port->sm_churn_partner_timer_counter - 1);
    #line 1242 
    if ((unsigned int)port->sm_churn_partner_timer_counter == 0U) 
      #line 1242 
      if (port->sm_churn_partner_state == (unsigned int)0) 
        #line 1244 
        if (((int)port->partner_oper.port_state & 8) != 0) 
                                                           #line 1245 
                                                           port->sm_churn_partner_state = 2;
        else {
          #line 1247 
          (port->churn_partner_count) ++;
          #line 1248 
          port->sm_churn_partner_state = 1;
        }
  }
  #line 1250 
  return;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_tx_machine(struct port *port)
{
  #line 1262 
  if ((unsigned int)port->sm_tx_timer_counter != 0U) {
    #line 1262 
    port->sm_tx_timer_counter = (u16)((int)port->sm_tx_timer_counter - 1);
    #line 1262 
    if ((unsigned int)port->sm_tx_timer_counter == 0U) {
      #line 1264 
      if ((int)port->ntt != 0 && ((int)port->sm_vars & 2) != 0) {
        #line 1265 
        __update_lacpdu_from_port(port);
        #line 1267 
        if (ad_lacpdu_send(port) >= 0) {
          {
            #line 1268 
            bool branch;
            #line 1268 
            struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"bonding", .function = (char *)"ad_tx_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1268U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1268 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
            #line 1268 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 1268 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number);
          }
          #line 1276 
          port->ntt = (_Bool)0;
        }
      }
      #line 1282 
      port->sm_tx_timer_counter = (unsigned short)((unsigned int)ad_ticks_per_sec / 3U);
    }
  }
  #line 1284 
  return;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_periodic_machine(struct port *port)
{
  #line 1294 
  periodic_states_t last_state;
  #line 1297 
  last_state = port->sm_periodic_state;
  #line 1300 
  if (((((int)port->sm_vars & 1) != 0 || ((int)port->sm_vars & 2) == 0) || ! port->is_enabled) || ((int)port->actor_oper_port_state & 1) == 0 && ((int)port->partner_oper.port_state & 1) == 0) 
    #line 1303 
    port->sm_periodic_state = 1;
  else 
    #line 1306 
    if ((unsigned int)port->sm_periodic_timer_counter != 0U) {
      #line 1308 
      port->sm_periodic_timer_counter = (u16)((int)port->sm_periodic_timer_counter - 1);
      #line 1308 
      if ((unsigned int)port->sm_periodic_timer_counter == 0U) 
                                                               #line 1310 
                                                               port->sm_periodic_state = 4;
      else 
        #line 1315 
        switch ((unsigned int)port->sm_periodic_state) {
          #line 1316 
          case (unsigned int)2: 
                                #line 1316 
          ;
          #line 1317 
          if (((int)port->partner_oper.port_state & 2) == 0) 
                                                             #line 1319 
                                                             port->sm_periodic_state = 3;
          #line 1320 
          break;
          #line 1321 
          case (unsigned int)3: 
                                #line 1321 
          ;
          #line 1322 
          if (((int)port->partner_oper.port_state & 2) != 0) {
            #line 1323 
            port->sm_periodic_timer_counter = (unsigned short)0U;
            #line 1324 
            port->sm_periodic_state = 4;
          }
          #line 1326 
          break;
          #line 1327 
          default: 
                   #line 1327 
          ;
          #line 1328 
          break;
        }
    }
    else 
      #line 1332 
      switch ((unsigned int)port->sm_periodic_state) {
        #line 1333 
        case (unsigned int)1: 
                              #line 1333 
        ;
        #line 1334 
        port->sm_periodic_state = 2;
        #line 1335 
        break;
        #line 1336 
        case (unsigned int)4: 
                              #line 1336 
        ;
        #line 1337 
        if (((int)port->partner_oper.port_state & 2) == 0) 
                                                           #line 1339 
                                                           port->sm_periodic_state = 3; else 
                                                                    #line 1341 
                                                                    port->sm_periodic_state = 2;
        #line 1342 
        break;
        #line 1343 
        default: 
                 #line 1343 
        ;
        #line 1344 
        break;
      }
  #line 1349 
  if (port->sm_periodic_state != last_state) {
    {
      #line 1350 
      bool branch;
      #line 1350 
      struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"bonding", .function = (char *)"ad_periodic_machine", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1350U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1350 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
      #line 1350 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1350 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(unsigned int)last_state,(unsigned int)port->sm_periodic_state);
    }
    #line 1354 
    switch ((unsigned int)port->sm_periodic_state) {
      #line 1355 
      case (unsigned int)1: 
                            #line 1355 
      ;
      #line 1356 
      port->sm_periodic_timer_counter = (unsigned short)0U;
      #line 1357 
      break;
      #line 1358 
      case (unsigned int)2: 
                            #line 1358 
      ;
      #line 1360 
      port->sm_periodic_timer_counter = (unsigned short)((unsigned int)__ad_timer_to_ticks((unsigned short)2,(unsigned short)1) + 65535U);
      #line 1361 
      break;
      #line 1362 
      case (unsigned int)3: 
                            #line 1362 
      ;
      #line 1364 
      port->sm_periodic_timer_counter = (unsigned short)((unsigned int)__ad_timer_to_ticks((unsigned short)2,(unsigned short)30) + 65535U);
      #line 1365 
      break;
      #line 1366 
      case (unsigned int)4: 
                            #line 1366 
      ;
      #line 1367 
      port->ntt = (_Bool)1;
      #line 1368 
      break;
      #line 1369 
      default: 
               #line 1369 
      ;
      #line 1370 
      break;
    }
  }
  #line 1373 
  return;
}

#line 1384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_port_selection_logic(struct port *port, bool *update_slave_arr)
{
  #line 1386 
  struct aggregator *aggregator;
  #line 1386 
  struct aggregator *temp_aggregator;
  #line 1387 
  struct port *curr_port;
  #line 1388 
  struct list_head *iter;
  #line 1389 
  struct bonding *bond;
  #line 1390 
  struct slave *slave;
  #line 1386 
  struct aggregator *free_aggregator = (struct aggregator *)0;
  #line 1387 
  struct port *last_port = (struct port *)0;
  #line 1391 
  int found = 0;
  #line 1394 
  if (((int)port->sm_vars & 256) != 0) 
                                       #line 1395 
                                       return;
  #line 1397 
  bond = __get_bond_by_port(port);
  #line 1400 
  if (port->aggregator != (struct aggregator *)0) {
    #line 1402 
    temp_aggregator = port->aggregator;
    #line 1403 
    curr_port = temp_aggregator->lag_ports;
    #line 1403 
    while (curr_port != (struct port *)0) {
      #line 1406 
      if (curr_port == port) {
        #line 1407 
        temp_aggregator->num_of_ports = (u16)((int)temp_aggregator->num_of_ports - 1);
        #line 1411 
        if (last_port == (struct port *)0) 
                                           #line 1412 
                                           temp_aggregator->lag_ports = port->next_port_in_aggregator; else 
                                                                    #line 1418 
                                                                    last_port->next_port_in_aggregator = port->next_port_in_aggregator;
        #line 1425 
        port->aggregator = (struct aggregator *)0;
        #line 1426 
        port->next_port_in_aggregator = (struct port *)0;
        #line 1427 
        port->actor_port_aggregator_identifier = (unsigned short)0U;
        {
          #line 1429 
          bool branch;
          #line 1429 
          struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"bonding", .function = (char *)"ad_port_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1429U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1429 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
          #line 1429 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 1429 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,bond->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(int)temp_aggregator->aggregator_identifier);
        }
        #line 1435 
        if (temp_aggregator->lag_ports == (struct port *)0) 
                                                            #line 1436 
                                                            ad_clear_agg(temp_aggregator);
        #line 1437 
        break;
      }
      #line 1403 
      last_port = curr_port;
      #line 1404 
      curr_port = curr_port->next_port_in_aggregator;
    }
    #line 1440 
    if (curr_port == (struct port *)0) {
      #line 1444 
      if (net_ratelimit() != 0) 
                                #line 1444 
                                printk((char *)"\001",(char *)(& (((port->slave)->bond)->dev)->name),(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(int)(port->aggregator)->aggregator_identifier);
    }
  }
  #line 1452 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1452 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1452 
  while (slave != (struct slave *)0) {
    {
      #line 1453 
      aggregator = & (slave->ad_info)->aggregator;
      #line 1456 
      if (aggregator->lag_ports == (struct port *)0) {
        #line 1457 
        if (free_aggregator == (struct aggregator *)0) 
                                                       #line 1458 
                                                       free_aggregator = aggregator;
        #line 1459 
        goto __Cont;
      }
      #line 1467 
      if (! ether_addr_equal_64bits((u8 *)(& port->partner_oper.system),
                                (u8 *)(& null_mac_addr))) 
        #line 1468 
        if (! aggregator->is_individual) 
          #line 1466 
          if ((int)aggregator->actor_oper_aggregator_key == (int)port->actor_oper_port_key) {
            #line 1462 
            if ((int)ether_addr_equal_64bits((u8 *)(& aggregator->partner_system),
                                (u8 *)(& port->partner_oper.system)) != 0) 
              #line 1463 
              if ((int)aggregator->partner_system_priority == (int)port->partner_oper.system_priority) 
                #line 1464 
                if ((int)aggregator->partner_oper_aggregator_key == (int)port->partner_oper.key) {
                  #line 1472 
                  port->aggregator = aggregator;
                  #line 1473 
                  port->actor_port_aggregator_identifier = (port->aggregator)->aggregator_identifier;
                  #line 1475 
                  port->next_port_in_aggregator = aggregator->lag_ports;
                  #line 1476 
                  (port->aggregator)->num_of_ports = (u16)((int)(port->aggregator)->num_of_ports + 1);
                  #line 1477 
                  aggregator->lag_ports = port;
                  {
                    #line 1478 
                    bool branch_0;
                    #line 1478 
                    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"bonding", .function = (char *)"ad_port_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1478U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                    #line 1478 
                    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
                    #line 1478 
                    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                                  #line 1478 
                                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number,(int)(port->aggregator)->aggregator_identifier);
                  }
                  #line 1483 
                  port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 256U);
                  #line 1484 
                  found = 1;
                  #line 1485 
                  break;
                }
          }
    }
    #line 1452 
    __Cont: 
            #line 1452 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1492 
  if (found == 0) 
    #line 1493 
    if (free_aggregator != (struct aggregator *)0) {
      #line 1495 
      port->aggregator = free_aggregator;
      #line 1496 
      port->actor_port_aggregator_identifier = (port->aggregator)->aggregator_identifier;
      #line 1502 
      if (((int)port->actor_oper_port_key & 1) != 0) 
                                                     #line 1504 
                                                     (port->aggregator)->is_individual = (_Bool)0; else 
                                                                    #line 1506 
                                                                    (port->aggregator)->is_individual = (_Bool)1;
      #line 1508 
      (port->aggregator)->actor_admin_aggregator_key = port->actor_admin_port_key;
      #line 1510 
      (port->aggregator)->actor_oper_aggregator_key = port->actor_oper_port_key;
      #line 1512 
      (port->aggregator)->partner_system = port->partner_oper.system;
      #line 1514 
      (port->aggregator)->partner_system_priority = port->partner_oper.system_priority;
      #line 1516 
      (port->aggregator)->partner_oper_aggregator_key = port->partner_oper.key;
      #line 1517 
      (port->aggregator)->receive_state = (unsigned short)1U;
      #line 1518 
      (port->aggregator)->transmit_state = (unsigned short)1U;
      #line 1519 
      (port->aggregator)->lag_ports = port;
      #line 1520 
      (port->aggregator)->num_of_ports = (u16)((int)(port->aggregator)->num_of_ports + 1);
      #line 1523 
      port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 256U);
      {
        #line 1525 
        bool branch_1;
        #line 1525 
        struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"bonding", .function = (char *)"ad_port_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1525U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1525 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
        #line 1525 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1525 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,bond->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(int)(port->aggregator)->aggregator_identifier);
      }
    }
    else 
         #line 1529 
         netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number);
  #line 1538 
  ;
  #line 1538 
  __set_agg_ports_ready(port->aggregator,__agg_ports_are_ready(port->aggregator));
  #line 1541 
  aggregator = __get_first_agg(port);
  #line 1542 
  ad_agg_selection_logic(aggregator,update_slave_arr);
  #line 1544 
  if ((unsigned int)(port->aggregator)->is_active == 0U) 
                                                         #line 1545 
                                                         port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 247U);
  #line 1546 
  return;
}

#line 1551  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static struct aggregator *ad_agg_selection_test(struct aggregator *best, struct aggregator *curr)
{
  #line 1578 
  if (best == (struct aggregator *)0) 
                                      #line 1579 
                                      return curr;
  #line 1581 
  if (! curr->is_individual && (int)best->is_individual != 0) 
                                                              #line 1582 
                                                              return curr;
  #line 1584 
  if ((int)curr->is_individual != 0 && ! best->is_individual) 
                                                              #line 1585 
                                                              return best;
  #line 1587 
  if (__agg_has_partner(curr) != 0) {
    #line 1587 
    if (__agg_has_partner(best) == 0) 
                                      #line 1588 
                                      return curr;
  }
  #line 1590 
  if (__agg_has_partner(curr) == 0) {
    #line 1590 
    if (__agg_has_partner(best) != 0) 
                                      #line 1591 
                                      return best;
  }
  #line 1593 
  switch (__get_agg_selection_mode(curr->lag_ports)) {
    #line 1594 
    case (u32)2: 
                 #line 1594 
    ;
    #line 1595 
    if (__agg_active_ports(curr) > __agg_active_ports(best)) 
                                                             #line 1596 
                                                             return curr;
    #line 1598 
    if (__agg_active_ports(curr) < __agg_active_ports(best)) 
                                                             #line 1599 
                                                             return best;
    #line 1602 
    case (u32)0: 
                 #line 1602 
    ;
    #line 1603 
    case (u32)1: 
                 #line 1603 
    ;
    #line 1604 
    if (__get_agg_bandwidth(curr) > __get_agg_bandwidth(best)) 
                                                               #line 1605 
                                                               return curr;
    #line 1607 
    break;
    #line 1609 
    default: 
             #line 1609 
    ;
    #line 1610 
    if (net_ratelimit() != 0) {
      #line 1610 
      ;
      #line 1610 
      ;
      #line 1610 
      printk((char *)"\001",(char *)(& (((curr->slave)->bond)->dev)->name),(char *)(& ((curr->slave)->dev)->name),__get_agg_selection_mode(curr->lag_ports));
    }
    #line 1614 
    break;
  }
  #line 1617 
  return best;
}

#line 1620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static int agg_device_up(struct aggregator *agg)
{
  #line 1622 
  struct port *port = agg->lag_ports;
  #line 1624 
  if (port == (struct port *)0) 
                                #line 1625 
                                return 0;
  #line 1627 
  port = agg->lag_ports;
  #line 1627 
  while (port != (struct port *)0) {
    #line 1629 
    if ((int)netif_running((port->slave)->dev) != 0) {
      #line 1629 
      if ((int)netif_carrier_ok((port->slave)->dev) != 0) 
                                                          #line 1631 
                                                          return 1;
    }
    #line 1627 
    port = port->next_port_in_aggregator;
  }
  #line 1634 
  return 0;
}

#line 1663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_agg_selection_logic(struct aggregator *agg, bool *update_slave_arr)
{
  #line 1666 
  struct aggregator *best;
  #line 1666 
  struct aggregator *active;
  #line 1666 
  struct aggregator *origin;
  #line 1668 
  struct list_head *iter;
  #line 1669 
  struct slave *slave;
  #line 1670 
  struct port *port;
  #line 1667 
  struct bonding *bond = (agg->slave)->bond;
  #line 1672 
  rcu_read_lock();
  #line 1673 
  origin = agg;
  #line 1674 
  active = __get_active_agg(agg);
  #line 1675 
  if (active != (struct aggregator *)0) {
    #line 1675 
    if (agg_device_up(active) != 0) 
                                    #line 1675 
                                    best = active; else 
                                                        #line 1675 
                                                        best = (struct aggregator *)0;
  }
  else 
       #line 1675 
       best = (struct aggregator *)0;
  #line 1677 
  iter = & (bond->dev)->adj_list.lower;
  #line 1677 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 1677 
  while (slave != (struct slave *)0) {
    {
      #line 1678 
      agg = & (slave->ad_info)->aggregator;
      #line 1680 
      agg->is_active = (unsigned short)0U;
      #line 1682 
      if (__agg_active_ports(agg) != 0) {
        #line 1682 
        if (agg_device_up(agg) != 0) 
                                     #line 1683 
                                     best = ad_agg_selection_test(best,agg);
      }
    }
    #line 1677 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 1686 
  if (best != (struct aggregator *)0) {
    #line 1686 
    if (__get_agg_selection_mode(best->lag_ports) == 0U) 
      #line 1693 
      if (active != (struct aggregator *)0 && active->lag_ports != (struct port *)0) {
        #line 1693 
        if (__agg_active_ports(active) != 0) {
          #line 1694 
          if (__agg_has_partner(active) != 0) 
                                              #line 1693 
                                              goto _LOR;
          else {
            #line 1695 
            if (__agg_has_partner(active) == 0) {
              #line 1696 
              if (__agg_has_partner(best) == 0) 
                #line 1693 
                _LOR: 
                      #line 1698 
                      if ((unsigned int)active->actor_oper_aggregator_key != 0U || (unsigned int)best->actor_oper_aggregator_key == 0U) {
                        #line 1700 
                        best = (struct aggregator *)0;
                        #line 1701 
                        active->is_active = (unsigned short)1U;
                      }
            }
          }
        }
      }
  }
  #line 1706 
  if (best != (struct aggregator *)0 && best == active) {
    #line 1707 
    best = (struct aggregator *)0;
    #line 1708 
    active->is_active = (unsigned short)1U;
  }
  #line 1712 
  if (best != (struct aggregator *)0) {
    {
      #line 1713 
      bool branch;
      #line 1713 
      struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"bonding", .function = (char *)"ad_agg_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): best Agg=%d; P=%d; a k=%d; p k=%d; Ind=%d; Act=%d\n", .lineno = (unsigned int)1713U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1713 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
      #line 1713 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1713 
        char *tmp_9;
        #line 1713 
        ;
        #line 1713 
        ;
        #line 1713 
        ;
        #line 1713 
        ;
        #line 1713 
        ;
        #line 1713 
        ;
        #line 1713 
        if (best->slave != (struct slave *)0) 
                                              #line 1713 
                                              tmp_9 = (char *)(& ((best->slave)->dev)->name); else 
                                                                    #line 1713 
                                                                    tmp_9 = (char *)"NULL";
        #line 1713 
        ;
        #line 1713 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,bond->dev,(char *)"(slave %s): best Agg=%d; P=%d; a k=%d; p k=%d; Ind=%d; Act=%d\n",tmp_9,(int)best->aggregator_identifier,(int)best->num_of_ports,(int)best->actor_oper_aggregator_key,(int)best->partner_oper_aggregator_key,(int)best->is_individual,(int)best->is_active);
      }
    }
    {
      #line 1719 
      bool branch_0;
      #line 1719 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"bonding", .function = (char *)"ad_agg_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): best ports %p slave %p\n", .lineno = (unsigned int)1719U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1719 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 1719 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 1719 
        char *tmp_11;
        #line 1719 
        ;
        #line 1719 
        ;
        #line 1719 
        if (best->slave != (struct slave *)0) 
                                              #line 1719 
                                              tmp_11 = (char *)(& ((best->slave)->dev)->name); else 
                                                                    #line 1719 
                                                                    tmp_11 = (char *)"NULL";
        #line 1719 
        ;
        #line 1719 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,bond->dev,(char *)"(slave %s): best ports %p slave %p\n",tmp_11,best->lag_ports,best->slave);
      }
    }
    #line 1723 
    iter = & (bond->dev)->adj_list.lower;
    #line 1723 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    #line 1723 
    while (slave != (struct slave *)0) {
      #line 1724 
      agg = & (slave->ad_info)->aggregator;
      {
        #line 1726 
        bool branch_1;
        #line 1726 
        struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"bonding", .function = (char *)"ad_agg_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1726U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1726 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
        #line 1726 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1726 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)agg->aggregator_identifier,(int)agg->num_of_ports,(int)agg->actor_oper_aggregator_key,(int)agg->partner_oper_aggregator_key,(int)agg->is_individual,(int)agg->is_active);
      }
      #line 1723 
      slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    }
    #line 1734 
    if ((int)best->is_individual != 0) {
      #line 1735 
      if (net_ratelimit() != 0) 
                                #line 1735 
                                printk((char *)"\001",(char *)(& (bond->dev)->name));
    }
    #line 1738 
    best->is_active = (unsigned short)1U;
    {
      #line 1739 
      bool branch_2;
      #line 1739 
      struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"bonding", .function = (char *)"ad_agg_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): LAG %d chosen as the active LAG\n", .lineno = (unsigned int)1739U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1739 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
      #line 1739 
      if ((long)((long)((int)branch_2 != 0)) != 0L) {
        #line 1739 
        char *tmp_17;
        #line 1739 
        ;
        #line 1739 
        if (best->slave != (struct slave *)0) 
                                              #line 1739 
                                              tmp_17 = (char *)(& ((best->slave)->dev)->name); else 
                                                                    #line 1739 
                                                                    tmp_17 = (char *)"NULL";
        #line 1739 
        ;
        #line 1739 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,bond->dev,(char *)"(slave %s): LAG %d chosen as the active LAG\n",tmp_17,(int)best->aggregator_identifier);
      }
    }
    {
      #line 1742 
      bool branch_3;
      #line 1742 
      struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"bonding", .function = (char *)"ad_agg_selection_logic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): Agg=%d; P=%d; a k=%d; p k=%d; Ind=%d; Act=%d\n", .lineno = (unsigned int)1742U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1742 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
      #line 1742 
      if ((long)((long)((int)branch_3 != 0)) != 0L) {
        #line 1742 
        char *tmp_19;
        #line 1742 
        ;
        #line 1742 
        ;
        #line 1742 
        ;
        #line 1742 
        ;
        #line 1742 
        ;
        #line 1742 
        ;
        #line 1742 
        if (best->slave != (struct slave *)0) 
                                              #line 1742 
                                              tmp_19 = (char *)(& ((best->slave)->dev)->name); else 
                                                                    #line 1742 
                                                                    tmp_19 = (char *)"NULL";
        #line 1742 
        ;
        #line 1742 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,bond->dev,(char *)"(slave %s): Agg=%d; P=%d; a k=%d; p k=%d; Ind=%d; Act=%d\n",tmp_19,(int)best->aggregator_identifier,(int)best->num_of_ports,(int)best->actor_oper_aggregator_key,(int)best->partner_oper_aggregator_key,(int)best->is_individual,(int)best->is_active);
      }
    }
    #line 1752 
    if (active != (struct aggregator *)0) {
      #line 1753 
      port = active->lag_ports;
      #line 1753 
      while (port != (struct port *)0) {
        #line 1755 
        __disable_port(port);
        #line 1753 
        port = port->next_port_in_aggregator;
      }
    }
    #line 1759 
    *update_slave_arr = (_Bool)1;
  }
  #line 1765 
  active = __get_active_agg(origin);
  #line 1767 
  if (active != (struct aggregator *)0) {
    #line 1768 
    if (__agg_has_partner(active) == 0) {
      #line 1769 
      port = active->lag_ports;
      #line 1769 
      while (port != (struct port *)0) {
        #line 1771 
        __enable_port(port);
        #line 1769 
        port = port->next_port_in_aggregator;
      }
    }
  }
  #line 1776 
  rcu_read_unlock();
  #line 1778 
  bond_3ad_set_carrier(bond);
  #line 1779 
  return;
}

#line 1785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_clear_agg(struct aggregator *aggregator)
{
  #line 1787 
  if (aggregator != (struct aggregator *)0) {
    #line 1788 
    aggregator->is_individual = (_Bool)0;
    #line 1789 
    aggregator->actor_admin_aggregator_key = (unsigned short)0U;
    #line 1790 
    aggregator->actor_oper_aggregator_key = (unsigned short)0U;
    #line 1791 
    eth_zero_addr((u8 *)(& aggregator->partner_system.mac_addr_value));
    #line 1792 
    aggregator->partner_system_priority = (unsigned short)0U;
    #line 1793 
    aggregator->partner_oper_aggregator_key = (unsigned short)0U;
    #line 1794 
    aggregator->receive_state = (unsigned short)0U;
    #line 1795 
    aggregator->transmit_state = (unsigned short)0U;
    #line 1796 
    aggregator->lag_ports = (struct port *)0;
    #line 1797 
    aggregator->is_active = (unsigned short)0U;
    #line 1798 
    aggregator->num_of_ports = (unsigned short)0U;
    {
      #line 1799 
      bool branch;
      #line 1799 
      struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"bonding", .function = (char *)"ad_clear_agg", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"%s: LAG %d was cleared\n", .lineno = (unsigned int)1799U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1799 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
      #line 1799 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 1799 
        char *tmp;
        #line 1799 
        ;
        #line 1799 
        if (aggregator->slave != (struct slave *)0) 
                                                    #line 1799 
                                                    tmp = (char *)(& ((aggregator->slave)->dev)->name); else 
                                                                    #line 1799 
                                                                    tmp = (char *)"NULL";
        #line 1799 
        __dynamic_pr_debug(& __UNIQUE_ID_ddebug455,(char *)"%s: LAG %d was cleared\n",tmp,(int)aggregator->aggregator_identifier);
      }
    }
  }
  #line 1802 
  return;
}

#line 1810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_initialize_agg(struct aggregator *aggregator)
{
  #line 1812 
  if (aggregator != (struct aggregator *)0) {
    #line 1813 
    ad_clear_agg(aggregator);
    #line 1815 
    eth_zero_addr((u8 *)(& aggregator->aggregator_mac_address.mac_addr_value));
    #line 1816 
    aggregator->aggregator_identifier = (unsigned short)0U;
    #line 1817 
    aggregator->slave = (struct slave *)0;
  }
  #line 1819 
  return;
}

#line 1826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_initialize_port(struct port *port, int lacp_fast)
{
  #line 1828 
  struct port_params tmpl = {.system = {.mac_addr_value = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .system_priority = (unsigned short)65535U, .key = (unsigned short)1U, .port_number = (unsigned short)1U, .port_priority = (unsigned short)255U, .port_state = (unsigned short)1U};
  #line 1835 
  struct lacpdu lacpdu = {.subtype = (unsigned char)1U, .version_number = (unsigned char)1U, .tlv_type_actor_info = (unsigned char)1U, .actor_information_length = (unsigned char)20U, .actor_system_priority = (unsigned short)0, .actor_system = {.mac_addr_value = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .actor_key = (unsigned short)0, .actor_port_priority = (unsigned short)0, .actor_port = (unsigned short)0, .actor_state = (unsigned char)0, .reserved_3_1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .tlv_type_partner_info = (unsigned char)2U, .partner_information_length = (unsigned char)20U, .partner_system_priority = (unsigned short)0, .partner_system = {.mac_addr_value = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}}, .partner_key = (unsigned short)0, .partner_port_priority = (unsigned short)0, .partner_port = (unsigned short)0, .partner_state = (unsigned char)0, .reserved_3_2 = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .tlv_type_collector_info = (unsigned char)3U, .collector_information_length = (unsigned char)16U, .collector_max_delay = (unsigned short)0U, .reserved_12 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}, .tlv_type_terminator = (unsigned char)0, .terminator_length = (unsigned char)0, .reserved_50 = {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0}};
  #line 1847 
  if (port != (struct port *)0) {
    #line 1848 
    port->actor_port_priority = (unsigned short)255U;
    #line 1849 
    port->actor_port_aggregator_identifier = (unsigned short)0U;
    #line 1850 
    port->ntt = (_Bool)0;
    #line 1851 
    port->actor_admin_port_state = (unsigned char)5U;
    #line 1853 
    port->actor_oper_port_state = (unsigned char)5U;
    #line 1856 
    if (lacp_fast != 0) 
                        #line 1857 
                        port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 2U);
    #line 1859 
    memcpy((void *)(& port->partner_admin),(void *)(& tmpl),16UL);
    #line 1860 
    memcpy((void *)(& port->partner_oper),(void *)(& tmpl),16UL);
    #line 1862 
    port->is_enabled = (_Bool)1;
    #line 1864 
    port->sm_vars = (unsigned short)3U;
    #line 1865 
    port->sm_rx_state = 0;
    #line 1866 
    port->sm_rx_timer_counter = (unsigned short)0U;
    #line 1867 
    port->sm_periodic_state = 0;
    #line 1868 
    port->sm_periodic_timer_counter = (unsigned short)0U;
    #line 1869 
    port->sm_mux_state = 0;
    #line 1870 
    port->sm_mux_timer_counter = (unsigned short)0U;
    #line 1871 
    port->sm_tx_state = 0;
    #line 1872 
    port->aggregator = (struct aggregator *)0;
    #line 1873 
    port->next_port_in_aggregator = (struct port *)0;
    #line 1874 
    port->transaction_id = 0U;
    #line 1876 
    port->sm_churn_actor_timer_counter = (unsigned short)0U;
    #line 1877 
    port->sm_churn_actor_state = 0;
    #line 1878 
    port->churn_actor_count = 0U;
    #line 1879 
    port->sm_churn_partner_timer_counter = (unsigned short)0U;
    #line 1880 
    port->sm_churn_partner_state = 0;
    #line 1881 
    port->churn_partner_count = 0U;
    #line 1883 
    memcpy((void *)(& port->lacpdu),(void *)(& lacpdu),110UL);
  }
  #line 1885 
  return;
}

#line 1894  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_enable_collecting_distributing(struct port *port, bool *update_slave_arr)
{
  #line 1897 
  if ((unsigned int)(port->aggregator)->is_active != 0U) {
    {
      #line 1898 
      bool branch;
      #line 1898 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"bonding", .function = (char *)"ad_enable_collecting_distributing", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1898U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1898 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 1898 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1898 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(int)(port->aggregator)->aggregator_identifier);
    }
    #line 1902 
    __enable_port(port);
    #line 1904 
    *update_slave_arr = (_Bool)1;
  }
  #line 1906 
  return;
}

#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_disable_collecting_distributing(struct port *port, bool *update_slave_arr)
{
  #line 1916 
  if (port->aggregator != (struct aggregator *)0) {
    #line 1917 
    if (! ether_addr_equal_64bits((u8 *)(& (port->aggregator)->partner_system),
                                (u8 *)(& null_mac_addr))) {
      {
        #line 1919 
        bool branch;
        #line 1919 
        struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"bonding", .function = (char *)"ad_disable_collecting_distributing", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1919U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1919 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
        #line 1919 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1919 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number,(int)(port->aggregator)->aggregator_identifier);
      }
      #line 1923 
      __disable_port(port);
      #line 1925 
      *update_slave_arr = (_Bool)1;
    }
  }
  #line 1927 
  return;
}

#line 1934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_marker_info_received(struct bond_marker *marker_info, struct port *port)
{
  #line 1937 
  struct bond_marker marker;
  #line 1939 
  atomic64_inc(& ((port->slave)->ad_info)->stats.marker_rx);
  #line 1940 
  atomic64_inc(& ((port->slave)->bond)->ad_info.stats.marker_rx);
  #line 1943 
  memcpy((void *)(& marker),(void *)marker_info,110UL);
  #line 1945 
  marker.tlv_type = (unsigned char)2U;
  #line 1948 
  if (ad_marker_send(port,& marker) >= 0) {
    #line 1949 
    bool branch;
    #line 1949 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"bonding", .function = (char *)"ad_marker_info_received", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1949U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1949 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 1949 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1949 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number);
  }
  #line 1951 
  return;
}

#line 1963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_marker_response_received(struct bond_marker *marker, struct port *port)
{
  #line 1966 
  atomic64_inc(& ((port->slave)->ad_info)->stats.marker_resp_rx);
  #line 1967 
  atomic64_inc(& ((port->slave)->bond)->ad_info.stats.marker_resp_rx);
  #line 1968 
  return;
}

#line 1985  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_initiate_agg_selection(struct bonding *bond, int timeout)
{
  #line 1987 
  bond->ad_info.agg_select_timer = (unsigned int)timeout;
  #line 1988 
  return;
}

#line 1997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_initialize(struct bonding *bond, u16 tick_resolution)
{
  #line 2000 
  if (! ether_addr_equal_64bits((u8 *)(& bond->ad_info.system.sys_mac_addr),
                                (bond->dev)->dev_addr)) {
    #line 2003 
    bond->ad_info.aggregator_identifier = (unsigned short)0U;
    #line 2005 
    bond->ad_info.system.sys_priority = bond->params.ad_actor_sys_prio;
    #line 2007 
    if ((int)is_zero_ether_addr((u8 *)(& bond->params.ad_actor_system)) != 0) 
      #line 2008 
      bond->ad_info.system.sys_mac_addr = *((struct mac_addr *)(bond->dev)->dev_addr); else 
                                                                    #line 2011 
                                                                    bond->ad_info.system.sys_mac_addr = *((struct mac_addr *)(& bond->params.ad_actor_system));
    #line 2017 
    ad_ticks_per_sec = tick_resolution;
    #line 2019 
    bond_3ad_initiate_agg_selection(bond,(int)ad_ticks_per_sec * 8);
  }
  #line 2022 
  return;
}

#line 2032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_bind_slave(struct slave *slave)
{
  #line 2035 
  struct port *port;
  #line 2036 
  struct aggregator *aggregator;
  #line 2034 
  struct bonding *bond = bond_get_bond_by_slave(slave);
  #line 2039 
  if ((slave->ad_info)->port.slave != slave) {
    #line 2042 
    port = & (slave->ad_info)->port;
    #line 2044 
    ad_initialize_port(port,bond->params.lacp_fast);
    #line 2046 
    port->slave = slave;
    #line 2047 
    port->actor_port_number = (slave->ad_info)->id;
    #line 2051 
    port->actor_admin_port_key = (unsigned short)((int)bond->params.ad_user_port_key << 6U);
    #line 2052 
    ad_update_actor_keys(port,(_Bool)0);
    #line 2054 
    __ad_actor_update_port(port);
    #line 2058 
    port->sm_tx_timer_counter = (unsigned short)((unsigned int)ad_ticks_per_sec / 3U);
    #line 2060 
    __disable_port(port);
    #line 2063 
    aggregator = & (slave->ad_info)->aggregator;
    #line 2065 
    ad_initialize_agg(aggregator);
    #line 2067 
    aggregator->aggregator_mac_address = *((struct mac_addr *)(bond->dev)->dev_addr);
    #line 2068 
    bond->ad_info.aggregator_identifier = (u16)((int)bond->ad_info.aggregator_identifier + 1);
    #line 2068 
    aggregator->aggregator_identifier = bond->ad_info.aggregator_identifier;
    #line 2069 
    aggregator->slave = slave;
    #line 2070 
    aggregator->is_active = (unsigned short)0U;
    #line 2071 
    aggregator->num_of_ports = (unsigned short)0U;
  }
  #line 2073 
  return;
}

#line 2083  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_unbind_slave(struct slave *slave)
{
  #line 2085 
  struct port *port;
  #line 2085 
  struct port *prev_port;
  #line 2085 
  struct port *temp_port;
  #line 2086 
  struct aggregator *aggregator;
  #line 2086 
  struct aggregator *new_aggregator;
  #line 2086 
  struct aggregator *temp_aggregator;
  #line 2089 
  struct slave *slave_iter;
  #line 2090 
  struct list_head *iter;
  #line 2091 
  bool dummy_slave_update;
  #line 2087 
  int select_new_active_agg = 0;
  #line 2088 
  struct bonding *bond = slave->bond;
  #line 2094 
  cif_spin_lock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2095 
  aggregator = & (slave->ad_info)->aggregator;
  #line 2096 
  port = & (slave->ad_info)->port;
  #line 2099 
  if (port->slave == (struct slave *)0) {
    #line 2100 
    netdev_warn(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
    #line 2101 
    goto out;
  }
  {
    #line 2104 
    bool branch;
    #line 2104 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_unbind_slave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2104U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2104 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 2104 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2104 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)aggregator->aggregator_identifier);
  }
  #line 2108 
  port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 247U);
  #line 2109 
  port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 239U);
  #line 2110 
  port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 223U);
  #line 2111 
  port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 251U);
  #line 2112 
  __update_lacpdu_from_port(port);
  #line 2113 
  ad_lacpdu_send(port);
  #line 2116 
  if (aggregator->lag_ports != (struct port *)0) 
    #line 2122 
    if (aggregator->lag_ports != port || (aggregator->lag_ports)->next_port_in_aggregator != (struct port *)0) {
      #line 2125 
      iter = (bond->dev)->adj_list.lower.next;
      #line 2125 
      slave_iter = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
      #line 2125 
      while (slave_iter != (struct slave *)0) {
        #line 2126 
        new_aggregator = & (slave_iter->ad_info)->aggregator;
        #line 2130 
        if (new_aggregator->lag_ports == (struct port *)0 || new_aggregator->lag_ports == port && (new_aggregator->lag_ports)->next_port_in_aggregator == (struct port *)0) 
          #line 2133 
          break;
        #line 2125 
        slave_iter = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
      }
      #line 2135 
      if (slave_iter == (struct slave *)0) 
                                           #line 2136 
                                           new_aggregator = (struct aggregator *)0;
      #line 2142 
      if (new_aggregator != (struct aggregator *)0 && (new_aggregator->lag_ports == (struct port *)0 || new_aggregator->lag_ports == port && (new_aggregator->lag_ports)->next_port_in_aggregator == (struct port *)0)) {
        {
          #line 2143 
          bool branch_0;
          #line 2143 
          struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_unbind_slave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2143U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 2143 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
          #line 2143 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 2143 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)aggregator->aggregator_identifier,(int)new_aggregator->aggregator_identifier);
        }
        #line 2147 
        if (new_aggregator->lag_ports == port && (unsigned int)new_aggregator->is_active != 0U) {
          #line 2149 
          netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
          #line 2150 
          select_new_active_agg = 1;
        }
        #line 2153 
        new_aggregator->is_individual = aggregator->is_individual;
        #line 2154 
        new_aggregator->actor_admin_aggregator_key = aggregator->actor_admin_aggregator_key;
        #line 2155 
        new_aggregator->actor_oper_aggregator_key = aggregator->actor_oper_aggregator_key;
        #line 2156 
        new_aggregator->partner_system = aggregator->partner_system;
        #line 2157 
        new_aggregator->partner_system_priority = aggregator->partner_system_priority;
        #line 2158 
        new_aggregator->partner_oper_aggregator_key = aggregator->partner_oper_aggregator_key;
        #line 2159 
        new_aggregator->receive_state = aggregator->receive_state;
        #line 2160 
        new_aggregator->transmit_state = aggregator->transmit_state;
        #line 2161 
        new_aggregator->lag_ports = aggregator->lag_ports;
        #line 2162 
        new_aggregator->is_active = aggregator->is_active;
        #line 2163 
        new_aggregator->num_of_ports = aggregator->num_of_ports;
        #line 2168 
        temp_port = aggregator->lag_ports;
        #line 2168 
        while (temp_port != (struct port *)0) {
          #line 2170 
          temp_port->aggregator = new_aggregator;
          #line 2171 
          temp_port->actor_port_aggregator_identifier = new_aggregator->aggregator_identifier;
          #line 2168 
          temp_port = temp_port->next_port_in_aggregator;
        }
        #line 2174 
        ad_clear_agg(aggregator);
        #line 2176 
        if (select_new_active_agg != 0) {
          #line 2177 
          ad_agg_selection_logic(__get_first_agg(port),& dummy_slave_update);
        }
      }
      else 
           #line 2180 
           netdev_warn(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
    }
    else {
      #line 2186 
      select_new_active_agg = (int)aggregator->is_active;
      #line 2187 
      ad_clear_agg(aggregator);
      #line 2188 
      if (select_new_active_agg != 0) {
        #line 2189 
        netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
        #line 2191 
        temp_aggregator = __get_first_agg(port);
        #line 2192 
        if (temp_aggregator != (struct aggregator *)0) 
                                                       #line 2193 
                                                       ad_agg_selection_logic(temp_aggregator,& dummy_slave_update);
      }
    }
  {
    #line 2199 
    bool branch_1;
    #line 2199 
    struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_unbind_slave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2199U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2199 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
    #line 2199 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 2199 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
  }
  #line 2202 
  iter = (bond->dev)->adj_list.lower.next;
  #line 2202 
  slave_iter = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 2202 
  while (slave_iter != (struct slave *)0) {
    #line 2203 
    temp_aggregator = & (slave_iter->ad_info)->aggregator;
    #line 2204 
    prev_port = (struct port *)0;
    #line 2206 
    temp_port = temp_aggregator->lag_ports;
    #line 2206 
    while (temp_port != (struct port *)0) {
      #line 2209 
      if (temp_port == port) {
        #line 2213 
        if (prev_port != (struct port *)0) 
                                           #line 2214 
                                           prev_port->next_port_in_aggregator = temp_port->next_port_in_aggregator; else 
                                                                    #line 2216 
                                                                    temp_aggregator->lag_ports = temp_port->next_port_in_aggregator;
        #line 2217 
        temp_aggregator->num_of_ports = (u16)((int)temp_aggregator->num_of_ports - 1);
        #line 2218 
        if (__agg_active_ports(temp_aggregator) == 0) {
          #line 2219 
          select_new_active_agg = (int)temp_aggregator->is_active;
          #line 2220 
          ad_clear_agg(temp_aggregator);
          #line 2221 
          if (select_new_active_agg != 0) {
            #line 2222 
            netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
            #line 2224 
            ad_agg_selection_logic(__get_first_agg(port),& dummy_slave_update);
          }
        }
        #line 2228 
        break;
      }
      #line 2206 
      prev_port = temp_port;
      #line 2207 
      temp_port = temp_port->next_port_in_aggregator;
    }
    #line 2202 
    slave_iter = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 2232 
  port->slave = (struct slave *)0;
  #line 2234 
  out: 
       #line 2234 
  ;
  #line 2235 
  cif_spin_unlock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2236 
  return;
}

#line 2245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_update_ad_actor_settings(struct bonding *bond)
{
  #line 2247 
  struct list_head *iter;
  #line 2248 
  struct slave *slave;
  {
    #line 2250 
    bool __warned;
    #line 2250 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 2250 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 2250 
      __warned = (_Bool)1;
      {
        #line 2250 
        int __ret_warn_on = 1;
        #line 2250 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 2250 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c",2250);
          #line 2251 
          ldv_inline_asm();
          #line 2252 
          ldv_inline_asm();
        }
        #line 2250 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 2250 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 2252 
  bond->ad_info.system.sys_priority = bond->params.ad_actor_sys_prio;
  #line 2253 
  if ((int)is_zero_ether_addr((u8 *)(& bond->params.ad_actor_system)) != 0) 
    #line 2254 
    bond->ad_info.system.sys_mac_addr = *((struct mac_addr *)(bond->dev)->dev_addr); else 
                                                                    #line 2257 
                                                                    bond->ad_info.system.sys_mac_addr = *((struct mac_addr *)(& bond->params.ad_actor_system));
  #line 2260 
  cif_spin_lock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2261 
  iter = (bond->dev)->adj_list.lower.next;
  #line 2261 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 2261 
  while (slave != (struct slave *)0) {
    {
      #line 2262 
      struct port *port = & (slave->ad_info)->port;
      #line 2264 
      __ad_actor_update_port(port);
      #line 2265 
      port->ntt = (_Bool)1;
    }
    #line 2261 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 2267 
  cif_spin_unlock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2268 
  return;
}

#line 2283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_state_machine_handler(struct work_struct *work)
{
  #line 2285 
  void *__mptr;
  #line 2287 
  struct aggregator *aggregator;
  #line 2288 
  struct list_head *iter;
  #line 2289 
  struct slave *slave;
  #line 2290 
  struct port *port;
  #line 2285 
  __mptr = (void *)work;
  #line 2285 
  struct bonding *bond = ((struct bonding *)(__mptr + 18446744073709550448U));
  #line 2291 
  bool should_notify_rtnl = (_Bool)0;
  #line 2292 
  bool update_slave_arr = (_Bool)0;
  #line 2298 
  cif_spin_lock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2299 
  rcu_read_lock();
  #line 2302 
  if (list_empty(& (bond->dev)->adj_list.lower) != 0) 
                                                      #line 2303 
                                                      goto re_arm;
  #line 2306 
  if (bond->ad_info.agg_select_timer != 0U) {
    #line 2307 
    (bond->ad_info.agg_select_timer) --;
    #line 2307 
    if (bond->ad_info.agg_select_timer == 0U) {
      #line 2308 
      slave = (struct slave *)netdev_lower_get_first_private_rcu(bond->dev);
      #line 2309 
      if (slave != (struct slave *)0) 
                                      #line 2309 
                                      port = & (slave->ad_info)->port; else 
                                                                    #line 2309 
                                                                    port = (struct port *)0;
      #line 2312 
      if (port != (struct port *)0) {
        #line 2313 
        if (port->slave == (struct slave *)0) {
          #line 2314 
          if (net_ratelimit() != 0) 
                                    #line 2314 
                                    printk((char *)"\001",(char *)(& (bond->dev)->name));
          #line 2316 
          goto re_arm;
        }
        #line 2319 
        aggregator = __get_first_agg(port);
        #line 2320 
        ad_agg_selection_logic(aggregator,& update_slave_arr);
      }
      #line 2322 
      bond_3ad_set_carrier(bond);
    }
  }
  #line 2326 
  iter = & (bond->dev)->adj_list.lower;
  #line 2326 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2326 
  while (slave != (struct slave *)0) {
    #line 2327 
    port = & (slave->ad_info)->port;
    #line 2328 
    if (port->slave == (struct slave *)0) {
      #line 2329 
      if (net_ratelimit() != 0) 
                                #line 2329 
                                printk((char *)"\001",(char *)(& (bond->dev)->name));
      #line 2331 
      goto re_arm;
    }
    #line 2334 
    ad_rx_machine((struct lacpdu *)0,port);
    #line 2335 
    ad_periodic_machine(port);
    #line 2336 
    ad_port_selection_logic(port,& update_slave_arr);
    #line 2337 
    ad_mux_machine(port,& update_slave_arr);
    #line 2338 
    ad_tx_machine(port);
    #line 2339 
    ad_churn_machine(port);
    #line 2342 
    if (((int)port->sm_vars & 1) != 0) 
                                       #line 2343 
                                       port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65534U);
    #line 2326 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 2346 
  re_arm: 
          #line 2346 
  ;
  #line 2347 
  iter = & (bond->dev)->adj_list.lower;
  #line 2347 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2347 
  while (slave != (struct slave *)0) {
    #line 2348 
    if ((unsigned int)slave->should_notify != 0U) {
      #line 2349 
      should_notify_rtnl = (_Bool)1;
      #line 2350 
      break;
    }
    #line 2347 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 2353 
  rcu_read_unlock();
  #line 2354 
  cif_spin_unlock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2356 
  if ((int)update_slave_arr != 0) 
                                  #line 2357 
                                  bond_slave_arr_work_rearm(bond,0UL);
  #line 2359 
  if ((int)should_notify_rtnl != 0) {
    #line 2359 
    if (rtnl_trylock() != 0) {
      #line 2360 
      bond_slave_state_notify(bond);
      #line 2361 
      rtnl_unlock();
    }
  }
  #line 2363 
  cif_queue_delayed_work(bond->wq,& bond->ad_work,25UL);
  #line 2364 
  return;
}

#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static int bond_3ad_rx_indication(struct lacpdu *lacpdu, struct slave *slave)
{
  #line 2379 
  struct bond_marker *marker;
  #line 2380 
  struct port *port;
  #line 2381 
  atomic64_t *stat;
  #line 2377 
  struct bonding *bond = slave->bond;
  #line 2378 
  int ret = 1;
  #line 2383 
  port = & (slave->ad_info)->port;
  #line 2384 
  if (port->slave == (struct slave *)0) {
    #line 2385 
    if (net_ratelimit() != 0) 
                              #line 2385 
                              printk((char *)"\001",(char *)(& (slave->dev)->name),(char *)(& ((slave->bond)->dev)->name));
    #line 2387 
    return ret;
  }
  #line 2390 
  switch ((int)lacpdu->subtype) {
    #line 2391 
    case 1: 
            #line 2391 
    ;
    #line 2392 
    ret = 0;
    {
      #line 2393 
      bool branch;
      #line 2393 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_rx_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2393U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2393 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 2393 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2393 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
    }
    #line 2397 
    cif_spin_lock_mode_lock_of_bonding(& (slave->bond)->mode_lock);
    #line 2398 
    ad_rx_machine(lacpdu,port);
    #line 2399 
    cif_spin_unlock_mode_lock_of_bonding(& (slave->bond)->mode_lock);
    #line 2400 
    break;
    #line 2401 
    case 2: 
            #line 2401 
    ;
    #line 2402 
    ret = 0;
    #line 2406 
    marker = (struct bond_marker *)lacpdu;
    #line 2407 
    switch ((int)marker->tlv_type) {
      #line 2408 
      case 1: 
              #line 2408 
      ;
      {
        #line 2409 
        bool branch_0;
        #line 2409 
        struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_rx_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2409U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2409 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
        #line 2409 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2409 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
      }
      #line 2411 
      ad_marker_info_received(marker,port);
      #line 2412 
      break;
      #line 2413 
      case 2: 
              #line 2413 
      ;
      {
        #line 2414 
        bool branch_1;
        #line 2414 
        struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_rx_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2414U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2414 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
        #line 2414 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 2414 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
      }
      #line 2416 
      ad_marker_response_received(marker,port);
      #line 2417 
      break;
      #line 2418 
      default: 
               #line 2418 
      ;
      {
        #line 2419 
        bool branch_2;
        #line 2419 
        struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_rx_indication", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2419U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2419 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
        #line 2419 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 2419 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
      }
      #line 2421 
      stat = & (slave->ad_info)->stats.marker_unknown_rx;
      #line 2422 
      atomic64_inc(stat);
      #line 2423 
      stat = & bond->ad_info.stats.marker_unknown_rx;
      #line 2424 
      atomic64_inc(stat);
    }
    #line 2426 
    break;
    #line 2427 
    default: 
             #line 2427 
    ;
    #line 2428 
    atomic64_inc(& (slave->ad_info)->stats.lacpdu_unknown_rx);
    #line 2429 
    atomic64_inc(& bond->ad_info.stats.lacpdu_unknown_rx);
  }
  #line 2432 
  return ret;
}

#line 2446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
static void ad_update_actor_keys(struct port *port, bool reset)
{
  #line 2448 
  u8 duplex = (unsigned char)0U;
  #line 2449 
  u16 ospeed = (unsigned short)0U;
  #line 2449 
  u16 speed = (unsigned short)0U;
  #line 2450 
  u16 old_oper_key = port->actor_oper_port_key;
  #line 2452 
  port->actor_admin_port_key = (unsigned short)((unsigned int)port->actor_admin_port_key & 65472U);
  #line 2453 
  if (! reset) {
    #line 2454 
    speed = __get_link_speed(port);
    #line 2455 
    ospeed = (unsigned short)((unsigned int)((unsigned short)((int)old_oper_key >> 1)) & 31U);
    #line 2456 
    duplex = __get_duplex(port);
    #line 2457 
    port->actor_admin_port_key = (unsigned short)((int)port->actor_admin_port_key | (((int)speed << 1) | (int)duplex));
  }
  #line 2459 
  port->actor_oper_port_key = port->actor_admin_port_key;
  #line 2461 
  if ((int)port->actor_oper_port_key != (int)old_oper_key) {
    #line 2463 
    if ((unsigned int)duplex != 0U) 
                                    #line 2464 
                                    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 2U); else 
                                                                    #line 2466 
                                                                    port->sm_vars = (unsigned short)((unsigned int)port->sm_vars & 65533U);
    #line 2468 
    if (! reset) 
      #line 2469 
      if ((unsigned int)speed == 0U) 
                                     #line 2470 
                                     netdev_err(((port->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((port->slave)->dev)->name),(int)port->actor_port_number);
      else 
        #line 2474 
        if ((unsigned int)duplex != 0U && (int)ospeed != (int)speed) 
          #line 2476 
          port->sm_vars = (unsigned short)((unsigned int)port->sm_vars | 1U);
  }
  #line 2478 
  return;
}

#line 2490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_adapter_speed_duplex_changed(struct slave *slave)
{
  #line 2492 
  struct port *port;
  #line 2494 
  port = & (slave->ad_info)->port;
  #line 2497 
  if (port->slave == (struct slave *)0) {
    #line 2498 
    netdev_warn((slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
    #line 2500 
    return;
  }
  #line 2503 
  cif_spin_lock_bh_mode_lock_of_bonding(& (slave->bond)->mode_lock);
  #line 2504 
  ad_update_actor_keys(port,(_Bool)0);
  #line 2505 
  cif_spin_unlock_bh_mode_lock_of_bonding(& (slave->bond)->mode_lock);
  {
    #line 2506 
    bool branch;
    #line 2506 
    struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_adapter_speed_duplex_changed", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2506U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2506 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
    #line 2506 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2506 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number);
  }
  #line 2508 
  return;
}

#line 2517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_handle_link_change(struct slave *slave, char link)
{
  #line 2519 
  struct aggregator *agg;
  #line 2520 
  struct port *port;
  #line 2521 
  bool dummy;
  #line 2523 
  port = & (slave->ad_info)->port;
  #line 2526 
  if (port->slave == (struct slave *)0) {
    #line 2527 
    netdev_warn((slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
    #line 2528 
    return;
  }
  #line 2531 
  cif_spin_lock_bh_mode_lock_of_bonding(& (slave->bond)->mode_lock);
  #line 2539 
  if ((int)link == 0) {
    #line 2540 
    port->is_enabled = (_Bool)1;
    #line 2541 
    ad_update_actor_keys(port,(_Bool)0);
  }
  else {
    #line 2544 
    port->is_enabled = (_Bool)0;
    #line 2545 
    ad_update_actor_keys(port,(_Bool)1);
  }
  #line 2547 
  agg = __get_first_agg(port);
  #line 2548 
  ad_agg_selection_logic(agg,& dummy);
  #line 2550 
  cif_spin_unlock_bh_mode_lock_of_bonding(& (slave->bond)->mode_lock);
  {
    #line 2552 
    bool branch;
    #line 2552 
    struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"bonding", .function = (char *)"bond_3ad_handle_link_change", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2552U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2552 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
    #line 2552 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2552 
      char *tmp;
      #line 2552 
      if ((int)link == 0) 
                          #line 2552 
                          tmp = (char *)"UP"; else 
                                                   #line 2552 
                                                   tmp = (char *)"DOWN";
      #line 2552 
      ;
      #line 2552 
      ;
      #line 2552 
      ;
      #line 2552 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)port->actor_port_number,tmp);
    }
  }
  #line 2559 
  bond_update_slave_arr(slave->bond,(struct slave *)0);
  #line 2560 
  return;
}

#line 2575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_set_carrier(struct bonding *bond)
{
  #line 2577 
  struct aggregator *active;
  #line 2578 
  struct slave *first_slave;
  #line 2579 
  int ret = 1;
  #line 2581 
  rcu_read_lock();
  #line 2582 
  first_slave = (struct slave *)netdev_lower_get_first_private_rcu(bond->dev);
  #line 2583 
  if (first_slave == (struct slave *)0) {
    #line 2584 
    ret = 0;
    #line 2585 
    goto out;
  }
  #line 2587 
  active = __get_active_agg(& (first_slave->ad_info)->aggregator);
  #line 2588 
  if (active != (struct aggregator *)0) {
    #line 2590 
    ;
    #line 2590 
    if ((unsigned int)__agg_active_ports(active) < bond->params.min_links) {
      #line 2591 
      if ((int)netif_carrier_ok(bond->dev) != 0) {
        #line 2592 
        netif_carrier_off(bond->dev);
        #line 2593 
        goto out;
      }
    }
    else {
      #line 2595 
      if (! netif_carrier_ok(bond->dev)) {
        #line 2596 
        netif_carrier_on(bond->dev);
        #line 2597 
        goto out;
      }
    }
  }
  else {
    #line 2599 
    if ((int)netif_carrier_ok(bond->dev) != 0) 
                                               #line 2600 
                                               netif_carrier_off(bond->dev);
  }
  #line 2602 
  out: 
       #line 2602 
  ;
  #line 2603 
  rcu_read_unlock();
  #line 2604 
  return ret;
}

#line 2615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int __bond_3ad_get_active_agg_info(struct bonding *bond, struct ad_info *ad_info)
{
  #line 2619 
  struct list_head *iter;
  #line 2620 
  struct slave *slave;
  #line 2621 
  struct port *port;
  #line 2618 
  struct aggregator *aggregator = (struct aggregator *)0;
  #line 2623 
  iter = & (bond->dev)->adj_list.lower;
  #line 2623 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2623 
  while (slave != (struct slave *)0) {
    #line 2624 
    port = & (slave->ad_info)->port;
    #line 2625 
    if (port->aggregator != (struct aggregator *)0 && (unsigned int)(port->aggregator)->is_active != 0U) {
      #line 2626 
      aggregator = port->aggregator;
      #line 2627 
      break;
    }
    #line 2623 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 2631 
  if (aggregator == (struct aggregator *)0) 
                                            #line 2632 
                                            return -1;
  #line 2634 
  ad_info->aggregator_id = aggregator->aggregator_identifier;
  #line 2635 
  ad_info->ports = (unsigned short)__agg_active_ports(aggregator);
  #line 2636 
  ad_info->actor_key = aggregator->actor_oper_aggregator_key;
  #line 2637 
  ad_info->partner_key = aggregator->partner_oper_aggregator_key;
  #line 2638 
  ether_addr_copy((u8 *)(& ad_info->partner_system),(u8 *)(& aggregator->partner_system.mac_addr_value));
  #line 2640 
  return 0;
}

#line 2643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_get_active_agg_info(struct bonding *bond, struct ad_info *ad_info)
{
  #line 2645 
  int ret;
  #line 2647 
  rcu_read_lock();
  #line 2648 
  ret = __bond_3ad_get_active_agg_info(bond,ad_info);
  #line 2649 
  rcu_read_unlock();
  #line 2651 
  return ret;
}

#line 2654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_lacpdu_recv(struct sk_buff *skb, struct bonding *bond, struct slave *slave)
{
  #line 2657 
  struct lacpdu *lacpdu;
  #line 2657 
  struct lacpdu _lacpdu;
  #line 2659 
  if ((unsigned int)skb->protocol != 2440U) 
                                            #line 2660 
                                            return 1;
  #line 2662 
  if (! ether_addr_equal_64bits((u8 *)(& eth_hdr(skb)->h_dest),
                                (u8 *)(& lacpdu_mcast_addr))) 
    #line 2663 
    return 1;
  #line 2665 
  lacpdu = (struct lacpdu *)skb_header_pointer(skb,0,110,(void *)(& _lacpdu));
  #line 2666 
  if (lacpdu == (struct lacpdu *)0) {
    #line 2667 
    atomic64_inc(& (slave->ad_info)->stats.lacpdu_illegal_rx);
    #line 2668 
    atomic64_inc(& bond->ad_info.stats.lacpdu_illegal_rx);
    #line 2669 
    return 1;
  }
  #line 2672 
  return bond_3ad_rx_indication(lacpdu,slave);
}

#line 2686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
void bond_3ad_update_lacp_rate(struct bonding *bond)
{
  #line 2689 
  struct list_head *iter;
  #line 2690 
  struct slave *slave;
  #line 2691 
  int lacp_fast;
  #line 2688 
  struct port *port = (struct port *)0;
  #line 2693 
  lacp_fast = bond->params.lacp_fast;
  #line 2694 
  cif_spin_lock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2695 
  iter = (bond->dev)->adj_list.lower.next;
  #line 2695 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 2695 
  while (slave != (struct slave *)0) {
    #line 2696 
    port = & (slave->ad_info)->port;
    #line 2697 
    if (lacp_fast != 0) 
                        #line 2698 
                        port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state | 2U); else 
                                                                    #line 2700 
                                                                    port->actor_oper_port_state = (unsigned char)((unsigned int)port->actor_oper_port_state & 253U);
    #line 2695 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 2702 
  cif_spin_unlock_bh_mode_lock_of_bonding(& bond->mode_lock);
  #line 2703 
  return;
}

#line 2705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
size_t bond_3ad_stats_size(void)
{
  #line 2714 
  return (unsigned long)((((((((nla_total_size_64bit(8) + nla_total_size_64bit(8)) + nla_total_size_64bit(8)) + nla_total_size_64bit(8)) + nla_total_size_64bit(8)) + nla_total_size_64bit(8)) + nla_total_size_64bit(8)) + nla_total_size_64bit(8)) + nla_total_size_64bit(8));
}

#line 2718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_3ad.c"
int bond_3ad_stats_fill(struct sk_buff *skb, struct bond_3ad_stats *stats)
{
  #line 2720 
  u64 val;
  #line 2722 
  val = (unsigned long long)atomic64_read(& stats->lacpdu_rx);
  #line 2723 
  if (nla_put_u64_64bit(skb,0,val,9) != 0) 
                                           #line 2725 
                                           return -90;
  #line 2726 
  val = (unsigned long long)atomic64_read(& stats->lacpdu_tx);
  #line 2727 
  if (nla_put_u64_64bit(skb,1,val,9) != 0) 
                                           #line 2729 
                                           return -90;
  #line 2730 
  val = (unsigned long long)atomic64_read(& stats->lacpdu_unknown_rx);
  #line 2731 
  if (nla_put_u64_64bit(skb,2,val,9) != 0) 
                                           #line 2733 
                                           return -90;
  #line 2734 
  val = (unsigned long long)atomic64_read(& stats->lacpdu_illegal_rx);
  #line 2735 
  if (nla_put_u64_64bit(skb,3,val,9) != 0) 
                                           #line 2737 
                                           return -90;
  #line 2739 
  val = (unsigned long long)atomic64_read(& stats->marker_rx);
  #line 2740 
  if (nla_put_u64_64bit(skb,4,val,9) != 0) 
                                           #line 2742 
                                           return -90;
  #line 2743 
  val = (unsigned long long)atomic64_read(& stats->marker_tx);
  #line 2744 
  if (nla_put_u64_64bit(skb,5,val,9) != 0) 
                                           #line 2746 
                                           return -90;
  #line 2747 
  val = (unsigned long long)atomic64_read(& stats->marker_resp_rx);
  #line 2748 
  if (nla_put_u64_64bit(skb,6,val,9) != 0) 
                                           #line 2750 
                                           return -90;
  #line 2751 
  val = (unsigned long long)atomic64_read(& stats->marker_resp_tx);
  #line 2752 
  if (nla_put_u64_64bit(skb,7,val,9) != 0) 
                                           #line 2754 
                                           return -90;
  #line 2755 
  val = (unsigned long long)atomic64_read(& stats->marker_unknown_rx);
  #line 2756 
  if (nla_put_u64_64bit(skb,8,val,9) != 0) 
                                           #line 2758 
                                           return -90;
  #line 2760 
  return 0;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
#line 95 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 300 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 657  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_lock_bh_mode_lock_of_bonding(spinlock_t *lock)
{
  #line 660 
  ldv_spin_model_lock((char *)"mode_lock_of_bonding");
  #line 662 
  spin_lock_bh(lock);
  #line 663 
  return;
}

#line 666  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_unlock_bh_mode_lock_of_bonding(spinlock_t *lock)
{
  #line 669 
  ldv_spin_model_unlock((char *)"mode_lock_of_bonding");
  #line 671 
  spin_unlock_bh(lock);
  #line 672 
  return;
}

#line 675  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_lock_mode_lock_of_bonding(spinlock_t *lock)
{
  #line 678 
  ldv_spin_model_lock((char *)"mode_lock_of_bonding");
  #line 680 
  spin_lock(lock);
  #line 681 
  return;
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_3ad.i.aux"
static void cif_spin_unlock_mode_lock_of_bonding(spinlock_t *lock)
{
  #line 687 
  ldv_spin_model_unlock((char *)"mode_lock_of_bonding");
  #line 689 
  spin_unlock(lock);
  #line 690 
  return;
}

/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_721 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_723 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_725 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
#line 334 
extern struct paravirt_patch_template pv_ops;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 59 
void *__memmove(void *, void *, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 49 
#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_775 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void atomic_dec(atomic_t *v);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-long.h"
__inline static void atomic_long_inc(atomic_long_t *v)
{
  #line 160 
  atomic64_inc(v);
  #line 161 
  return;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void)
{
  #line 747 
  unsigned long __ret;
  {
    #line 747 
    unsigned long __edi = __edi;
    #line 747 
    unsigned long __esi = __esi;
    #line 747 
    unsigned long __edx = __edx;
    #line 747 
    unsigned long __ecx = __ecx;
    #line 747 
    unsigned long __eax = __eax;
    #line 747 
    if ((long)(pv_ops.irq.save_fl.func == (void *)0) != 0L) {
      #line 748 
      ldv_inline_asm();
      #line 749 
      ldv_inline_asm();
      #line 750 
      ldv_inline_asm();
      #line 747 
      ;
    }
    {
      #line 747 
      unsigned long __mask;
      #line 751 
      ldv_inline_asm();
      #line 747 
      __mask = 18446744073709551615UL;
      #line 747 
      switch (8UL) {
        #line 747 
        case (unsigned long)1: 
                               #line 747 
        ;
        #line 747 
        __mask = 255UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)2: 
                               #line 747 
        ;
        #line 747 
        __mask = 65535UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)4: 
                               #line 747 
        ;
        #line 747 
        __mask = 4294967295UL;
        #line 747 
        break;
        #line 747 
        default: 
                 #line 747 
        ;
        #line 747 
        break;
      }
      #line 747 
      __ret = __mask & __eax;
    }
    }
  #line 747 
  return __ret;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_restore(unsigned long f)
{
  #line 752 
  unsigned long __edi = __edi;
  #line 752 
  unsigned long __esi = __esi;
  #line 752 
  unsigned long __edx = __edx;
  #line 752 
  unsigned long __ecx = __ecx;
  #line 752 
  unsigned long __eax = __eax;
  #line 752 
  if ((long)(pv_ops.irq.restore_fl.func == (void *)0) != 0L) {
    #line 753 
    ldv_inline_asm();
    #line 754 
    ldv_inline_asm();
    #line 755 
    ldv_inline_asm();
    #line 752 
    ;
  }
  #line 756 
  ldv_inline_asm();
  #line 758 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void)
{
  #line 757 
  unsigned long __edi = __edi;
  #line 757 
  unsigned long __esi = __esi;
  #line 757 
  unsigned long __edx = __edx;
  #line 757 
  unsigned long __ecx = __ecx;
  #line 757 
  unsigned long __eax = __eax;
  #line 757 
  if ((long)(pv_ops.irq.irq_disable.func == (void *)0) != 0L) {
    #line 758 
    ldv_inline_asm();
    #line 759 
    ldv_inline_asm();
    #line 760 
    ldv_inline_asm();
    #line 757 
    ;
  }
  #line 761 
  ldv_inline_asm();
  #line 763 
  return;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_irq_save(void)
{
  #line 767 
  unsigned long f;
  #line 769 
  f = arch_local_save_flags();
  #line 770 
  arch_local_irq_disable();
  #line 771 
  return f;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *ERR_PTR(long error);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static bool IS_ERR(void *ptr);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags)
{
  #line 164 
  return (flags & 512UL) == 0UL;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqflags.h"
#line 32 
void trace_hardirqs_on(void);
#line 33 
#line 33 
void trace_hardirqs_off(void);
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 293 
void lockdep_register_key(struct lock_class_key *);
#line 294 
#line 294 
void lockdep_unregister_key(struct lock_class_key *);
#line 302 
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 357 
#line 357 
int lock_is_held_type(struct lockdep_map *, int);
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
__inline static int lock_is_held(struct lockdep_map *lock)
{
  #line 361 
  return lock_is_held_type(lock,-1);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_lock_stats_lock_of_bonding(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 638  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_unlock_stats_lock_of_bonding(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 24 
#line 24 
bool ldv_is_err_or_null(void *ptr);
#line 25 
#line 25 
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 40 
void synchronize_rcu(void);
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcutree.h"
#line 36 
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcupdate.h"
#line 221 
int rcu_read_lock_held(void);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 511 
#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
__inline static int notifier_to_errno(int ret)
{
  #line 202 
  int tmp;
  #line 201 
  ret &= -32769;
  #line 202 
  if (ret > 1) 
               #line 202 
               tmp = 1 - ret; else 
                                   #line 202 
                                   tmp = 0;
  #line 202 
  return tmp;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static bool gfpflags_allow_blocking(gfp_t gfp_flags)
{
  #line 325 
  return (_Bool)((gfp_flags & 1024U) != 0U);
}

#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static unsigned int refcount_read(refcount_t *r)
{
  #line 134 
  return (unsigned int)atomic_read(& r->refs);
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
#line 211 
bool ns_capable(struct user_namespace *, int);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
#line 76 
int ___ratelimit(struct ratelimit_state *, char *);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 445  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 459  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in.h"
__inline static bool ipv4_is_lbcast(__be32 addr)
{
  #line 56 
  return (_Bool)(addr == 4294967295U);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in.h"
__inline static bool ipv4_is_zeronet(__be32 addr)
{
  #line 66 
  return (_Bool)(addr == 0U);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 111 
#line 111 
u32 prandom_u32(void);
#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
#line 301 
__be32 flow_get_u32_src(struct flow_keys *);
#line 302 
#line 302 
__be32 flow_get_u32_dst(struct flow_keys *);
#line 328 
#line 328 
void skb_flow_get_icmp_tci(struct sk_buff *, struct flow_dissector_key_icmp *, void *, int, int);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1105 
#line 1105 
struct sk_buff *skb_clone(struct sk_buff *, gfp_t);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1239 
#line 1239 
__be32 __skb_flow_get_ports(struct sk_buff *, int, u8, void *, int);
#line 1242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static __be32 skb_flow_get_ports(struct sk_buff *skb, int thoff, u8 ip_proto)
{
  #line 1245 
  return __skb_flow_get_ports(skb,thoff,(unsigned char)((int)ip_proto),
                           (void *)0,0);
}

#line 1248 
#line 1248 
void skb_flow_dissector_init(struct flow_dissector *, struct flow_dissector_key *, unsigned int);
#line 1282 
#line 1282 
bool __skb_flow_dissect(struct net *, struct sk_buff *, struct flow_dissector *, void *, void *, __be16, int, int, unsigned int);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff *skb)
{
  #line 1623 
  int dataref;
  #line 1625 
  if ((unsigned int)skb->cloned == 0U) 
                                       #line 1626 
                                       return 0;
  #line 1628 
  dataref = atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref);
  #line 1629 
  dataref = (dataref & 65535) - (dataref >> 16);
  #line 1630 
  return dataref != 1;
}

#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff *skb)
{
  #line 1663 
  return refcount_read(& skb->users) != 1U;
}

#line 1679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
  #line 1681 
  if ((int)gfpflags_allow_blocking(pri) != 0) 
                                              #line 1681 
                                              __might_sleep((char *)"./include/linux/skbuff.h",1681,0);
  #line 1682 
  if (skb_shared(skb) != 0) {
    #line 1683 
    struct sk_buff *nskb = skb_clone(skb,pri);
    #line 1685 
    if ((long)(nskb != (struct sk_buff *)0) != 0L) 
                                                   #line 1686 
                                                   consume_skb(skb); else 
                                                                    #line 1688 
                                                                    kfree_skb(skb);
    #line 1689 
    skb = nskb;
  }
  #line 1691 
  return skb;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 3111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  #line 3114 
  int delta = 0;
  #line 3116 
  ;
  #line 3116 
  if (skb_headroom(skb) < headroom) {
    #line 3117 
    delta = (int)(headroom - skb_headroom(skb));
  }
  #line 3119 
  if (delta != 0 || cloned != 0) {
    #line 3120 
    return pskb_expand_head(skb,(delta + 63) & -64,0,2592U);
  }
  #line 3122 
  return 0;
}

#line 3152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  #line 3154 
  ;
  #line 3154 
  ;
  #line 3154 
  return __skb_cow(skb,headroom,skb_header_cloned(skb));
}

#line 4272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
  #line 4274 
  skb->queue_mapping = queue_mapping;
  #line 4275 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_rx_queue(struct sk_buff *skb)
{
  #line 4294 
  return (unsigned short)((unsigned int)skb->queue_mapping + 65535U);
}

#line 4297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_rx_queue_recorded(struct sk_buff *skb)
{
  #line 4299 
  return (_Bool)((unsigned int)skb->queue_mapping != 0U);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 160 
#line 160 
int __ethtool_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file_net.h"
#line 8 
extern struct net init_net;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
__inline static void write_pnet(possible_net_t *pnet, struct net *net)
{
  #line 316 
  pnet->net = net;
  #line 317 
  return;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
__inline static struct net *read_pnet(possible_net_t *pnet)
{
  #line 323 
  return pnet->net;
}

#line 405 
#line 405 
int register_pernet_subsys(struct pernet_operations *);
#line 406 
#line 406 
void unregister_pernet_subsys(struct pernet_operations *);
#line 2186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net *dev_net(struct net_device *dev)
{
  #line 2188 
  return read_pnet(& dev->nd_net);
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_net_set(struct net_device *dev, struct net *net)
{
  #line 2194 
  write_pnet(& dev->nd_net,net);
  #line 2195 
  return;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2517 
#line 2517 
char *netdev_cmd_to_name(enum netdev_cmd);
#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2579 
#line 2579 
int call_netdevice_notifiers(unsigned long, struct net_device *);
#line 2655 
#line 2655 
struct net_device *__dev_get_by_name(struct net *, char *);
#line 2657 
#line 2657 
int dev_open(struct net_device *, struct netlink_ext_ack *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 2660 
#line 2660 
void dev_disable_lro(struct net_device *);
#line 2669 
#line 2669 
int register_netdevice(struct net_device *);
#line 2670 
#line 2670 
void unregister_netdevice_queue(struct net_device *, struct list_head *);
#line 2671 
#line 2671 
void unregister_netdevice_many(struct list_head *);
#line 2672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void unregister_netdevice(struct net_device *dev)
{
  #line 2674 
  unregister_netdevice_queue(dev,(struct list_head *)0);
  #line 2675 
  return;
}

#line 2679 
#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3678 
#line 3678 
bool netdev_is_rx_handler_busy(struct net_device *);
#line 3679 
#line 3679 
int netdev_rx_handler_register(struct net_device *, rx_handler_func_t *, void *);
#line 3682 
#line 3682 
void netdev_rx_handler_unregister(struct net_device *);
#line 3700 
#line 3700 
int __dev_set_mtu(struct net_device *, int);
#line 3705 
#line 3705 
int dev_set_mtu(struct net_device *, int);
#line 3708 
#line 3708 
int dev_pre_changeaddr_notify(struct net_device *, char *, struct netlink_ext_ack *);
#line 3710 
#line 3710 
int dev_set_mac_address(struct net_device *, struct sockaddr *, struct netlink_ext_ack *);
#line 3808 
#line 3808 
unsigned long dev_trans_start(struct net_device *);
#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4116 
#line 4116 
void ether_setup(struct net_device *);
#line 4123 
#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static struct net_device *cif_alloc_netdev_mqs(int sizeof_priv, char *name, unsigned char name_assign_type, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs);
#line 4170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4170 
int dev_uc_sync(struct net_device *, struct net_device *);
#line 4171 
#line 4171 
int dev_uc_sync_multiple(struct net_device *, struct net_device *);
#line 4172 
#line 4172 
void dev_uc_unsync(struct net_device *, struct net_device *);
#line 4173 
#line 4173 
void dev_uc_flush(struct net_device *);
#line 4210 
#line 4210 
int dev_mc_add(struct net_device *, unsigned char *);
#line 4213 
#line 4213 
int dev_mc_del(struct net_device *, unsigned char *);
#line 4215 
#line 4215 
int dev_mc_sync(struct net_device *, struct net_device *);
#line 4216 
#line 4216 
int dev_mc_sync_multiple(struct net_device *, struct net_device *);
#line 4217 
#line 4217 
void dev_mc_unsync(struct net_device *, struct net_device *);
#line 4218 
#line 4218 
void dev_mc_flush(struct net_device *);
#line 4256 
#line 4256 
int dev_set_promiscuity(struct net_device *, int);
#line 4257 
#line 4257 
int dev_set_allmulti(struct net_device *, int);
#line 4263 
#line 4263 
struct rtnl_link_stats64 *dev_get_stats(struct net_device *, struct rtnl_link_stats64 *);
#line 4277 
#line 4277 
bool netdev_has_upper_dev(struct net_device *, struct net_device *);
#line 4278 
#line 4278 
struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *, struct list_head **);
#line 4290 
#line 4290 
int netdev_walk_all_upper_dev_rcu(struct net_device *, int (*)(struct net_device *, void *), void *);
#line 4340 
#line 4340 
void *netdev_adjacent_get_private(struct list_head *);
#line 4346 
#line 4346 
int netdev_master_upper_dev_link(struct net_device *, struct net_device *, void *, void *, struct netlink_ext_ack *);
#line 4350 
#line 4350 
void netdev_upper_dev_unlink(struct net_device *, struct net_device *);
#line 4363 
#line 4363 
void *netdev_lower_dev_get_private(struct net_device *, struct net_device *);
#line 4365 
#line 4365 
void netdev_lower_state_changed(struct net_device *, void *);
#line 4393 
#line 4393 
void netdev_bonding_info_change(struct net_device *, struct netdev_bonding_info *);
#line 4509 
#line 4509 
netdev_features_t netdev_increment_features(netdev_features_t, netdev_features_t, netdev_features_t);
#line 4516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static netdev_features_t netdev_add_tso_features(netdev_features_t features, netdev_features_t mask)
{
  #line 4519 
  return netdev_increment_features(features,1900544ULL,mask);
}

#line 4524 
#line 4524 
void netdev_change_features(struct net_device *);
#line 4529 
#line 4529 
netdev_features_t passthru_features_check(struct sk_buff *, struct net_device *, netdev_features_t);
#line 4575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_set_gso_max_size(struct net_device *dev, unsigned int size)
{
  #line 4578 
  dev->gso_max_size = size;
  #line 4579 
  return;
}

#line 4609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_bond_master(struct net_device *dev)
{
  #line 4611 
  return (_Bool)(((dev->flags & 1024U) != 0U && (dev->priv_flags & 4U) != 0U) != 0);
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
static u8 eth_reserved_addr_base[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_link_local_ether_addr(u8 *addr)
{
  #line 78 
  __be16 *a = (__be16 *)addr;
  #line 79 
  __be16 *b = (__be16 *)(& eth_reserved_addr_base);
  #line 80 
  __be16 m = (unsigned short)61695U;
  #line 84 
  return (_Bool)(((*((u32 *)addr) ^ *((u32 *)b)) | ((unsigned int)((int)*(a + 2U) ^ (int)*(b + 2U)) & 61695U)) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 45 
#line 45 
bool lockdep_rtnl_is_held(void);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool is_vlan_dev(struct net_device *dev)
{
  #line 72 
  return (_Bool)((dev->priv_flags & 1U) != 0U);
}

#line 135 
#line 135 
u16 vlan_dev_vlan_id(struct net_device *);
#line 136 
#line 136 
__be16 vlan_dev_vlan_proto(struct net_device *);
#line 213 
#line 213 
int vlan_vid_add(struct net_device *, __be16, u16);
#line 214 
#line 214 
void vlan_vid_del(struct net_device *, __be16, u16);
#line 216 
#line 216 
int vlan_vids_add_by_dev(struct net_device *, struct net_device *);
#line 218 
#line 218 
void vlan_vids_del_by_dev(struct net_device *, struct net_device *);
#line 221 
#line 221 
bool vlan_uses_dev(struct net_device *);
#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static int __vlan_insert_inner_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci, unsigned int mac_len)
{
  #line 337 
  struct vlan_ethhdr *veth;
  #line 339 
  if (skb_cow_head(skb,4U) < 0) 
                                #line 340 
                                return -12;
  #line 342 
  skb_push(skb,4U);
  #line 345 
  if ((long)(mac_len > 2U) != 0L) 
                                  #line 346 
                                  __memmove((void *)skb->data,(void *)(skb->data + 4U),(unsigned long)(mac_len + 4294967294U));
  #line 347 
  skb->mac_header = (unsigned short)((unsigned int)skb->mac_header + 65532U);
  #line 349 
  veth = (struct vlan_ethhdr *)(skb->data + ((unsigned long)mac_len + 18446744073709551602U));
  #line 352 
  if ((long)(mac_len > 1U) != 0L) 
                                  #line 356 
                                  veth->h_vlan_proto = vlan_proto; else 
                                                                    #line 361 
                                                                    veth->h_vlan_encapsulated_proto = skb->protocol;
  #line 365 
  veth->h_vlan_TCI = __builtin_bswap16((unsigned short)((int)vlan_tci));
  #line 367 
  return 0;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_inner_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci, unsigned int mac_len)
{
  #line 407 
  int err;
  #line 409 
  err = __vlan_insert_inner_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlan_tci),mac_len);
  #line 410 
  if (err != 0) {
    #line 411 
    dev_kfree_skb_any(skb);
    #line 412 
    return (struct sk_buff *)0;
  }
  #line 414 
  return skb;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 434 
  return vlan_insert_inner_tag(skb,(unsigned short)((int)vlan_proto),
                            (unsigned short)((int)vlan_tci),14U);
}

#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static struct sk_buff *vlan_insert_tag_set_proto(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 453 
  skb = vlan_insert_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vlan_tci));
  #line 454 
  if (skb != (struct sk_buff *)0) 
                                  #line 455 
                                  skb->protocol = vlan_proto;
  #line 456 
  return skb;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
__inline static struct qdisc_skb_cb *qdisc_skb_cb(struct sk_buff *skb)
{
  #line 491 
  return (struct qdisc_skb_cb *)(& skb->cb);
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
#line 252 
void dst_release(struct dst_entry *);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/icmpv6.h"
__inline static bool icmpv6_is_err(int type)
{
  #line 52 
  switch (type) {
    #line 53 
    case 1: 
            #line 53 
    ;
    #line 54 
    case 2: 
            #line 54 
    ;
    #line 55 
    case 3: 
            #line 55 
    ;
    #line 56 
    case 4: 
            #line 56 
    ;
    #line 57 
    return (_Bool)1;
  }
  #line 60 
  return (_Bool)0;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
__inline static unsigned int arp_hdr_len(struct net_device *dev)
{
  #line 32 
  switch ((int)dev->type) {
    #line 34 
    case 24: 
             #line 34 
    ;
    #line 36 
    return (unsigned int)dev->addr_len + 16U;
    #line 38 
    default: 
             #line 38 
    ;
    #line 40 
    return (unsigned int)((unsigned long)dev->addr_len + 8UL) * 2U;
  }
}

#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
__inline static void iph_to_flow_copy_v6addrs(struct flow_keys *flow, struct ipv6hdr *iph)
{
  #line 842 
  memcpy((void *)(& flow->addrs.__anonCompField_flow_dissector_key_addrs_88.v6addrs),(void *)(& iph->saddr),32UL);
  #line 843 
  flow->control.addr_type = (unsigned short)3U;
  #line 844 
  return;
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/arp.h"
#line 75 
struct sk_buff *arp_create(int, int, __be32, struct net_device *, __be32, unsigned char *, unsigned char *, unsigned char *);
#line 80 
#line 80 
void arp_xmit(struct sk_buff *);
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
#line 129 
struct rtable *ip_route_output_flow(struct net *, struct flowi4 *, struct sock *);
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
__inline static struct rtable *ip_route_output_key(struct net *net, struct flowi4 *flp)
{
  #line 136 
  return ip_route_output_flow(net,flp,(struct sock *)0);
}

#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
__inline static struct rtable *ip_route_output(struct net *net, __be32 daddr, __be32 saddr, u8 tos, int oif)
{
  #line 142 
  struct flowi4 fl4 = {.__fl_common = {.flowic_oif = oif, .flowic_iif = 0, .flowic_mark = 0U, .flowic_tos = tos, .flowic_scope = (unsigned char)0, .flowic_proto = (unsigned char)0, .flowic_flags = (unsigned char)0, .flowic_secid = 0U, .flowic_uid = {.val = 0U}, .flowic_tun_key = {.tun_id = 0ULL}, .flowic_multipath_hash = 0U}, .saddr = saddr, .daddr = daddr, .uli = {.ports = {.dport = (unsigned short)0, .sport = (unsigned short)0}}};
  #line 148 
  return ip_route_output_key(net,& fl4);
}

#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/route.h"
__inline static void ip_rt_put(struct rtable *rt)
{
  #line 249 
  dst_release(& rt->dst);
  #line 250 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
__inline static bool ip_is_fragment(struct iphdr *iph)
{
  #line 387 
  return (_Bool)(((int)iph->frag_off & 65343) != 0);
}

#line 535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
__inline static void iph_to_flow_copy_v4addrs(struct flow_keys *flow, struct iphdr *iph)
{
  #line 541 
  memcpy((void *)(& flow->addrs.__anonCompField_flow_dissector_key_addrs_88.v4addrs),(void *)(& iph->saddr),8UL);
  #line 542 
  flow->control.addr_type = (unsigned short)2U;
  #line 543 
  return;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/icmp.h"
__inline static bool icmp_is_err(int type)
{
  #line 26 
  switch (type) {
    #line 27 
    case 3: 
            #line 27 
    ;
    #line 28 
    case 4: 
            #line 28 
    ;
    #line 29 
    case 5: 
            #line 29 
    ;
    #line 30 
    case 11: 
             #line 30 
    ;
    #line 31 
    case 12: 
             #line 31 
    ;
    #line 32 
    return (_Bool)1;
  }
  #line 35 
  return (_Bool)0;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inet.h"
#line 53 
int in4_pton(char *, int, u8 *, int, char **);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
#line 184 
__be32 inet_confirm_addr(struct net *, struct in_device *, __be32, __be32, int);
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
__inline static struct in_device *__in_dev_get_rcu(struct net_device *dev)
{
  #line 219 
  struct in_device *________p1;
  {
    #line 220 
    union __anonunion___u_1711 __u;
    #line 219 
    __read_once_size((void *)(& dev->ip_ptr),(void *)(& __u.__c),8);
    #line 219 
    ________p1 = (__u.__val);
    {
      #line 219 
      bool __warned;
      #line 219 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 219 
        if (! __warned) {
          #line 219 
          if (rcu_read_lock_held() == 0) {
            #line 219 
            __warned = (_Bool)1;
            #line 219 
            lockdep_rcu_suspicious((char *)"./include/linux/inetdevice.h",219,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 219 
  return ________p1;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
__inline static void *net_generic(struct net *net, unsigned int id)
{
  #line 45 
  struct net_generic *________p1;
  #line 41 
  struct net_generic *ng;
  #line 42 
  void *ptr;
  #line 44 
  rcu_read_lock();
  {
    #line 46 
    union __anonunion___u_1718 __u;
    #line 45 
    __read_once_size((void *)(& net->gen),(void *)(& __u.__c),8);
    #line 45 
    ________p1 = (__u.__val);
    {
      #line 45 
      bool __warned;
      #line 45 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 45 
        if (! __warned) {
          #line 45 
          if (rcu_read_lock_held() == 0) {
            #line 45 
            __warned = (_Bool)1;
            #line 45 
            lockdep_rcu_suspicious((char *)"./include/net/netns/generic.h",45,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 45 
  ng = ________p1;
  #line 46 
  ptr = ng->__anonCompField_net_generic_198.ptr[id];
  #line 47 
  rcu_read_unlock();
  #line 49 
  return ptr;
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netpoll.h"
#line 50 
void netpoll_poll_dev(struct net_device *);
#line 61 
#line 61 
int __netpoll_setup(struct netpoll *, struct net_device *);
#line 64 
#line 64 
void __netpoll_free(struct netpoll *);
#line 66 
#line 66 
void netpoll_send_skb_on_dev(struct netpoll *, struct sk_buff *, struct net_device *);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netpoll.h"
__inline static void netpoll_send_skb(struct netpoll *np, struct sk_buff *skb)
{
  #line 70 
  unsigned long flags;
  {
    #line 71 
    unsigned long __dummy;
    #line 71 
    unsigned long __dummy2;
    }
  #line 71 
  flags = arch_local_irq_save();
  #line 71 
  trace_hardirqs_off();
  #line 72 
  netpoll_send_skb_on_dev(np,skb,np->dev);
  {
    #line 73 
    unsigned long __dummy_2;
    #line 73 
    unsigned long __dummy2_2;
    }
  #line 73 
  if (arch_irqs_disabled_flags(flags) != 0) {
    {
      #line 73 
      unsigned long __dummy_0;
      #line 73 
      unsigned long __dummy2_0;
      }
    #line 73 
    arch_local_irq_restore(flags);
    #line 73 
    trace_hardirqs_off();
  }
  else {
    #line 73 
    trace_hardirqs_on();
    {
      #line 73 
      unsigned long __dummy_1;
      #line 73 
      unsigned long __dummy2_1;
      }
    #line 73 
    arch_local_irq_restore(flags);
  }
  #line 76 
  return;
}

#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netpoll.h"
__inline static bool netpoll_tx_running(struct net_device *dev)
{
  #line 102 
  unsigned long _flags;
  {
    #line 102 
    unsigned long __dummy;
    #line 102 
    unsigned long __dummy2;
    }
  #line 102 
  _flags = arch_local_save_flags();
  {
    #line 102 
    unsigned long __dummy_0;
    #line 102 
    unsigned long __dummy2_0;
    }
  #line 102 
  return (_Bool)(arch_irqs_disabled_flags(_flags) != 0);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/reciprocal_div.h"
#line 31 
struct reciprocal_value reciprocal_value(u32);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/reciprocal_div.h"
__inline static u32 reciprocal_divide(u32 a, struct reciprocal_value R)
{
  #line 35 
  u32 t = (unsigned int)((unsigned long long)a * (unsigned long long)R.m >> 32);
  #line 36 
  return (((a - t) >> (int)R.sh1) + t) >> (int)R.sh2;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_alb.h"
#line 153 
int bond_alb_initialize(struct bonding *bond, int rlb_enabled);
#line 154 
#line 154 
void bond_alb_deinitialize(struct bonding *bond);
#line 155 
#line 155 
int bond_alb_init_slave(struct bonding *bond, struct slave *slave);
#line 156 
#line 156 
void bond_alb_deinit_slave(struct bonding *bond, struct slave *slave);
#line 157 
#line 157 
void bond_alb_handle_link_change(struct bonding *bond, struct slave *slave, char link);
#line 158 
#line 158 
void bond_alb_handle_active_change(struct bonding *bond, struct slave *new_slave);
#line 159 
#line 159 
enum netdev_tx bond_alb_xmit(struct sk_buff *skb, struct net_device *bond_dev);
#line 160 
#line 160 
enum netdev_tx bond_tlb_xmit(struct sk_buff *skb, struct net_device *bond_dev);
#line 161 
#line 161 
void bond_alb_monitor(struct work_struct *work);
#line 162 
#line 162 
int bond_alb_set_mac_address(struct net_device *bond_dev, void *addr);
#line 163 
#line 163 
void bond_alb_clear_vlan(struct bonding *bond, unsigned short vlan_id);
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
#line 104 
int __bond_opt_set_notify(struct bonding *bond, unsigned int option, struct bond_opt_value *val);
#line 108 
#line 108 
struct bond_opt_value *bond_opt_parse(struct bond_option *opt, struct bond_opt_value *val);
#line 110 
#line 110 
struct bond_option *bond_opt_get(unsigned int option);
#line 112 
#line 112 
struct bond_opt_value *bond_opt_get_val(unsigned int option, u64 val);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
__inline static void __bond_opt_init(struct bond_opt_value *optval, char *string, u64 value)
{
  #line 121 
  memset((void *)optval,0,24UL);
  #line 122 
  optval->value = 18446744073709551615ULL;
  #line 123 
  if (value == 18446744073709551615ULL) 
                                        #line 124 
                                        optval->string = string; else 
                                                                   #line 126 
                                                                   optval->value = value;
  #line 127 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
atomic_t netpoll_block_tx;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void block_netpoll_tx(void)
{
  #line 94 
  atomic_inc(& netpoll_block_tx);
  #line 95 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void unblock_netpoll_tx(void)
{
  #line 99 
  atomic_dec(& netpoll_block_tx);
  #line 100 
  return;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static int is_netpoll_tx_blocked(struct net_device *dev)
{
  #line 104 
  if ((long)((int)netpoll_tx_running(dev) != 0) != 0L) {
    #line 105 
    return atomic_read(& netpoll_block_tx);
  }
  #line 106 
  return 0;
}

#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static struct slave *bond_get_slave_by_dev(struct bonding *bond, struct net_device *slave_dev)
{
  #line 265 
  return (struct slave *)netdev_lower_dev_get_private(bond->dev,slave_dev);
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_should_override_tx_queue(struct bonding *bond)
{
  #line 275 
  return (_Bool)((unsigned int)bond->params.mode <= 1U);
}

#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_needs_speed_duplex(struct bonding *bond)
{
  #line 287 
  int tmp_0;
  #line 287 
  if (bond->params.mode == 4) 
                              #line 287 
                              tmp_0 = 1;
  else {
    #line 287 
    if ((int)bond_is_lb(bond) != 0) 
                                    #line 287 
                                    tmp_0 = 1; else 
                                                    #line 287 
                                                    tmp_0 = 0;
  }
  #line 287 
  return (_Bool)(tmp_0 != 0);
}

#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_mode_can_use_xmit_hash(struct bonding *bond)
{
  #line 299 
  return (_Bool)((((bond->params.mode == 4 || bond->params.mode == 2) || bond->params.mode == 5) || bond->params.mode == 6) != 0);
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_mode_uses_arp(int mode_0)
{
  #line 312 
  return (_Bool)((unsigned int)mode_0 + 4294967292U > 2U);
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_mode_uses_primary(int mode_0)
{
  #line 318 
  return (_Bool)(((mode_0 == 1 || mode_0 == 5) || mode_0 == 6) != 0);
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_uses_primary(struct bonding *bond)
{
  #line 324 
  return bond_mode_uses_primary(bond->params.mode);
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_set_active_slave(struct slave *slave)
{
  #line 341 
  if ((unsigned int)slave->backup != 0U) {
    #line 342 
    slave->backup = (unsigned char)0U;
    #line 343 
    bond_queue_slave_event(slave);
    #line 344 
    bond_lower_state_changed(slave);
  }
  #line 346 
  return;
}

#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_set_backup_slave(struct slave *slave)
{
  #line 350 
  if ((unsigned int)slave->backup == 0U) {
    #line 351 
    slave->backup = (unsigned char)1U;
    #line 352 
    bond_queue_slave_event(slave);
    #line 353 
    bond_lower_state_changed(slave);
  }
  #line 355 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_slave_state_change(struct bonding *bond)
{
  #line 378 
  struct list_head *iter;
  #line 379 
  struct slave *tmp;
  #line 381 
  iter = (bond->dev)->adj_list.lower.next;
  #line 381 
  tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 381 
  while (tmp != (struct slave *)0) {
    #line 382 
    if ((int)tmp->link == 0) 
                             #line 383 
                             bond_set_active_slave(tmp);
    else 
      #line 384 
      if ((int)tmp->link == 2) 
                               #line 385 
                               bond_set_backup_slave(tmp);
    #line 381 
    tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 386 
  return;
}

#line 412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_slave_can_tx(struct slave *slave)
{
  #line 414 
  int tmp_1;
  #line 414 
  if ((int)bond_slave_is_up(slave) != 0) 
    #line 414 
    if ((int)slave->link == 0) {
      #line 414 
      if ((int)bond_is_active_slave(slave) != 0) 
                                                 #line 414 
                                                 tmp_1 = 1; else 
                                                                 #line 414 
                                                                 tmp_1 = 0;
    }
    else 
         #line 414 
         tmp_1 = 0;
  else 
       #line 414 
       tmp_1 = 0;
  #line 414 
  return (_Bool)(tmp_1 != 0);
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_hw_addr_copy(u8 *dst, u8 *src, unsigned int len)
{
  #line 433 
  if (len == 6U) {
    #line 434 
    ether_addr_copy(dst,src);
    #line 435 
    return;
  }
  #line 438 
  memcpy((void *)dst,(void *)src,(unsigned long)len);
  #line 439 
  return;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static int slave_do_arp_validate(struct bonding *bond, struct slave *slave)
{
  #line 469 
  ;
  #line 469 
  return bond->params.arp_validate & (1 << bond_slave_state(slave));
}

#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static int slave_do_arp_validate_only(struct bonding *bond)
{
  #line 474 
  return bond->params.arp_validate & 4;
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static int bond_is_ip_target_ok(__be32 addr)
{
  #line 479 
  int tmp_1;
  #line 479 
  if (ipv4_is_lbcast(addr)) 
                            #line 479 
                            tmp_1 = 0;
  else {
    #line 479 
    if (ipv4_is_zeronet(addr)) 
                               #line 479 
                               tmp_1 = 0; else 
                                               #line 479 
                                               tmp_1 = 1;
  }
  #line 479 
  return tmp_1;
}

#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static unsigned long slave_oldest_target_arp_rx(struct bonding *bond, struct slave *slave)
{
  #line 488 
  int i = 1;
  #line 489 
  unsigned long ret = slave->target_last_arp_rx[0];
  #line 491 
  while (i <= 15 && bond->params.arp_targets[i] != 0U) {
    {
      #line 492 
      unsigned long __dummy;
      #line 492 
      unsigned long __dummy2;
      }
    #line 492 
    if (1 != 0) {
      {
        #line 492 
        unsigned long __dummy_0;
        #line 492 
        unsigned long __dummy2_0;
        }
      #line 492 
      if (1 != 0) 
        #line 492 
        if ((long)(slave->target_last_arp_rx[i] - ret) < 0L) 
                                                             #line 493 
                                                             ret = slave->target_last_arp_rx[i];
    }
    #line 491 
    i ++;
  }
  #line 495 
  return ret;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static unsigned long slave_last_rx(struct bonding *bond, struct slave *slave)
{
  #line 501 
  if (bond->params.arp_all_targets == 1) {
    #line 502 
    return slave_oldest_target_arp_rx(bond,slave);
  }
  #line 504 
  return slave->last_rx;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_netpoll_send_skb(struct slave *slave, struct sk_buff *skb)
{
  #line 511 
  struct netpoll *np = slave->np;
  #line 513 
  if (np != (struct netpoll *)0) 
                                 #line 514 
                                 netpoll_send_skb(np,skb);
  #line 515 
  return;
}

#line 539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_is_slave_inactive(struct slave *slave)
{
  #line 541 
  return (_Bool)((int)slave->inactive != 0);
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_propose_link_state(struct slave *slave, int state)
{
  #line 546 
  slave->link_new_state = (signed char)state;
  #line 547 
  return;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_commit_link_state(struct slave *slave, bool notify)
{
  #line 551 
  if ((int)slave->link_new_state == -1) 
                                        #line 552 
                                        return;
  #line 554 
  slave->link = slave->link_new_state;
  #line 555 
  if ((int)notify != 0) {
    #line 556 
    bond_queue_slave_event(slave);
    #line 557 
    bond_lower_state_changed(slave);
    #line 558 
    slave->should_notify_link = (unsigned char)0U;
  }
  else 
    #line 560 
    if ((unsigned int)slave->should_notify_link != 0U) 
                                                       #line 561 
                                                       slave->should_notify_link = (unsigned char)0U; else 
                                                                    #line 563 
                                                                    slave->should_notify_link = (unsigned char)1U;
  #line 564 
  return;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_set_slave_link_state(struct slave *slave, int state, bool notify)
{
  #line 570 
  bond_propose_link_state(slave,state);
  #line 571 
  bond_commit_link_state(slave,(_Bool)((bool)((int)notify) != 0));
  #line 572 
  return;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_slave_link_notify(struct bonding *bond)
{
  #line 576 
  struct list_head *iter;
  #line 577 
  struct slave *tmp;
  #line 579 
  iter = (bond->dev)->adj_list.lower.next;
  #line 579 
  tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 579 
  while (tmp != (struct slave *)0) {
    #line 580 
    if ((unsigned int)tmp->should_notify_link != 0U) {
      #line 581 
      bond_queue_slave_event(tmp);
      #line 582 
      bond_lower_state_changed(tmp);
      #line 583 
      tmp->should_notify_link = (unsigned char)0U;
    }
    #line 579 
    tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 585 
  return;
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static __be32 bond_confirm_addr(struct net_device *dev, __be32 dst, __be32 local)
{
  #line 590 
  struct in_device *in_dev;
  #line 591 
  __be32 addr = 0U;
  #line 593 
  rcu_read_lock();
  #line 594 
  in_dev = __in_dev_get_rcu(dev);
  #line 596 
  if (in_dev != (struct in_device *)0) {
    #line 597 
    ;
    #line 597 
    ;
    #line 597 
    ;
    #line 597 
    addr = inet_confirm_addr(dev_net(dev),in_dev,dst,local,254);
  }
  #line 599 
  rcu_read_unlock();
  #line 600 
  return addr;
}

#line 612 
#line 2583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_arp_rcv(struct sk_buff *skb, struct bonding *bond, struct slave *slave);
#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_dev_queue_xmit(struct bonding *bond, struct sk_buff *skb, struct net_device *slave_dev);
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 4878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_create(struct net *net, char *name);
#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 615 
int bond_create_sysfs(struct bond_net *bn);
#line 616 
#line 616 
void bond_destroy_sysfs(struct bond_net *bn);
#line 617 
#line 617 
void bond_prepare_sysfs_group(struct bonding *bond);
#line 618 
#line 618 
int bond_sysfs_slave_add(struct slave *slave);
#line 619 
#line 619 
void bond_sysfs_slave_del(struct slave *slave);
#line 620 
#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev, struct netlink_ext_ack *extack);
#line 622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 2072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_release(struct net_device *bond_dev, struct net_device *slave_dev);
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 3383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
u32 bond_xmit_hash(struct bonding *bond, struct sk_buff *skb);
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_set_carrier(struct bonding *bond);
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_select_active_slave(struct bonding *bond);
#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_change_active_slave(struct bonding *bond, struct slave *new_active);
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 627 
void bond_create_debugfs(void);
#line 628 
#line 628 
void bond_destroy_debugfs(void);
#line 629 
#line 629 
void bond_debug_register(struct bonding *bond);
#line 630 
#line 630 
void bond_debug_unregister(struct bonding *bond);
#line 631 
#line 631 
void bond_debug_reregister(struct bonding *bond);
#line 632 
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
char *bond_mode_name(int mode_0);
#line 633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 4373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_setup(struct net_device *bond_dev);
#line 634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 4868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
unsigned int bond_get_num_tx_queues(void);
#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 635 
int bond_netlink_init(void);
#line 636 
#line 636 
void bond_netlink_fini(void);
#line 638 
#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
char *bond_slave_link_status(s8 link);
#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
struct bond_vlan_tag *bond_verify_device_path(struct net_device *start_dev, struct net_device *end_dev, int level);
#line 644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 3415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_work_init_all(struct bonding *bond);
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 647 
void bond_create_proc_entry(struct bonding *bond);
#line 648 
#line 648 
void bond_remove_proc_entry(struct bonding *bond);
#line 649 
#line 649 
void bond_create_proc_dir(struct bond_net *bn);
#line 650 
#line 650 
void bond_destroy_proc_dir(struct bond_net *bn);
#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static int bond_get_targets_ip(__be32 *targets, __be32 ip)
{
  #line 722 
  int i;
  #line 724 
  i = 0;
  #line 724 
  while (i <= 15) {
    #line 725 
    if (*(targets + (unsigned long)i) == ip) 
                                             #line 726 
                                             return i;
    else 
      #line 727 
      if (*(targets + (unsigned long)i) == 0U) 
                                               #line 728 
                                               break;
    #line 724 
    i ++;
  }
  #line 730 
  return -1;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
unsigned int bond_net_id;
#line 744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
struct rtnl_link_ops bond_link_ops;
#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void bond_tx_drop(struct net_device *dev, struct sk_buff *skb)
{
  #line 748 
  atomic_long_inc(& dev->tx_dropped);
  #line 749 
  dev_kfree_skb_any(skb);
  #line 750 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int max_bonds = 1;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int tx_queues = 16;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int num_peer_notif = 1;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int miimon;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int updelay;
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int downdelay;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int use_carrier = 1;
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *mode;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *primary;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *primary_reselect;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *lacp_rate;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int min_links;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *ad_select;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *xmit_hash_policy;
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int arp_interval;
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *arp_ip_target[16U];
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *arp_validate;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *arp_all_targets;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static char *fail_over_mac;
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int all_slaves_active;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct bond_params bonding_defaults;
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int resend_igmp = 1;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int packets_per_slave = 1;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int lp_interval = 1;
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
atomic_t netpoll_block_tx = {.counter = 0};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct flow_dissector_key flow_keys_bonding_keys[10U] = {[1] = {.key_id = FLOW_DISSECTOR_KEY_BASIC, .offset = 8UL}, {.key_id = FLOW_DISSECTOR_KEY_IPV4_ADDRS, .offset = 36UL}, {.key_id = FLOW_DISSECTOR_KEY_IPV6_ADDRS, .offset = 36UL}, {.key_id = FLOW_DISSECTOR_KEY_TIPC, .offset = 36UL}, {.key_id = FLOW_DISSECTOR_KEY_PORTS, .offset = 28UL}, {.key_id = FLOW_DISSECTOR_KEY_ICMP, .offset = 32UL}, {.key_id = FLOW_DISSECTOR_KEY_VLAN, .offset = 16UL}, {.key_id = FLOW_DISSECTOR_KEY_FLOW_LABEL, .offset = 12UL}, {.key_id = FLOW_DISSECTOR_KEY_GRE_KEYID, .offset = 24UL}};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct flow_dissector flow_keys_bonding;
#line 252 
#line 4839 
static int bond_init(struct net_device *bond_dev);
#line 253 
#line 4424 
static void bond_uninit(struct net_device *bond_dev);
#line 254 
#line 3529 
static void bond_get_stats(struct net_device *bond_dev, struct rtnl_link_stats64 *stats);
#line 256 
#line 4020 
static void bond_slave_arr_handler(struct work_struct *work);
#line 257 
#line 2681 
static bool bond_time_in_interval(struct bonding *bond, unsigned long last_act, int mod);
#line 259 
#line 1389 
static void bond_netdev_notify_work(struct work_struct *_work);
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
char *bond_mode_name(int mode_0)
{
  #line 265 
  char *names[7U] = {(char *)"load balancing (round-robin)", (char *)"fault-tolerance (active-backup)", (char *)"load balancing (xor)", (char *)"fault-tolerance (broadcast)", (char *)"IEEE 802.3ad Dynamic link aggregation", (char *)"transmit load balancing", (char *)"adaptive load balancing"};
  #line 275 
  if ((unsigned int)mode_0 > 6U) 
                                 #line 276 
                                 return (char *)"unknown";
  #line 278 
  return names[mode_0];
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_dev_queue_xmit(struct bonding *bond, struct sk_buff *skb, struct net_device *slave_dev)
{
  #line 293 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = slave_dev;
  #line 297 
  ;
  #line 297 
  skb_set_queue_mapping(skb,(unsigned short)((int)qdisc_skb_cb(skb)->__anonCompField_qdisc_skb_cb_174.slave_dev_queue_mapping));
  #line 299 
  if ((long)((int)netpoll_tx_running(bond->dev) != 0) != 0L) {
    #line 300 
    ;
    #line 300 
    bond_netpoll_send_skb(bond_get_slave_by_dev(bond,slave_dev),skb);
  }
  else 
       #line 302 
       dev_queue_xmit(skb);
  #line 303 
  return;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_vlan_rx_add_vid(struct net_device *bond_dev, __be16 proto, u16 vid)
{
  #line 330 
  struct slave *slave;
  #line 330 
  struct slave *rollback_slave;
  #line 331 
  struct list_head *iter;
  #line 332 
  int res;
  #line 329 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 334 
  iter = (bond->dev)->adj_list.lower.next;
  #line 334 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 334 
  while (slave != (struct slave *)0) {
    #line 335 
    res = vlan_vid_add(slave->dev,(unsigned short)((int)proto),(unsigned short)((int)vid));
    #line 336 
    if (res != 0) 
                  #line 337 
                  goto unwind;
    #line 334 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 340 
  return 0;
  #line 342 
  unwind: 
          #line 342 
  ;
  #line 344 
  iter = (bond->dev)->adj_list.lower.next;
  #line 344 
  rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 344 
  while (rollback_slave != (struct slave *)0) {
    #line 345 
    if (rollback_slave == slave) 
                                 #line 346 
                                 break;
    #line 348 
    vlan_vid_del(rollback_slave->dev,(unsigned short)((int)proto),(unsigned short)((int)vid));
    #line 344 
    rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 351 
  return res;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_vlan_rx_kill_vid(struct net_device *bond_dev, __be16 proto, u16 vid)
{
  #line 363 
  struct list_head *iter;
  #line 364 
  struct slave *slave;
  #line 362 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 366 
  iter = (bond->dev)->adj_list.lower.next;
  #line 366 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 366 
  while (slave != (struct slave *)0) {
    #line 367 
    vlan_vid_del(slave->dev,(unsigned short)((int)proto),(unsigned short)((int)vid));
    #line 366 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 369 
  if ((int)bond_is_lb(bond) != 0) 
                                  #line 370 
                                  bond_alb_clear_vlan(bond,(unsigned short)((int)vid));
  #line 372 
  return 0;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_set_carrier(struct bonding *bond)
{
  #line 385 
  struct list_head *iter;
  #line 386 
  struct slave *slave;
  #line 388 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) 
                                                        #line 389 
                                                        goto down;
  #line 391 
  if (bond->params.mode == 4) {
    #line 392 
    return bond_3ad_set_carrier(bond);
  }
  #line 394 
  iter = (bond->dev)->adj_list.lower.next;
  #line 394 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 394 
  while (slave != (struct slave *)0) {
    #line 395 
    if ((int)slave->link == 0) {
      #line 396 
      if (! netif_carrier_ok(bond->dev)) {
        #line 397 
        netif_carrier_on(bond->dev);
        #line 398 
        return 1;
      }
      #line 400 
      return 0;
    }
    #line 394 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 404 
  down: 
        #line 404 
  ;
  #line 405 
  if ((int)netif_carrier_ok(bond->dev) != 0) {
    #line 406 
    netif_carrier_off(bond->dev);
    #line 407 
    return 1;
  }
  #line 409 
  return 0;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_update_speed_duplex(struct slave *slave)
{
  #line 421 
  struct ethtool_link_ksettings ecmd;
  #line 422 
  int res;
  #line 420 
  struct net_device *slave_dev = slave->dev;
  #line 424 
  slave->speed = 4294967295U;
  #line 425 
  slave->duplex = (unsigned char)255U;
  #line 427 
  res = __ethtool_get_link_ksettings(slave_dev,& ecmd);
  #line 428 
  if (res < 0) 
               #line 429 
               return 1;
  #line 430 
  if (ecmd.base.speed + 4294967295U > 4294967293U) 
                                                   #line 431 
                                                   return 1;
  #line 432 
  switch ((int)ecmd.base.duplex) {
    #line 433 
    case 1: 
            #line 433 
    ;
    #line 434 
    case 0: 
            #line 434 
    ;
    #line 435 
    break;
    #line 436 
    default: 
             #line 436 
    ;
    #line 437 
    return 1;
  }
  #line 440 
  slave->speed = ecmd.base.speed;
  #line 441 
  slave->duplex = ecmd.base.duplex;
  #line 443 
  return 0;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
char *bond_slave_link_status(s8 link)
{
  #line 448 
  switch ((int)link) {
    #line 449 
    case 0: 
            #line 449 
    ;
    #line 450 
    return (char *)"up";
    #line 451 
    case 1: 
            #line 451 
    ;
    #line 452 
    return (char *)"going down";
    #line 453 
    case 2: 
            #line 453 
    ;
    #line 454 
    return (char *)"down";
    #line 455 
    case 3: 
            #line 455 
    ;
    #line 456 
    return (char *)"going back";
    #line 457 
    default: 
             #line 457 
    ;
    #line 458 
    return (char *)"unknown";
  }
}

#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_check_dev_link(struct bonding *bond, struct net_device *slave_dev, int reporting)
{
  #line 481 
  int (*ioctl)(struct net_device *, struct ifreq *, int );
  #line 482 
  struct ifreq ifr;
  #line 483 
  struct mii_ioctl_data *mii;
  #line 526 
  int tmp_6;
  #line 480 
  struct net_device_ops *slave_ops = slave_dev->netdev_ops;
  #line 485 
  if (reporting == 0) {
    #line 485 
    if (! netif_running(slave_dev)) 
                                    #line 486 
                                    return 0;
  }
  #line 488 
  if (bond->params.use_carrier != 0) {
    #line 489 
    int tmp_1;
    #line 489 
    if ((int)netif_carrier_ok(slave_dev) != 0) 
                                               #line 489 
                                               tmp_1 = 4; else 
                                                               #line 489 
                                                               tmp_1 = 0;
    #line 489 
    return tmp_1;
  }
  #line 492 
  if ((slave_dev->ethtool_ops)->get_link != (u32 (*)(struct net_device *))0) {
    #line 494 
    int tmp_3;
    #line 494 
    if ((*((slave_dev->ethtool_ops)->get_link))(slave_dev) != 0U) 
                                                                  #line 494 
                                                                  tmp_3 = 4; else 
                                                                    #line 494 
                                                                    tmp_3 = 0;
    #line 494 
    return tmp_3;
  }
  #line 497 
  ioctl = slave_ops->ndo_do_ioctl;
  #line 498 
  if (ioctl != (int (*)(struct net_device *, struct ifreq *, int ))0) {
    #line 512 
    strncpy((char *)(& ifr.ifr_ifrn.ifrn_name),(char *)(& slave_dev->name),16UL);
    #line 513 
    mii = if_mii(& ifr);
    #line 514 
    if ((*ioctl)(slave_dev,& ifr,35143) == 0) {
      #line 515 
      mii->reg_num = (unsigned short)1U;
      #line 516 
      if ((*ioctl)(slave_dev,& ifr,35144) == 0) 
                                                #line 517 
                                                return (int)mii->val_out & 4;
    }
  }
  #line 526 
  if (reporting != 0) 
                      #line 526 
                      tmp_6 = -1; else 
                                       #line 526 
                                       tmp_6 = 4;
  #line 526 
  return tmp_6;
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_set_promiscuity(struct bonding *bond, int inc)
{
  #line 534 
  struct list_head *iter;
  #line 535 
  int err = 0;
  #line 537 
  if ((int)bond_uses_primary(bond) != 0) {
    {
      #line 538 
      bool __warned;
      #line 538 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 538 
        if (! __warned) {
          #line 538 
          if (! lockdep_rtnl_is_held()) {
            #line 538 
            __warned = (_Bool)1;
            #line 538 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",538,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 538 
    struct slave *curr_active = bond->curr_active_slave;
    #line 540 
    if (curr_active != (struct slave *)0) 
                                          #line 541 
                                          err = dev_set_promiscuity(curr_active->dev,inc);
  }
  else {
    #line 543 
    struct slave *slave;
    #line 545 
    iter = (bond->dev)->adj_list.lower.next;
    #line 545 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    #line 545 
    while (slave != (struct slave *)0) {
      #line 546 
      err = dev_set_promiscuity(slave->dev,inc);
      #line 547 
      if (err != 0) 
                    #line 548 
                    return err;
      #line 545 
      slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    }
  }
  #line 551 
  return err;
}

#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_set_allmulti(struct bonding *bond, int inc)
{
  #line 557 
  struct list_head *iter;
  #line 558 
  int err = 0;
  #line 560 
  if ((int)bond_uses_primary(bond) != 0) {
    {
      #line 561 
      bool __warned;
      #line 561 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 561 
        if (! __warned) {
          #line 561 
          if (! lockdep_rtnl_is_held()) {
            #line 561 
            __warned = (_Bool)1;
            #line 561 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",561,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 561 
    struct slave *curr_active = bond->curr_active_slave;
    #line 563 
    if (curr_active != (struct slave *)0) 
                                          #line 564 
                                          err = dev_set_allmulti(curr_active->dev,inc);
  }
  else {
    #line 566 
    struct slave *slave;
    #line 568 
    iter = (bond->dev)->adj_list.lower.next;
    #line 568 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    #line 568 
    while (slave != (struct slave *)0) {
      #line 569 
      err = dev_set_allmulti(slave->dev,inc);
      #line 570 
      if (err != 0) 
                    #line 571 
                    return err;
      #line 568 
      slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    }
  }
  #line 574 
  return err;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_resend_igmp_join_requests_delayed(struct work_struct *work)
{
  #line 583 
  void *__mptr;
  #line 583 
  __mptr = (void *)work;
  #line 583 
  struct bonding *bond = ((struct bonding *)(__mptr + 18446744073709550264U));
  #line 586 
  if (rtnl_trylock() == 0) {
    #line 587 
    cif_queue_delayed_work_0(bond->wq,& bond->mcast_work,1UL);
    #line 588 
    return;
  }
  #line 590 
  call_netdevice_notifiers(22UL,bond->dev);
  #line 592 
  if ((unsigned int)bond->igmp_retrans > 1U) {
    #line 593 
    bond->igmp_retrans = (u8)((int)bond->igmp_retrans - 1);
    #line 594 
    cif_queue_delayed_work_0(bond->wq,& bond->mcast_work,50UL);
  }
  #line 596 
  rtnl_unlock();
  #line 597 
  return;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_hw_addr_flush(struct net_device *bond_dev, struct net_device *slave_dev)
{
  #line 603 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 605 
  dev_uc_unsync(slave_dev,bond_dev);
  #line 606 
  dev_mc_unsync(slave_dev,bond_dev);
  #line 608 
  if (bond->params.mode == 4) {
    #line 610 
    u8 lacpdu_multicast[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, (unsigned char)0U, (unsigned char)0U, (unsigned char)2U};
    #line 612 
    dev_mc_del(slave_dev,(unsigned char *)(& lacpdu_multicast));
  }
  #line 614 
  return;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_hw_addr_swap(struct bonding *bond, struct slave *new_active, struct slave *old_active)
{
  #line 626 
  if (old_active != (struct slave *)0) {
    #line 627 
    if (((bond->dev)->flags & 256U) != 0U) 
                                           #line 628 
                                           dev_set_promiscuity(old_active->dev,-1);
    #line 630 
    if (((bond->dev)->flags & 512U) != 0U) 
                                           #line 631 
                                           dev_set_allmulti(old_active->dev,-1);
    #line 633 
    bond_hw_addr_flush(bond->dev,old_active->dev);
  }
  #line 636 
  if (new_active != (struct slave *)0) {
    #line 638 
    if (((bond->dev)->flags & 256U) != 0U) 
                                           #line 639 
                                           dev_set_promiscuity(new_active->dev,1);
    #line 641 
    if (((bond->dev)->flags & 512U) != 0U) 
                                           #line 642 
                                           dev_set_allmulti(new_active->dev,1);
    #line 644 
    netif_addr_lock_bh(bond->dev);
    #line 645 
    dev_uc_sync(new_active->dev,bond->dev);
    #line 646 
    dev_mc_sync(new_active->dev,bond->dev);
    #line 647 
    netif_addr_unlock_bh(bond->dev);
  }
  #line 649 
  return;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_set_dev_addr(struct net_device *bond_dev, struct net_device *slave_dev)
{
  #line 661 
  int err;
  {
    #line 663 
    bool branch;
    #line 663 
    struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"bonding", .function = (char *)"bond_set_dev_addr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)663U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 663 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
    #line 663 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 663 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug590,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),bond_dev,slave_dev,(int)slave_dev->addr_len);
  }
  #line 665 
  err = dev_pre_changeaddr_notify(bond_dev,(char *)slave_dev->dev_addr,(struct netlink_ext_ack *)0);
  #line 666 
  if (err != 0) 
                #line 667 
                return err;
  #line 669 
  memcpy((void *)bond_dev->dev_addr,(void *)slave_dev->dev_addr,(unsigned long)slave_dev->addr_len);
  #line 670 
  bond_dev->addr_assign_type = (unsigned char)2U;
  #line 671 
  call_netdevice_notifiers(8UL,bond_dev);
  #line 672 
  return 0;
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct slave *bond_get_old_active(struct bonding *bond, struct slave *new_active)
{
  #line 678 
  struct slave *slave;
  #line 679 
  struct list_head *iter;
  #line 681 
  iter = (bond->dev)->adj_list.lower.next;
  #line 681 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 681 
  while (slave != (struct slave *)0) {
    {
      #line 682 
      if (slave == new_active) 
                               #line 683 
                               goto __Cont;
      #line 685 
      if ((int)ether_addr_equal((bond->dev)->dev_addr,(slave->dev)->dev_addr) != 0) 
        #line 686 
        return slave;
    }
    #line 681 
    __Cont: 
            #line 681 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 689 
  return (struct slave *)0;
}

#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_do_fail_over_mac(struct bonding *bond, struct slave *new_active, struct slave *old_active)
{
  #line 702 
  u8 tmp_mac[32U];
  #line 703 
  struct __kernel_sockaddr_storage ss;
  #line 704 
  int rv;
  #line 706 
  switch (bond->params.fail_over_mac) {
    #line 707 
    case 1: 
            #line 707 
    ;
    #line 708 
    if (new_active != (struct slave *)0) {
      #line 709 
      rv = bond_set_dev_addr(bond->dev,new_active->dev);
      #line 710 
      if (rv != 0) 
                   #line 711 
                   netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name),- rv);
    }
    #line 714 
    break;
    #line 715 
    case 2: 
            #line 715 
    ;
    #line 720 
    if (new_active == (struct slave *)0) 
                                         #line 721 
                                         return;
    #line 723 
    if (old_active == (struct slave *)0) 
                                         #line 724 
                                         old_active = bond_get_old_active(bond,new_active);
    #line 726 
    if (old_active != (struct slave *)0) {
      #line 727 
      bond_hw_addr_copy((u8 *)(& tmp_mac),(new_active->dev)->dev_addr,(unsigned int)(new_active->dev)->addr_len);
      #line 729 
      bond_hw_addr_copy((u8 *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(old_active->dev)->dev_addr,(unsigned int)(old_active->dev)->addr_len);
      #line 732 
      ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = (new_active->dev)->type;
    }
    else {
      #line 734 
      bond_hw_addr_copy((u8 *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(bond->dev)->dev_addr,(unsigned int)(bond->dev)->addr_len);
      #line 736 
      ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = (bond->dev)->type;
    }
    #line 739 
    rv = dev_set_mac_address(new_active->dev,(struct sockaddr *)(& ss),(struct netlink_ext_ack *)0);
    #line 741 
    if (rv != 0) {
      #line 742 
      netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name),- rv);
      #line 744 
      goto out;
    }
    #line 747 
    if (old_active == (struct slave *)0) 
                                         #line 748 
                                         goto out;
    #line 750 
    bond_hw_addr_copy((u8 *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(u8 *)(& tmp_mac),(unsigned int)(new_active->dev)->addr_len);
    #line 752 
    ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = (old_active->dev)->type;
    #line 754 
    rv = dev_set_mac_address(old_active->dev,(struct sockaddr *)(& ss),(struct netlink_ext_ack *)0);
    #line 756 
    if (rv != 0) 
                 #line 757 
                 netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (old_active->dev)->name),- rv);
    #line 759 
    out: 
         #line 759 
    ;
    #line 760 
    break;
    #line 761 
    default: 
             #line 761 
    ;
    #line 762 
    netdev_err(bond->dev,(char *)"bond_do_fail_over_mac impossible: bad policy %d\n",bond->params.fail_over_mac);
    #line 764 
    break;
  }
  #line 766 
  return;
}

#line 769  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct slave *bond_choose_primary_or_current(struct bonding *bond)
{
  {
    #line 771 
    bool __warned;
    #line 771 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 771 
      if (! __warned) {
        #line 771 
        if (! lockdep_rtnl_is_held()) {
          #line 771 
          __warned = (_Bool)1;
          #line 771 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",771,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 771 
  struct slave *prim = bond->primary_slave;
  {
    #line 772 
    bool __warned_0;
    #line 772 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 772 
      if (! __warned_0) {
        #line 772 
        if (! lockdep_rtnl_is_held()) {
          #line 772 
          __warned_0 = (_Bool)1;
          #line 772 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",772,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 772 
  struct slave *curr = bond->curr_active_slave;
  #line 774 
  if (prim == (struct slave *)0 || (int)prim->link != 0) {
    #line 775 
    if (curr == (struct slave *)0 || (int)curr->link != 0) 
                                                           #line 776 
                                                           return (struct slave *)0;
    #line 777 
    return curr;
  }
  #line 780 
  if ((int)bond->force_primary != 0) {
    #line 781 
    bond->force_primary = (_Bool)0;
    #line 782 
    return prim;
  }
  #line 785 
  if (curr == (struct slave *)0 || (int)curr->link != 0) 
                                                         #line 786 
                                                         return prim;
  #line 789 
  switch (bond->params.primary_reselect) {
    #line 790 
    case 0: 
            #line 790 
    ;
    #line 791 
    return prim;
    #line 792 
    case 1: 
            #line 792 
    ;
    #line 793 
    if (prim->speed < curr->speed) 
                                   #line 794 
                                   return curr;
    #line 795 
    if (prim->speed == curr->speed && (int)prim->duplex <= (int)curr->duplex) 
      #line 796 
      return curr;
    #line 797 
    return prim;
    #line 798 
    case 2: 
            #line 798 
    ;
    #line 799 
    return curr;
    #line 800 
    default: 
             #line 800 
    ;
    #line 801 
    netdev_err(bond->dev,(char *)"impossible primary_reselect %d\n",bond->params.primary_reselect);
    #line 803 
    return curr;
  }
}

#line 811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct slave *bond_find_best_slave(struct bonding *bond)
{
  #line 813 
  struct slave *slave;
  #line 814 
  struct list_head *iter;
  #line 813 
  struct slave *bestslave = (struct slave *)0;
  #line 815 
  int mintime = bond->params.updelay;
  #line 817 
  slave = bond_choose_primary_or_current(bond);
  #line 818 
  if (slave != (struct slave *)0) 
                                  #line 819 
                                  return slave;
  #line 821 
  iter = (bond->dev)->adj_list.lower.next;
  #line 821 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 821 
  while (slave != (struct slave *)0) {
    #line 822 
    if ((int)slave->link == 0) 
                               #line 823 
                               return slave;
    #line 824 
    if ((int)slave->link == 3) {
      #line 824 
      if ((int)bond_slave_is_up(slave) != 0) 
        #line 824 
        if (slave->delay < mintime) {
          #line 826 
          mintime = slave->delay;
          #line 827 
          bestslave = slave;
        }
    }
    #line 821 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 831 
  return bestslave;
}

#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_should_notify_peers(struct bonding *bond)
{
  #line 839 
  struct slave *________p1;
  #line 836 
  struct slave *slave;
  #line 838 
  rcu_read_lock();
  {
    #line 840 
    union __anonunion___u_1727 __u;
    #line 839 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 839 
    ________p1 = (__u.__val);
    {
      #line 839 
      bool __warned;
      #line 839 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 839 
        if (! __warned) {
          #line 839 
          if (rcu_read_lock_held() == 0) {
            #line 839 
            __warned = (_Bool)1;
            #line 839 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",839,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 839 
  slave = ________p1;
  #line 840 
  rcu_read_unlock();
  {
    #line 842 
    bool branch;
    #line 842 
    struct _ddebug __UNIQUE_ID_ddebug591 = {.modname = (char *)"bonding", .function = (char *)"bond_should_notify_peers", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"bond_should_notify_peers: slave %s\n", .lineno = (unsigned int)842U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 842 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug591.key.dd_key_false.key,(_Bool)0);
    #line 842 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 842 
      char *tmp_3;
      #line 842 
      if (slave != (struct slave *)0) 
                                      #line 842 
                                      tmp_3 = (char *)(& (slave->dev)->name); else 
                                                                    #line 842 
                                                                    tmp_3 = (char *)"NULL";
      #line 842 
      ;
      #line 842 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug591,bond->dev,(char *)"bond_should_notify_peers: slave %s\n",tmp_3);
    }
  }
  #line 845 
  if (slave == (struct slave *)0 || (unsigned int)bond->send_peer_notif == 0U) 
    #line 850 
    return (_Bool)0;
  else {
    #line 847 
    int __UNIQUE_ID___x592;
    #line 847 
    int tmp_5;
    {
      #line 847 
      __UNIQUE_ID___x592 = 1;
      #line 847 
      int __UNIQUE_ID___y593 = bond->params.peer_notif_delay;
      #line 847 
      if (__UNIQUE_ID___x592 > __UNIQUE_ID___y593) 
                                                   #line 847 
                                                   tmp_5 = __UNIQUE_ID___x592; else 
                                                                    #line 847 
                                                                    tmp_5 = __UNIQUE_ID___y593;
      }
    #line 846 
    ;
    #line 846 
    if ((int)bond->send_peer_notif % tmp_5 != 0) 
                                                 #line 850 
                                                 return (_Bool)0;
    else {
      #line 848 
      if (netif_carrier_ok(bond->dev)) {
        #line 848 
        if ((int)test_bit(3L,& (slave->dev)->state) != 0) 
                                                          #line 850 
                                                          return (_Bool)0;
      }
      else 
           #line 850 
           return (_Bool)0;
    }
  }
  #line 852 
  return (_Bool)1;
}

#line 870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_change_active_slave(struct bonding *bond, struct slave *new_active)
{
  #line 872 
  struct slave *old_active;
  {
    #line 874 
    bool __warned;
    #line 874 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 874 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 874 
      __warned = (_Bool)1;
      {
        #line 874 
        int __ret_warn_on = 1;
        #line 874 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 874 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",874);
          #line 875 
          ldv_inline_asm();
          #line 876 
          ldv_inline_asm();
        }
        #line 874 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 874 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  {
    #line 876 
    bool __warned_0;
    #line 876 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 876 
      if (! __warned_0) {
        #line 876 
        if (! lockdep_rtnl_is_held()) {
          #line 876 
          __warned_0 = (_Bool)1;
          #line 876 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",876,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 876 
  old_active = bond->curr_active_slave;
  #line 878 
  if (old_active == new_active) 
                                #line 879 
                                return;
  #line 881 
  if (new_active != (struct slave *)0) {
    #line 882 
    new_active->last_link_up = jiffies;
    #line 884 
    if ((int)new_active->link == 3) {
      #line 885 
      if ((int)bond_uses_primary(bond) != 0) 
                                             #line 886 
                                             netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name),(bond->params.updelay - new_active->delay) * bond->params.miimon);
      #line 890 
      new_active->delay = 0;
      #line 891 
      bond_set_slave_link_state(new_active,0,(_Bool)1);
      #line 894 
      if (bond->params.mode == 4) 
                                  #line 895 
                                  bond_3ad_handle_link_change(new_active,(char)0);
      #line 897 
      if ((int)bond_is_lb(bond) != 0) 
                                      #line 898 
                                      bond_alb_handle_link_change(bond,new_active,(char)0);
    }
    else {
      #line 900 
      if ((int)bond_uses_primary(bond) != 0) 
                                             #line 901 
                                             netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name));
    }
  }
  #line 906 
  if ((int)bond_uses_primary(bond) != 0) 
                                         #line 907 
                                         bond_hw_addr_swap(bond,new_active,old_active);
  #line 909 
  if ((int)bond_is_lb(bond) != 0) {
    #line 910 
    bond_alb_handle_active_change(bond,new_active);
    #line 911 
    if (old_active != (struct slave *)0) 
                                         #line 912 
                                         bond_set_slave_inactive_flags(old_active,(_Bool)1);
    #line 914 
    if (new_active != (struct slave *)0) 
                                         #line 915 
                                         bond_set_slave_active_flags(new_active,(_Bool)1);
  }
  else {
    #line 918 
    uintptr_t _r_a_p__v = (unsigned long)new_active;
    #line 920 
    ldv_inline_asm();
    {
      #line 919 
      union __anonunion___u_1731 __u = {.__val = (struct slave *)_r_a_p__v};
      #line 918 
      __write_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
      #line 918 
      struct slave *tmp_8 = __u.__val;
    }
  }
  #line 921 
  if (bond->params.mode == 1) {
    #line 922 
    if (old_active != (struct slave *)0) 
                                         #line 923 
                                         bond_set_slave_inactive_flags(old_active,(_Bool)1);
    #line 926 
    if (new_active != (struct slave *)0) {
      #line 927 
      bool should_notify_peers = (_Bool)0;
      #line 929 
      bond_set_slave_active_flags(new_active,(_Bool)1);
      #line 932 
      if (bond->params.fail_over_mac != 0) 
                                           #line 933 
                                           bond_do_fail_over_mac(bond,new_active,old_active);
      #line 936 
      if ((int)netif_running(bond->dev) != 0) {
        #line 939 
        int __UNIQUE_ID___x595;
        #line 939 
        int tmp_7;
        {
          #line 939 
          __UNIQUE_ID___x595 = 1;
          #line 939 
          int __UNIQUE_ID___y596 = bond->params.peer_notif_delay;
          #line 939 
          if (__UNIQUE_ID___x595 > __UNIQUE_ID___y596) 
                                                       #line 939 
                                                       tmp_7 = __UNIQUE_ID___x595; else 
                                                                    #line 939 
                                                                    tmp_7 = __UNIQUE_ID___y596;
          }
        #line 937 
        bond->send_peer_notif = (unsigned char)((int)bond->params.num_peer_notif * (int)((unsigned char)tmp_7));
        #line 940 
        should_notify_peers = bond_should_notify_peers(bond);
      }
      #line 944 
      call_netdevice_notifiers(13UL,bond->dev);
      #line 945 
      if ((int)should_notify_peers != 0) {
        #line 946 
        bond->send_peer_notif = (u8)((int)bond->send_peer_notif - 1);
        #line 947 
        call_netdevice_notifiers(19UL,bond->dev);
      }
    }
  }
  #line 958 
  if ((int)netif_running(bond->dev) != 0) 
    #line 958 
    if (bond->params.resend_igmp > 0) {
      #line 958 
      if ((int)bond_uses_primary(bond) != 0) {
        #line 959 
        if (new_active != (struct slave *)0) 
                                             #line 958 
                                             goto _LOR; else 
                                                             #line 958 
                                                             goto _LAND;
      }
      else {
        #line 958 
        _LAND: 
               #line 959 
        ;
        #line 959 
        if (bond->params.mode == 0) {
          #line 958 
          _LOR: {
                  #line 961 
                  bond->igmp_retrans = (unsigned char)bond->params.resend_igmp;
                  #line 962 
                  cif_queue_delayed_work_0(bond->wq,& bond->mcast_work,1UL);
                }
        }
      }
    }
  #line 964 
  return;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_select_active_slave(struct bonding *bond)
{
  #line 979 
  struct slave *best_slave;
  #line 980 
  int rv;
  {
    #line 982 
    bool __warned;
    #line 982 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 982 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 982 
      __warned = (_Bool)1;
      {
        #line 982 
        int __ret_warn_on = 1;
        #line 982 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 982 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",982);
          #line 983 
          ldv_inline_asm();
          #line 984 
          ldv_inline_asm();
        }
        #line 982 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 982 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 984 
  best_slave = bond_find_best_slave(bond);
  {
    #line 985 
    bool __warned_0;
    #line 985 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 985 
      if (! __warned_0) {
        #line 985 
        if (! lockdep_rtnl_is_held()) {
          #line 985 
          __warned_0 = (_Bool)1;
          #line 985 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",985,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 985 
  ;
  #line 985 
  if (bond->curr_active_slave != best_slave) {
    #line 986 
    bond_change_active_slave(bond,best_slave);
    #line 987 
    rv = bond_set_carrier(bond);
    #line 988 
    if (rv == 0) 
                 #line 989 
                 return;
    #line 991 
    if ((int)netif_carrier_ok(bond->dev) != 0) 
                                               #line 992 
                                               netdev_info(bond->dev,(char *)"active interface up!\n"); else 
                                                                    #line 994 
                                                                    netdev_info(bond->dev,(char *)"now running without any active interface!\n");
  }
  #line 996 
  return;
}

#line 999  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
__inline static int slave_enable_netpoll(struct slave *slave)
{
  #line 1001 
  struct netpoll *np;
  #line 1002 
  int err = 0;
  #line 1004 
  np = (struct netpoll *)kzalloc(80UL,3264U);
  #line 1005 
  err = -12;
  #line 1006 
  if (np == (struct netpoll *)0) 
                                 #line 1007 
                                 goto out;
  #line 1009 
  err = __netpoll_setup(np,slave->dev);
  #line 1010 
  if (err != 0) {
    #line 1011 
    kfree((void *)np);
    #line 1012 
    goto out;
  }
  #line 1014 
  slave->np = np;
  #line 1015 
  out: 
       #line 1015 
  ;
  #line 1016 
  return err;
}

#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
__inline static void slave_disable_netpoll(struct slave *slave)
{
  #line 1020 
  struct netpoll *np = slave->np;
  #line 1022 
  if (np == (struct netpoll *)0) 
                                 #line 1023 
                                 return;
  #line 1025 
  slave->np = (struct netpoll *)0;
  #line 1027 
  __netpoll_free(np);
  #line 1028 
  return;
}

#line 1030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_poll_controller(struct net_device *bond_dev)
{
  #line 1034 
  struct list_head *iter;
  #line 1035 
  struct ad_info ad_info;
  #line 1032 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1033 
  struct slave *slave = (struct slave *)0;
  #line 1037 
  if (bond->params.mode == 4) {
    #line 1038 
    if (bond_3ad_get_active_agg_info(bond,& ad_info) != 0) 
                                                           #line 1039 
                                                           return;
  }
  #line 1041 
  iter = & (bond->dev)->adj_list.lower;
  #line 1041 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 1041 
  while (slave != (struct slave *)0) {
    {
      #line 1042 
      if (! bond_slave_is_up(slave)) 
                                     #line 1043 
                                     goto __Cont;
      #line 1045 
      if (bond->params.mode == 4) {
        #line 1046 
        struct aggregator *agg = (slave->ad_info)->port.aggregator;
        #line 1049 
        if (agg != (struct aggregator *)0 && (int)agg->aggregator_identifier != (int)ad_info.aggregator_id) 
          #line 1051 
          goto __Cont;
      }
      #line 1054 
      netpoll_poll_dev(slave->dev);
    }
    #line 1041 
    __Cont: 
            #line 1041 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 1056 
  return;
}

#line 1058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_netpoll_cleanup(struct net_device *bond_dev)
{
  #line 1061 
  struct list_head *iter;
  #line 1062 
  struct slave *slave;
  #line 1060 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1064 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1064 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1064 
  while (slave != (struct slave *)0) {
    #line 1065 
    if ((int)bond_slave_is_up(slave) != 0) 
                                           #line 1066 
                                           slave_disable_netpoll(slave);
    #line 1064 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1067 
  return;
}

#line 1069  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_netpoll_setup(struct net_device *dev, struct netpoll_info *ni)
{
  #line 1072 
  struct list_head *iter;
  #line 1073 
  struct slave *slave;
  #line 1071 
  struct bonding *bond = netdev_priv(dev);
  #line 1074 
  int err = 0;
  #line 1076 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1076 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1076 
  while (slave != (struct slave *)0) {
    #line 1077 
    err = slave_enable_netpoll(slave);
    #line 1078 
    if (err != 0) {
      #line 1079 
      bond_netpoll_cleanup(dev);
      #line 1080 
      break;
    }
    #line 1076 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1083 
  return err;
}

#line 1100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_features_t bond_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 1104 
  struct list_head *iter;
  #line 1105 
  netdev_features_t mask;
  #line 1106 
  struct slave *slave;
  #line 1103 
  struct bonding *bond = netdev_priv(dev);
  #line 1108 
  mask = features;
  #line 1110 
  features &= 18446744072633777054ULL;
  #line 1111 
  features |= 1099513724928ULL;
  #line 1113 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1113 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1113 
  while (slave != (struct slave *)0) {
    #line 1114 
    features = netdev_increment_features(features,(slave->dev)->features,mask);
    #line 1113 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1118 
  features = netdev_add_tso_features(features,mask);
  #line 1120 
  return features;
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_compute_features(struct bonding *bond)
{
  #line 1141 
  struct list_head *iter;
  #line 1142 
  struct slave *slave;
  #line 1135 
  unsigned int dst_release_flag = 131104U;
  #line 1137 
  netdev_features_t vlan_features = 1933417ULL;
  #line 1138 
  netdev_features_t enc_features = 549757714441ULL;
  #line 1139 
  netdev_features_t mpls_features = 1900553ULL;
  #line 1140 
  struct net_device *bond_dev = bond->dev;
  #line 1143 
  unsigned short max_hard_header_len = (unsigned short)14U;
  #line 1144 
  unsigned int gso_max_size = 65536U;
  #line 1145 
  u16 gso_max_segs = (unsigned short)65535U;
  #line 1147 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) 
                                                        #line 1148 
                                                        goto done;
  #line 1149 
  vlan_features &= 1099513724928ULL;
  #line 1150 
  mpls_features &= 1099513724928ULL;
  #line 1152 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1152 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1152 
  while (slave != (struct slave *)0) {
    {
      #line 1169 
      u16 __UNIQUE_ID___x600;
      #line 1169 
      int tmp_4;
      #line 1168 
      unsigned int __UNIQUE_ID___x598;
      #line 1168 
      unsigned int tmp_2;
      #line 1153 
      vlan_features = netdev_increment_features(vlan_features,(slave->dev)->vlan_features,1933417ULL);
      #line 1156 
      enc_features = netdev_increment_features(enc_features,(slave->dev)->hw_enc_features,549757714441ULL);
      #line 1160 
      mpls_features = netdev_increment_features(mpls_features,(slave->dev)->mpls_features,1900553ULL);
      #line 1164 
      dst_release_flag = (slave->dev)->priv_flags & dst_release_flag;
      #line 1165 
      if ((int)(slave->dev)->hard_header_len > (int)max_hard_header_len) 
        #line 1166 
        max_hard_header_len = (slave->dev)->hard_header_len;
      {
        #line 1168 
        __UNIQUE_ID___x598 = gso_max_size;
        #line 1168 
        unsigned int __UNIQUE_ID___y599 = (slave->dev)->gso_max_size;
        #line 1168 
        if (__UNIQUE_ID___x598 < __UNIQUE_ID___y599) 
                                                     #line 1168 
                                                     tmp_2 = __UNIQUE_ID___x598; else 
                                                                    #line 1168 
                                                                    tmp_2 = __UNIQUE_ID___y599;
        }
      #line 1168 
      gso_max_size = tmp_2;
      {
        #line 1169 
        __UNIQUE_ID___x600 = gso_max_segs;
        #line 1169 
        u16 __UNIQUE_ID___y601 = (slave->dev)->gso_max_segs;
        #line 1169 
        if ((int)__UNIQUE_ID___x600 < (int)__UNIQUE_ID___y601) 
                                                               #line 1169 
                                                               tmp_4 = (int)__UNIQUE_ID___x600; else 
                                                                    #line 1169 
                                                                    tmp_4 = (int)__UNIQUE_ID___y601;
        }
      #line 1169 
      gso_max_segs = (unsigned short)tmp_4;
    }
    #line 1152 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1171 
  bond_dev->hard_header_len = max_hard_header_len;
  #line 1173 
  done: 
        #line 1173 
  ;
  #line 1174 
  bond_dev->vlan_features = vlan_features;
  #line 1175 
  bond_dev->hw_enc_features = enc_features | 17601040220288ULL;
  #line 1179 
  bond_dev->mpls_features = mpls_features;
  #line 1180 
  bond_dev->gso_max_segs = gso_max_segs;
  #line 1181 
  netif_set_gso_max_size(bond_dev,gso_max_size);
  #line 1183 
  bond_dev->priv_flags &= 4294967263U;
  #line 1184 
  if ((bond_dev->priv_flags & 131072U) != 0U && dst_release_flag == 131104U) 
    #line 1186 
    bond_dev->priv_flags |= 32U;
  #line 1188 
  netdev_change_features(bond_dev);
  #line 1189 
  return;
}

#line 1191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_setup_by_slave(struct net_device *bond_dev, struct net_device *slave_dev)
{
  #line 1194 
  bond_dev->header_ops = slave_dev->header_ops;
  #line 1196 
  bond_dev->type = slave_dev->type;
  #line 1197 
  bond_dev->hard_header_len = slave_dev->hard_header_len;
  #line 1198 
  bond_dev->addr_len = slave_dev->addr_len;
  #line 1200 
  memcpy((void *)(& bond_dev->broadcast),(void *)(& slave_dev->broadcast),(unsigned long)slave_dev->addr_len);
  #line 1202 
  return;
}

#line 1207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_should_deliver_exact_match(struct sk_buff *skb, struct slave *slave, struct bonding *bond)
{
  #line 1211 
  if ((int)bond_is_slave_inactive(slave) != 0) {
    #line 1212 
    if ((bond->params.mode == 6 && (unsigned int)skb->pkt_type != 1U) && (unsigned int)skb->pkt_type != 2U) 
      #line 1215 
      return (_Bool)0;
    #line 1216 
    return (_Bool)1;
  }
  #line 1218 
  return (_Bool)0;
}

#line 1221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static rx_handler_result_t bond_handle_frame(struct sk_buff **pskb)
{
  #line 1240 
  union __anonunion___u_1735 __u_0;
  #line 1236 
  void *________p1;
  #line 1224 
  struct slave *slave;
  #line 1225 
  struct bonding *bond;
  #line 1227 
  int (*recv_probe)(struct sk_buff *, struct bonding *, struct slave *);
  #line 1223 
  struct sk_buff *skb = *pskb;
  #line 1228 
  int ret = 1;
  #line 1230 
  skb = skb_share_check(skb,2592U);
  #line 1231 
  if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                #line 1232 
                                                return RX_HANDLER_CONSUMED;
  #line 1234 
  *pskb = skb;
  {
    #line 1237 
    union __anonunion___u_1733 __u;
    #line 1236 
    __read_once_size((void *)(& (skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev)->rx_handler_data),(void *)(& __u.__c),8);
    #line 1236 
    ________p1 = (__u.__val);
    {
      #line 1236 
      bool __warned;
      #line 1236 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 1236 
        if (! __warned) {
          #line 1236 
          if (rcu_read_lock_held() == 0) {
            #line 1236 
            __warned = (_Bool)1;
            #line 1236 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",1236,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 1236 
  slave = (struct slave *)________p1;
  #line 1237 
  bond = slave->bond;
  #line 1239 
  __read_once_size((void *)(& bond->recv_probe),(void *)(& __u_0.__c),8);
  #line 1239 
  recv_probe = (__u_0.__val);
  #line 1240 
  if (recv_probe != (int (*)(struct sk_buff *, struct bonding *, struct slave *))0) {
    #line 1241 
    ret = (*recv_probe)(skb,bond,slave);
    #line 1242 
    if (ret == 0) {
      #line 1243 
      consume_skb(skb);
      #line 1244 
      return (enum rx_handler_result)ret;
    }
  }
  #line 1259 
  if ((int)bond_should_deliver_exact_match(skb,slave,bond) != 0) {
    #line 1260 
    if ((int)is_link_local_ether_addr((u8 *)(& eth_hdr(skb)->h_dest)) != 0) 
      #line 1261 
      return RX_HANDLER_PASS;
    #line 1262 
    return RX_HANDLER_EXACT;
  }
  #line 1265 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = bond->dev;
  #line 1267 
  if ((bond->params.mode == 6 && ((bond->dev)->priv_flags & 512U) != 0U) && (unsigned int)skb->pkt_type == 0U) {
    #line 1271 
    ;
    #line 1271 
    ;
    #line 1271 
    if ((long)(skb_cow_head(skb,(unsigned int)(skb->data - skb_mac_header(skb))) != 0) != 0L) {
      #line 1273 
      kfree_skb(skb);
      #line 1274 
      return RX_HANDLER_CONSUMED;
    }
    #line 1276 
    ;
    #line 1276 
    ;
    #line 1276 
    bond_hw_addr_copy((u8 *)(& eth_hdr(skb)->h_dest),(bond->dev)->dev_addr,(unsigned int)(bond->dev)->addr_len);
  }
  #line 1280 
  return (enum rx_handler_result)ret;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static enum netdev_lag_tx_type bond_lag_tx_type(struct bonding *bond)
{
  #line 1285 
  switch (bond->params.mode) {
    #line 1286 
    case 0: 
            #line 1286 
    ;
    #line 1287 
    return NETDEV_LAG_TX_TYPE_ROUNDROBIN;
    #line 1288 
    case 1: 
            #line 1288 
    ;
    #line 1289 
    return NETDEV_LAG_TX_TYPE_ACTIVEBACKUP;
    #line 1290 
    case 3: 
            #line 1290 
    ;
    #line 1291 
    return NETDEV_LAG_TX_TYPE_BROADCAST;
    #line 1292 
    case 2: 
            #line 1292 
    ;
    #line 1293 
    case 4: 
            #line 1293 
    ;
    #line 1294 
    return NETDEV_LAG_TX_TYPE_HASH;
    #line 1295 
    default: 
             #line 1295 
    ;
    #line 1296 
    return NETDEV_LAG_TX_TYPE_UNKNOWN;
  }
}

#line 1300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static enum netdev_lag_hash bond_lag_hash_type(struct bonding *bond, enum netdev_lag_tx_type type)
{
  #line 1303 
  if (type != (unsigned int)NETDEV_LAG_TX_TYPE_HASH) 
                                                     #line 1304 
                                                     return NETDEV_LAG_HASH_NONE;
  #line 1306 
  switch (bond->params.xmit_policy) {
    #line 1307 
    case 0: 
            #line 1307 
    ;
    #line 1308 
    return NETDEV_LAG_HASH_L2;
    #line 1309 
    case 1: 
            #line 1309 
    ;
    #line 1310 
    return NETDEV_LAG_HASH_L34;
    #line 1311 
    case 2: 
            #line 1311 
    ;
    #line 1312 
    return NETDEV_LAG_HASH_L23;
    #line 1313 
    case 3: 
            #line 1313 
    ;
    #line 1314 
    return NETDEV_LAG_HASH_E23;
    #line 1315 
    case 4: 
            #line 1315 
    ;
    #line 1316 
    return NETDEV_LAG_HASH_E34;
    #line 1317 
    default: 
             #line 1317 
    ;
    #line 1318 
    return NETDEV_LAG_HASH_UNKNOWN;
  }
}

#line 1322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_master_upper_dev_link(struct bonding *bond, struct slave *slave, struct netlink_ext_ack *extack)
{
  #line 1325 
  struct netdev_lag_upper_info lag_upper_info;
  #line 1326 
  enum netdev_lag_tx_type type;
  #line 1328 
  type = bond_lag_tx_type(bond);
  #line 1329 
  lag_upper_info.tx_type = type;
  #line 1330 
  lag_upper_info.hash_type = bond_lag_hash_type(bond,type);
  #line 1332 
  return netdev_master_upper_dev_link(slave->dev,bond->dev,(void *)slave,
                                   (void *)(& lag_upper_info),extack);
}

#line 1336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_upper_dev_unlink(struct bonding *bond, struct slave *slave)
{
  #line 1338 
  netdev_upper_dev_unlink(slave->dev,bond->dev);
  #line 1339 
  (slave->dev)->flags &= 4294965247U;
  #line 1340 
  return;
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct slave *bond_alloc_slave(struct bonding *bond)
{
  #line 1344 
  struct slave *slave = (struct slave *)0;
  #line 1346 
  slave = (struct slave *)kzalloc(880UL,3264U);
  #line 1347 
  if (slave == (struct slave *)0) 
                                  #line 1348 
                                  return (struct slave *)0;
  #line 1350 
  if (bond->params.mode == 4) {
    #line 1351 
    slave->ad_info = (struct ad_slave_info *)kzalloc(392UL,3264U);
    #line 1353 
    if (slave->ad_info == (struct ad_slave_info *)0) {
      #line 1354 
      kfree((void *)slave);
      #line 1355 
      return (struct slave *)0;
    }
  }
  {
    #line 1358 
    struct lock_class_key __key;
    #line 1358 
    __init_work(& slave->notify_work.work,0);
    #line 1358 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 1358 
    slave->notify_work.work.data = __constr_expr_44;
    #line 1358 
    lockdep_init_map(& slave->notify_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 1358 
    INIT_LIST_HEAD(& slave->notify_work.work.entry);
    #line 1358 
    slave->notify_work.work.func = & bond_netdev_notify_work;
  }
  {
    #line 1358 
    struct lock_class_key __key_0;
    #line 1358 
    init_timer_key(& slave->notify_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&slave->notify_work)->timer",& __key_0);
  }
  #line 1360 
  return slave;
}

#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_free_slave(struct slave *slave)
{
  #line 1365 
  struct bonding *bond = bond_get_bond_by_slave(slave);
  #line 1367 
  cancel_delayed_work_sync(& slave->notify_work);
  #line 1368 
  if (bond->params.mode == 4) 
                              #line 1369 
                              kfree((void *)slave->ad_info);
  #line 1371 
  kfree((void *)slave);
  #line 1372 
  return;
}

#line 1374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_fill_ifbond(struct bonding *bond, struct ifbond *info)
{
  #line 1376 
  info->bond_mode = bond->params.mode;
  #line 1377 
  info->miimon = bond->params.miimon;
  #line 1378 
  info->num_slaves = bond->slave_cnt;
  #line 1379 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_fill_ifslave(struct slave *slave, struct ifslave *info)
{
  #line 1383 
  strcpy((char *)(& info->slave_name),(char *)(& (slave->dev)->name));
  #line 1384 
  info->link = slave->link;
  #line 1385 
  info->state = (signed char)bond_slave_state(slave);
  #line 1386 
  info->link_failure_count = slave->link_failure_count;
  #line 1387 
  return;
}

#line 1389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_netdev_notify_work(struct work_struct *_work)
{
  #line 1391 
  void *__mptr;
  #line 1391 
  __mptr = (void *)_work;
  #line 1391 
  struct slave *slave = ((struct slave *)(__mptr + 18446744073709551368U));
  #line 1394 
  if (rtnl_trylock() != 0) {
    #line 1395 
    struct netdev_bonding_info binfo;
    #line 1397 
    bond_fill_ifslave(slave,& binfo.slave);
    #line 1398 
    bond_fill_ifbond(slave->bond,& binfo.master);
    #line 1399 
    netdev_bonding_info_change(slave->dev,& binfo);
    #line 1400 
    rtnl_unlock();
  }
  else 
       #line 1402 
       cif_queue_delayed_work_0((slave->bond)->wq,& slave->notify_work,1UL);
  #line 1403 
  return;
}

#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_queue_slave_event(struct slave *slave)
{
  #line 1408 
  cif_queue_delayed_work_0((slave->bond)->wq,& slave->notify_work,0UL);
  #line 1409 
  return;
}

#line 1411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_lower_state_changed(struct slave *slave)
{
  #line 1413 
  struct netdev_lag_lower_state_info info;
  #line 1415 
  info.link_up = (unsigned char)((unsigned int)slave->link <= 1U);
  #line 1417 
  info.tx_enabled = (unsigned char)bond_is_active_slave(slave);
  #line 1418 
  netdev_lower_state_changed(slave->dev,(void *)(& info));
  #line 1419 
  return;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_enslave(struct net_device *bond_dev, struct net_device *slave_dev, struct netlink_ext_ack *extack)
{
  #line 1853 
  struct slave *_________p1_1;
  #line 1851 
  struct slave *_________p1_0;
  #line 1427 
  struct slave *prev_slave;
  #line 1428 
  struct __kernel_sockaddr_storage ss;
  #line 1429 
  int link_reporting;
  #line 1430 
  int i;
  #line 1831 
  char *tmp_32;
  #line 1831 
  char *tmp_34;
  #line 1425 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1426 
  struct net_device_ops *slave_ops = slave_dev->netdev_ops;
  #line 1427 
  struct slave *new_slave = (struct slave *)0;
  #line 1430 
  int res = 0;
  #line 1432 
  if ((bond->params.use_carrier == 0 && (slave_dev->ethtool_ops)->get_link == (u32 (*)(struct net_device *))0) && slave_ops->ndo_do_ioctl == (int (*)(struct net_device *, struct ifreq *, int ))0) 
    #line 1435 
    netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
  #line 1439 
  if ((int)netdev_is_rx_handler_busy(slave_dev) != 0) {
    {
      #line 1440 
      char __msg[40U] = {(char)'D', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)' ', (char)'i', (char)'s', (char)' ', (char)'i', (char)'n', (char)' ', (char)'u', (char)'s', (char)'e', (char)' ', (char)'a', (char)'n', (char)'d', (char)' ', (char)'c', (char)'a', (char)'n', (char)'n', (char)'o', (char)'t', (char)' ', (char)'b', (char)'e', (char)' ', (char)'e', (char)'n', (char)'s', (char)'l', (char)'a', (char)'v', (char)'e', (char)'d', (char)'\000'};
      #line 1440 
      struct netlink_ext_ack *__extack = extack;
      #line 1440 
      if (__extack != (struct netlink_ext_ack *)0) 
                                                   #line 1440 
                                                   __extack->_msg = (char *)(& __msg);
    }
    #line 1441 
    netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    #line 1443 
    return -16;
  }
  #line 1446 
  if (bond_dev == slave_dev) {
    {
      #line 1447 
      char __msg_0[31U] = {(char)'C', (char)'a', (char)'n', (char)'n', (char)'o', (char)'t', (char)' ', (char)'e', (char)'n', (char)'s', (char)'l', (char)'a', (char)'v', (char)'e', (char)' ', (char)'b', (char)'o', (char)'n', (char)'d', (char)' ', (char)'t', (char)'o', (char)' ', (char)'i', (char)'t', (char)'s', (char)'e', (char)'l', (char)'f', (char)'.', (char)'\000'};
      #line 1447 
      struct netlink_ext_ack *__extack_0 = extack;
      #line 1447 
      if (__extack_0 != (struct netlink_ext_ack *)0) 
                                                     #line 1447 
                                                     __extack_0->_msg = (char *)(& __msg_0);
    }
    #line 1448 
    netdev_err(bond_dev,(char *)"cannot enslave bond to itself.\n");
    #line 1449 
    return -1;
  }
  #line 1454 
  if ((slave_dev->features & 1024ULL) != 0ULL) {
    {
      #line 1455 
      bool branch;
      #line 1455 
      struct _ddebug __UNIQUE_ID_ddebug602 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1455U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1455 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug602.key.dd_key_false.key,(_Bool)0);
      #line 1455 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1455 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug602,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    }
    #line 1456 
    if ((int)vlan_uses_dev(bond_dev) != 0) {
      {
        #line 1457 
        char __msg_1[60U] = {(char)'C', (char)'a', (char)'n', (char)' ', (char)'n', (char)'o', (char)'t', (char)' ', (char)'e', (char)'n', (char)'s', (char)'l', (char)'a', (char)'v', (char)'e', (char)' ', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'c', (char)'h', (char)'a', (char)'l', (char)'l', (char)'e', (char)'n', (char)'g', (char)'e', (char)'d', (char)' ', (char)'d', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)' ', (char)'t', (char)'o', (char)' ', (char)'V', (char)'L', (char)'A', (char)'N', (char)' ', (char)'e', (char)'n', (char)'a', (char)'b', (char)'l', (char)'e', (char)'d', (char)' ', (char)'b', (char)'o', (char)'n', (char)'d', (char)'\000'};
        #line 1457 
        struct netlink_ext_ack *__extack_1 = extack;
        #line 1457 
        if (__extack_1 != (struct netlink_ext_ack *)0) 
                                                       #line 1457 
                                                       __extack_1->_msg = (char *)(& __msg_1);
      }
      #line 1458 
      netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
      #line 1459 
      return -1;
    }
    else 
         #line 1461 
         netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
  }
  else {
    #line 1464 
    bool branch_0;
    #line 1464 
    struct _ddebug __UNIQUE_ID_ddebug603 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1464U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1464 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug603.key.dd_key_false.key,(_Bool)0);
    #line 1464 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1464 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug603,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
  }
  #line 1472 
  if ((slave_dev->flags & 1U) != 0U) {
    {
      #line 1473 
      char __msg_2[36U] = {(char)'D', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)' ', (char)'c', (char)'a', (char)'n', (char)' ', (char)'n', (char)'o', (char)'t', (char)' ', (char)'b', (char)'e', (char)' ', (char)'e', (char)'n', (char)'s', (char)'l', (char)'a', (char)'v', (char)'e', (char)'d', (char)' ', (char)'w', (char)'h', (char)'i', (char)'l', (char)'e', (char)' ', (char)'u', (char)'p', (char)'\000'};
      #line 1473 
      struct netlink_ext_ack *__extack_2 = extack;
      #line 1473 
      if (__extack_2 != (struct netlink_ext_ack *)0) 
                                                     #line 1473 
                                                     __extack_2->_msg = (char *)(& __msg_2);
    }
    #line 1474 
    netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    #line 1475 
    return -1;
  }
  #line 1485 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) {
    #line 1486 
    if ((int)bond_dev->type != (int)slave_dev->type) {
      {
        #line 1487 
        bool branch_1;
        #line 1487 
        struct _ddebug __UNIQUE_ID_ddebug604 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1487U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1487 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug604.key.dd_key_false.key,(_Bool)0);
        #line 1487 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 1487 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug604,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(int)bond_dev->type,(int)slave_dev->type);
      }
      #line 1490 
      res = call_netdevice_notifiers(15UL,bond_dev);
      #line 1492 
      res = notifier_to_errno(res);
      #line 1493 
      if (res != 0) {
        #line 1494 
        netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
        #line 1495 
        return -16;
      }
      #line 1499 
      dev_uc_flush(bond_dev);
      #line 1500 
      dev_mc_flush(bond_dev);
      #line 1502 
      if ((unsigned int)slave_dev->type != 1U) 
                                               #line 1503 
                                               bond_setup_by_slave(bond_dev,slave_dev);
      else {
        #line 1505 
        ether_setup(bond_dev);
        #line 1506 
        bond_dev->priv_flags &= 4294965247U;
      }
      #line 1509 
      call_netdevice_notifiers(16UL,bond_dev);
    }
  }
  else 
    #line 1512 
    if ((int)bond_dev->type != (int)slave_dev->type) {
      {
        #line 1513 
        char __msg_3[43U] = {(char)'D', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)' ', (char)'t', (char)'y', (char)'p', (char)'e', (char)' ', (char)'i', (char)'s', (char)' ', (char)'d', (char)'i', (char)'f', (char)'f', (char)'e', (char)'r', (char)'e', (char)'n', (char)'t', (char)' ', (char)'f', (char)'r', (char)'o', (char)'m', (char)' ', (char)'o', (char)'t', (char)'h', (char)'e', (char)'r', (char)' ', (char)'s', (char)'l', (char)'a', (char)'v', (char)'e', (char)'s', (char)'\000'};
        #line 1513 
        struct netlink_ext_ack *__extack_3 = extack;
        #line 1513 
        if (__extack_3 != (struct netlink_ext_ack *)0) 
                                                       #line 1513 
                                                       __extack_3->_msg = (char *)(& __msg_3);
      }
      #line 1514 
      netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(int)slave_dev->type,(int)bond_dev->type);
      #line 1516 
      return -22;
    }
  #line 1519 
  if ((unsigned int)slave_dev->type == 32U && bond->params.mode != 1) {
    {
      #line 1521 
      char __msg_4[59U] = {(char)'O', (char)'n', (char)'l', (char)'y', (char)' ', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'e', (char)'-', (char)'b', (char)'a', (char)'c', (char)'k', (char)'u', (char)'p', (char)' ', (char)'m', (char)'o', (char)'d', (char)'e', (char)' ', (char)'i', (char)'s', (char)' ', (char)'s', (char)'u', (char)'p', (char)'p', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)' ', (char)'f', (char)'o', (char)'r', (char)' ', (char)'i', (char)'n', (char)'f', (char)'i', (char)'n', (char)'i', (char)'b', (char)'a', (char)'n', (char)'d', (char)' ', (char)'s', (char)'l', (char)'a', (char)'v', (char)'e', (char)'s', (char)'\000'};
      #line 1521 
      struct netlink_ext_ack *__extack_4 = extack;
      #line 1521 
      if (__extack_4 != (struct netlink_ext_ack *)0) 
                                                     #line 1521 
                                                     __extack_4->_msg = (char *)(& __msg_4);
    }
    #line 1522 
    netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(int)slave_dev->type);
    #line 1524 
    res = -95;
    #line 1525 
    goto err_undo_flags;
  }
  #line 1528 
  if (slave_ops->ndo_set_mac_address == (int (*)(struct net_device *, void *))0 || (unsigned int)slave_dev->type == 32U) {
    #line 1530 
    netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    #line 1531 
    if (bond->params.mode == 1 && bond->params.fail_over_mac != 1) {
      #line 1533 
      if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) {
        #line 1534 
        bond->params.fail_over_mac = 1;
        #line 1535 
        netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
      }
      else {
        {
          #line 1537 
          char __msg_5[94U] = {(char)'S', (char)'l', (char)'a', (char)'v', (char)'e', (char)' ', (char)'d', (char)'e', (char)'v', (char)'i', (char)'c', (char)'e', (char)' ', (char)'d', (char)'o', (char)'e', (char)'s', (char)' ', (char)'n', (char)'o', (char)'t', (char)' ', (char)'s', (char)'u', (char)'p', (char)'p', (char)'o', (char)'r', (char)'t', (char)' ', (char)'s', (char)'e', (char)'t', (char)'t', (char)'i', (char)'n', (char)'g', (char)' ', (char)'t', (char)'h', (char)'e', (char)' ', (char)'M', (char)'A', (char)'C', (char)' ', (char)'a', (char)'d', (char)'d', (char)'r', (char)'e', (char)'s', (char)'s', (char)',', (char)' ', (char)'b', (char)'u', (char)'t', (char)' ', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'m', (char)'a', (char)'c', (char)' ', (char)'i', (char)'s', (char)' ', (char)'n', (char)'o', (char)'t', (char)' ', (char)'s', (char)'e', (char)'t', (char)' ', (char)'t', (char)'o', (char)' ', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'e', (char)'\000'};
          #line 1537 
          struct netlink_ext_ack *__extack_5 = extack;
          #line 1537 
          if (__extack_5 != (struct netlink_ext_ack *)0) 
                                                         #line 1537 
                                                         __extack_5->_msg = (char *)(& __msg_5);
        }
        #line 1538 
        netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
        #line 1539 
        res = -95;
        #line 1540 
        goto err_undo_flags;
      }
    }
  }
  #line 1545 
  call_netdevice_notifiers(20UL,slave_dev);
  #line 1550 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) 
    #line 1550 
    if ((unsigned int)(bond->dev)->addr_assign_type == 1U) {
      #line 1552 
      res = bond_set_dev_addr(bond->dev,slave_dev);
      #line 1553 
      if (res != 0) 
                    #line 1554 
                    goto err_undo_flags;
    }
  #line 1557 
  new_slave = bond_alloc_slave(bond);
  #line 1558 
  if (new_slave == (struct slave *)0) {
    #line 1559 
    res = -12;
    #line 1560 
    goto err_undo_flags;
  }
  #line 1563 
  new_slave->bond = bond;
  #line 1564 
  new_slave->dev = slave_dev;
  #line 1568 
  new_slave->queue_id = (unsigned short)0U;
  #line 1571 
  new_slave->original_mtu = slave_dev->mtu;
  #line 1572 
  res = dev_set_mtu(slave_dev,(int)(bond->dev)->mtu);
  #line 1573 
  if (res != 0) {
    #line 1574 
    netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),res);
    #line 1575 
    goto err_free;
  }
  #line 1582 
  bond_hw_addr_copy((u8 *)(& new_slave->perm_hwaddr),slave_dev->dev_addr,(unsigned int)slave_dev->addr_len);
  #line 1585 
  if (bond->params.fail_over_mac == 0 || bond->params.mode != 1) {
    #line 1590 
    memcpy((void *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(void *)bond_dev->dev_addr,(unsigned long)bond_dev->addr_len);
    #line 1591 
    ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = slave_dev->type;
    #line 1592 
    res = dev_set_mac_address(slave_dev,(struct sockaddr *)(& ss),extack);
    #line 1594 
    if (res != 0) {
      #line 1595 
      netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),res);
      #line 1596 
      goto err_restore_mtu;
    }
  }
  #line 1601 
  slave_dev->flags |= 2048U;
  #line 1604 
  res = dev_open(slave_dev,extack);
  #line 1605 
  if (res != 0) {
    #line 1606 
    netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    #line 1607 
    goto err_restore_mac;
  }
  #line 1610 
  slave_dev->priv_flags |= 4U;
  #line 1612 
  dev_get_stats(new_slave->dev,& new_slave->slave_stats);
  #line 1614 
  if ((int)bond_is_lb(bond) != 0) {
    #line 1618 
    res = bond_alb_init_slave(bond,new_slave);
    #line 1619 
    if (res != 0) 
                  #line 1620 
                  goto err_close;
  }
  #line 1623 
  res = vlan_vids_add_by_dev(slave_dev,bond_dev);
  #line 1624 
  if (res != 0) {
    #line 1625 
    netdev_err(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    #line 1626 
    goto err_close;
  }
  #line 1629 
  if (list_empty_0(& (bond->dev)->adj_list.lower) == 0) 
                                                        #line 1629 
                                                        prev_slave = (struct slave *)netdev_adjacent_get_private((bond->dev)->adj_list.lower.prev); else 
                                                                    #line 1629 
                                                                    prev_slave = (struct slave *)0;
  #line 1631 
  new_slave->delay = 0;
  #line 1632 
  new_slave->link_failure_count = 0U;
  #line 1634 
  if (bond_update_speed_duplex(new_slave) != 0) {
    #line 1634 
    if ((int)bond_needs_speed_duplex(bond) != 0) 
                                                 #line 1636 
                                                 new_slave->link = (signed char)2;
  }
  #line 1638 
  new_slave->last_rx = (jiffies - msecs_to_jiffies((unsigned int)bond->params.arp_interval)) + 18446744073709551615UL;
  #line 1640 
  i = 0;
  #line 1640 
  while (i <= 15) {
    #line 1641 
    new_slave->target_last_arp_rx[i] = new_slave->last_rx;
    #line 1640 
    i ++;
  }
  #line 1643 
  if (bond->params.miimon != 0 && bond->params.use_carrier == 0) {
    #line 1644 
    link_reporting = bond_check_dev_link(bond,slave_dev,1);
    #line 1646 
    if (link_reporting == -1 && bond->params.arp_interval == 0) 
                                                                #line 1655 
                                                                netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    else 
      #line 1656 
      if (link_reporting == -1) 
                                #line 1658 
                                netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
  }
  #line 1663 
  new_slave->link = (signed char)(-1);
  #line 1664 
  if (bond->params.miimon != 0) {
    #line 1665 
    if (bond_check_dev_link(bond,slave_dev,0) == 4) 
      #line 1666 
      if (bond->params.updelay != 0) {
        #line 1667 
        bond_set_slave_link_state(new_slave,3,(_Bool)1);
        #line 1670 
        new_slave->delay = bond->params.updelay;
      }
      else 
           #line 1672 
           bond_set_slave_link_state(new_slave,0,(_Bool)1);
    else 
         #line 1677 
         bond_set_slave_link_state(new_slave,2,(_Bool)1);
  }
  else 
    #line 1680 
    if (bond->params.arp_interval != 0) {
      #line 1681 
      int tmp_16;
      #line 1681 
      if ((int)netif_carrier_ok(slave_dev) != 0) 
                                                 #line 1681 
                                                 tmp_16 = 0; else 
                                                                  #line 1681 
                                                                  tmp_16 = 2;
      #line 1681 
      ;
      #line 1681 
      bond_set_slave_link_state(new_slave,tmp_16,(_Bool)1);
    }
    else 
         #line 1686 
         bond_set_slave_link_state(new_slave,0,(_Bool)1);
  #line 1690 
  if ((int)new_slave->link != 2) 
                                 #line 1691 
                                 new_slave->last_link_up = jiffies;
  {
    #line 1692 
    bool branch_2;
    #line 1692 
    struct _ddebug __UNIQUE_ID_ddebug605 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1692U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1692 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug605.key.dd_key_false.key,(_Bool)0);
    #line 1692 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 1692 
      char *tmp_17;
      #line 1692 
      char *tmp_18;
      #line 1692 
      if ((int)new_slave->link != 2) {
        #line 1692 
        if ((int)new_slave->link == 0) 
                                       #line 1692 
                                       tmp_17 = (char *)"UP"; else 
                                                                   #line 1692 
                                                                   tmp_17 = (char *)"BACK";
        #line 1692 
        tmp_18 = tmp_17;
      }
      else 
           #line 1692 
           tmp_18 = (char *)"DOWN";
      #line 1692 
      ;
      #line 1692 
      ;
      #line 1692 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug605,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),tmp_18);
    }
  }
  #line 1696 
  if ((int)bond_uses_primary(bond) != 0) 
    #line 1696 
    if ((int)bond->params.primary[0] != 0) {
      #line 1698 
      if (cif_strcmp((char *)(& bond->params.primary),
                    (char *)(& (new_slave->dev)->name)) == 0) {
        {
          #line 1699 
          uintptr_t _r_a_p__v = (unsigned long)new_slave;
          #line 1701 
          ldv_inline_asm();
          {
            #line 1700 
            union __anonunion___u_1739 __u = {.__val = (struct slave *)_r_a_p__v};
            #line 1699 
            __write_once_size((void *)(& bond->primary_slave),(void *)(& __u.__c),8);
            #line 1699 
            struct slave *tmp_22 = __u.__val;
          }
        }
        #line 1700 
        bond->force_primary = (_Bool)1;
      }
    }
  #line 1704 
  switch (bond->params.mode) {
    #line 1744 
    struct slave *_________p1;
    #line 1705 
    case 1: 
            #line 1705 
    ;
    #line 1706 
    bond_set_slave_inactive_flags(new_slave,(_Bool)1);
    #line 1708 
    break;
    #line 1709 
    case 4: 
            #line 1709 
    ;
    #line 1714 
    bond_set_slave_inactive_flags(new_slave,(_Bool)1);
    #line 1716 
    if (prev_slave == (struct slave *)0) {
      #line 1717 
      (new_slave->ad_info)->id = (unsigned short)1U;
      #line 1721 
      bond_3ad_initialize(bond,(unsigned short)10);
    }
    else 
         #line 1723 
         (new_slave->ad_info)->id = (unsigned short)((unsigned int)(prev_slave->ad_info)->id + 1U);
    #line 1727 
    bond_3ad_bind_slave(new_slave);
    #line 1728 
    break;
    #line 1729 
    case 5: 
            #line 1729 
    ;
    #line 1730 
    case 6: 
            #line 1730 
    ;
    #line 1731 
    bond_set_active_slave(new_slave);
    #line 1732 
    bond_set_slave_inactive_flags(new_slave,(_Bool)1);
    #line 1733 
    break;
    #line 1734 
    default: 
             #line 1734 
    ;
    {
      #line 1735 
      bool branch_3;
      #line 1735 
      struct _ddebug __UNIQUE_ID_ddebug606 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1735U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1735 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug606.key.dd_key_false.key,(_Bool)0);
      #line 1735 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 1735 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug606,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    }
    #line 1738 
    bond_set_active_slave(new_slave);
    {
      #line 1745 
      union __anonunion___u_1745 __u_1;
      #line 1744 
      __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_1.__c),8);
      #line 1744 
      _________p1 = (__u_1.__val);
      }
    #line 1744 
    if (_________p1 == (struct slave *)0) 
      #line 1744 
      if ((int)new_slave->link == 0) {
        #line 1746 
        uintptr_t _r_a_p__v_0 = (unsigned long)new_slave;
        #line 1748 
        ldv_inline_asm();
        {
          #line 1747 
          union __anonunion___u_1743 __u_0 = {.__val = (struct slave *)_r_a_p__v_0};
          #line 1746 
          __write_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_0.__c),8);
          #line 1746 
          struct slave *tmp_26 = __u_0.__val;
        }
      }
    #line 1748 
    break;
  }
  #line 1752 
  if ((bond->dev)->npinfo != (struct netpoll_info *)0) {
    #line 1753 
    if (slave_enable_netpoll(new_slave) != 0) {
      #line 1754 
      netdev_info(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
      #line 1755 
      res = -16;
      #line 1756 
      goto err_detach;
    }
  }
  #line 1761 
  if ((bond_dev->features & 32768ULL) == 0ULL) 
                                               #line 1762 
                                               dev_disable_lro(slave_dev);
  #line 1764 
  res = netdev_rx_handler_register(slave_dev,& bond_handle_frame,(void *)new_slave);
  #line 1766 
  if (res != 0) {
    {
      #line 1767 
      bool branch_4;
      #line 1767 
      struct _ddebug __UNIQUE_ID_ddebug607 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1767U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1767 
      branch_4 = arch_static_branch(& __UNIQUE_ID_ddebug607.key.dd_key_false.key,(_Bool)0);
      #line 1767 
      if ((long)((long)((int)branch_4 != 0)) != 0L) 
                                                    #line 1767 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug607,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),res);
    }
    #line 1768 
    goto err_detach;
  }
  #line 1771 
  res = bond_master_upper_dev_link(bond,new_slave,extack);
  #line 1772 
  if (res != 0) {
    {
      #line 1773 
      bool branch_5;
      #line 1773 
      struct _ddebug __UNIQUE_ID_ddebug608 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1773U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1773 
      branch_5 = arch_static_branch(& __UNIQUE_ID_ddebug608.key.dd_key_false.key,(_Bool)0);
      #line 1773 
      if ((long)((long)((int)branch_5 != 0)) != 0L) 
                                                    #line 1773 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug608,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),res);
    }
    #line 1774 
    goto err_unregister;
  }
  #line 1777 
  res = bond_sysfs_slave_add(new_slave);
  #line 1778 
  if (res != 0) {
    {
      #line 1779 
      bool branch_6;
      #line 1779 
      struct _ddebug __UNIQUE_ID_ddebug609 = {.modname = (char *)"bonding", .function = (char *)"bond_enslave", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1779U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1779 
      branch_6 = arch_static_branch(& __UNIQUE_ID_ddebug609.key.dd_key_false.key,(_Bool)0);
      #line 1779 
      if ((long)((long)((int)branch_6 != 0)) != 0L) 
                                                    #line 1779 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug609,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),res);
    }
    #line 1780 
    goto err_upper_unlink;
  }
  #line 1786 
  if (! bond_uses_primary(bond)) {
    #line 1788 
    if ((bond_dev->flags & 256U) != 0U) {
      #line 1789 
      res = dev_set_promiscuity(slave_dev,1);
      #line 1790 
      if (res != 0) 
                    #line 1791 
                    goto err_sysfs_del;
    }
    #line 1795 
    if ((bond_dev->flags & 512U) != 0U) {
      #line 1796 
      res = dev_set_allmulti(slave_dev,1);
      #line 1797 
      if (res != 0) {
        #line 1798 
        if ((bond_dev->flags & 256U) != 0U) 
                                            #line 1799 
                                            dev_set_promiscuity(slave_dev,-1);
        #line 1800 
        goto err_sysfs_del;
      }
    }
    #line 1804 
    netif_addr_lock_bh(bond_dev);
    #line 1805 
    dev_mc_sync_multiple(slave_dev,bond_dev);
    #line 1806 
    dev_uc_sync_multiple(slave_dev,bond_dev);
    #line 1807 
    netif_addr_unlock_bh(bond_dev);
    #line 1809 
    if (bond->params.mode == 4) {
      #line 1811 
      u8 lacpdu_multicast[6U] = {(unsigned char)1U, (unsigned char)128U, (unsigned char)194U, (unsigned char)0U, (unsigned char)0U, (unsigned char)2U};
      #line 1813 
      dev_mc_add(slave_dev,(unsigned char *)(& lacpdu_multicast));
    }
  }
  #line 1817 
  (bond->slave_cnt) ++;
  #line 1818 
  bond_compute_features(bond);
  #line 1819 
  bond_set_carrier(bond);
  #line 1821 
  if ((int)bond_uses_primary(bond) != 0) {
    #line 1822 
    block_netpoll_tx();
    #line 1823 
    bond_select_active_slave(bond);
    #line 1824 
    unblock_netpoll_tx();
  }
  #line 1827 
  if ((int)bond_mode_can_use_xmit_hash(bond) != 0) 
                                                   #line 1828 
                                                   bond_update_slave_arr(bond,(struct slave *)0);
  #line 1831 
  if ((int)new_slave->link != 2) 
                                 #line 1831 
                                 tmp_32 = (char *)"an up"; else 
                                                                #line 1831 
                                                                tmp_32 = (char *)"a down";
  #line 1831 
  if ((int)bond_is_active_slave(new_slave) != 0) 
                                                 #line 1831 
                                                 tmp_34 = (char *)"an active"; else 
                                                                    #line 1831 
                                                                    tmp_34 = (char *)"a backup";
  #line 1831 
  ;
  #line 1831 
  ;
  #line 1831 
  netdev_info(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),tmp_34,tmp_32);
  #line 1836 
  bond_queue_slave_event(new_slave);
  #line 1837 
  return 0;
  #line 1840 
  err_sysfs_del: 
                 #line 1840 
  ;
  #line 1841 
  bond_sysfs_slave_del(new_slave);
  #line 1843 
  err_upper_unlink: 
                    #line 1843 
  ;
  #line 1844 
  bond_upper_dev_unlink(bond,new_slave);
  #line 1846 
  err_unregister: 
                  #line 1846 
  ;
  #line 1847 
  netdev_rx_handler_unregister(slave_dev);
  #line 1849 
  err_detach: 
              #line 1849 
  ;
  #line 1850 
  vlan_vids_del_by_dev(slave_dev,bond_dev);
  {
    #line 1852 
    union __anonunion___u_1749 __u_3;
    #line 1851 
    __read_once_size((void *)(& bond->primary_slave),(void *)(& __u_3.__c),8);
    #line 1851 
    _________p1_0 = (__u_3.__val);
    }
  #line 1851 
  ;
  #line 1851 
  if (_________p1_0 == new_slave) {
    #line 1853 
    union __anonunion___u_1747 __u_2 = {.__val = (struct slave *)0};
    #line 1852 
    __write_once_size((void *)(& bond->primary_slave),(void *)(& __u_2.__c),8);
    #line 1852 
    struct slave *tmp_35 = __u_2.__val;
  }
  {
    #line 1854 
    union __anonunion___u_1751 __u_4;
    #line 1853 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_4.__c),8);
    #line 1853 
    _________p1_1 = (__u_4.__val);
    }
  #line 1853 
  ;
  #line 1853 
  if (_________p1_1 == new_slave) {
    #line 1854 
    block_netpoll_tx();
    #line 1855 
    bond_change_active_slave(bond,(struct slave *)0);
    #line 1856 
    bond_select_active_slave(bond);
    #line 1857 
    unblock_netpoll_tx();
  }
  #line 1860 
  synchronize_rcu();
  #line 1861 
  slave_disable_netpoll(new_slave);
  #line 1863 
  err_close: 
             #line 1863 
  ;
  #line 1864 
  if (! netif_is_bond_master(slave_dev)) 
                                         #line 1865 
                                         slave_dev->priv_flags &= 4294967291U;
  #line 1866 
  dev_close(slave_dev);
  #line 1868 
  err_restore_mac: 
                   #line 1868 
  ;
  #line 1869 
  slave_dev->flags &= 4294965247U;
  #line 1870 
  if (bond->params.fail_over_mac == 0 || bond->params.mode != 1) {
    #line 1876 
    bond_hw_addr_copy((u8 *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(u8 *)(& new_slave->perm_hwaddr),(unsigned int)(new_slave->dev)->addr_len);
    #line 1878 
    ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = slave_dev->type;
    #line 1879 
    dev_set_mac_address(slave_dev,(struct sockaddr *)(& ss),(struct netlink_ext_ack *)0);
  }
  #line 1882 
  err_restore_mtu: 
                   #line 1882 
  ;
  #line 1883 
  dev_set_mtu(slave_dev,(int)new_slave->original_mtu);
  #line 1885 
  err_free: 
            #line 1885 
  ;
  #line 1886 
  bond_free_slave(new_slave);
  #line 1888 
  err_undo_flags: 
                  #line 1888 
  ;
  #line 1890 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) {
    #line 1891 
    if ((int)ether_addr_equal_64bits(bond_dev->dev_addr,slave_dev->dev_addr) != 0) 
      #line 1893 
      eth_hw_addr_random(bond_dev);
    #line 1894 
    if ((unsigned int)bond_dev->type != 1U) {
      #line 1895 
      dev_close(bond_dev);
      #line 1896 
      ether_setup(bond_dev);
      #line 1897 
      bond_dev->flags |= 1024U;
      #line 1898 
      bond_dev->priv_flags &= 4294965247U;
    }
  }
  #line 1902 
  return res;
}

#line 1916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int __bond_release_one(struct net_device *bond_dev, struct net_device *slave_dev, bool all, bool unregister)
{
  #line 1965 
  struct slave *_________p1;
  #line 1921 
  struct slave *slave;
  #line 1921 
  struct slave *oldcurrent;
  #line 1922 
  struct __kernel_sockaddr_storage ss;
  #line 1962 
  char *tmp_4;
  #line 1920 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1923 
  int old_flags = (int)bond_dev->flags;
  #line 1924 
  netdev_features_t old_features = bond_dev->features;
  #line 1927 
  if ((slave_dev->flags & 2048U) == 0U) 
                                        #line 1927 
                                        goto _LOR;
  else {
    #line 1928 
    if (! netdev_has_upper_dev(slave_dev,bond_dev)) {
      #line 1927 
      _LOR: {
              {
                #line 1929 
                bool branch;
                #line 1929 
                struct _ddebug __UNIQUE_ID_ddebug610 = {.modname = (char *)"bonding", .function = (char *)"__bond_release_one", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1929U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 1929 
                branch = arch_static_branch(& __UNIQUE_ID_ddebug610.key.dd_key_false.key,(_Bool)0);
                #line 1929 
                if ((long)((long)((int)branch != 0)) != 0L) 
                                                            #line 1929 
                                                            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug610,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
              }
              #line 1930 
              return -22;
            }
    }
  }
  #line 1933 
  block_netpoll_tx();
  #line 1935 
  slave = bond_get_slave_by_dev(bond,slave_dev);
  #line 1936 
  if (slave == (struct slave *)0) {
    #line 1938 
    netdev_info(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
    #line 1939 
    unblock_netpoll_tx();
    #line 1940 
    return -22;
  }
  #line 1943 
  bond_set_slave_inactive_flags(slave,(_Bool)1);
  #line 1945 
  bond_sysfs_slave_del(slave);
  #line 1948 
  bond_get_stats(bond->dev,& bond->bond_stats);
  #line 1950 
  bond_upper_dev_unlink(bond,slave);
  #line 1954 
  netdev_rx_handler_unregister(slave_dev);
  #line 1956 
  if (bond->params.mode == 4) 
                              #line 1957 
                              bond_3ad_unbind_slave(slave);
  #line 1959 
  if ((int)bond_mode_can_use_xmit_hash(bond) != 0) 
                                                   #line 1960 
                                                   bond_update_slave_arr(bond,slave);
  #line 1962 
  if ((int)bond_is_active_slave(slave) != 0) 
                                             #line 1962 
                                             tmp_4 = (char *)"active"; else 
                                                                    #line 1962 
                                                                    tmp_4 = (char *)"backup";
  #line 1962 
  ;
  #line 1962 
  ;
  #line 1962 
  netdev_info(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),tmp_4);
  {
    #line 1966 
    union __anonunion___u_1753 __u;
    #line 1965 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 1965 
    _________p1 = (__u.__val);
    }
  #line 1965 
  oldcurrent = _________p1;
  {
    #line 1968 
    union __anonunion___u_1755 __u_0 = {.__val = (struct slave *)0};
    #line 1967 
    __write_once_size((void *)(& bond->current_arp_slave),(void *)(& __u_0.__c),8);
    #line 1967 
    struct slave *tmp_7 = __u_0.__val;
  }
  #line 1969 
  if (! all && (bond->params.fail_over_mac == 0 || bond->params.mode != 1)) {
    #line 1971 
    if ((int)ether_addr_equal_64bits(bond_dev->dev_addr,
                                  (u8 *)(& slave->perm_hwaddr)) != 0) {
      #line 1971 
      if (list_empty_0(& (bond->dev)->adj_list.lower) == 0) 
                                                            #line 1973 
                                                            netdev_warn(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(u8 *)(& slave->perm_hwaddr));
    }
  }
  {
    #line 1977 
    bool __warned;
    #line 1977 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 1977 
      if (! __warned) {
        #line 1977 
        if (! lockdep_rtnl_is_held()) {
          #line 1977 
          __warned = (_Bool)1;
          #line 1977 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",1977,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 1977 
  ;
  #line 1977 
  if (bond->primary_slave == slave) {
    #line 1979 
    union __anonunion___u_1757 __u_1 = {.__val = (struct slave *)0};
    #line 1978 
    __write_once_size((void *)(& bond->primary_slave),(void *)(& __u_1.__c),8);
    #line 1978 
    struct slave *tmp_9 = __u_1.__val;
  }
  #line 1980 
  if (oldcurrent == slave) 
                           #line 1981 
                           bond_change_active_slave(bond,(struct slave *)0);
  #line 1983 
  if ((int)bond_is_lb(bond) != 0) 
                                  #line 1989 
                                  bond_alb_deinit_slave(bond,slave);
  #line 1992 
  if ((int)all != 0) {
    #line 1994 
    union __anonunion___u_1759 __u_2 = {.__val = (struct slave *)0};
    #line 1993 
    __write_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_2.__c),8);
    #line 1993 
    struct slave *tmp_12 = __u_2.__val;
  }
  else 
    #line 1994 
    if (oldcurrent == slave) 
                             #line 1999 
                             bond_select_active_slave(bond);
  #line 2002 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) {
    #line 2003 
    bond_set_carrier(bond);
    #line 2004 
    eth_hw_addr_random(bond_dev);
  }
  #line 2007 
  unblock_netpoll_tx();
  #line 2008 
  synchronize_rcu();
  #line 2009 
  (bond->slave_cnt) --;
  #line 2011 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) {
    #line 2012 
    call_netdevice_notifiers(8UL,bond->dev);
    #line 2013 
    call_netdevice_notifiers(18UL,bond->dev);
  }
  #line 2016 
  bond_compute_features(bond);
  #line 2017 
  if ((bond_dev->features & 1024ULL) == 0ULL && (old_features & 1024ULL) != 0ULL) 
    #line 2019 
    netdev_info(bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
  #line 2021 
  vlan_vids_del_by_dev(slave_dev,bond_dev);
  #line 2026 
  if (! bond_uses_primary(bond)) {
    #line 2034 
    if ((old_flags & 256) != 0) 
                                #line 2035 
                                dev_set_promiscuity(slave_dev,-1);
    #line 2038 
    if ((old_flags & 512) != 0) 
                                #line 2039 
                                dev_set_allmulti(slave_dev,-1);
    #line 2041 
    bond_hw_addr_flush(bond_dev,slave_dev);
  }
  #line 2044 
  slave_disable_netpoll(slave);
  #line 2047 
  dev_close(slave_dev);
  #line 2049 
  if (bond->params.fail_over_mac != 1 || bond->params.mode != 1) {
    #line 2052 
    bond_hw_addr_copy((u8 *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(u8 *)(& slave->perm_hwaddr),(unsigned int)(slave->dev)->addr_len);
    #line 2054 
    ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = slave_dev->type;
    #line 2055 
    dev_set_mac_address(slave_dev,(struct sockaddr *)(& ss),(struct netlink_ext_ack *)0);
  }
  #line 2058 
  if ((int)unregister != 0) 
                            #line 2059 
                            __dev_set_mtu(slave_dev,(int)slave->original_mtu); else 
                                                                    #line 2061 
                                                                    dev_set_mtu(slave_dev,(int)slave->original_mtu);
  #line 2063 
  if (! netif_is_bond_master(slave_dev)) 
                                         #line 2064 
                                         slave_dev->priv_flags &= 4294967291U;
  #line 2066 
  bond_free_slave(slave);
  #line 2068 
  return 0;
}

#line 2072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_release(struct net_device *bond_dev, struct net_device *slave_dev)
{
  #line 2074 
  return __bond_release_one(bond_dev,slave_dev,(_Bool)0,(_Bool)0);
}

#line 2080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_release_and_destroy(struct net_device *bond_dev, struct net_device *slave_dev)
{
  #line 2084 
  int ret;
  #line 2083 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 2086 
  ret = __bond_release_one(bond_dev,slave_dev,(_Bool)0,(_Bool)1);
  #line 2087 
  if (ret == 0) {
    #line 2087 
    if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) {
      #line 2088 
      bond_dev->priv_flags |= 128U;
      #line 2089 
      netdev_info(bond_dev,(char *)"Destroying bond\n");
      #line 2090 
      bond_remove_proc_entry(bond);
      #line 2091 
      unregister_netdevice(bond_dev);
    }
  }
  #line 2093 
  return ret;
}

#line 2096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_info_query(struct net_device *bond_dev, struct ifbond *info)
{
  #line 2098 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 2099 
  bond_fill_ifbond(bond,info);
  #line 2100 
  return;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_slave_info_query(struct net_device *bond_dev, struct ifslave *info)
{
  #line 2105 
  struct list_head *iter;
  #line 2107 
  struct slave *slave;
  #line 2104 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 2106 
  int i = 0;
  #line 2106 
  int res = -19;
  #line 2109 
  iter = (bond->dev)->adj_list.lower.next;
  #line 2109 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 2109 
  while (slave != (struct slave *)0) {
    #line 2110 
    int tmp_2;
    #line 2110 
    tmp_2 = i;
    #line 2110 
    i ++;
    #line 2110 
    ;
    #line 2110 
    if (tmp_2 == info->slave_id) {
      #line 2111 
      res = 0;
      #line 2112 
      bond_fill_ifslave(slave,info);
      #line 2113 
      break;
    }
    #line 2109 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 2117 
  return res;
}

#line 2123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_miimon_inspect(struct bonding *bond)
{
  #line 2130 
  struct slave *________p1;
  #line 2125 
  int link_state;
  #line 2126 
  struct list_head *iter;
  #line 2127 
  struct slave *slave;
  #line 2128 
  bool ignore_updelay;
  #line 2125 
  int commit = 0;
  {
    #line 2131 
    union __anonunion___u_1761 __u;
    #line 2130 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 2130 
    ________p1 = (__u.__val);
    {
      #line 2130 
      bool __warned;
      #line 2130 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 2130 
        if (! __warned) {
          #line 2130 
          if (rcu_read_lock_held() == 0) {
            #line 2130 
            __warned = (_Bool)1;
            #line 2130 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2130,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 2130 
  ignore_updelay = (_Bool)(________p1 == (struct slave *)0);
  #line 2132 
  iter = & (bond->dev)->adj_list.lower;
  #line 2132 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2132 
  while (slave != (struct slave *)0) {
    #line 2133 
    bond_propose_link_state(slave,-1);
    #line 2135 
    link_state = bond_check_dev_link(bond,slave->dev,0);
    #line 2137 
    switch ((int)slave->link) {
      #line 2138 
      case 0: 
              #line 2138 
      ;
      #line 2139 
      if (link_state != 0) 
                           #line 2140 
                           goto __Cont;
      #line 2142 
      bond_propose_link_state(slave,1);
      #line 2143 
      commit ++;
      #line 2144 
      slave->delay = bond->params.downdelay;
      #line 2145 
      if (slave->delay != 0) {
        #line 2146 
        char *tmp_6;
        #line 2146 
        char *tmp_7;
        #line 2146 
        ;
        #line 2146 
        if (bond->params.mode == 1) {
          #line 2146 
          if ((int)bond_is_active_slave(slave) != 0) 
                                                     #line 2146 
                                                     tmp_6 = (char *)"active "; else 
                                                                    #line 2146 
                                                                    tmp_6 = (char *)"backup ";
          #line 2146 
          tmp_7 = tmp_6;
        }
        else 
             #line 2146 
             tmp_7 = (char *)"";
        #line 2146 
        ;
        #line 2146 
        ;
        #line 2146 
        netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),tmp_7,bond->params.downdelay * bond->params.miimon);
      }
      #line 2154 
      case 1: 
              #line 2154 
      ;
      #line 2155 
      if (link_state != 0) {
        #line 2157 
        bond_propose_link_state(slave,0);
        #line 2158 
        slave->last_link_up = jiffies;
        #line 2159 
        netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(bond->params.downdelay - slave->delay) * bond->params.miimon);
        #line 2162 
        commit ++;
        #line 2163 
        goto __Cont;
      }
      #line 2166 
      if (slave->delay <= 0) {
        #line 2167 
        bond_propose_link_state(slave,2);
        #line 2168 
        commit ++;
        #line 2169 
        goto __Cont;
      }
      #line 2172 
      (slave->delay) --;
      #line 2173 
      break;
      #line 2175 
      case 2: 
              #line 2175 
      ;
      #line 2176 
      if (link_state == 0) 
                           #line 2177 
                           goto __Cont;
      #line 2179 
      bond_propose_link_state(slave,3);
      #line 2180 
      commit ++;
      #line 2181 
      slave->delay = bond->params.updelay;
      #line 2183 
      if (slave->delay != 0) {
        #line 2184 
        int tmp_8;
        #line 2184 
        if (ignore_updelay) 
                            #line 2184 
                            tmp_8 = 0; else 
                                            #line 2184 
                                            tmp_8 = bond->params.updelay * bond->params.miimon;
        #line 2184 
        ;
        #line 2184 
        ;
        #line 2184 
        netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),tmp_8);
      }
      #line 2190 
      case 3: 
              #line 2190 
      ;
      #line 2191 
      if (link_state == 0) {
        #line 2192 
        bond_propose_link_state(slave,2);
        #line 2193 
        netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(bond->params.updelay - slave->delay) * bond->params.miimon);
        #line 2196 
        commit ++;
        #line 2197 
        goto __Cont;
      }
      #line 2200 
      if ((int)ignore_updelay != 0) 
                                    #line 2201 
                                    slave->delay = 0;
      #line 2203 
      if (slave->delay <= 0) {
        #line 2204 
        bond_propose_link_state(slave,0);
        #line 2205 
        commit ++;
        #line 2206 
        ignore_updelay = (_Bool)0;
        #line 2207 
        goto __Cont;
      }
      #line 2210 
      (slave->delay) --;
      #line 2211 
      break;
    }
    #line 2132 
    __Cont: 
            #line 2132 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 2215 
  return commit;
}

#line 2218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_miimon_link_change(struct bonding *bond, struct slave *slave, char link)
{
  #line 2222 
  switch (bond->params.mode) {
    #line 2223 
    case 4: 
            #line 2223 
    ;
    #line 2224 
    bond_3ad_handle_link_change(slave,(char)((int)link));
    #line 2225 
    break;
    #line 2226 
    case 5: 
            #line 2226 
    ;
    #line 2227 
    case 6: 
            #line 2227 
    ;
    #line 2228 
    bond_alb_handle_link_change(bond,slave,(char)((int)link));
    #line 2229 
    break;
    #line 2230 
    case 2: 
            #line 2230 
    ;
    #line 2231 
    bond_update_slave_arr(bond,(struct slave *)0);
    #line 2232 
    break;
  }
  #line 2234 
  return;
}

#line 2236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_miimon_commit(struct bonding *bond)
{
  #line 2238 
  struct list_head *iter;
  #line 2239 
  struct slave *slave;
  #line 2239 
  struct slave *primary_0;
  #line 2241 
  iter = (bond->dev)->adj_list.lower.next;
  #line 2241 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 2241 
  while (slave != (struct slave *)0) {
    #line 2242 
    switch ((int)slave->link_new_state) {
      #line 2304 
      struct slave *_________p1;
      #line 2277 
      char *tmp_6;
      #line 2277 
      u32 tmp_7;
      #line 2243 
      case -1: 
               #line 2243 
      ;
      #line 2250 
      if (bond->params.mode == 4 && (int)slave->link == 0) 
                                                           #line 2252 
                                                           bond_3ad_adapter_speed_duplex_changed(slave);
      #line 2253 
      goto __Cont;
      #line 2255 
      case 0: 
              #line 2255 
      ;
      #line 2256 
      if (bond_update_speed_duplex(slave) != 0) {
        #line 2256 
        if ((int)bond_needs_speed_duplex(bond) != 0) {
          #line 2258 
          slave->link = (signed char)2;
          #line 2259 
          if (net_ratelimit() != 0) 
                                    #line 2260 
                                    netdev_warn(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
          #line 2262 
          goto __Cont;
        }
      }
      #line 2264 
      bond_set_slave_link_state(slave,0,(_Bool)1);
      #line 2266 
      slave->last_link_up = jiffies;
      {
        #line 2268 
        bool __warned;
        #line 2268 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 2268 
          if (! __warned) {
            #line 2268 
            if (! lockdep_rtnl_is_held()) {
              #line 2268 
              __warned = (_Bool)1;
              #line 2268 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2268,(char *)"suspicious rcu_dereference_protected() usage");
            }
          }
      }
      #line 2268 
      primary_0 = bond->primary_slave;
      #line 2269 
      if (bond->params.mode == 4) 
                                  #line 2271 
                                  bond_set_backup_slave(slave);
      else 
        #line 2272 
        if (bond->params.mode != 1) 
                                    #line 2274 
                                    bond_set_active_slave(slave);
      #line 2277 
      if ((unsigned int)slave->duplex != 0U) 
                                             #line 2277 
                                             tmp_6 = (char *)"full"; else 
                                                                    #line 2277 
                                                                    tmp_6 = (char *)"half";
      #line 2277 
      if (slave->speed != 4294967295U) 
                                       #line 2277 
                                       tmp_7 = slave->speed; else 
                                                                  #line 2277 
                                                                  tmp_7 = 0U;
      #line 2277 
      ;
      #line 2277 
      ;
      #line 2277 
      netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),tmp_7,tmp_6);
      #line 2281 
      bond_miimon_link_change(bond,slave,(char)0);
      #line 2283 
      if (bond->curr_active_slave == (struct slave *)0 || slave == primary_0) 
        #line 2284 
        goto do_failover;
      #line 2286 
      goto __Cont;
      #line 2288 
      case 2: 
              #line 2288 
      ;
      #line 2289 
      if (slave->link_failure_count != 4294967295U) 
                                                    #line 2290 
                                                    (slave->link_failure_count) ++;
      #line 2292 
      bond_set_slave_link_state(slave,2,(_Bool)1);
      #line 2295 
      if (bond->params.mode == 1 || bond->params.mode == 4) 
                                                            #line 2297 
                                                            bond_set_slave_inactive_flags(slave,(_Bool)1);
      #line 2300 
      netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
      #line 2302 
      bond_miimon_link_change(bond,slave,(char)2);
      {
        #line 2305 
        union __anonunion___u_1763 __u;
        #line 2304 
        __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
        #line 2304 
        _________p1 = (__u.__val);
        }
      #line 2304 
      ;
      #line 2304 
      if (_________p1 == slave) 
                                #line 2305 
                                goto do_failover;
      #line 2307 
      goto __Cont;
      #line 2309 
      default: 
               #line 2309 
      ;
      #line 2310 
      netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)slave->link_new_state);
      #line 2312 
      bond_propose_link_state(slave,-1);
      #line 2314 
      goto __Cont;
    }
    #line 2317 
    do_failover: 
                 #line 2317 
    ;
    #line 2318 
    block_netpoll_tx();
    #line 2319 
    bond_select_active_slave(bond);
    #line 2320 
    unblock_netpoll_tx();
    #line 2241 
    __Cont: 
            #line 2241 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 2323 
  bond_set_carrier(bond);
  #line 2324 
  return;
}

#line 2333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_mii_monitor(struct work_struct *work)
{
  #line 2335 
  void *__mptr;
  #line 2338 
  bool commit;
  #line 2339 
  unsigned long delay;
  #line 2340 
  struct slave *slave;
  #line 2341 
  struct list_head *iter;
  #line 2335 
  __mptr = (void *)work;
  #line 2335 
  struct bonding *bond = ((struct bonding *)(__mptr + 18446744073709551000U));
  #line 2337 
  bool should_notify_peers = (_Bool)0;
  #line 2343 
  delay = msecs_to_jiffies((unsigned int)bond->params.miimon);
  #line 2345 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) 
                                                        #line 2346 
                                                        goto re_arm;
  #line 2348 
  rcu_read_lock();
  #line 2349 
  should_notify_peers = bond_should_notify_peers(bond);
  #line 2350 
  commit = (_Bool)(bond_miimon_inspect(bond) != 0);
  #line 2351 
  if ((unsigned int)bond->send_peer_notif != 0U) {
    #line 2352 
    rcu_read_unlock();
    #line 2353 
    if (rtnl_trylock() != 0) {
      #line 2354 
      bond->send_peer_notif = (u8)((int)bond->send_peer_notif - 1);
      #line 2355 
      rtnl_unlock();
    }
  }
  else 
       #line 2358 
       rcu_read_unlock();
  #line 2361 
  if ((int)commit != 0) {
    #line 2363 
    if (rtnl_trylock() == 0) {
      #line 2364 
      delay = 1UL;
      #line 2365 
      should_notify_peers = (_Bool)0;
      #line 2366 
      goto re_arm;
    }
    #line 2369 
    iter = (bond->dev)->adj_list.lower.next;
    #line 2369 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    #line 2369 
    while (slave != (struct slave *)0) {
      #line 2370 
      bond_commit_link_state(slave,(_Bool)0);
      #line 2369 
      slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    }
    #line 2372 
    bond_miimon_commit(bond);
    #line 2374 
    rtnl_unlock();
  }
  #line 2377 
  re_arm: 
          #line 2377 
  ;
  #line 2378 
  if (bond->params.miimon != 0) 
                                #line 2379 
                                cif_queue_delayed_work_0(bond->wq,& bond->mii_work,delay);
  #line 2381 
  if ((int)should_notify_peers != 0) {
    #line 2382 
    if (rtnl_trylock() == 0) 
                             #line 2383 
                             return;
    #line 2384 
    call_netdevice_notifiers(19UL,bond->dev);
    #line 2385 
    rtnl_unlock();
  }
  #line 2387 
  return;
}

#line 2389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_upper_dev_walk(struct net_device *upper, void *data)
{
  #line 2391 
  __be32 ip = *((__be32 *)data);
  #line 2393 
  ;
  #line 2393 
  return bond_confirm_addr(upper,0U,ip) == ip;
}

#line 2396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_has_this_ip(struct bonding *bond, __be32 ip)
{
  #line 2398 
  bool ret = (_Bool)0;
  #line 2400 
  ;
  #line 2400 
  if (bond_confirm_addr(bond->dev,0U,ip) == ip) 
                                                #line 2401 
                                                return (_Bool)1;
  #line 2403 
  rcu_read_lock();
  #line 2404 
  if (netdev_walk_all_upper_dev_rcu(bond->dev,& bond_upper_dev_walk,
                                      (void *)(& ip)) != 0) 
    #line 2405 
    ret = (_Bool)1;
  #line 2406 
  rcu_read_unlock();
  #line 2408 
  return ret;
}

#line 2415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_arp_send(struct slave *slave, int arp_op, __be32 dest_ip, __be32 src_ip, struct bond_vlan_tag *tags)
{
  #line 2418 
  struct sk_buff *skb;
  #line 2419 
  struct bond_vlan_tag *outer_tag = tags;
  #line 2420 
  struct net_device *slave_dev = slave->dev;
  #line 2421 
  struct net_device *bond_dev = (slave->bond)->dev;
  {
    #line 2423 
    bool branch;
    #line 2423 
    struct _ddebug __UNIQUE_ID_ddebug611 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_send", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2423U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2423 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug611.key.dd_key_false.key,(_Bool)0);
    #line 2423 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2423 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug611,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),arp_op,& dest_ip,& src_ip);
  }
  #line 2426 
  skb = arp_create(arp_op,2054,dest_ip,slave_dev,src_ip,(unsigned char *)0U,slave_dev->dev_addr,(unsigned char *)0U);
  #line 2429 
  if (skb == (struct sk_buff *)0) {
    #line 2430 
    if (net_ratelimit() != 0) 
                              #line 2430 
                              printk((char *)"\001");
    #line 2431 
    return;
  }
  #line 2434 
  if (tags == (struct bond_vlan_tag *)0 || (unsigned int)tags->vlan_proto == 4096U) 
    #line 2435 
    goto xmit;
  #line 2437 
  tags ++;
  #line 2440 
  while ((unsigned int)tags->vlan_proto != 4096U) {
    #line 2441 
    if ((unsigned int)tags->vlan_id == 0U) {
      #line 2442 
      tags ++;
      #line 2443 
      continue;
    }
    {
      #line 2446 
      bool branch_0;
      #line 2446 
      struct _ddebug __UNIQUE_ID_ddebug612 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_send", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2446U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2446 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug612.key.dd_key_false.key,(_Bool)0);
      #line 2446 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 2446 
        ;
        #line 2446 
        ;
        #line 2446 
        ;
        #line 2446 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug612,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(int)__builtin_bswap16((unsigned short)((int)outer_tag->vlan_proto)),(int)tags->vlan_id);
      }
    }
    #line 2448 
    skb = vlan_insert_tag_set_proto(skb,(unsigned short)((int)tags->vlan_proto),(unsigned short)((int)tags->vlan_id));
    #line 2450 
    if (skb == (struct sk_buff *)0) {
      #line 2451 
      if (net_ratelimit() != 0) 
                                #line 2451 
                                printk((char *)"\001");
      #line 2452 
      return;
    }
    #line 2455 
    tags ++;
  }
  #line 2458 
  if ((unsigned int)outer_tag->vlan_id != 0U) {
    {
      #line 2459 
      bool branch_1;
      #line 2459 
      struct _ddebug __UNIQUE_ID_ddebug613 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_send", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2459U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2459 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug613.key.dd_key_false.key,(_Bool)0);
      #line 2459 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 2459 
        ;
        #line 2459 
        ;
        #line 2459 
        ;
        #line 2459 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug613,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(int)__builtin_bswap16((unsigned short)((int)outer_tag->vlan_proto)),(int)outer_tag->vlan_id);
      }
    }
    #line 2461 
    __vlan_hwaccel_put_tag(skb,(unsigned short)((int)outer_tag->vlan_proto),(unsigned short)((int)outer_tag->vlan_id));
  }
  #line 2465 
  xmit: 
        #line 2465 
  ;
  #line 2466 
  arp_xmit(skb);
  #line 2467 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
struct bond_vlan_tag *bond_verify_device_path(struct net_device *start_dev, struct net_device *end_dev, int level)
{
  #line 2479 
  struct bond_vlan_tag *tags;
  #line 2480 
  struct net_device *upper;
  #line 2481 
  struct list_head *iter;
  #line 2483 
  if (start_dev == end_dev) {
    #line 2484 
    tags = (struct bond_vlan_tag *)kcalloc((unsigned long)(level + 1),4UL,2592U);
    #line 2485 
    if (tags == (struct bond_vlan_tag *)0) {
      #line 2486 
      return (struct bond_vlan_tag *)ERR_PTR(-12L);
    }
    #line 2487 
    (tags + (unsigned long)level)->vlan_proto = (unsigned short)4096U;
    #line 2488 
    return tags;
  }
  #line 2491 
  iter = & start_dev->adj_list.upper;
  #line 2491 
  upper = netdev_upper_get_next_dev_rcu(start_dev,& iter);
  #line 2491 
  while (upper != (struct net_device *)0) {
    {
      #line 2492 
      tags = bond_verify_device_path(upper,end_dev,level + 1);
      #line 2493 
      if ((int)IS_ERR_OR_NULL((void *)tags) != 0) {
        #line 2494 
        if ((int)IS_ERR((void *)tags) != 0) 
                                            #line 2495 
                                            return tags;
        #line 2496 
        goto __Cont;
      }
      #line 2498 
      if ((int)is_vlan_dev(upper) != 0) {
        #line 2499 
        (tags + (unsigned long)level)->vlan_proto = vlan_dev_vlan_proto(upper);
        #line 2500 
        (tags + (unsigned long)level)->vlan_id = vlan_dev_vlan_id(upper);
      }
      #line 2503 
      return tags;
    }
    #line 2491 
    __Cont: 
            #line 2491 
    upper = netdev_upper_get_next_dev_rcu(start_dev,& iter);
  }
  #line 2506 
  return (struct bond_vlan_tag *)0;
}

#line 2509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_arp_send_all(struct bonding *bond, struct slave *slave)
{
  #line 2511 
  struct rtable *rt;
  #line 2512 
  struct bond_vlan_tag *tags;
  #line 2513 
  __be32 addr;
  #line 2514 
  int i;
  #line 2513 
  __be32 *targets = (__be32 *)(& bond->params.arp_targets);
  #line 2516 
  i = 0;
  #line 2516 
  while (i <= 15 && *(targets + (unsigned long)i) != 0U) {
    {
      {
        #line 2517 
        bool branch;
        #line 2517 
        struct _ddebug __UNIQUE_ID_ddebug614 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_send_all", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2517U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2517 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug614.key.dd_key_false.key,(_Bool)0);
        #line 2517 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 2517 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug614,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_arp_send_all",targets + (unsigned long)i);
      }
      #line 2519 
      tags = (struct bond_vlan_tag *)0;
      #line 2522 
      ;
      #line 2522 
      rt = ip_route_output(dev_net(bond->dev),*(targets + (unsigned long)i),0U,(unsigned char)1,0);
      #line 2524 
      if ((int)IS_ERR((void *)rt) != 0) {
        #line 2528 
        if (bond->params.arp_validate != 0) {
          #line 2529 
          if (net_ratelimit() != 0) 
                                    #line 2529 
                                    printk((char *)"\001",(char *)(& (bond->dev)->name),targets + (unsigned long)i);
        }
        #line 2532 
        bond_arp_send(slave,1,*(targets + (unsigned long)i),0U,tags);
        #line 2534 
        goto __Cont;
      }
      #line 2538 
      if (rt->dst.dev == bond->dev) 
                                    #line 2539 
                                    goto found;
      #line 2541 
      rcu_read_lock();
      #line 2542 
      tags = bond_verify_device_path(bond->dev,rt->dst.dev,0);
      #line 2543 
      rcu_read_unlock();
      #line 2545 
      if (! IS_ERR_OR_NULL((void *)tags)) 
                                          #line 2546 
                                          goto found;
      {
        #line 2549 
        bool branch_0;
        #line 2549 
        struct _ddebug __UNIQUE_ID_ddebug615 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_send_all", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2549U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2549 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug615.key.dd_key_false.key,(_Bool)0);
        #line 2549 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 2549 
          char *tmp_4;
          #line 2549 
          if (rt->dst.dev != (struct net_device *)0) 
                                                     #line 2549 
                                                     tmp_4 = (char *)(& (rt->dst.dev)->name); else 
                                                                    #line 2549 
                                                                    tmp_4 = (char *)"NULL";
          #line 2549 
          ;
          #line 2549 
          ;
          #line 2549 
          ;
          #line 2549 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug615,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),targets + (unsigned long)i,tmp_4);
        }
      }
      #line 2552 
      ip_rt_put(rt);
      #line 2553 
      goto __Cont;
      #line 2555 
      found: 
             #line 2555 
      ;
      #line 2556 
      addr = bond_confirm_addr(rt->dst.dev,*(targets + (unsigned long)i),0U);
      #line 2557 
      ip_rt_put(rt);
      #line 2558 
      bond_arp_send(slave,1,*(targets + (unsigned long)i),addr,tags);
      #line 2559 
      kfree((void *)tags);
    }
    #line 2516 
    __Cont: 
            #line 2516 
    i ++;
  }
  #line 2561 
  return;
}

#line 2563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_validate_arp(struct bonding *bond, struct slave *slave, __be32 sip, __be32 tip)
{
  #line 2565 
  int i;
  #line 2567 
  if (sip == 0U) 
                 #line 2567 
                 goto _LOR;
  else {
    #line 2567 
    if (! bond_has_this_ip(bond,tip)) {
      #line 2567 
      _LOR: {
              {
                #line 2568 
                bool branch;
                #line 2568 
                struct _ddebug __UNIQUE_ID_ddebug616 = {.modname = (char *)"bonding", .function = (char *)"bond_validate_arp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2568U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
                #line 2568 
                branch = arch_static_branch(& __UNIQUE_ID_ddebug616.key.dd_key_false.key,(_Bool)0);
                #line 2568 
                if ((long)((long)((int)branch != 0)) != 0L) 
                                                            #line 2568 
                                                            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug616,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_validate_arp",& sip,& tip);
              }
              #line 2570 
              return;
            }
    }
  }
  #line 2573 
  i = bond_get_targets_ip((__be32 *)(& bond->params.arp_targets),sip);
  #line 2574 
  if (i == -1) {
    {
      #line 2575 
      bool branch_0;
      #line 2575 
      struct _ddebug __UNIQUE_ID_ddebug617 = {.modname = (char *)"bonding", .function = (char *)"bond_validate_arp", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2575U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2575 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug617.key.dd_key_false.key,(_Bool)0);
      #line 2575 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2575 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug617,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_validate_arp",& sip);
    }
    #line 2577 
    return;
  }
  #line 2579 
  slave->last_rx = jiffies;
  #line 2580 
  slave->target_last_arp_rx[i] = jiffies;
  #line 2581 
  return;
}

#line 2583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_arp_rcv(struct sk_buff *skb, struct bonding *bond, struct slave *slave)
{
  #line 2635 
  struct slave *________p1_0;
  #line 2634 
  struct slave *________p1;
  #line 2587 
  struct slave *curr_active_slave;
  #line 2587 
  struct slave *curr_arp_slave;
  #line 2588 
  unsigned char *arp_ptr;
  #line 2589 
  __be32 sip;
  #line 2589 
  __be32 tip;
  #line 2591 
  unsigned int alen;
  #line 2586 
  struct arphdr *arp = (struct arphdr *)skb->data;
  #line 2590 
  int is_arp = (unsigned int)skb->protocol == 1544U;
  #line 2593 
  if (slave_do_arp_validate(bond,slave) == 0) {
    #line 2594 
    if (slave_do_arp_validate_only(bond) != 0) {
      #line 2594 
      if (is_arp != 0) 
                       #line 2596 
                       slave->last_rx = jiffies; else 
                                                      #line 2594 
                                                      goto _LAND;
    }
    else {
      #line 2594 
      _LAND: 
      #line 2594 
      if (slave_do_arp_validate_only(bond) == 0) 
                                                 #line 2596 
                                                 slave->last_rx = jiffies;
    }
    #line 2597 
    return 1;
  }
  else 
    #line 2598 
    if (is_arp == 0) 
                     #line 2599 
                     return 1;
  #line 2602 
  alen = arp_hdr_len(bond->dev);
  {
    #line 2604 
    bool branch;
    #line 2604 
    struct _ddebug __UNIQUE_ID_ddebug618 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_rcv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2604U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2604 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug618.key.dd_key_false.key,(_Bool)0);
    #line 2604 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2604 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug618,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_arp_rcv",(char *)(& (skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev)->name));
  }
  #line 2607 
  ;
  #line 2607 
  if (skb_headlen(skb) < alen) {
    #line 2608 
    arp = (struct arphdr *)kmalloc((unsigned long)alen,2592U);
    #line 2609 
    if (arp == (struct arphdr *)0) 
                                   #line 2610 
                                   goto out_unlock;
    #line 2611 
    if (skb_copy_bits(skb,0,(void *)arp,(int)alen) < 0) 
                                                        #line 2612 
                                                        goto out_unlock;
  }
  #line 2615 
  if ((((((int)arp->ar_hln != (int)(bond->dev)->addr_len || (unsigned int)skb->pkt_type == 3U) || (unsigned int)skb->pkt_type == 5U) || (unsigned int)arp->ar_hrd != 256U) || (unsigned int)arp->ar_pro != 8U) || (unsigned int)arp->ar_pln != 4U) 
    #line 2621 
    goto out_unlock;
  #line 2623 
  arp_ptr = (unsigned char *)(arp + 1U);
  #line 2624 
  arp_ptr += (unsigned long)(bond->dev)->addr_len;
  #line 2625 
  memcpy((void *)(& sip),(void *)arp_ptr,4UL);
  #line 2626 
  arp_ptr += (unsigned long)((int)(bond->dev)->addr_len + 4);
  #line 2627 
  memcpy((void *)(& tip),(void *)arp_ptr,4UL);
  {
    #line 2629 
    bool branch_0;
    #line 2629 
    struct _ddebug __UNIQUE_ID_ddebug619 = {.modname = (char *)"bonding", .function = (char *)"bond_arp_rcv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)2629U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2629 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug619.key.dd_key_false.key,(_Bool)0);
    #line 2629 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 2629 
      ;
      #line 2629 
      ;
      #line 2629 
      ;
      #line 2629 
      ;
      #line 2629 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug619,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_arp_rcv",(char *)(& (slave->dev)->name),bond_slave_state(slave),bond->params.arp_validate,slave_do_arp_validate(bond,slave),& sip,& tip);
    }
  }
  {
    #line 2635 
    union __anonunion___u_1765 __u;
    #line 2634 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 2634 
    ________p1 = (__u.__val);
    {
      #line 2634 
      bool __warned;
      #line 2634 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 2634 
        if (! __warned) {
          #line 2634 
          if (rcu_read_lock_held() == 0) {
            #line 2634 
            __warned = (_Bool)1;
            #line 2634 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2634,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 2634 
  curr_active_slave = ________p1;
  {
    #line 2636 
    union __anonunion___u_1767 __u_0;
    #line 2635 
    __read_once_size((void *)(& bond->current_arp_slave),(void *)(& __u_0.__c),8);
    #line 2635 
    ________p1_0 = (__u_0.__val);
    {
      #line 2635 
      bool __warned_0;
      #line 2635 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 2635 
        if (! __warned_0) {
          #line 2635 
          if (rcu_read_lock_held() == 0) {
            #line 2635 
            __warned_0 = (_Bool)1;
            #line 2635 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2635,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 2635 
  curr_arp_slave = ________p1_0;
  #line 2660 
  if ((int)bond_is_active_slave(slave) != 0) 
                                             #line 2661 
                                             bond_validate_arp(bond,slave,sip,tip);
  else {
    {
      #line 2663 
      unsigned long __dummy;
      #line 2663 
      unsigned long __dummy2;
      }
    #line 2662 
    if (1 != 0) {
      {
        #line 2663 
        unsigned long __dummy_0;
        #line 2663 
        unsigned long __dummy2_0;
        }
      #line 2663 
      if (1 != 0) {
        #line 2663 
        ;
        #line 2663 
        if ((long)(curr_active_slave->last_link_up - slave_last_rx(bond,curr_active_slave)) < 0L) {
          #line 2662 
          if (curr_active_slave != (struct slave *)0) 
                                                      #line 2665 
                                                      bond_validate_arp(bond,slave,tip,sip); else 
                                                                    #line 2662 
                                                                    goto _LAND_2;
        }
        else 
             #line 2662 
             goto _LAND_2;
      }
      else 
           #line 2662 
           goto _LAND_2;
    }
    else 
      #line 2662 
      _LAND_2: 
               #line 2666 
               if (curr_arp_slave != (struct slave *)0 && (unsigned int)arp->ar_op == 512U) {
                 #line 2666 
                 ;
                 #line 2666 
                 if ((int)bond_time_in_interval(bond,dev_trans_start(curr_arp_slave->dev),1) != 0) 
                   #line 2669 
                   bond_validate_arp(bond,slave,sip,tip);
               }
  }
  #line 2671 
  out_unlock: 
              #line 2671 
  ;
  #line 2672 
  if ((struct arphdr *)skb->data != arp) 
                                         #line 2673 
                                         kfree((void *)arp);
  #line 2674 
  return 1;
}

#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_time_in_interval(struct bonding *bond, unsigned long last_act, int mod)
{
  #line 2686 
  int tmp_4;
  #line 2684 
  int delta_in_ticks = (int)msecs_to_jiffies((unsigned int)bond->params.arp_interval);
  {
    #line 2686 
    unsigned long __dummy;
    #line 2686 
    unsigned long __dummy2;
    }
  #line 2686 
  if (1 != 0) {
    {
      #line 2686 
      unsigned long __dummy_0;
      #line 2686 
      unsigned long __dummy2_0;
      }
    #line 2686 
    if (1 != 0) 
      #line 2686 
      if ((long)((((unsigned long)(mod * delta_in_ticks) + last_act) + (unsigned long)(delta_in_ticks / 2)) - jiffies) >= 0L) {
        {
          #line 2686 
          unsigned long __dummy_1;
          #line 2686 
          unsigned long __dummy2_1;
          }
        #line 2686 
        if (1 != 0) {
          {
            #line 2686 
            unsigned long __dummy_2;
            #line 2686 
            unsigned long __dummy2_2;
            }
          #line 2686 
          if (1 != 0) 
            #line 2686 
            if ((long)(((unsigned long)delta_in_ticks - last_act) + jiffies) >= 0L) 
              #line 2686 
              tmp_4 = 1; else 
                              #line 2686 
                              tmp_4 = 0;
          else 
               #line 2686 
               tmp_4 = 0;
        }
        else 
             #line 2686 
             tmp_4 = 0;
      }
      else 
           #line 2686 
           tmp_4 = 0;
    else 
         #line 2686 
         tmp_4 = 0;
  }
  else 
       #line 2686 
       tmp_4 = 0;
  #line 2686 
  return (_Bool)(tmp_4 != 0);
}

#line 2697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_loadbalance_arp_mon(struct bonding *bond)
{
  #line 2708 
  struct slave *________p1;
  #line 2699 
  struct slave *slave;
  #line 2699 
  struct slave *oldcurrent;
  #line 2700 
  struct list_head *iter;
  #line 2701 
  int do_failover = 0;
  #line 2701 
  int slave_state_changed = 0;
  #line 2703 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) 
                                                        #line 2704 
                                                        goto re_arm;
  #line 2706 
  rcu_read_lock();
  {
    #line 2709 
    union __anonunion___u_1769 __u;
    #line 2708 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 2708 
    ________p1 = (__u.__val);
    {
      #line 2708 
      bool __warned;
      #line 2708 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 2708 
        if (! __warned) {
          #line 2708 
          if (rcu_read_lock_held() == 0) {
            #line 2708 
            __warned = (_Bool)1;
            #line 2708 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2708,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 2708 
  oldcurrent = ________p1;
  #line 2717 
  iter = & (bond->dev)->adj_list.lower;
  #line 2717 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2717 
  while (slave != (struct slave *)0) {
    {
      #line 2718 
      unsigned long trans_start = dev_trans_start(slave->dev);
      #line 2720 
      bond_propose_link_state(slave,-1);
      #line 2722 
      if ((int)slave->link != 0) {
        #line 2723 
        if ((int)bond_time_in_interval(bond,trans_start,1) != 0) {
          #line 2723 
          if ((int)bond_time_in_interval(bond,slave->last_rx,1) != 0) {
            #line 2726 
            bond_propose_link_state(slave,0);
            #line 2727 
            slave_state_changed = 1;
            #line 2734 
            if (oldcurrent == (struct slave *)0) {
              #line 2735 
              netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
              #line 2736 
              do_failover = 1;
            }
            else 
                 #line 2738 
                 netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
          }
        }
      }
      else {
        #line 2748 
        if (bond_time_in_interval(bond,trans_start,2)) {
          #line 2749 
          if (! bond_time_in_interval(bond,slave->last_rx,2)) {
            #line 2748 
            _LOR: {
                    #line 2751 
                    bond_propose_link_state(slave,2);
                    #line 2752 
                    slave_state_changed = 1;
                    #line 2754 
                    if (slave->link_failure_count != 4294967295U) 
                                                                  #line 2755 
                                                                  (slave->link_failure_count) ++;
                    #line 2757 
                    netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
                    #line 2759 
                    if (slave == oldcurrent) 
                                             #line 2760 
                                             do_failover = 1;
                  }
          }
        }
        else 
             #line 2748 
             goto _LOR;
      }
      #line 2771 
      if ((int)bond_slave_is_up(slave) != 0) 
                                             #line 2772 
                                             bond_arp_send_all(bond,slave);
    }
    #line 2717 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 2775 
  rcu_read_unlock();
  #line 2777 
  if (do_failover != 0 || slave_state_changed != 0) {
    #line 2778 
    if (rtnl_trylock() == 0) 
                             #line 2779 
                             goto re_arm;
    #line 2781 
    iter = (bond->dev)->adj_list.lower.next;
    #line 2781 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    #line 2781 
    while (slave != (struct slave *)0) {
      #line 2782 
      if ((int)slave->link_new_state != -1) 
                                            #line 2783 
                                            slave->link = slave->link_new_state;
      #line 2781 
      slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    }
    #line 2786 
    if (slave_state_changed != 0) {
      #line 2787 
      bond_slave_state_change(bond);
      #line 2788 
      if (bond->params.mode == 2) 
                                  #line 2789 
                                  bond_update_slave_arr(bond,(struct slave *)0);
    }
    #line 2791 
    if (do_failover != 0) {
      #line 2792 
      block_netpoll_tx();
      #line 2793 
      bond_select_active_slave(bond);
      #line 2794 
      unblock_netpoll_tx();
    }
    #line 2796 
    rtnl_unlock();
  }
  #line 2799 
  re_arm: 
          #line 2799 
  ;
  #line 2800 
  if (bond->params.arp_interval != 0) {
    #line 2801 
    ;
    #line 2801 
    ;
    #line 2801 
    cif_queue_delayed_work_0(bond->wq,& bond->arp_work,msecs_to_jiffies((unsigned int)bond->params.arp_interval));
  }
  #line 2803 
  return;
}

#line 2812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_ab_arp_inspect(struct bonding *bond)
{
  #line 2814 
  unsigned long trans_start;
  #line 2814 
  unsigned long last_rx;
  #line 2815 
  struct list_head *iter;
  #line 2816 
  struct slave *slave;
  #line 2817 
  int commit = 0;
  #line 2819 
  iter = & (bond->dev)->adj_list.lower;
  #line 2819 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2819 
  while (slave != (struct slave *)0) {
    {
      #line 2820 
      bond_propose_link_state(slave,-1);
      #line 2821 
      last_rx = slave_last_rx(bond,slave);
      #line 2823 
      if ((int)slave->link != 0) {
        #line 2824 
        if ((int)bond_time_in_interval(bond,last_rx,1) != 0) {
          #line 2825 
          bond_propose_link_state(slave,0);
          #line 2826 
          commit ++;
        }
        #line 2828 
        goto __Cont;
      }
      #line 2835 
      if ((int)bond_time_in_interval(bond,slave->last_link_up,2) != 0) 
        #line 2836 
        goto __Cont;
      #line 2850 
      if (! bond_is_active_slave(slave)) {
        #line 2851 
        struct slave *_________p1;
        {
          #line 2852 
          union __anonunion___u_1771 __u;
          #line 2851 
          __read_once_size((void *)(& bond->current_arp_slave),(void *)(& __u.__c),8);
          #line 2851 
          _________p1 = (__u.__val);
          }
        #line 2850 
        if (_________p1 == (struct slave *)0) {
          #line 2852 
          if (! bond_time_in_interval(bond,last_rx,3)) {
            #line 2853 
            bond_propose_link_state(slave,2);
            #line 2854 
            commit ++;
          }
        }
      }
      #line 2862 
      trans_start = dev_trans_start(slave->dev);
      #line 2863 
      if ((int)bond_is_active_slave(slave) != 0) {
        #line 2864 
        if (bond_time_in_interval(bond,trans_start,2)) {
          #line 2865 
          if (! bond_time_in_interval(bond,last_rx,2)) {
            #line 2863 
            _LOR: {
                    #line 2866 
                    bond_propose_link_state(slave,2);
                    #line 2867 
                    commit ++;
                  }
          }
        }
        else 
             #line 2863 
             goto _LOR;
      }
    }
    #line 2819 
    __Cont: 
            #line 2819 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 2871 
  return commit;
}

#line 2879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_ab_arp_commit(struct bonding *bond)
{
  #line 2881 
  unsigned long trans_start;
  #line 2882 
  struct list_head *iter;
  #line 2883 
  struct slave *slave;
  #line 2885 
  iter = (bond->dev)->adj_list.lower.next;
  #line 2885 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 2885 
  while (slave != (struct slave *)0) {
    #line 2886 
    switch ((int)slave->link_new_state) {
      #line 2887 
      case -1: 
               #line 2887 
      ;
      #line 2888 
      goto __Cont;
      #line 2890 
      case 0: 
              #line 2890 
      ;
      #line 2891 
      trans_start = dev_trans_start(slave->dev);
      {
        #line 2892 
        bool __warned_2;
        #line 2892 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 2892 
          if (! __warned_2) {
            #line 2892 
            if (! lockdep_rtnl_is_held()) {
              #line 2892 
              __warned_2 = (_Bool)1;
              #line 2892 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2892,(char *)"suspicious rcu_dereference_protected() usage");
            }
          }
      }
      #line 2892 
      ;
      #line 2892 
      if (bond->curr_active_slave != slave) 
                                            #line 2892 
                                            goto _LOR_0;
      else {
        {
          #line 2893 
          bool __warned_3;
          #line 2893 
          if (debug_lockdep_rcu_enabled() != 0) 
            #line 2893 
            if (! __warned_3) {
              #line 2893 
              if (! lockdep_rtnl_is_held()) {
                #line 2893 
                __warned_3 = (_Bool)1;
                #line 2893 
                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2893,(char *)"suspicious rcu_dereference_protected() usage");
              }
            }
        }
        #line 2892 
        if (bond->curr_active_slave == (struct slave *)0) {
          #line 2893 
          if ((int)bond_time_in_interval(bond,trans_start,1) != 0) {
            #line 2892 
            _LOR_0: {
                      #line 2895 
                      struct slave *current_arp_slave;
                      {
                        #line 2897 
                        bool __warned;
                        #line 2897 
                        if (debug_lockdep_rcu_enabled() != 0) 
                          #line 2897 
                          if (! __warned) {
                            #line 2897 
                            if (! lockdep_rtnl_is_held()) {
                              #line 2897 
                              __warned = (_Bool)1;
                              #line 2897 
                              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2897,(char *)"suspicious rcu_dereference_protected() usage");
                            }
                          }
                      }
                      #line 2897 
                      current_arp_slave = bond->current_arp_slave;
                      #line 2898 
                      bond_set_slave_link_state(slave,0,(_Bool)1);
                      #line 2900 
                      if (current_arp_slave != (struct slave *)0) {
                        #line 2901 
                        bond_set_slave_inactive_flags(current_arp_slave,(_Bool)1);
                        {
                          #line 2905 
                          union __anonunion___u_1773 __u = {.__val = (struct slave *)0};
                          #line 2904 
                          __write_once_size((void *)(& bond->current_arp_slave),(void *)(& __u.__c),8);
                          #line 2904 
                          struct slave *tmp_3 = __u.__val;
                        }
                      }
                      #line 2907 
                      netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
                      {
                        #line 2909 
                        bool __warned_0;
                        #line 2909 
                        if (debug_lockdep_rcu_enabled() != 0) 
                          #line 2909 
                          if (! __warned_0) {
                            #line 2909 
                            if (! lockdep_rtnl_is_held()) {
                              #line 2909 
                              __warned_0 = (_Bool)1;
                              #line 2909 
                              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2909,(char *)"suspicious rcu_dereference_protected() usage");
                            }
                          }
                      }
                      #line 2909 
                      if (bond->curr_active_slave == (struct slave *)0) 
                        #line 2909 
                        goto _LOR;
                      else {
                        {
                          #line 2910 
                          bool __warned_1;
                          #line 2910 
                          if (debug_lockdep_rcu_enabled() != 0) 
                            #line 2910 
                            if (! __warned_1) {
                              #line 2910 
                              if (! lockdep_rtnl_is_held()) {
                                #line 2910 
                                __warned_1 = (_Bool)1;
                                #line 2910 
                                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2910,(char *)"suspicious rcu_dereference_protected() usage");
                              }
                            }
                        }
                        #line 2909 
                        ;
                        #line 2909 
                        if (bond->primary_slave == slave) 
                                                          #line 2909 
                                                          _LOR: 
                                                                #line 2911 
                                                                goto do_failover;
                      }
                    }
          }
        }
      }
      #line 2915 
      goto __Cont;
      #line 2917 
      case 2: 
              #line 2917 
      ;
      #line 2918 
      if (slave->link_failure_count != 4294967295U) 
                                                    #line 2919 
                                                    (slave->link_failure_count) ++;
      #line 2921 
      bond_set_slave_link_state(slave,2,(_Bool)1);
      #line 2923 
      bond_set_slave_inactive_flags(slave,(_Bool)1);
      #line 2926 
      netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
      {
        #line 2928 
        bool __warned_4;
        #line 2928 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 2928 
          if (! __warned_4) {
            #line 2928 
            if (! lockdep_rtnl_is_held()) {
              #line 2928 
              __warned_4 = (_Bool)1;
              #line 2928 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2928,(char *)"suspicious rcu_dereference_protected() usage");
            }
          }
      }
      #line 2928 
      ;
      #line 2928 
      if (bond->curr_active_slave == slave) {
        {
          #line 2930 
          union __anonunion___u_1775 __u_0 = {.__val = (struct slave *)0};
          #line 2929 
          __write_once_size((void *)(& bond->current_arp_slave),(void *)(& __u_0.__c),8);
          #line 2929 
          struct slave *tmp_12 = __u_0.__val;
        }
        #line 2930 
        goto do_failover;
      }
      #line 2933 
      goto __Cont;
      #line 2935 
      default: 
               #line 2935 
      ;
      #line 2936 
      netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(int)slave->link_new_state);
      #line 2939 
      goto __Cont;
    }
    #line 2942 
    do_failover: 
                 #line 2942 
    ;
    #line 2943 
    block_netpoll_tx();
    #line 2944 
    bond_select_active_slave(bond);
    #line 2945 
    unblock_netpoll_tx();
    #line 2885 
    __Cont: 
            #line 2885 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 2948 
  bond_set_carrier(bond);
  #line 2949 
  return;
}

#line 2955  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_ab_arp_probe(struct bonding *bond)
{
  #line 2958 
  struct slave *________p1;
  #line 2959 
  struct slave *________p1_0;
  #line 2957 
  struct slave *slave;
  #line 2960 
  struct list_head *iter;
  #line 2957 
  struct slave *before = (struct slave *)0;
  #line 2957 
  struct slave *new_slave = (struct slave *)0;
  {
    #line 2959 
    union __anonunion___u_1777 __u;
    #line 2958 
    __read_once_size((void *)(& bond->current_arp_slave),(void *)(& __u.__c),8);
    #line 2958 
    ________p1 = (__u.__val);
    {
      #line 2958 
      bool __warned;
      #line 2958 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 2958 
        if (! __warned) {
          #line 2958 
          if (rcu_read_lock_held() == 0) {
            #line 2958 
            __warned = (_Bool)1;
            #line 2958 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2958,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 2958 
  struct slave *curr_arp_slave = ________p1;
  {
    #line 2960 
    union __anonunion___u_1779 __u_0;
    #line 2959 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_0.__c),8);
    #line 2959 
    ________p1_0 = (__u_0.__val);
    {
      #line 2959 
      bool __warned_0;
      #line 2959 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 2959 
        if (! __warned_0) {
          #line 2959 
          if (rcu_read_lock_held() == 0) {
            #line 2959 
            __warned_0 = (_Bool)1;
            #line 2959 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",2959,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 2959 
  struct slave *curr_active_slave = ________p1_0;
  #line 2961 
  bool found = (_Bool)0;
  #line 2962 
  bool should_notify_rtnl = (_Bool)0;
  #line 2964 
  if (curr_arp_slave != (struct slave *)0 && curr_active_slave != (struct slave *)0) 
    #line 2965 
    netdev_info(bond->dev,(char *)"PROBE: c_arp %s && cas %s BAD\n",(char *)(& (curr_arp_slave->dev)->name),(char *)(& (curr_active_slave->dev)->name));
  #line 2969 
  if (curr_active_slave != (struct slave *)0) {
    #line 2970 
    bond_arp_send_all(bond,curr_active_slave);
    #line 2971 
    return should_notify_rtnl;
  }
  #line 2979 
  if (curr_arp_slave == (struct slave *)0) {
    #line 2980 
    curr_arp_slave = (struct slave *)netdev_lower_get_first_private_rcu(bond->dev);
    #line 2981 
    if (curr_arp_slave == (struct slave *)0) 
                                             #line 2982 
                                             return should_notify_rtnl;
  }
  #line 2985 
  bond_set_slave_inactive_flags(curr_arp_slave,(_Bool)0);
  #line 2987 
  iter = & (bond->dev)->adj_list.lower;
  #line 2987 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 2987 
  while (slave != (struct slave *)0) {
    {
      #line 2988 
      if (! found && before == (struct slave *)0) {
        #line 2988 
        if ((int)bond_slave_is_up(slave) != 0) 
                                               #line 2989 
                                               before = slave;
      }
      #line 2991 
      if ((int)found != 0 && new_slave == (struct slave *)0) {
        #line 2991 
        if ((int)bond_slave_is_up(slave) != 0) 
                                               #line 2992 
                                               new_slave = slave;
      }
      #line 3000 
      if (! bond_slave_is_up(slave)) 
        #line 3000 
        if ((int)slave->link == 0) {
          #line 3001 
          bond_set_slave_link_state(slave,2,(_Bool)0);
          #line 3003 
          if (slave->link_failure_count != 4294967295U) 
                                                        #line 3004 
                                                        (slave->link_failure_count) ++;
          #line 3006 
          bond_set_slave_inactive_flags(slave,(_Bool)0);
          #line 3009 
          netdev_info(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
        }
      #line 3011 
      if (slave == curr_arp_slave) 
                                   #line 3012 
                                   found = (_Bool)1;
    }
    #line 2987 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 3015 
  if (new_slave == (struct slave *)0 && before != (struct slave *)0) 
    #line 3016 
    new_slave = before;
  #line 3018 
  if (new_slave == (struct slave *)0) 
                                      #line 3019 
                                      goto check_state;
  #line 3021 
  bond_set_slave_link_state(new_slave,3,(_Bool)0);
  #line 3023 
  bond_set_slave_active_flags(new_slave,(_Bool)0);
  #line 3024 
  bond_arp_send_all(bond,new_slave);
  #line 3025 
  new_slave->last_link_up = jiffies;
  {
    #line 3026 
    uintptr_t _r_a_p__v = (unsigned long)new_slave;
    #line 3028 
    ldv_inline_asm();
    {
      #line 3027 
      union __anonunion___u_1783 __u_1 = {.__val = (struct slave *)_r_a_p__v};
      #line 3026 
      __write_once_size((void *)(& bond->current_arp_slave),(void *)(& __u_1.__c),8);
      #line 3026 
      struct slave *tmp_15 = __u_1.__val;
    }
  }
  #line 3028 
  check_state: 
               #line 3028 
  ;
  #line 3029 
  iter = & (bond->dev)->adj_list.lower;
  #line 3029 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 3029 
  while (slave != (struct slave *)0) {
    #line 3030 
    if ((unsigned int)slave->should_notify != 0U || (unsigned int)slave->should_notify_link != 0U) {
      #line 3031 
      should_notify_rtnl = (_Bool)1;
      #line 3032 
      break;
    }
    #line 3029 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 3035 
  return should_notify_rtnl;
}

#line 3038  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_activebackup_arp_mon(struct bonding *bond)
{
  #line 3042 
  int delta_in_ticks;
  #line 3040 
  bool should_notify_peers = (_Bool)0;
  #line 3041 
  bool should_notify_rtnl = (_Bool)0;
  #line 3044 
  delta_in_ticks = (int)msecs_to_jiffies((unsigned int)bond->params.arp_interval);
  #line 3046 
  if (list_empty_0(& (bond->dev)->adj_list.lower) != 0) 
                                                        #line 3047 
                                                        goto re_arm;
  #line 3049 
  rcu_read_lock();
  #line 3051 
  should_notify_peers = bond_should_notify_peers(bond);
  #line 3053 
  if (bond_ab_arp_inspect(bond) != 0) {
    #line 3054 
    rcu_read_unlock();
    #line 3057 
    if (rtnl_trylock() == 0) {
      #line 3058 
      delta_in_ticks = 1;
      #line 3059 
      should_notify_peers = (_Bool)0;
      #line 3060 
      goto re_arm;
    }
    #line 3063 
    bond_ab_arp_commit(bond);
    #line 3065 
    rtnl_unlock();
    #line 3066 
    rcu_read_lock();
  }
  #line 3069 
  should_notify_rtnl = bond_ab_arp_probe(bond);
  #line 3070 
  rcu_read_unlock();
  #line 3072 
  re_arm: 
          #line 3072 
  ;
  #line 3073 
  if (bond->params.arp_interval != 0) 
                                      #line 3074 
                                      cif_queue_delayed_work_0(bond->wq,& bond->arp_work,(unsigned long)delta_in_ticks);
  #line 3076 
  if ((int)should_notify_peers != 0 || (int)should_notify_rtnl != 0) {
    #line 3077 
    if (rtnl_trylock() == 0) 
                             #line 3078 
                             return;
    #line 3080 
    if ((int)should_notify_peers != 0) 
                                       #line 3081 
                                       call_netdevice_notifiers(19UL,bond->dev);
    #line 3083 
    if ((int)should_notify_rtnl != 0) {
      #line 3084 
      bond_slave_state_notify(bond);
      #line 3085 
      bond_slave_link_notify(bond);
    }
    #line 3088 
    rtnl_unlock();
  }
  #line 3090 
  return;
}

#line 3092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_arp_monitor(struct work_struct *work)
{
  #line 3094 
  void *__mptr;
  #line 3094 
  __mptr = (void *)work;
  #line 3094 
  struct bonding *bond = ((struct bonding *)(__mptr + 18446744073709550816U));
  #line 3097 
  if (bond->params.mode == 1) 
                              #line 3098 
                              bond_activebackup_arp_mon(bond); else 
                                                                    #line 3100 
                                                                    bond_loadbalance_arp_mon(bond);
  #line 3101 
  return;
}

#line 3106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_event_changename(struct bonding *bond)
{
  #line 3108 
  bond_remove_proc_entry(bond);
  #line 3109 
  bond_create_proc_entry(bond);
  #line 3111 
  bond_debug_reregister(bond);
  #line 3113 
  return 0;
}

#line 3116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_master_netdev_event(unsigned long event, struct net_device *bond_dev)
{
  #line 3119 
  struct bonding *event_bond = netdev_priv(bond_dev);
  {
    #line 3121 
    bool branch;
    #line 3121 
    struct _ddebug __UNIQUE_ID_ddebug620 = {.modname = (char *)"bonding", .function = (char *)"bond_master_netdev_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"%s called\n", .lineno = (unsigned int)3121U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3121 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug620.key.dd_key_false.key,(_Bool)0);
    #line 3121 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3121 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug620,bond_dev,(char *)"%s called\n",(char *)"bond_master_netdev_event");
  }
  #line 3123 
  switch (event) {
    #line 3124 
    case (unsigned long)11: 
                            #line 3124 
    ;
    #line 3125 
    return bond_event_changename(event_bond);
    #line 3126 
    case (unsigned long)6: 
                           #line 3126 
    ;
    #line 3127 
    bond_remove_proc_entry(event_bond);
    #line 3128 
    break;
    #line 3129 
    case (unsigned long)5: 
                           #line 3129 
    ;
    #line 3130 
    bond_create_proc_entry(event_bond);
    #line 3131 
    break;
    #line 3132 
    default: 
             #line 3132 
    ;
    #line 3133 
    break;
  }
  #line 3136 
  return 0;
}

#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_slave_netdev_event(unsigned long event, struct net_device *slave_dev)
{
  #line 3142 
  struct slave *primary_0;
  #line 3143 
  struct bonding *bond;
  #line 3144 
  struct net_device *bond_dev;
  {
    #line 3142 
    bool __warned;
    #line 3142 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 3142 
      if (! __warned) {
        #line 3142 
        if (! lockdep_rtnl_is_held()) {
          #line 3142 
          __warned = (_Bool)1;
          #line 3142 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",3142,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 3142 
  struct slave *slave = (struct slave *)slave_dev->rx_handler_data;
  #line 3150 
  if (slave == (struct slave *)0) {
    {
      #line 3151 
      bool branch;
      #line 3151 
      struct _ddebug __UNIQUE_ID_ddebug621 = {.modname = (char *)"bonding", .function = (char *)"bond_slave_netdev_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"%s called on NULL slave\n", .lineno = (unsigned int)3151U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3151 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug621.key.dd_key_false.key,(_Bool)0);
      #line 3151 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3151 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug621,slave_dev,(char *)"%s called on NULL slave\n",(char *)"bond_slave_netdev_event");
    }
    #line 3152 
    return 0;
  }
  #line 3155 
  bond_dev = (slave->bond)->dev;
  #line 3156 
  bond = slave->bond;
  {
    #line 3157 
    bool __warned_0;
    #line 3157 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 3157 
      if (! __warned_0) {
        #line 3157 
        if (! lockdep_rtnl_is_held()) {
          #line 3157 
          __warned_0 = (_Bool)1;
          #line 3157 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",3157,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 3157 
  primary_0 = bond->primary_slave;
  {
    #line 3159 
    bool branch_0;
    #line 3159 
    struct _ddebug __UNIQUE_ID_ddebug622 = {.modname = (char *)"bonding", .function = (char *)"bond_slave_netdev_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3159U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3159 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug622.key.dd_key_false.key,(_Bool)0);
    #line 3159 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 3159 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug622,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),(char *)"bond_slave_netdev_event");
  }
  #line 3161 
  switch (event) {
    #line 3229 
    char *tmp_9;
    #line 3162 
    case (unsigned long)6: 
                           #line 3162 
    ;
    #line 3163 
    if ((unsigned int)bond_dev->type != 1U) 
                                            #line 3164 
                                            bond_release_and_destroy(bond_dev,slave_dev); else 
                                                                    #line 3166 
                                                                    __bond_release_one(bond_dev,slave_dev,(_Bool)0,(_Bool)1);
    #line 3167 
    break;
    #line 3168 
    case (unsigned long)1: 
                           #line 3168 
    ;
    #line 3169 
    case (unsigned long)4: 
                           #line 3169 
    ;
    #line 3177 
    if (bond_update_speed_duplex(slave) != 0) 
      #line 3177 
      if (bond->params.mode == 4) 
        #line 3179 
        if (slave->last_link_up != 0UL) 
                                        #line 3180 
                                        slave->link = (signed char)1; else 
                                                                    #line 3182 
                                                                    slave->link = (signed char)2;
    #line 3185 
    if (bond->params.mode == 4) 
                                #line 3186 
                                bond_3ad_adapter_speed_duplex_changed(slave);
    #line 3188 
    case (unsigned long)2: 
                           #line 3188 
    ;
    #line 3197 
    if ((int)bond_mode_can_use_xmit_hash(bond) != 0) 
                                                     #line 3198 
                                                     bond_update_slave_arr(bond,(struct slave *)0);
    #line 3199 
    break;
    #line 3200 
    case (unsigned long)7: 
                           #line 3200 
    ;
    #line 3212 
    break;
    #line 3213 
    case (unsigned long)11: 
                            #line 3213 
    ;
    #line 3215 
    if (bond_uses_primary(bond)) {
      #line 3215 
      if ((int)bond->params.primary[0] == 0) 
                                             #line 3217 
                                             break;
    }
    else 
         #line 3217 
         break;
    #line 3219 
    if (slave == primary_0) {
      #line 3222 
      union __anonunion___u_1785 __u = {.__val = (struct slave *)0};
      #line 3221 
      __write_once_size((void *)(& bond->primary_slave),(void *)(& __u.__c),8);
      #line 3221 
      struct slave *tmp_8 = __u.__val;
    }
    else {
      #line 3222 
      if (cif_strcmp((char *)(& slave_dev->name),
                     (char *)(& bond->params.primary)) == 0) {
        #line 3224 
        uintptr_t _r_a_p__v = (unsigned long)slave;
        #line 3226 
        ldv_inline_asm();
        {
          #line 3225 
          union __anonunion___u_1789 __u_0 = {.__val = (struct slave *)_r_a_p__v};
          #line 3224 
          __write_once_size((void *)(& bond->primary_slave),(void *)(& __u_0.__c),8);
          #line 3224 
          struct slave *tmp_12 = __u_0.__val;
        }
      }
      else 
           #line 3226 
           break;
    }
    #line 3229 
    if (primary_0 != (struct slave *)0) 
                                        #line 3229 
                                        tmp_9 = (char *)(& slave_dev->name); else 
                                                                    #line 3229 
                                                                    tmp_9 = (char *)"none";
    #line 3229 
    ;
    #line 3229 
    netdev_info(bond->dev,(char *)"Primary slave changed to %s, reselecting active slave\n",tmp_9);
    #line 3232 
    block_netpoll_tx();
    #line 3233 
    bond_select_active_slave(bond);
    #line 3234 
    unblock_netpoll_tx();
    #line 3235 
    break;
    #line 3236 
    case (unsigned long)12: 
                            #line 3236 
    ;
    #line 3237 
    bond_compute_features(bond);
    #line 3238 
    break;
    #line 3239 
    case (unsigned long)22: 
                            #line 3239 
    ;
    #line 3241 
    call_netdevice_notifiers(event,(slave->bond)->dev);
    #line 3242 
    break;
    #line 3243 
    default: 
             #line 3243 
    ;
    #line 3244 
    break;
  }
  #line 3247 
  return 0;
}

#line 3257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 3260 
  struct net_device *event_dev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  {
    #line 3262 
    bool branch;
    #line 3262 
    struct _ddebug __UNIQUE_ID_ddebug623 = {.modname = (char *)"bonding", .function = (char *)"bond_netdev_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"%s received %s\n", .lineno = (unsigned int)3262U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3262 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug623.key.dd_key_false.key,(_Bool)0);
    #line 3262 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 3262 
      ;
      #line 3262 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug623,event_dev,(char *)"%s received %s\n",(char *)"bond_netdev_event",netdev_cmd_to_name((enum netdev_cmd)event));
    }
  }
  #line 3265 
  if ((event_dev->priv_flags & 4U) == 0U) 
                                          #line 3266 
                                          return 0;
  #line 3268 
  if ((event_dev->flags & 1024U) != 0U) {
    #line 3269 
    int ret;
    #line 3271 
    ret = bond_master_netdev_event(event,event_dev);
    #line 3272 
    if (ret != 0) 
                  #line 3273 
                  return ret;
  }
  #line 3276 
  if ((event_dev->flags & 2048U) != 0U) {
    #line 3277 
    return bond_slave_netdev_event(event,event_dev);
  }
  #line 3279 
  return 0;
}

#line 3282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct notifier_block bond_netdev_notifier = {.notifier_call = & bond_netdev_event};
#line 3289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
__inline static u32 bond_eth_hash(struct sk_buff *skb)
{
  #line 3291 
  struct ethhdr *ep;
  #line 3291 
  struct ethhdr hdr_tmp;
  #line 3293 
  ep = (struct ethhdr *)skb_header_pointer(skb,0,14,(void *)(& hdr_tmp));
  #line 3294 
  if (ep != (struct ethhdr *)0) 
                                #line 3295 
                                return (unsigned int)(((int)ep->h_dest[5] ^ (int)ep->h_source[5]) ^ (int)ep->h_proto);
  #line 3296 
  return 0U;
}

#line 3299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_flow_ip(struct sk_buff *skb, struct flow_keys *fk, int *noff, int *proto, bool l34)
{
  #line 3302 
  struct ipv6hdr *iph6;
  #line 3303 
  struct iphdr *iph;
  #line 3305 
  if ((unsigned int)skb->protocol == 8U) {
    #line 3306 
    int tmp_0;
    #line 3306 
    if (pskb_may_pull(skb,(unsigned int)*noff + 20U)) 
                                                      #line 3306 
                                                      tmp_0 = 0; else 
                                                                   #line 3306 
                                                                   tmp_0 = 1;
    #line 3306 
    if ((long)tmp_0 != 0L) 
                           #line 3307 
                           return (_Bool)0;
    #line 3308 
    iph = (struct iphdr *)(skb->data + (unsigned long)*noff);
    #line 3309 
    iph_to_flow_copy_v4addrs(fk,iph);
    #line 3310 
    *noff += (int)iph->ihl << 2;
    #line 3311 
    if (! ip_is_fragment(iph)) 
                               #line 3312 
                               *proto = (int)iph->protocol;
  }
  else 
    #line 3313 
    if ((unsigned int)skb->protocol == 56710U) {
      #line 3314 
      int tmp_3;
      #line 3314 
      if (pskb_may_pull(skb,(unsigned int)*noff + 40U)) 
                                                        #line 3314 
                                                        tmp_3 = 0; else 
                                                                    #line 3314 
                                                                    tmp_3 = 1;
      #line 3314 
      if ((long)tmp_3 != 0L) 
                             #line 3315 
                             return (_Bool)0;
      #line 3316 
      iph6 = (struct ipv6hdr *)(skb->data + (unsigned long)*noff);
      #line 3317 
      iph_to_flow_copy_v6addrs(fk,iph6);
      #line 3318 
      *noff = (int)((unsigned int)*noff + 40U);
      #line 3319 
      *proto = (int)iph6->nexthdr;
    }
    else 
         #line 3321 
         return (_Bool)0;
  #line 3324 
  if ((int)l34 != 0 && *proto >= 0) 
                                    #line 3325 
                                    fk->ports.__anonCompField_flow_dissector_key_ports_90.ports = skb_flow_get_ports(skb,*noff,(unsigned char)((int)((unsigned char)*proto)));
  #line 3327 
  return (_Bool)1;
}

#line 3331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static bool bond_flow_dissect(struct bonding *bond, struct sk_buff *skb, struct flow_keys *fk)
{
  #line 3335 
  int noff;
  #line 3334 
  bool l34 = (_Bool)(bond->params.xmit_policy == 1);
  #line 3335 
  int proto = -1;
  #line 3337 
  if (bond->params.xmit_policy > 2) {
    #line 3338 
    memset((void *)fk,0,72UL);
    #line 3339 
    return __skb_flow_dissect((struct net *)0,skb,& flow_keys_bonding,(void *)fk,
                         (void *)0,(unsigned short)0,0,0,0U);
  }
  #line 3343 
  fk->ports.__anonCompField_flow_dissector_key_ports_90.ports = 0U;
  #line 3344 
  memset((void *)(& fk->icmp),0,4UL);
  #line 3345 
  noff = skb_network_offset(skb);
  #line 3346 
  if (! bond_flow_ip(skb,fk,& noff,& proto,(_Bool)((bool)((int)l34) != 0))) 
    #line 3347 
    return (_Bool)0;
  #line 3354 
  if (proto == 1 || proto == 58) {
    #line 3355 
    ;
    #line 3355 
    ;
    #line 3355 
    ;
    #line 3355 
    skb_flow_get_icmp_tci(skb,& fk->icmp,(void *)skb->data,skb_transport_offset(skb),(int)skb_headlen(skb));
    #line 3358 
    if (proto == 1) {
      #line 3359 
      if (! icmp_is_err((int)fk->icmp.__anonCompField_flow_dissector_key_icmp_91.type)) 
        #line 3360 
        return (_Bool)1;
      #line 3362 
      noff = (int)((unsigned int)noff + 8U);
    }
    else 
      #line 3363 
      if (proto == 58) {
        #line 3364 
        if (! icmpv6_is_err((int)fk->icmp.__anonCompField_flow_dissector_key_icmp_91.type)) 
          #line 3365 
          return (_Bool)1;
        #line 3367 
        noff = (int)((unsigned int)noff + 8U);
      }
    #line 3369 
    return bond_flow_ip(skb,fk,& noff,& proto,(_Bool)((bool)((int)l34) != 0));
  }
  #line 3372 
  return (_Bool)1;
}

#line 3383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
u32 bond_xmit_hash(struct bonding *bond, struct sk_buff *skb)
{
  #line 3385 
  struct flow_keys flow;
  #line 3386 
  u32 hash;
  #line 3388 
  if (bond->params.xmit_policy == 4 && (unsigned int)skb->l4_hash != 0U) 
    #line 3390 
    return skb->hash;
  #line 3392 
  if (bond->params.xmit_policy == 0) 
                                     #line 3392 
                                     goto _LOR;
  else {
    #line 3393 
    if (! bond_flow_dissect(bond,skb,& flow)) {
      #line 3392 
      _LOR: 
      #line 3394 
      return bond_eth_hash(skb);
    }
  }
  #line 3396 
  if ((unsigned int)bond->params.xmit_policy + 4294967294U <= 1U) 
                                                                  #line 3398 
                                                                  hash = bond_eth_hash(skb);
  else 
    #line 3400 
    if ((unsigned int)flow.icmp.id != 0U) 
                                          #line 3401 
                                          memcpy((void *)(& hash),(void *)(& flow.icmp),4UL); else 
                                                                    #line 3403 
                                                                    memcpy((void *)(& hash),(void *)(& flow.ports.__anonCompField_flow_dissector_key_ports_90.ports),4UL);
  #line 3406 
  hash = (flow_get_u32_dst(& flow) ^ flow_get_u32_src(& flow)) ^ hash;
  #line 3407 
  hash = (hash >> 16) ^ hash;
  #line 3408 
  hash = (hash >> 8) ^ hash;
  #line 3410 
  return hash >> 1;
}

#line 3415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_work_init_all(struct bonding *bond)
{
  {
    #line 3417 
    struct lock_class_key __key;
    #line 3417 
    __init_work(& bond->mcast_work.work,0);
    #line 3417 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 3417 
    bond->mcast_work.work.data = __constr_expr_45;
    #line 3417 
    lockdep_init_map(& bond->mcast_work.work.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 3417 
    INIT_LIST_HEAD(& bond->mcast_work.work.entry);
    #line 3417 
    bond->mcast_work.work.func = & bond_resend_igmp_join_requests_delayed;
  }
  {
    #line 3417 
    struct lock_class_key __key_0;
    #line 3417 
    init_timer_key(& bond->mcast_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&bond->mcast_work)->timer",& __key_0);
  }
  {
    #line 3419 
    struct lock_class_key __key_1;
    #line 3419 
    __init_work(& bond->alb_work.work,0);
    #line 3419 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 3419 
    bond->alb_work.work.data = __constr_expr_46;
    #line 3419 
    lockdep_init_map(& bond->alb_work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 3419 
    INIT_LIST_HEAD(& bond->alb_work.work.entry);
    #line 3419 
    bond->alb_work.work.func = & bond_alb_monitor;
  }
  {
    #line 3419 
    struct lock_class_key __key_2;
    #line 3419 
    init_timer_key(& bond->alb_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&bond->alb_work)->timer",& __key_2);
  }
  {
    #line 3420 
    struct lock_class_key __key_3;
    #line 3420 
    __init_work(& bond->mii_work.work,0);
    #line 3420 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 3420 
    bond->mii_work.work.data = __constr_expr_47;
    #line 3420 
    lockdep_init_map(& bond->mii_work.work.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 3420 
    INIT_LIST_HEAD(& bond->mii_work.work.entry);
    #line 3420 
    bond->mii_work.work.func = & bond_mii_monitor;
  }
  {
    #line 3420 
    struct lock_class_key __key_4;
    #line 3420 
    init_timer_key(& bond->mii_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&bond->mii_work)->timer",& __key_4);
  }
  {
    #line 3421 
    struct lock_class_key __key_5;
    #line 3421 
    __init_work(& bond->arp_work.work,0);
    #line 3421 
    atomic_long_t __constr_expr_48 = {.counter = 137438953408LL};
    #line 3421 
    bond->arp_work.work.data = __constr_expr_48;
    #line 3421 
    lockdep_init_map(& bond->arp_work.work.lockdep_map,(char *)"(work_completion)",& __key_5,0);
    #line 3421 
    INIT_LIST_HEAD(& bond->arp_work.work.entry);
    #line 3421 
    bond->arp_work.work.func = & bond_arp_monitor;
  }
  {
    #line 3421 
    struct lock_class_key __key_6;
    #line 3421 
    init_timer_key(& bond->arp_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&bond->arp_work)->timer",& __key_6);
  }
  {
    #line 3422 
    struct lock_class_key __key_7;
    #line 3422 
    __init_work(& bond->ad_work.work,0);
    #line 3422 
    atomic_long_t __constr_expr_49 = {.counter = 137438953408LL};
    #line 3422 
    bond->ad_work.work.data = __constr_expr_49;
    #line 3422 
    lockdep_init_map(& bond->ad_work.work.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 3422 
    INIT_LIST_HEAD(& bond->ad_work.work.entry);
    #line 3422 
    bond->ad_work.work.func = & bond_3ad_state_machine_handler;
  }
  {
    #line 3422 
    struct lock_class_key __key_8;
    #line 3422 
    init_timer_key(& bond->ad_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&bond->ad_work)->timer",& __key_8);
  }
  {
    #line 3423 
    struct lock_class_key __key_9;
    #line 3423 
    __init_work(& bond->slave_arr_work.work,0);
    #line 3423 
    atomic_long_t __constr_expr_50 = {.counter = 137438953408LL};
    #line 3423 
    bond->slave_arr_work.work.data = __constr_expr_50;
    #line 3423 
    lockdep_init_map(& bond->slave_arr_work.work.lockdep_map,(char *)"(work_completion)",& __key_9,0);
    #line 3423 
    INIT_LIST_HEAD(& bond->slave_arr_work.work.entry);
    #line 3423 
    bond->slave_arr_work.work.func = & bond_slave_arr_handler;
  }
  {
    #line 3423 
    struct lock_class_key __key_10;
    #line 3423 
    init_timer_key(& bond->slave_arr_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&bond->slave_arr_work)->timer",& __key_10);
  }
  #line 3426 
  return;
}

#line 3426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_work_cancel_all(struct bonding *bond)
{
  #line 3428 
  cancel_delayed_work_sync(& bond->mii_work);
  #line 3429 
  cancel_delayed_work_sync(& bond->arp_work);
  #line 3430 
  cancel_delayed_work_sync(& bond->alb_work);
  #line 3431 
  cancel_delayed_work_sync(& bond->ad_work);
  #line 3432 
  cancel_delayed_work_sync(& bond->mcast_work);
  #line 3433 
  cancel_delayed_work_sync(& bond->slave_arr_work);
  #line 3434 
  return;
}

#line 3436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_open(struct net_device *bond_dev)
{
  #line 3439 
  struct list_head *iter;
  #line 3440 
  struct slave *slave;
  #line 3438 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3443 
  if (list_empty_0(& (bond->dev)->adj_list.lower) == 0) {
    #line 3444 
    iter = (bond->dev)->adj_list.lower.next;
    #line 3444 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    #line 3444 
    while (slave != (struct slave *)0) {
      #line 3445 
      if ((int)bond_uses_primary(bond) != 0) {
        #line 3446 
        struct slave *_________p1;
        {
          #line 3447 
          union __anonunion___u_1791 __u;
          #line 3446 
          __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
          #line 3446 
          _________p1 = (__u.__val);
          }
        #line 3445 
        ;
        #line 3445 
        if (_________p1 != slave) 
                                  #line 3447 
                                  bond_set_slave_inactive_flags(slave,(_Bool)1); else 
                                                                    #line 3445 
                                                                    goto _LAND;
      }
      else {
        #line 3445 
        _LAND: 
               #line 3449 
        ;
        #line 3449 
        if (bond->params.mode != 4) 
                                    #line 3450 
                                    bond_set_slave_active_flags(slave,(_Bool)1);
      }
      #line 3444 
      slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    }
  }
  #line 3456 
  if ((int)bond_is_lb(bond) != 0) {
    #line 3460 
    if (bond_alb_initialize(bond,bond->params.mode == 6) != 0) 
                                                               #line 3461 
                                                               return -12;
    #line 3462 
    if (bond->params.tlb_dynamic_lb != 0 || bond->params.mode == 6) 
                                                                    #line 3463 
                                                                    cif_queue_delayed_work_0(bond->wq,& bond->alb_work,0UL);
  }
  #line 3466 
  if (bond->params.miimon != 0) 
                                #line 3467 
                                cif_queue_delayed_work_0(bond->wq,& bond->mii_work,0UL);
  #line 3469 
  if (bond->params.arp_interval != 0) {
    #line 3470 
    cif_queue_delayed_work_0(bond->wq,& bond->arp_work,0UL);
    #line 3471 
    bond->recv_probe = & bond_arp_rcv;
  }
  #line 3474 
  if (bond->params.mode == 4) {
    #line 3475 
    cif_queue_delayed_work_0(bond->wq,& bond->ad_work,0UL);
    #line 3477 
    bond->recv_probe = & bond_3ad_lacpdu_recv;
    #line 3478 
    bond_3ad_initiate_agg_selection(bond,1);
  }
  #line 3481 
  if ((int)bond_mode_can_use_xmit_hash(bond) != 0) 
                                                   #line 3482 
                                                   bond_update_slave_arr(bond,(struct slave *)0);
  #line 3484 
  return 0;
}

#line 3487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_close(struct net_device *bond_dev)
{
  #line 3489 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3491 
  bond_work_cancel_all(bond);
  #line 3492 
  bond->send_peer_notif = (unsigned char)0U;
  #line 3493 
  if ((int)bond_is_lb(bond) != 0) 
                                  #line 3494 
                                  bond_alb_deinitialize(bond);
  #line 3495 
  bond->recv_probe = (int (*)(struct sk_buff *, struct bonding *, struct slave *))0;
  #line 3497 
  return 0;
}

#line 3503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_fold_stats(struct rtnl_link_stats64 *_res, struct rtnl_link_stats64 *_new, struct rtnl_link_stats64 *_old)
{
  #line 3510 
  int i;
  #line 3507 
  u64 *new = (u64 *)_new;
  #line 3508 
  u64 *old = (u64 *)_old;
  #line 3509 
  u64 *res = (u64 *)_res;
  #line 3512 
  i = 0;
  #line 3512 
  while ((unsigned int)i <= 23U) {
    {
      #line 3513 
      u64 nv = *(new + (unsigned long)i);
      #line 3514 
      u64 ov = *(old + (unsigned long)i);
      #line 3515 
      s64 delta = (long long)(nv - ov);
      #line 3518 
      if ((nv | ov) >> 32 == 0ULL) 
                                   #line 3519 
                                   delta = (long long)((int)((unsigned int)nv - (unsigned int)ov));
      #line 3524 
      if (delta > 0LL) 
                       #line 3525 
                       *(res + (unsigned long)i) += (unsigned long long)delta;
    }
    #line 3512 
    i ++;
  }
  #line 3527 
  return;
}

#line 3529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_get_stats(struct net_device *bond_dev, struct rtnl_link_stats64 *stats)
{
  #line 3533 
  struct rtnl_link_stats64 temp;
  #line 3534 
  struct list_head *iter;
  #line 3535 
  struct slave *slave;
  #line 3532 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3537 
  cif_spin_lock_stats_lock_of_bonding(& bond->stats_lock);
  #line 3538 
  memcpy((void *)stats,(void *)(& bond->bond_stats),192UL);
  #line 3540 
  rcu_read_lock();
  #line 3541 
  iter = & (bond->dev)->adj_list.lower;
  #line 3541 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 3541 
  while (slave != (struct slave *)0) {
    {
      #line 3543 
      struct rtnl_link_stats64 *new = dev_get_stats(slave->dev,& temp);
      #line 3545 
      bond_fold_stats(stats,new,& slave->slave_stats);
      #line 3548 
      memcpy((void *)(& slave->slave_stats),(void *)new,192UL);
    }
    #line 3541 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 3550 
  rcu_read_unlock();
  #line 3552 
  memcpy((void *)(& bond->bond_stats),(void *)stats,192UL);
  #line 3553 
  cif_spin_unlock_stats_lock_of_bonding(& bond->stats_lock);
  #line 3554 
  return;
}

#line 3556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_do_ioctl(struct net_device *bond_dev, struct ifreq *ifr, int cmd)
{
  #line 3560 
  struct ifbond k_binfo;
  #line 3562 
  struct ifslave k_sinfo;
  #line 3565 
  struct bond_opt_value newval;
  #line 3566 
  struct net *net;
  #line 3558 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3559 
  struct net_device *slave_dev = (struct net_device *)0;
  #line 3561 
  struct ifbond *u_binfo = (struct ifbond *)0;
  #line 3563 
  struct ifslave *u_sinfo = (struct ifslave *)0;
  #line 3564 
  struct mii_ioctl_data *mii = (struct mii_ioctl_data *)0;
  #line 3567 
  int res = 0;
  {
    #line 3569 
    bool branch;
    #line 3569 
    struct _ddebug __UNIQUE_ID_ddebug624 = {.modname = (char *)"bonding", .function = (char *)"bond_do_ioctl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"bond_ioctl: cmd=%d\n", .lineno = (unsigned int)3569U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3569 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug624.key.dd_key_false.key,(_Bool)0);
    #line 3569 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3569 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug624,bond_dev,(char *)"bond_ioctl: cmd=%d\n",cmd);
  }
  #line 3571 
  switch (cmd) {
    #line 3572 
    case 35143: 
                #line 3572 
    ;
    #line 3573 
    mii = if_mii(ifr);
    #line 3574 
    if (mii == (struct mii_ioctl_data *)0) 
                                           #line 3575 
                                           return -22;
    #line 3577 
    mii->phy_id = (unsigned short)0U;
    #line 3579 
    case 35144: 
                #line 3579 
    ;
    #line 3583 
    mii = if_mii(ifr);
    #line 3584 
    if (mii == (struct mii_ioctl_data *)0) 
                                           #line 3585 
                                           return -22;
    #line 3587 
    if ((unsigned int)mii->reg_num == 1U) {
      #line 3588 
      mii->val_out = (unsigned short)0U;
      #line 3589 
      if ((int)netif_carrier_ok(bond->dev) != 0) 
                                                 #line 3590 
                                                 mii->val_out = (unsigned short)4U;
    }
    #line 3593 
    return 0;
    #line 3594 
    case 35324: 
                #line 3594 
    ;
    #line 3595 
    case 35220: 
                #line 3595 
    ;
    #line 3596 
    u_binfo = (struct ifbond *)ifr->ifr_ifru.ifru_data;
    #line 3598 
    if (copy_from_user((void *)(& k_binfo),(void *)u_binfo,12UL) != 0UL) 
      #line 3599 
      return -14;
    #line 3601 
    bond_info_query(bond_dev,& k_binfo);
    #line 3602 
    if (copy_to_user((void *)u_binfo,(void *)(& k_binfo),12UL) != 0UL) 
      #line 3603 
      return -14;
    #line 3605 
    return 0;
    #line 3606 
    case 35323: 
                #line 3606 
    ;
    #line 3607 
    case 35219: 
                #line 3607 
    ;
    #line 3608 
    u_sinfo = (struct ifslave *)ifr->ifr_ifru.ifru_data;
    #line 3610 
    if (copy_from_user((void *)(& k_sinfo),(void *)u_sinfo,28UL) != 0UL) 
      #line 3611 
      return -14;
    #line 3613 
    res = bond_slave_info_query(bond_dev,& k_sinfo);
    #line 3614 
    if (res == 0) {
      #line 3614 
      if (copy_to_user((void *)u_sinfo,(void *)(& k_sinfo),28UL) != 0UL) 
        #line 3616 
        return -14;
    }
    #line 3618 
    return res;
    #line 3619 
    default: 
             #line 3619 
    ;
    #line 3620 
    break;
  }
  #line 3623 
  net = dev_net(bond_dev);
  #line 3625 
  if (! ns_capable(net->user_ns,12)) 
                                     #line 3626 
                                     return -1;
  #line 3628 
  slave_dev = __dev_get_by_name(net,(char *)(& ifr->ifr_ifru.ifru_slave));
  {
    #line 3630 
    bool branch_0;
    #line 3630 
    struct _ddebug __UNIQUE_ID_ddebug625 = {.modname = (char *)"bonding", .function = (char *)"bond_do_ioctl", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3630U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3630 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug625.key.dd_key_false.key,(_Bool)0);
    #line 3630 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 3630 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug625,bond_dev,(char *)"(slave %s): ",(char *)(& slave_dev->name),slave_dev);
  }
  #line 3632 
  if (slave_dev == (struct net_device *)0) 
                                           #line 3633 
                                           return -19;
  #line 3635 
  switch (cmd) {
    #line 3636 
    case 35312: 
                #line 3636 
    ;
    #line 3637 
    case 35216: 
                #line 3637 
    ;
    #line 3638 
    res = bond_enslave(bond_dev,slave_dev,(struct netlink_ext_ack *)0);
    #line 3639 
    break;
    #line 3640 
    case 35313: 
                #line 3640 
    ;
    #line 3641 
    case 35217: 
                #line 3641 
    ;
    #line 3642 
    res = bond_release(bond_dev,slave_dev);
    #line 3643 
    break;
    #line 3644 
    case 35314: 
                #line 3644 
    ;
    #line 3645 
    case 35218: 
                #line 3645 
    ;
    #line 3646 
    res = bond_set_dev_addr(bond_dev,slave_dev);
    #line 3647 
    break;
    #line 3648 
    case 35325: 
                #line 3648 
    ;
    #line 3649 
    case 35221: 
                #line 3649 
    ;
    #line 3650 
    __bond_opt_init(& newval,(char *)(& slave_dev->name),18446744073709551615ULL);
    #line 3651 
    res = __bond_opt_set_notify(bond,18U,& newval);
    #line 3653 
    break;
    #line 3654 
    default: 
             #line 3654 
    ;
    #line 3655 
    res = -95;
  }
  #line 3658 
  return res;
}

#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_change_rx_flags(struct net_device *bond_dev, int change)
{
  #line 3663 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3665 
  if ((change & 256) != 0) {
    #line 3666 
    int tmp_0;
    #line 3666 
    if ((bond_dev->flags & 256U) != 0U) 
                                        #line 3666 
                                        tmp_0 = 1; else 
                                                        #line 3666 
                                                        tmp_0 = -1;
    #line 3666 
    ;
    #line 3666 
    bond_set_promiscuity(bond,tmp_0);
  }
  #line 3669 
  if ((change & 512) != 0) {
    #line 3670 
    int tmp_1;
    #line 3670 
    if ((bond_dev->flags & 512U) != 0U) 
                                        #line 3670 
                                        tmp_1 = 1; else 
                                                        #line 3670 
                                                        tmp_1 = -1;
    #line 3670 
    ;
    #line 3670 
    bond_set_allmulti(bond,tmp_1);
  }
  #line 3672 
  return;
}

#line 3674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_set_rx_mode(struct net_device *bond_dev)
{
  #line 3677 
  struct list_head *iter;
  #line 3678 
  struct slave *slave;
  #line 3676 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3680 
  rcu_read_lock();
  #line 3681 
  if ((int)bond_uses_primary(bond) != 0) {
    #line 3682 
    struct slave *________p1;
    {
      #line 3683 
      union __anonunion___u_1793 __u;
      #line 3682 
      __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
      #line 3682 
      ________p1 = (__u.__val);
      {
        #line 3682 
        bool __warned;
        #line 3682 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 3682 
          if (! __warned) {
            #line 3682 
            if (rcu_read_lock_held() == 0) {
              #line 3682 
              __warned = (_Bool)1;
              #line 3682 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",3682,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      }
    #line 3682 
    slave = ________p1;
    #line 3683 
    if (slave != (struct slave *)0) {
      #line 3684 
      dev_uc_sync(slave->dev,bond_dev);
      #line 3685 
      dev_mc_sync(slave->dev,bond_dev);
    }
  }
  else {
    #line 3688 
    iter = & (bond->dev)->adj_list.lower;
    #line 3688 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    #line 3688 
    while (slave != (struct slave *)0) {
      #line 3689 
      dev_uc_sync_multiple(slave->dev,bond_dev);
      #line 3690 
      dev_mc_sync_multiple(slave->dev,bond_dev);
      #line 3688 
      slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    }
  }
  #line 3693 
  rcu_read_unlock();
  #line 3694 
  return;
}

#line 3696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_neigh_init(struct neighbour *n)
{
  #line 3699 
  struct net_device_ops *slave_ops;
  #line 3700 
  struct neigh_parms parms;
  #line 3701 
  struct slave *slave;
  #line 3698 
  struct bonding *bond = netdev_priv(n->dev);
  #line 3702 
  int ret = 0;
  #line 3704 
  rcu_read_lock();
  #line 3705 
  slave = (struct slave *)netdev_lower_get_first_private_rcu(bond->dev);
  #line 3706 
  if (slave == (struct slave *)0) 
                                  #line 3707 
                                  goto out;
  #line 3708 
  slave_ops = (slave->dev)->netdev_ops;
  #line 3709 
  if (slave_ops->ndo_neigh_setup == (int (*)(struct net_device *, struct neigh_parms *))0) 
    #line 3710 
    goto out;
  #line 3720 
  memset((void *)(& parms),0,144UL);
  #line 3721 
  ret = (*(slave_ops->ndo_neigh_setup))(slave->dev,& parms);
  #line 3723 
  if (ret != 0) 
                #line 3724 
                goto out;
  #line 3726 
  if (parms.neigh_setup != (int (*)(struct neighbour *))0) 
                                                           #line 3727 
                                                           ret = (*(parms.neigh_setup))(n);
  #line 3728 
  out: 
       #line 3728 
  ;
  #line 3729 
  rcu_read_unlock();
  #line 3730 
  return ret;
}

#line 3741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_neigh_setup(struct net_device *dev, struct neigh_parms *parms)
{
  #line 3745 
  if (parms->dev == dev) 
                         #line 3746 
                         parms->neigh_setup = & bond_neigh_init;
  #line 3748 
  return 0;
}

#line 3752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_change_mtu(struct net_device *bond_dev, int new_mtu)
{
  #line 3755 
  struct slave *slave;
  #line 3755 
  struct slave *rollback_slave;
  #line 3756 
  struct list_head *iter;
  #line 3754 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3757 
  int res = 0;
  {
    #line 3759 
    bool branch;
    #line 3759 
    struct _ddebug __UNIQUE_ID_ddebug626 = {.modname = (char *)"bonding", .function = (char *)"bond_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"bond=%p, new_mtu=%d\n", .lineno = (unsigned int)3759U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3759 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug626.key.dd_key_false.key,(_Bool)0);
    #line 3759 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3759 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug626,bond_dev,(char *)"bond=%p, new_mtu=%d\n",bond,new_mtu);
  }
  #line 3761 
  iter = (bond->dev)->adj_list.lower.next;
  #line 3761 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 3761 
  while (slave != (struct slave *)0) {
    {
      #line 3762 
      bool branch_0;
      #line 3762 
      struct _ddebug __UNIQUE_ID_ddebug627 = {.modname = (char *)"bonding", .function = (char *)"bond_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3762U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3762 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug627.key.dd_key_false.key,(_Bool)0);
      #line 3762 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3762 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug627,bond_dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),slave,((slave->dev)->netdev_ops)->ndo_change_mtu);
    }
    #line 3765 
    res = dev_set_mtu(slave->dev,new_mtu);
    #line 3767 
    if (res != 0) {
      {
        #line 3776 
        bool branch_1;
        #line 3776 
        struct _ddebug __UNIQUE_ID_ddebug628 = {.modname = (char *)"bonding", .function = (char *)"bond_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3776U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3776 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug628.key.dd_key_false.key,(_Bool)0);
        #line 3776 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 3776 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug628,bond_dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),res,new_mtu);
      }
      #line 3778 
      goto unwind;
    }
    #line 3761 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 3782 
  bond_dev->mtu = (unsigned int)new_mtu;
  #line 3784 
  return 0;
  #line 3786 
  unwind: 
          #line 3786 
  ;
  #line 3788 
  iter = (bond->dev)->adj_list.lower.next;
  #line 3788 
  rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 3788 
  while (rollback_slave != (struct slave *)0) {
    {
      #line 3789 
      int tmp_res;
      #line 3791 
      if (rollback_slave == slave) 
                                   #line 3792 
                                   break;
      #line 3794 
      tmp_res = dev_set_mtu(rollback_slave->dev,(int)bond_dev->mtu);
      #line 3795 
      if (tmp_res != 0) {
        #line 3796 
        bool branch_2;
        #line 3796 
        struct _ddebug __UNIQUE_ID_ddebug629 = {.modname = (char *)"bonding", .function = (char *)"bond_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3796U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3796 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug629.key.dd_key_false.key,(_Bool)0);
        #line 3796 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 3796 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug629,bond_dev,(char *)"(slave %s): ",(char *)(& (rollback_slave->dev)->name),tmp_res);
      }
    }
    #line 3788 
    rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 3800 
  return res;
}

#line 3809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_set_mac_address(struct net_device *bond_dev, void *addr)
{
  #line 3812 
  struct slave *slave;
  #line 3812 
  struct slave *rollback_slave;
  #line 3813 
  struct __kernel_sockaddr_storage tmp_ss;
  #line 3814 
  struct list_head *iter;
  #line 3811 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3813 
  struct __kernel_sockaddr_storage *ss = (struct __kernel_sockaddr_storage *)addr;
  #line 3815 
  int res = 0;
  #line 3817 
  if (bond->params.mode == 6) {
    #line 3818 
    return bond_alb_set_mac_address(bond_dev,addr);
  }
  {
    #line 3821 
    bool branch;
    #line 3821 
    struct _ddebug __UNIQUE_ID_ddebug630 = {.modname = (char *)"bonding", .function = (char *)"bond_set_mac_address", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"%s: bond=%p\n", .lineno = (unsigned int)3821U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 3821 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug630.key.dd_key_false.key,(_Bool)0);
    #line 3821 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 3821 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug630,bond_dev,(char *)"%s: bond=%p\n",(char *)"bond_set_mac_address",bond);
  }
  #line 3826 
  if (bond->params.fail_over_mac != 0 && bond->params.mode == 1) 
                                                                 #line 3828 
                                                                 return 0;
  #line 3830 
  if (! is_valid_ether_addr((u8 *)(& ss->__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data))) 
    #line 3831 
    return -99;
  #line 3833 
  iter = (bond->dev)->adj_list.lower.next;
  #line 3833 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 3833 
  while (slave != (struct slave *)0) {
    {
      #line 3834 
      bool branch_0;
      #line 3834 
      struct _ddebug __UNIQUE_ID_ddebug631 = {.modname = (char *)"bonding", .function = (char *)"bond_set_mac_address", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3834U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3834 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug631.key.dd_key_false.key,(_Bool)0);
      #line 3834 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 3834 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug631,bond_dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_set_mac_address",slave);
    }
    #line 3836 
    res = dev_set_mac_address(slave->dev,(struct sockaddr *)addr,(struct netlink_ext_ack *)0);
    #line 3837 
    if (res != 0) {
      {
        #line 3844 
        bool branch_1;
        #line 3844 
        struct _ddebug __UNIQUE_ID_ddebug632 = {.modname = (char *)"bonding", .function = (char *)"bond_set_mac_address", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3844U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3844 
        branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug632.key.dd_key_false.key,(_Bool)0);
        #line 3844 
        if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                      #line 3844 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug632,bond_dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)"bond_set_mac_address",res);
      }
      #line 3846 
      goto unwind;
    }
    #line 3833 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 3851 
  memcpy((void *)bond_dev->dev_addr,(void *)(& ss->__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(unsigned long)bond_dev->addr_len);
  #line 3852 
  return 0;
  #line 3854 
  unwind: 
          #line 3854 
  ;
  #line 3855 
  memcpy((void *)(& tmp_ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(void *)bond_dev->dev_addr,(unsigned long)bond_dev->addr_len);
  #line 3856 
  tmp_ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = bond_dev->type;
  #line 3859 
  iter = (bond->dev)->adj_list.lower.next;
  #line 3859 
  rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 3859 
  while (rollback_slave != (struct slave *)0) {
    {
      #line 3860 
      int tmp_res;
      #line 3862 
      if (rollback_slave == slave) 
                                   #line 3863 
                                   break;
      #line 3865 
      tmp_res = dev_set_mac_address(rollback_slave->dev,(struct sockaddr *)(& tmp_ss),(struct netlink_ext_ack *)0);
      #line 3867 
      if (tmp_res != 0) {
        #line 3868 
        bool branch_2;
        #line 3868 
        struct _ddebug __UNIQUE_ID_ddebug633 = {.modname = (char *)"bonding", .function = (char *)"bond_set_mac_address", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)3868U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3868 
        branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug633.key.dd_key_false.key,(_Bool)0);
        #line 3868 
        if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                      #line 3868 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug633,bond_dev,(char *)"(slave %s): ",(char *)(& (rollback_slave->dev)->name),(char *)"bond_set_mac_address",tmp_res);
      }
    }
    #line 3859 
    rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 3873 
  return res;
}

#line 3886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_xmit_slave_id(struct bonding *bond, struct sk_buff *skb, int slave_id)
{
  #line 3888 
  struct list_head *iter;
  #line 3889 
  struct slave *slave;
  #line 3890 
  int i = slave_id;
  #line 3893 
  iter = & (bond->dev)->adj_list.lower;
  #line 3893 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 3893 
  while (slave != (struct slave *)0) {
    #line 3894 
    i --;
    #line 3894 
    if (i < 0) {
      #line 3895 
      if ((int)bond_slave_can_tx(slave) != 0) {
        #line 3896 
        bond_dev_queue_xmit(bond,skb,slave->dev);
        #line 3897 
        return;
      }
    }
    #line 3893 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 3903 
  i = slave_id;
  #line 3904 
  iter = & (bond->dev)->adj_list.lower;
  #line 3904 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 3904 
  while (slave != (struct slave *)0) {
    {
      #line 3905 
      i --;
      #line 3905 
      if (i < 0) 
                 #line 3906 
                 break;
      #line 3907 
      if ((int)bond_slave_can_tx(slave) != 0) {
        #line 3908 
        bond_dev_queue_xmit(bond,skb,slave->dev);
        #line 3909 
        return;
      }
    }
    #line 3904 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 3913 
  bond_tx_drop(bond->dev,skb);
  #line 3914 
  return;
}

#line 3924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static u32 bond_rr_gen_slave_id(struct bonding *bond)
{
  #line 3926 
  u32 slave_id;
  #line 3927 
  struct reciprocal_value reciprocal_packets_per_slave;
  #line 3928 
  int packets_per_slave_0 = bond->params.packets_per_slave;
  #line 3930 
  switch (packets_per_slave_0) {
    #line 3931 
    case 0: 
            #line 3931 
    ;
    #line 3932 
    slave_id = prandom_u32();
    #line 3933 
    break;
    #line 3934 
    case 1: 
            #line 3934 
    ;
    #line 3935 
    slave_id = bond->rr_tx_counter;
    #line 3936 
    break;
    #line 3937 
    default: 
             #line 3937 
    ;
    #line 3938 
    reciprocal_packets_per_slave = bond->params.reciprocal_packets_per_slave;
    #line 3940 
    slave_id = reciprocal_divide(bond->rr_tx_counter,reciprocal_packets_per_slave);
    #line 3942 
    break;
  }
  #line 3944 
  (bond->rr_tx_counter) ++;
  #line 3946 
  return slave_id;
}

#line 3949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_tx_t bond_xmit_roundrobin(struct sk_buff *skb, struct net_device *bond_dev)
{
  #line 3983 
  union __anonunion___u_1797 __u_0;
  #line 3953 
  struct slave *slave;
  #line 3954 
  int slave_cnt;
  #line 3955 
  u32 slave_id;
  #line 3952 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 3963 
  if ((unsigned int)skb->protocol == 8U) {
    #line 3965 
    struct iphdr *iph;
    #line 3967 
    int tmp_2;
    #line 3964 
    int noff = skb_network_offset(skb);
    #line 3967 
    if (pskb_may_pull(skb,(unsigned int)noff + 20U)) 
                                                     #line 3967 
                                                     tmp_2 = 0; else 
                                                                  #line 3967 
                                                                  tmp_2 = 1;
    #line 3967 
    if ((long)tmp_2 != 0L) 
                           #line 3968 
                           goto non_igmp;
    #line 3970 
    iph = ip_hdr(skb);
    #line 3971 
    if ((unsigned int)iph->protocol == 2U) {
      #line 3972 
      struct slave *________p1;
      {
        #line 3973 
        union __anonunion___u_1795 __u;
        #line 3972 
        __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
        #line 3972 
        ________p1 = (__u.__val);
        {
          #line 3972 
          bool __warned;
          #line 3972 
          if (debug_lockdep_rcu_enabled() != 0) 
            #line 3972 
            if (! __warned) {
              #line 3972 
              if (rcu_read_lock_held() == 0) {
                #line 3972 
                __warned = (_Bool)1;
                #line 3972 
                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",3972,(char *)"suspicious rcu_dereference_check() usage");
              }
            }
        }
        }
      #line 3972 
      slave = ________p1;
      #line 3973 
      if (slave != (struct slave *)0) 
                                      #line 3974 
                                      bond_dev_queue_xmit(bond,skb,slave->dev); else 
                                                                    #line 3976 
                                                                    bond_xmit_slave_id(bond,skb,0);
      #line 3977 
      return NETDEV_TX_OK;
    }
  }
  #line 3981 
  non_igmp: 
            #line 3981 
  ;
  #line 3982 
  __read_once_size((void *)(& bond->slave_cnt),(void *)(& __u_0.__c),4);
  #line 3982 
  slave_cnt = (__u_0.__val);
  #line 3983 
  if ((long)(slave_cnt != 0) != 0L) {
    #line 3984 
    slave_id = bond_rr_gen_slave_id(bond);
    #line 3985 
    bond_xmit_slave_id(bond,skb,(int)(slave_id % (unsigned int)slave_cnt));
  }
  else 
       #line 3987 
       bond_tx_drop(bond_dev,skb);
  #line 3989 
  return NETDEV_TX_OK;
}

#line 3995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_tx_t bond_xmit_activebackup(struct sk_buff *skb, struct net_device *bond_dev)
{
  #line 4001 
  struct slave *________p1;
  #line 3999 
  struct slave *slave;
  #line 3998 
  struct bonding *bond = netdev_priv(bond_dev);
  {
    #line 4002 
    union __anonunion___u_1799 __u;
    #line 4001 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 4001 
    ________p1 = (__u.__val);
    {
      #line 4001 
      bool __warned;
      #line 4001 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 4001 
        if (! __warned) {
          #line 4001 
          if (rcu_read_lock_held() == 0) {
            #line 4001 
            __warned = (_Bool)1;
            #line 4001 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",4001,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 4001 
  slave = ________p1;
  #line 4002 
  if (slave != (struct slave *)0) 
                                  #line 4003 
                                  bond_dev_queue_xmit(bond,skb,slave->dev); else 
                                                                    #line 4005 
                                                                    bond_tx_drop(bond_dev,skb);
  #line 4007 
  return NETDEV_TX_OK;
}

#line 4014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_slave_arr_work_rearm(struct bonding *bond, unsigned long delay)
{
  #line 4016 
  cif_queue_delayed_work_0(bond->wq,& bond->slave_arr_work,delay);
  #line 4017 
  return;
}

#line 4020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_slave_arr_handler(struct work_struct *work)
{
  #line 4022 
  void *__mptr;
  #line 4024 
  int ret;
  #line 4022 
  __mptr = (void *)work;
  #line 4022 
  struct bonding *bond = ((struct bonding *)(__mptr + 18446744073709550080U));
  #line 4026 
  if (rtnl_trylock() == 0) 
                           #line 4027 
                           goto err;
  #line 4029 
  ret = bond_update_slave_arr(bond,(struct slave *)0);
  #line 4030 
  rtnl_unlock();
  #line 4031 
  if (ret != 0) {
    {
      #line 4032 
      struct ratelimit_state _rs = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL, .flags = 0UL};
      {
        #line 4032 
        if (___ratelimit(& _rs,(char *)"bond_slave_arr_handler") != 0) 
          #line 4032 
          printk((char *)"\001");
      }
    }
    #line 4033 
    goto err;
  }
  #line 4035 
  return;
  #line 4037 
  err: 
       #line 4037 
  ;
  #line 4038 
  bond_slave_arr_work_rearm(bond,1UL);
  #line 4039 
  return;
}

#line 4049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_update_slave_arr(struct bonding *bond, struct slave *skipslave)
{
  #line 4051 
  struct slave *slave;
  #line 4052 
  struct list_head *iter;
  #line 4053 
  struct bond_up_slave *new_arr;
  #line 4053 
  struct bond_up_slave *old_arr;
  #line 4054 
  int agg_id = 0;
  #line 4055 
  int ret = 0;
  {
    #line 4058 
    int __ret_warn_on = lock_is_held(& bond->mode_lock.__anonCompField_spinlock_25.__anonCompField___anonunion_97_24.dep_map) != 0;
    #line 4058 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 4059 
      ldv_inline_asm();
      #line 4060 
      ldv_inline_asm();
    }
    #line 4058 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 4061 
  new_arr = (struct bond_up_slave *)kzalloc(((unsigned long)bond->slave_cnt + 3UL) * 8UL,3264U);
  #line 4063 
  if (new_arr == (struct bond_up_slave *)0) {
    #line 4064 
    ret = -12;
    #line 4065 
    printk((char *)"\001");
    #line 4066 
    goto out;
  }
  #line 4068 
  if (bond->params.mode == 4) {
    #line 4069 
    struct ad_info ad_info;
    #line 4071 
    if (bond_3ad_get_active_agg_info(bond,& ad_info) != 0) {
      {
        #line 4072 
        bool branch;
        #line 4072 
        struct _ddebug __UNIQUE_ID_ddebug635 = {.modname = (char *)"bonding", .function = (char *)"bond_update_slave_arr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"bond_3ad_get_active_agg_info failed\n", .lineno = (unsigned int)4072U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4072 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug635.key.dd_key_false.key,(_Bool)0);
        #line 4072 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 4072 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug635,(char *)"bond_3ad_get_active_agg_info failed\n");
      }
      {
        #line 4073 
        struct bond_up_slave *___p = new_arr;
        #line 4073 
        if (___p != (struct bond_up_slave *)0) 
                                               #line 4073 
                                               kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))8);
      }
      {
        #line 4077 
        bool __warned;
        #line 4077 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 4077 
          if (! __warned) {
            #line 4077 
            if (! lockdep_rtnl_is_held()) {
              #line 4077 
              __warned = (_Bool)1;
              #line 4077 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",4077,(char *)"suspicious rcu_dereference_protected() usage");
            }
          }
      }
      #line 4077 
      old_arr = bond->slave_arr;
      #line 4078 
      if (old_arr != (struct bond_up_slave *)0) {
        {
          #line 4080 
          union __anonunion___u_1801 __u = {.__val = (struct bond_up_slave *)0};
          #line 4079 
          __write_once_size((void *)(& bond->slave_arr),(void *)(& __u.__c),8);
          #line 4079 
          struct bond_up_slave *tmp_4 = __u.__val;
        }
        {
          #line 4080 
          struct bond_up_slave *___p_0 = old_arr;
          #line 4080 
          if (___p_0 != (struct bond_up_slave *)0) 
                                                   #line 4080 
                                                   kfree_call_rcu(& ___p_0->rcu,(void (*)(struct callback_head *))8);
        }
      }
      #line 4082 
      goto out;
    }
    #line 4084 
    agg_id = (int)ad_info.aggregator_id;
  }
  #line 4086 
  iter = (bond->dev)->adj_list.lower.next;
  #line 4086 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 4086 
  while (slave != (struct slave *)0) {
    {
      #line 4102 
      unsigned int tmp_9;
      #line 4087 
      if (bond->params.mode == 4) {
        #line 4088 
        struct aggregator *agg;
        #line 4090 
        agg = (slave->ad_info)->port.aggregator;
        #line 4091 
        if (agg == (struct aggregator *)0 || (int)agg->aggregator_identifier != agg_id) 
          #line 4092 
          goto __Cont;
      }
      #line 4094 
      if (! bond_slave_can_tx(slave)) 
                                      #line 4095 
                                      goto __Cont;
      #line 4096 
      if (skipslave == slave) 
                              #line 4097 
                              goto __Cont;
      {
        #line 4099 
        bool branch_0;
        #line 4099 
        struct _ddebug __UNIQUE_ID_ddebug636 = {.modname = (char *)"bonding", .function = (char *)"bond_update_slave_arr", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)4099U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4099 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug636.key.dd_key_false.key,(_Bool)0);
        #line 4099 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 4099 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug636,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),new_arr->count);
      }
      #line 4102 
      tmp_9 = new_arr->count;
      #line 4102 
      (new_arr->count) ++;
      #line 4102 
      new_arr->arr[tmp_9] = slave;
    }
    #line 4086 
    __Cont: 
            #line 4086 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  {
    #line 4105 
    bool __warned_0;
    #line 4105 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 4105 
      if (! __warned_0) {
        #line 4105 
        if (! lockdep_rtnl_is_held()) {
          #line 4105 
          __warned_0 = (_Bool)1;
          #line 4105 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",4105,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 4105 
  old_arr = bond->slave_arr;
  {
    #line 4106 
    uintptr_t _r_a_p__v = (unsigned long)new_arr;
    #line 4108 
    ldv_inline_asm();
    {
      #line 4107 
      union __anonunion___u_1805 __u_0 = {.__val = (struct bond_up_slave *)_r_a_p__v};
      #line 4106 
      __write_once_size((void *)(& bond->slave_arr),(void *)(& __u_0.__c),8);
      #line 4106 
      struct bond_up_slave *tmp_14 = __u_0.__val;
    }
  }
  #line 4107 
  if (old_arr != (struct bond_up_slave *)0) {
    #line 4108 
    struct bond_up_slave *___p_1 = old_arr;
    #line 4108 
    if (___p_1 != (struct bond_up_slave *)0) 
                                             #line 4108 
                                             kfree_call_rcu(& ___p_1->rcu,(void (*)(struct callback_head *))8);
  }
  #line 4109 
  out: 
       #line 4109 
  ;
  #line 4110 
  if (ret != 0 && skipslave != (struct slave *)0) {
    #line 4111 
    int idx;
    {
      #line 4121 
      bool __warned_1;
      #line 4121 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 4121 
        if (! __warned_1) {
          #line 4121 
          if (! lockdep_rtnl_is_held()) {
            #line 4121 
            __warned_1 = (_Bool)1;
            #line 4121 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",4121,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 4121 
    old_arr = bond->slave_arr;
    #line 4122 
    idx = 0;
    #line 4122 
    while (old_arr != (struct bond_up_slave *)0 && old_arr->count > (unsigned int)idx) {
      #line 4123 
      if (old_arr->arr[idx] == skipslave) {
        #line 4124 
        old_arr->arr[idx] = old_arr->arr[old_arr->count + 4294967295U];
        #line 4126 
        (old_arr->count) --;
        #line 4127 
        break;
      }
      #line 4122 
      idx ++;
    }
  }
  #line 4131 
  return ret;
}

#line 4138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_tx_t bond_3ad_xor_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 4146 
  struct bond_up_slave *________p1;
  #line 4142 
  struct slave *slave;
  #line 4143 
  struct bond_up_slave *slaves;
  #line 4144 
  unsigned int count;
  #line 4141 
  struct bonding *bond = netdev_priv(dev);
  {
    #line 4147 
    union __anonunion___u_1807 __u;
    #line 4146 
    __read_once_size((void *)(& bond->slave_arr),(void *)(& __u.__c),8);
    #line 4146 
    ________p1 = (__u.__val);
    {
      #line 4146 
      bool __warned;
      #line 4146 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 4146 
        if (! __warned) {
          #line 4146 
          if (rcu_read_lock_held() == 0) {
            #line 4146 
            __warned = (_Bool)1;
            #line 4146 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",4146,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 4146 
  slaves = ________p1;
  #line 4147 
  if (slaves != (struct bond_up_slave *)0) {
    #line 4148 
    union __anonunion___u_1809 __u_0;
    #line 4147 
    __read_once_size((void *)(& slaves->count),(void *)(& __u_0.__c),4);
    #line 4147 
    count = (__u_0.__val);
  }
  else 
       #line 4147 
       count = 0U;
  #line 4148 
  if ((long)(count != 0U) != 0L) {
    #line 4149 
    slave = slaves->arr[bond_xmit_hash(bond,skb) % count];
    #line 4150 
    bond_dev_queue_xmit(bond,skb,slave->dev);
  }
  else 
       #line 4152 
       bond_tx_drop(dev,skb);
  #line 4155 
  return NETDEV_TX_OK;
}

#line 4159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_tx_t bond_xmit_broadcast(struct sk_buff *skb, struct net_device *bond_dev)
{
  #line 4164 
  struct list_head *iter;
  #line 4162 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 4163 
  struct slave *slave = (struct slave *)0;
  #line 4166 
  iter = & (bond->dev)->adj_list.lower;
  #line 4166 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 4166 
  while (slave != (struct slave *)0) {
    {
      #line 4167 
      void *tmp_4;
      #line 4167 
      if (list_empty_0(& (bond->dev)->adj_list.lower) == 0) 
                                                            #line 4167 
                                                            tmp_4 = netdev_adjacent_get_private((bond->dev)->adj_list.lower.prev); else 
                                                                    #line 4167 
                                                                    tmp_4 = (void *)0;
      #line 4167 
      ;
      #line 4167 
      if (tmp_4 == (void *)slave) 
                                  #line 4168 
                                  break;
      #line 4169 
      if ((int)bond_slave_is_up(slave) != 0) 
        #line 4169 
        if ((int)slave->link == 0) {
          #line 4170 
          struct sk_buff *skb2 = skb_clone(skb,2592U);
          #line 4172 
          if (skb2 == (struct sk_buff *)0) {
            #line 4173 
            if (net_ratelimit() != 0) 
                                      #line 4173 
                                      printk((char *)"\001",(char *)(& bond_dev->name),(char *)"bond_xmit_broadcast");
            #line 4175 
            goto __Cont;
          }
          #line 4177 
          bond_dev_queue_xmit(bond,skb2,slave->dev);
        }
    }
    #line 4166 
    __Cont: 
            #line 4166 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 4180 
  if (slave != (struct slave *)0) {
    #line 4180 
    if ((int)bond_slave_is_up(slave) != 0) 
      #line 4180 
      if ((int)slave->link == 0) 
                                 #line 4181 
                                 bond_dev_queue_xmit(bond,skb,slave->dev); else 
                                                                    #line 4183 
                                                                    bond_tx_drop(bond_dev,skb);
    else 
         #line 4183 
         bond_tx_drop(bond_dev,skb);
  }
  else 
       #line 4183 
       bond_tx_drop(bond_dev,skb);
  #line 4185 
  return NETDEV_TX_OK;
}

#line 4191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
__inline static int bond_slave_override(struct bonding *bond, struct sk_buff *skb)
{
  #line 4195 
  struct list_head *iter;
  #line 4194 
  struct slave *slave = (struct slave *)0;
  #line 4197 
  if (! skb_rx_queue_recorded(skb)) 
                                    #line 4198 
                                    return 1;
  #line 4201 
  iter = & (bond->dev)->adj_list.lower;
  #line 4201 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 4201 
  while (slave != (struct slave *)0) {
    #line 4202 
    ;
    #line 4202 
    if ((int)slave->queue_id == (int)skb_get_queue_mapping(skb)) {
      #line 4203 
      if ((int)bond_slave_is_up(slave) != 0) 
        #line 4203 
        if ((int)slave->link == 0) {
          #line 4205 
          bond_dev_queue_xmit(bond,skb,slave->dev);
          #line 4206 
          return 0;
        }
      #line 4209 
      break;
    }
    #line 4201 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 4213 
  return 1;
}

#line 4217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static u16 bond_select_queue(struct net_device *dev, struct sk_buff *skb, struct net_device *sb_dev)
{
  #line 4225 
  unsigned int tmp_1;
  #line 4225 
  if ((int)skb_rx_queue_recorded(skb) != 0) {
    #line 4225 
    tmp_1 = (unsigned int)skb_get_rx_queue(skb);
  }
  else 
       #line 4225 
       tmp_1 = 0U;
  #line 4225 
  u16 txq = (unsigned short)tmp_1;
  #line 4228 
  qdisc_skb_cb(skb)->__anonCompField_qdisc_skb_cb_174.slave_dev_queue_mapping = skb_get_queue_mapping(skb);
  #line 4230 
  if ((long)((unsigned int)txq >= dev->real_num_tx_queues) != 0L) 
    #line 4231 
    while (1) {
      #line 4232 
      txq = (unsigned short)((int)txq - (int)((unsigned short)dev->real_num_tx_queues));
      #line 4232 
      if (! ((unsigned int)txq >= dev->real_num_tx_queues)) 
                                                            #line 4231 
                                                            break;
    }
  #line 4235 
  return txq;
}

#line 4238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_tx_t __bond_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 4240 
  struct bonding *bond = netdev_priv(dev);
  #line 4242 
  if ((int)bond_should_override_tx_queue(bond) != 0) {
    #line 4242 
    if (bond_slave_override(bond,skb) == 0) 
                                            #line 4244 
                                            return NETDEV_TX_OK;
  }
  #line 4246 
  switch (bond->params.mode) {
    #line 4247 
    case 0: 
            #line 4247 
    ;
    #line 4248 
    return bond_xmit_roundrobin(skb,dev);
    #line 4249 
    case 1: 
            #line 4249 
    ;
    #line 4250 
    return bond_xmit_activebackup(skb,dev);
    #line 4251 
    case 4: 
            #line 4251 
    ;
    #line 4252 
    case 2: 
            #line 4252 
    ;
    #line 4253 
    return bond_3ad_xor_xmit(skb,dev);
    #line 4254 
    case 3: 
            #line 4254 
    ;
    #line 4255 
    return bond_xmit_broadcast(skb,dev);
    #line 4256 
    case 6: 
            #line 4256 
    ;
    #line 4257 
    return (enum netdev_tx)(int)bond_alb_xmit(skb,dev);
    #line 4258 
    case 5: 
            #line 4258 
    ;
    #line 4259 
    return (enum netdev_tx)(int)bond_tlb_xmit(skb,dev);
    #line 4260 
    default: 
             #line 4260 
    ;
    #line 4262 
    netdev_err(dev,(char *)"Unknown bonding mode %d\n",bond->params.mode);
    {
      #line 4263 
      int __ret_warn_on = 1;
      #line 4263 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 4264 
        ldv_inline_asm();
        #line 4265 
        ldv_inline_asm();
      }
      #line 4263 
      long tmp_8 = (long)(__ret_warn_on != 0);
    }
    #line 4264 
    bond_tx_drop(dev,skb);
    #line 4265 
    return NETDEV_TX_OK;
  }
}

#line 4269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static netdev_tx_t bond_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 4271 
  struct bonding *bond = netdev_priv(dev);
  #line 4272 
  netdev_tx_t ret = (enum netdev_tx)0;
  #line 4277 
  if ((long)(is_netpoll_tx_blocked(dev) != 0) != 0L) 
                                                     #line 4278 
                                                     return NETDEV_TX_BUSY;
  #line 4280 
  rcu_read_lock();
  #line 4281 
  if (list_empty_0(& (bond->dev)->adj_list.lower) == 0) 
                                                        #line 4282 
                                                        ret = __bond_start_xmit(skb,dev); else 
                                                                    #line 4284 
                                                                    bond_tx_drop(dev,skb);
  #line 4285 
  rcu_read_unlock();
  #line 4287 
  return ret;
}

#line 4290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_ethtool_get_link_ksettings(struct net_device *bond_dev, struct ethtool_link_ksettings *cmd)
{
  #line 4295 
  struct list_head *iter;
  #line 4296 
  struct slave *slave;
  #line 4293 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 4294 
  unsigned long speed = 0UL;
  #line 4298 
  cmd->base.duplex = (unsigned char)255U;
  #line 4299 
  cmd->base.port = (unsigned char)255U;
  #line 4306 
  iter = (bond->dev)->adj_list.lower.next;
  #line 4306 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 4306 
  while (slave != (struct slave *)0) {
    #line 4307 
    if ((int)bond_slave_can_tx(slave) != 0) {
      #line 4308 
      if (slave->speed != 4294967295U) 
                                       #line 4309 
                                       speed = (unsigned long)slave->speed + speed;
      #line 4310 
      if ((unsigned int)cmd->base.duplex == 255U && (unsigned int)slave->duplex != 255U) 
        #line 4312 
        cmd->base.duplex = slave->duplex;
    }
    #line 4306 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 4315 
  if (speed != 0UL) 
                    #line 4315 
                    cmd->base.speed = (unsigned int)speed; else 
                                                                #line 4315 
                                                                cmd->base.speed = 4294967295U;
  #line 4317 
  return 0;
}

#line 4320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_ethtool_get_drvinfo(struct net_device *bond_dev, struct ethtool_drvinfo *drvinfo)
{
  #line 4323 
  strlcpy((char *)(& drvinfo->driver),(char *)"bonding",32UL);
  #line 4324 
  strlcpy((char *)(& drvinfo->version),(char *)"3.7.1",32UL);
  #line 4325 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%d",2);
  #line 4326 
  return;
}

#line 4329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct ethtool_ops bond_ethtool_ops = {.get_drvinfo = & bond_ethtool_get_drvinfo, .get_link = & ethtool_op_get_link, .get_link_ksettings = & bond_ethtool_get_link_ksettings};
#line 4335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct net_device_ops bond_netdev_ops = {.ndo_init = & bond_init, .ndo_uninit = & bond_uninit, .ndo_open = & bond_open, .ndo_stop = & bond_close, .ndo_start_xmit = & bond_start_xmit, .ndo_features_check = & passthru_features_check, .ndo_select_queue = & bond_select_queue, .ndo_change_rx_flags = & bond_change_rx_flags, .ndo_set_rx_mode = & bond_set_rx_mode, .ndo_set_mac_address = & bond_set_mac_address, .ndo_do_ioctl = & bond_do_ioctl, .ndo_change_mtu = & bond_change_mtu, .ndo_neigh_setup = & bond_neigh_setup, .ndo_get_stats64 = & bond_get_stats, .ndo_vlan_rx_add_vid = & bond_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & bond_vlan_rx_kill_vid, .ndo_poll_controller = & bond_poll_controller, .ndo_netpoll_setup = & bond_netpoll_setup, .ndo_netpoll_cleanup = & bond_netpoll_cleanup, .ndo_add_slave = & bond_enslave, .ndo_del_slave = & bond_release, .ndo_fix_features = & bond_fix_features};
#line 4362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct device_type bond_type = {.name = (char *)"bond"};
#line 4366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_destructor(struct net_device *bond_dev)
{
  #line 4368 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 4369 
  if (bond->wq != (struct workqueue_struct *)0) 
                                                #line 4370 
                                                destroy_workqueue(bond->wq);
  #line 4371 
  return;
}

#line 4373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
void bond_setup(struct net_device *bond_dev)
{
  #line 4375 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 4377 
  spinlock_check(& bond->mode_lock);
  {
    #line 4377 
    struct lock_class_key __key;
    #line 4377 
    __raw_spin_lock_init(& bond->mode_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bond->mode_lock)->rlock",& __key);
  }
  #line 4378 
  bond->params = bonding_defaults;
  #line 4381 
  bond->dev = bond_dev;
  #line 4384 
  ether_setup(bond_dev);
  #line 4385 
  bond_dev->max_mtu = 65535U;
  #line 4386 
  bond_dev->netdev_ops = & bond_netdev_ops;
  #line 4387 
  bond_dev->ethtool_ops = & bond_ethtool_ops;
  #line 4389 
  bond_dev->needs_free_netdev = (_Bool)1;
  #line 4390 
  bond_dev->priv_destructor = & bond_destructor;
  #line 4392 
  bond_dev->dev.type = & bond_type;
  #line 4395 
  bond_dev->flags |= 1024U;
  #line 4396 
  bond_dev->priv_flags |= 528388U;
  #line 4397 
  bond_dev->priv_flags &= 4294965215U;
  #line 4400 
  bond_dev->features |= 4096ULL;
  #line 4410 
  bond_dev->features |= 8192ULL;
  #line 4412 
  bond_dev->hw_features = 1934185ULL;
  #line 4416 
  bond_dev->hw_features |= 8854175744ULL;
  #line 4417 
  bond_dev->features |= bond_dev->hw_features;
  #line 4418 
  bond_dev->features |= 17592186044544ULL;
  #line 4419 
  return;
}

#line 4424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_uninit(struct net_device *bond_dev)
{
  #line 4427 
  struct list_head *iter;
  #line 4428 
  struct slave *slave;
  #line 4429 
  struct bond_up_slave *arr;
  #line 4426 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 4431 
  bond_netpoll_cleanup(bond_dev);
  #line 4434 
  iter = (bond->dev)->adj_list.lower.next;
  #line 4434 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 4434 
  while (slave != (struct slave *)0) {
    #line 4435 
    __bond_release_one(bond_dev,slave->dev,(_Bool)1,(_Bool)1);
    #line 4434 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 4436 
  netdev_info(bond_dev,(char *)"Released all slaves\n");
  {
    #line 4438 
    bool __warned;
    #line 4438 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 4438 
      if (! __warned) {
        #line 4438 
        if (! lockdep_rtnl_is_held()) {
          #line 4438 
          __warned = (_Bool)1;
          #line 4438 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c",4438,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 4438 
  arr = bond->slave_arr;
  #line 4439 
  if (arr != (struct bond_up_slave *)0) {
    {
      #line 4441 
      union __anonunion___u_1811 __u = {.__val = (struct bond_up_slave *)0};
      #line 4440 
      __write_once_size((void *)(& bond->slave_arr),(void *)(& __u.__c),8);
      #line 4440 
      struct bond_up_slave *tmp_4 = __u.__val;
    }
    {
      #line 4441 
      struct bond_up_slave *___p = arr;
      #line 4441 
      if (___p != (struct bond_up_slave *)0) 
                                             #line 4441 
                                             kfree_call_rcu(& ___p->rcu,(void (*)(struct callback_head *))8);
    }
  }
  #line 4444 
  list_del(& bond->bond_list);
  #line 4446 
  lockdep_unregister_key(& bond->stats_lock_key);
  #line 4447 
  bond_debug_unregister(bond);
  #line 4448 
  return;
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_check_params(struct bond_params *params)
{
  #line 4454 
  int arp_validate_value;
  #line 4454 
  int fail_over_mac_value;
  #line 4454 
  int primary_reselect_value;
  #line 4454 
  int i;
  #line 4455 
  struct bond_opt_value newval;
  #line 4456 
  struct bond_opt_value *valptr;
  #line 4461 
  int arp_ip_count;
  #line 4465 
  int tlb_dynamic_lb;
  #line 4457 
  int arp_all_targets_value = 0;
  #line 4458 
  u16 ad_actor_sys_prio = (unsigned short)0U;
  #line 4459 
  u16 ad_user_port_key = (unsigned short)0U;
  #line 4460 
  __be32 arp_target[16U] = {0U};
  #line 4462 
  int bond_mode = 0;
  #line 4463 
  int xmit_hashtype = 0;
  #line 4464 
  int lacp_fast = 0;
  #line 4468 
  if (mode != (char *)0) {
    #line 4469 
    __bond_opt_init(& newval,mode,18446744073709551615ULL);
    #line 4470 
    valptr = bond_opt_parse(bond_opt_get(0U),& newval);
    #line 4471 
    if (valptr == (struct bond_opt_value *)0) {
      #line 4472 
      printk((char *)"\001",mode);
      #line 4473 
      return -22;
    }
    #line 4475 
    bond_mode = (int)valptr->value;
  }
  #line 4478 
  if (xmit_hash_policy != (char *)0) 
    #line 4479 
    if ((unsigned int)bond_mode <= 1U || bond_mode == 3) {
      #line 4482 
      printk((char *)"\001",bond_mode_name(bond_mode));
    }
    else {
      #line 4485 
      __bond_opt_init(& newval,xmit_hash_policy,18446744073709551615ULL);
      #line 4486 
      valptr = bond_opt_parse(bond_opt_get(2U),& newval);
      #line 4488 
      if (valptr == (struct bond_opt_value *)0) {
        #line 4489 
        printk((char *)"\001",xmit_hash_policy);
        #line 4491 
        return -22;
      }
      #line 4493 
      xmit_hashtype = (int)valptr->value;
    }
  #line 4497 
  if (lacp_rate != (char *)0) 
    #line 4498 
    if (bond_mode != 4) {
      #line 4499 
      printk((char *)"\001",bond_mode_name(bond_mode));
    }
    else {
      #line 4502 
      __bond_opt_init(& newval,lacp_rate,18446744073709551615ULL);
      #line 4503 
      valptr = bond_opt_parse(bond_opt_get(10U),& newval);
      #line 4505 
      if (valptr == (struct bond_opt_value *)0) {
        #line 4506 
        printk((char *)"\001",lacp_rate);
        #line 4508 
        return -22;
      }
      #line 4510 
      lacp_fast = (int)valptr->value;
    }
  #line 4514 
  if (ad_select != (char *)0) {
    #line 4515 
    __bond_opt_init(& newval,ad_select,18446744073709551615ULL);
    #line 4516 
    valptr = bond_opt_parse(bond_opt_get(12U),& newval);
    #line 4518 
    if (valptr == (struct bond_opt_value *)0) {
      #line 4519 
      printk((char *)"\001",ad_select);
      #line 4520 
      return -22;
    }
    #line 4522 
    params->ad_select = (int)valptr->value;
    #line 4523 
    if (bond_mode != 4) 
                        #line 4524 
                        printk((char *)"\001");
  }
  else 
       #line 4526 
       params->ad_select = 0;
  #line 4529 
  if (max_bonds < 0) {
    #line 4530 
    printk((char *)"\001",max_bonds,0,2147483647,1);
    #line 4532 
    max_bonds = 1;
  }
  #line 4535 
  if (miimon < 0) {
    #line 4536 
    printk((char *)"\001",miimon,2147483647);
    #line 4538 
    miimon = 0;
  }
  #line 4541 
  if (updelay < 0) {
    #line 4542 
    printk((char *)"\001",updelay,2147483647);
    #line 4544 
    updelay = 0;
  }
  #line 4547 
  if (downdelay < 0) {
    #line 4548 
    printk((char *)"\001",downdelay,2147483647);
    #line 4550 
    downdelay = 0;
  }
  #line 4553 
  if ((unsigned int)use_carrier > 1U) {
    #line 4554 
    printk((char *)"\001",use_carrier);
    #line 4556 
    use_carrier = 1;
  }
  #line 4559 
  if ((unsigned int)num_peer_notif > 255U) {
    #line 4560 
    printk((char *)"\001",num_peer_notif);
    #line 4562 
    num_peer_notif = 1;
  }
  #line 4566 
  if (! bond_mode_uses_arp(bond_mode)) 
    #line 4567 
    if (miimon == 0) {
      #line 4568 
      printk((char *)"\001");
      #line 4569 
      printk((char *)"\001");
      #line 4570 
      miimon = 100;
    }
  #line 4574 
  if ((unsigned int)tx_queues + 4294967295U > 254U) {
    #line 4575 
    printk((char *)"\001",tx_queues,16);
    #line 4577 
    tx_queues = 16;
  }
  #line 4580 
  if ((unsigned int)all_slaves_active > 1U) {
    #line 4581 
    printk((char *)"\001",all_slaves_active);
    #line 4583 
    all_slaves_active = 0;
  }
  #line 4586 
  if ((unsigned int)resend_igmp > 255U) {
    #line 4587 
    printk((char *)"\001",resend_igmp,1);
    #line 4589 
    resend_igmp = 1;
  }
  #line 4592 
  __bond_opt_init(& newval,(char *)0,(unsigned long long)packets_per_slave);
  #line 4593 
  if (bond_opt_parse(bond_opt_get(1U),& newval) == (struct bond_opt_value *)0) {
    #line 4594 
    printk((char *)"\001",packets_per_slave,65535);
    #line 4596 
    packets_per_slave = 1;
  }
  #line 4599 
  if (bond_mode == 6) 
                      #line 4600 
                      printk((char *)"\001",updelay);
  #line 4604 
  if (miimon == 0) {
    #line 4605 
    if (updelay != 0 || downdelay != 0) 
                                        #line 4609 
                                        printk((char *)"\001",updelay,downdelay);
  }
  else {
    #line 4614 
    if (arp_interval != 0) {
      #line 4615 
      printk((char *)"\001",miimon,arp_interval);
      #line 4617 
      arp_interval = 0;
    }
    #line 4620 
    if (updelay % miimon != 0) 
                               #line 4621 
                               printk((char *)"\001",updelay,miimon,(updelay / miimon) * miimon);
    #line 4625 
    updelay /= miimon;
    #line 4627 
    if (downdelay % miimon != 0) 
                                 #line 4628 
                                 printk((char *)"\001",downdelay,miimon,(downdelay / miimon) * miimon);
    #line 4633 
    downdelay /= miimon;
  }
  #line 4636 
  if (arp_interval < 0) {
    #line 4637 
    printk((char *)"\001",arp_interval,2147483647);
    #line 4639 
    arp_interval = 0;
  }
  #line 4642 
  arp_ip_count = 0;
  #line 4642 
  i = 0;
  #line 4642 
  while (arp_ip_count <= 15 && arp_ip_target[i] != (char *)0) {
    {
      #line 4644 
      __be32 ip;
      #line 4647 
      if (in4_pton(arp_ip_target[i],-1,(u8 *)(& ip),-1,(char **)0) == 0) 
        #line 4647 
        goto _LOR;
      else {
        #line 4647 
        if (bond_is_ip_target_ok(ip) == 0) {
          #line 4647 
          _LOR: {
                  #line 4649 
                  printk((char *)"\001",arp_ip_target[i]);
                  #line 4651 
                  arp_interval = 0;
                }
        }
        else {
          #line 4653 
          if (bond_get_targets_ip((__be32 *)(& arp_target),ip) == -1) {
            #line 4654 
            int tmp_8;
            #line 4654 
            tmp_8 = arp_ip_count;
            #line 4654 
            arp_ip_count ++;
            #line 4654 
            arp_target[tmp_8] = ip;
          }
          else 
               #line 4656 
               printk((char *)"\001",& ip);
        }
      }
    }
    #line 4643 
    i ++;
  }
  #line 4661 
  if (arp_interval != 0 && arp_ip_count == 0) {
    #line 4663 
    printk((char *)"\001",arp_interval);
    #line 4665 
    arp_interval = 0;
  }
  #line 4668 
  if (arp_validate != (char *)0) {
    #line 4669 
    if (arp_interval == 0) {
      #line 4670 
      printk((char *)"\001");
      #line 4671 
      return -22;
    }
    #line 4674 
    __bond_opt_init(& newval,arp_validate,18446744073709551615ULL);
    #line 4675 
    valptr = bond_opt_parse(bond_opt_get(3U),& newval);
    #line 4677 
    if (valptr == (struct bond_opt_value *)0) {
      #line 4678 
      printk((char *)"\001",arp_validate);
      #line 4680 
      return -22;
    }
    #line 4682 
    arp_validate_value = (int)valptr->value;
  }
  else 
       #line 4684 
       arp_validate_value = 0;
  #line 4687 
  if (arp_all_targets != (char *)0) {
    #line 4688 
    __bond_opt_init(& newval,arp_all_targets,18446744073709551615ULL);
    #line 4689 
    valptr = bond_opt_parse(bond_opt_get(4U),& newval);
    #line 4691 
    if (valptr == (struct bond_opt_value *)0) {
      #line 4692 
      printk((char *)"\001",arp_all_targets);
      #line 4694 
      arp_all_targets_value = 0;
    }
    else 
         #line 4696 
         arp_all_targets_value = (int)valptr->value;
  }
  #line 4700 
  if (miimon != 0) 
                   #line 4701 
                   printk((char *)"\001",miimon);
  else 
    #line 4702 
    if (arp_interval != 0) {
      #line 4703 
      valptr = bond_opt_get_val(3U,(unsigned long long)arp_validate_value);
      #line 4705 
      printk((char *)"\001",arp_interval,valptr->string,arp_ip_count);
      #line 4708 
      i = 0;
      #line 4708 
      while (i < arp_ip_count) {
        #line 4709 
        printk((char *)"\001",arp_ip_target[i]);
        #line 4708 
        i ++;
      }
      #line 4711 
      printk((char *)"\001");
    }
    else 
      #line 4713 
      if (max_bonds != 0) {
        #line 4717 
        bool branch;
        #line 4717 
        struct _ddebug __UNIQUE_ID_ddebug638 = {.modname = (char *)"bonding", .function = (char *)"bond_check_params", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"Warning: either miimon or arp_interval and arp_ip_target module parameters must be specified, otherwise bonding will not detect link failures! see bonding.txt for details\n", .lineno = (unsigned int)4717U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 4717 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug638.key.dd_key_false.key,(_Bool)0);
        #line 4717 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 4717 
                                                    __dynamic_pr_debug(& __UNIQUE_ID_ddebug638,(char *)"Warning: either miimon or arp_interval and arp_ip_target module parameters must be specified, otherwise bonding will not detect link failures! see bonding.txt for details\n");
      }
  #line 4720 
  if (primary != (char *)0) {
    #line 4720 
    if (! bond_mode_uses_primary(bond_mode)) {
      #line 4724 
      ;
      #line 4724 
      printk((char *)"\001",primary,bond_mode_name(bond_mode));
      #line 4726 
      primary = (char *)0;
    }
  }
  #line 4729 
  if (primary != (char *)0 && primary_reselect != (char *)0) {
    #line 4730 
    __bond_opt_init(& newval,primary_reselect,18446744073709551615ULL);
    #line 4731 
    valptr = bond_opt_parse(bond_opt_get(16U),& newval);
    #line 4733 
    if (valptr == (struct bond_opt_value *)0) {
      #line 4734 
      printk((char *)"\001",primary_reselect);
      #line 4736 
      return -22;
    }
    #line 4738 
    primary_reselect_value = (int)valptr->value;
  }
  else 
       #line 4740 
       primary_reselect_value = 0;
  #line 4743 
  if (fail_over_mac != (char *)0) {
    #line 4744 
    __bond_opt_init(& newval,fail_over_mac,18446744073709551615ULL);
    #line 4745 
    valptr = bond_opt_parse(bond_opt_get(5U),& newval);
    #line 4747 
    if (valptr == (struct bond_opt_value *)0) {
      #line 4748 
      printk((char *)"\001",fail_over_mac);
      #line 4750 
      return -22;
    }
    #line 4752 
    fail_over_mac_value = (int)valptr->value;
    #line 4753 
    if (bond_mode != 1) 
                        #line 4754 
                        printk((char *)"\001");
  }
  else 
       #line 4756 
       fail_over_mac_value = 0;
  #line 4759 
  __bond_opt_init(& newval,(char *)"default",18446744073709551615ULL);
  #line 4760 
  valptr = bond_opt_parse(bond_opt_get(25U),& newval);
  #line 4763 
  if (valptr == (struct bond_opt_value *)0) {
    #line 4764 
    printk((char *)"\001");
    #line 4765 
    return -22;
  }
  #line 4767 
  ad_actor_sys_prio = (unsigned short)valptr->value;
  #line 4769 
  valptr = bond_opt_parse(bond_opt_get(27U),& newval);
  #line 4771 
  if (valptr == (struct bond_opt_value *)0) {
    #line 4772 
    printk((char *)"\001");
    #line 4773 
    return -22;
  }
  #line 4775 
  ad_user_port_key = (unsigned short)valptr->value;
  #line 4777 
  __bond_opt_init(& newval,(char *)"default",18446744073709551615ULL);
  #line 4778 
  valptr = bond_opt_parse(bond_opt_get(24U),& newval);
  #line 4779 
  if (valptr == (struct bond_opt_value *)0) {
    #line 4780 
    printk((char *)"\001");
    #line 4781 
    return -22;
  }
  #line 4783 
  tlb_dynamic_lb = (int)valptr->value;
  #line 4785 
  if (lp_interval == 0) {
    #line 4786 
    printk((char *)"\001",2147483647,1);
    #line 4788 
    lp_interval = 1;
  }
  #line 4792 
  params->mode = bond_mode;
  #line 4793 
  params->xmit_policy = xmit_hashtype;
  #line 4794 
  params->miimon = miimon;
  #line 4795 
  params->num_peer_notif = (unsigned char)num_peer_notif;
  #line 4796 
  params->arp_interval = arp_interval;
  #line 4797 
  params->arp_validate = arp_validate_value;
  #line 4798 
  params->arp_all_targets = arp_all_targets_value;
  #line 4799 
  params->updelay = updelay;
  #line 4800 
  params->downdelay = downdelay;
  #line 4801 
  params->peer_notif_delay = 0;
  #line 4802 
  params->use_carrier = use_carrier;
  #line 4803 
  params->lacp_fast = lacp_fast;
  #line 4804 
  params->primary[0] = (char)0;
  #line 4805 
  params->primary_reselect = primary_reselect_value;
  #line 4806 
  params->fail_over_mac = fail_over_mac_value;
  #line 4807 
  params->tx_queues = tx_queues;
  #line 4808 
  params->all_slaves_active = all_slaves_active;
  #line 4809 
  params->resend_igmp = resend_igmp;
  #line 4810 
  params->min_links = (unsigned int)min_links;
  #line 4811 
  params->lp_interval = lp_interval;
  #line 4812 
  params->packets_per_slave = packets_per_slave;
  #line 4813 
  params->tlb_dynamic_lb = tlb_dynamic_lb;
  #line 4814 
  params->ad_actor_sys_prio = ad_actor_sys_prio;
  #line 4815 
  eth_zero_addr((u8 *)(& params->ad_actor_system));
  #line 4816 
  params->ad_user_port_key = ad_user_port_key;
  #line 4817 
  if (packets_per_slave > 0) 
                             #line 4818 
                             params->reciprocal_packets_per_slave = reciprocal_value((unsigned int)packets_per_slave);
  else {
    #line 4824 
    struct reciprocal_value __constr_expr_51 = {.m = 0U, .sh1 = (unsigned char)0, .sh2 = (unsigned char)0};
    #line 4824 
    params->reciprocal_packets_per_slave = __constr_expr_51;
  }
  #line 4828 
  if (primary != (char *)0) {
    #line 4829 
    strncpy((char *)(& params->primary),primary,16UL);
    #line 4830 
    params->primary[15] = (char)0;
  }
  #line 4833 
  memcpy((void *)(& params->arp_targets),(void *)(& arp_target),64UL);
  #line 4835 
  return 0;
}

#line 4839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_init(struct net_device *bond_dev)
{
  #line 4841 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 4842 
  ;
  #line 4842 
  struct bond_net *bn = (struct bond_net *)net_generic(dev_net(bond_dev),bond_net_id);
  {
    #line 4844 
    bool branch;
    #line 4844 
    struct _ddebug __UNIQUE_ID_ddebug639 = {.modname = (char *)"bonding", .function = (char *)"bond_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c", .format = (char *)"Begin bond_init\n", .lineno = (unsigned int)4844U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 4844 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug639.key.dd_key_false.key,(_Bool)0);
    #line 4844 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 4844 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug639,bond_dev,(char *)"Begin bond_init\n");
  }
  #line 4846 
  bond->wq = alloc_workqueue((char *)(& bond_dev->name),655370U,1);
  #line 4847 
  if (bond->wq == (struct workqueue_struct *)0) 
                                                #line 4848 
                                                return -12;
  #line 4850 
  spinlock_check(& bond->stats_lock);
  {
    #line 4850 
    struct lock_class_key __key;
    #line 4850 
    __raw_spin_lock_init(& bond->stats_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&bond->stats_lock)->rlock",& __key);
  }
  #line 4851 
  lockdep_register_key(& bond->stats_lock_key);
  #line 4852 
  lockdep_init_map(& bond->stats_lock.__anonCompField_spinlock_25.__anonCompField___anonunion_97_24.dep_map,(char *)"&bond->stats_lock_key",& bond->stats_lock_key,0);
  #line 4854 
  list_add_tail(& bond->bond_list,& bn->dev_list);
  #line 4856 
  bond_prepare_sysfs_group(bond);
  #line 4858 
  bond_debug_register(bond);
  #line 4861 
  if ((int)is_zero_ether_addr(bond_dev->dev_addr) != 0) 
    #line 4861 
    if ((unsigned int)bond_dev->addr_assign_type == 0U) 
                                                        #line 4863 
                                                        eth_hw_addr_random(bond_dev);
  #line 4865 
  return 0;
}

#line 4868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
unsigned int bond_get_num_tx_queues(void)
{
  #line 4870 
  return (unsigned int)tx_queues;
}

#line 4878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
int bond_create(struct net *net, char *name)
{
  #line 4880 
  struct net_device *bond_dev;
  #line 4881 
  struct bonding *bond;
  #line 4882 
  struct alb_bond_info *bond_info;
  #line 4883 
  int res;
  #line 4887 
  char *tmp;
  #line 4885 
  rtnl_lock();
  #line 4887 
  ;
  #line 4887 
  ;
  #line 4887 
  if (name != (char *)0) 
                         #line 4887 
                         tmp = name; else 
                                          #line 4887 
                                          tmp = (char *)"bond%d";
  #line 4887 
  bond_dev = cif_alloc_netdev_mqs(1936,tmp,(unsigned char)0,& bond_setup,(unsigned int)tx_queues,(unsigned int)tx_queues);
  #line 4890 
  if (bond_dev == (struct net_device *)0) {
    #line 4891 
    printk((char *)"\001",name);
    #line 4892 
    rtnl_unlock();
    #line 4893 
    return -12;
  }
  #line 4900 
  bond = (struct bonding *)netdev_priv(bond_dev);
  #line 4901 
  bond_info = & bond->alb_info;
  #line 4902 
  bond_info->rx_hashtbl_used_head = 4294967295U;
  #line 4904 
  dev_net_set(bond_dev,net);
  #line 4905 
  bond_dev->rtnl_link_ops = & bond_link_ops;
  #line 4907 
  res = register_netdevice(bond_dev);
  #line 4909 
  netif_carrier_off(bond_dev);
  #line 4911 
  bond_work_init_all(bond);
  #line 4913 
  rtnl_unlock();
  #line 4914 
  if (res < 0) 
               #line 4915 
               cif_free_netdev(bond_dev);
  #line 4916 
  return res;
}

#line 4919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bond_net_init(struct net *net)
{
  #line 4921 
  struct bond_net *bn = net_generic(net,bond_net_id);
  #line 4923 
  bn->net = net;
  #line 4924 
  INIT_LIST_HEAD(& bn->dev_list);
  #line 4926 
  bond_create_proc_dir(bn);
  #line 4927 
  bond_create_sysfs(bn);
  #line 4929 
  return 0;
}

#line 4932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bond_net_exit(struct net *net)
{
  #line 4942 
  void *__mptr_0;
  #line 4942 
  void *__mptr;
  #line 4935 
  struct bonding *bond;
  #line 4935 
  struct bonding *tmp_bond;
  #line 4934 
  struct bond_net *bn = net_generic(net,bond_net_id);
  #line 4936 
  struct list_head list = {.next = & list, .prev = & list};
  #line 4938 
  bond_destroy_sysfs(bn);
  #line 4941 
  rtnl_lock();
  #line 4942 
  __mptr = (void *)bn->dev_list.next;
  #line 4942 
  bond = ((struct bonding *)(__mptr + 18446744073709551384U));
  #line 4942 
  __mptr_0 = (void *)bond->bond_list.next;
  #line 4943 
  tmp_bond = ((struct bonding *)(__mptr_0 + 18446744073709551384U));
  #line 4942 
  while (& bond->bond_list != & bn->dev_list) {
    #line 4942 
    void *__mptr_1;
    #line 4943 
    unregister_netdevice_queue(bond->dev,& list);
    #line 4942 
    bond = tmp_bond;
    #line 4942 
    __mptr_1 = (void *)tmp_bond->bond_list.next;
    #line 4942 
    tmp_bond = ((struct bonding *)(__mptr_1 + 18446744073709551384U));
  }
  #line 4944 
  unregister_netdevice_many(& list);
  #line 4945 
  rtnl_unlock();
  #line 4947 
  bond_destroy_proc_dir(bn);
  #line 4948 
  return;
}

#line 4950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static struct pernet_operations bond_net_ops = {.init = & bond_net_init, .exit = & bond_net_exit, .id = & bond_net_id, .size = 88UL};
#line 4957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static int bonding_init(void)
{
  #line 4959 
  int i;
  #line 4960 
  int res;
  #line 4962 
  printk((char *)"\001",(char *)"Ethernet Channel Bonding Driver");
  #line 4964 
  res = bond_check_params(& bonding_defaults);
  #line 4965 
  if (res != 0) 
                #line 4966 
                goto out;
  #line 4968 
  res = register_pernet_subsys(& bond_net_ops);
  #line 4969 
  if (res != 0) 
                #line 4970 
                goto out;
  #line 4972 
  res = bond_netlink_init();
  #line 4973 
  if (res != 0) 
                #line 4974 
                goto err_link;
  #line 4976 
  bond_create_debugfs();
  #line 4978 
  i = 0;
  #line 4978 
  while (i < max_bonds) {
    #line 4979 
    res = bond_create(& init_net,(char *)0);
    #line 4980 
    if (res != 0) 
                  #line 4981 
                  goto err;
    #line 4978 
    i ++;
  }
  #line 4984 
  skb_flow_dissector_init(& flow_keys_bonding,(struct flow_dissector_key *)(& flow_keys_bonding_keys),10U);
  #line 4988 
  register_netdevice_notifier(& bond_netdev_notifier);
  #line 4989 
  out: 
       #line 4989 
  ;
  #line 4990 
  return res;
  #line 4991 
  err: 
       #line 4991 
  ;
  #line 4992 
  bond_destroy_debugfs();
  #line 4993 
  bond_netlink_fini();
  #line 4994 
  err_link: 
            #line 4994 
  ;
  #line 4995 
  unregister_pernet_subsys(& bond_net_ops);
  #line 4996 
  goto out;
}

#line 5000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_main.c"
static void bonding_exit(void)
{
  #line 5002 
  unregister_netdevice_notifier(& bond_netdev_notifier);
  #line 5004 
  bond_destroy_debugfs();
  #line 5006 
  bond_netlink_fini();
  #line 5007 
  unregister_pernet_subsys(& bond_net_ops);
  {
    #line 5011 
    int __ret_warn_on = atomic_read(& netpoll_block_tx) != 0;
    #line 5011 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 5012 
      ldv_inline_asm();
      #line 5013 
      ldv_inline_asm();
    }
    #line 5011 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 5013 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
#line 93 
struct net_device *emg_alloc_netdev_mqs(int arg0, char *arg1, unsigned char arg2, void (*arg3)(struct net_device *), unsigned int arg4, unsigned int arg5);
#line 94 
#line 94 
void emg_free_netdev(struct net_device *arg0);
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
void emg_bonding_exit(void)
{
  #line 100 
  bonding_exit();
  #line 101 
  return;
}

#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
int emg_bonding_init(void)
{
  #line 104 
  return bonding_init();
}

#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
void emg_wrapper_bond_setup(struct net_device *arg0)
{
  #line 108 
  bond_setup(arg0);
  #line 109 
  return;
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 144 
  ldv_init_list_head(list);
  #line 145 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 193 
  ldv_atomic_inc(v);
  #line 194 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 200 
  ldv_atomic_dec(v);
  #line 201 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *ERR_PTR(long error)
{
  #line 214 
  return ldv_err_ptr(error);
}

#line 225  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 228 
  return ldv_is_err(ptr);
}

#line 232  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 235 
  return ldv_is_err_or_null(ptr);
}

#line 311  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static bool cif_queue_delayed_work_0(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 315 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 445  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 448 
  return ldv_kmalloc(size,flags);
}

#line 459  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 462 
  return ldv_kcalloc(n,size,flags);
}

#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 483 
  return ldv_kzalloc(size,flags);
}

#line 638  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 641 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 643 
  spin_lock_bh_0(lock);
  #line 644 
  return;
}

#line 656  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 659 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 661 
  spin_unlock_bh_0(lock);
  #line 662 
  return;
}

#line 806  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 809 
  return ldv_strcmp(cs,ct);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_lock_stats_lock_of_bonding(spinlock_t *lock)
{
  #line 834 
  ldv_spin_model_lock((char *)"stats_lock_of_bonding");
  #line 836 
  spin_lock_0(lock);
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_spin_unlock_stats_lock_of_bonding(spinlock_t *lock)
{
  #line 843 
  ldv_spin_model_unlock((char *)"stats_lock_of_bonding");
  #line 845 
  spin_unlock_0(lock);
  #line 846 
  return;
}

#line 849  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static struct net_device *cif_alloc_netdev_mqs(int sizeof_priv, char *name, unsigned char name_assign_type, void (*setup)(struct net_device *), unsigned int txqs, unsigned int rxqs)
{
  #line 853 
  return emg_alloc_netdev_mqs(sizeof_priv,name,
                           (unsigned char)((int)name_assign_type),setup,txqs,
                           rxqs);
}

#line 857  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 861 
  emg_free_netdev(dev);
  #line 862 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
#line 242 
int sysfs_create_file_ns(struct kobject *, struct attribute *, void *);
#line 252 
#line 252 
void sysfs_remove_file_ns(struct kobject *, struct attribute *, void *);
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
__inline static int sysfs_create_file(struct kobject *kobj, struct attribute *attr)
{
  #line 530 
  return sysfs_create_file_ns(kobj,attr,(void *)0);
}

#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
__inline static void sysfs_remove_file(struct kobject *kobj, struct attribute *attr)
{
  #line 536 
  sysfs_remove_file_ns(kobj,attr,(void *)0);
  #line 537 
  return;
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
#line 99 
int kobject_init_and_add(struct kobject *, struct kobj_type *, struct kobject *, char * , ...);
#line 115 
#line 115 
void kobject_put(struct kobject *);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t state_show(struct slave *slave, char *buf)
{
  #line 29 
  switch (bond_slave_state(slave)) {
    #line 30 
    case 0: 
            #line 30 
    ;
    #line 31 
    return (long)sprintf(buf,(char *)"active\n");
    #line 32 
    case 1: 
            #line 32 
    ;
    #line 33 
    return (long)sprintf(buf,(char *)"backup\n");
    #line 34 
    default: 
             #line 34 
    ;
    #line 35 
    return (long)sprintf(buf,(char *)"UNKNOWN\n");
  }
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_state = {.attr = {.name = (char *)"state", .mode = (unsigned short)292U}, .show = & state_show};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t mii_status_show(struct slave *slave, char *buf)
{
  #line 42 
  ;
  #line 42 
  return (long)sprintf(buf,(char *)"%s\n",
                bond_slave_link_status((signed char)((int)slave->link)));
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_mii_status = {.attr = {.name = (char *)"mii_status", .mode = (unsigned short)292U}, .show = & mii_status_show};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t link_failure_count_show(struct slave *slave, char *buf)
{
  #line 48 
  return (long)sprintf(buf,(char *)"%d\n",slave->link_failure_count);
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_link_failure_count = {.attr = {.name = (char *)"link_failure_count", .mode = (unsigned short)292U}, .show = & link_failure_count_show};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t perm_hwaddr_show(struct slave *slave, char *buf)
{
  #line 54 
  return (long)sprintf(buf,(char *)"%*phC\n",(int)(slave->dev)->addr_len,
              (u8 *)(& slave->perm_hwaddr));
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_perm_hwaddr = {.attr = {.name = (char *)"perm_hwaddr", .mode = (unsigned short)292U}, .show = & perm_hwaddr_show};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t queue_id_show(struct slave *slave, char *buf)
{
  #line 62 
  return (long)sprintf(buf,(char *)"%d\n",(int)slave->queue_id);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_queue_id = {.attr = {.name = (char *)"queue_id", .mode = (unsigned short)292U}, .show = & queue_id_show};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t ad_aggregator_id_show(struct slave *slave, char *buf)
{
  #line 68 
  struct aggregator *agg;
  #line 70 
  if ((slave->bond)->params.mode == 4) {
    #line 71 
    agg = (slave->ad_info)->port.aggregator;
    #line 72 
    if (agg != (struct aggregator *)0) {
      #line 73 
      return (long)sprintf(buf,(char *)"%d\n",(int)agg->aggregator_identifier);
    }
  }
  #line 77 
  return (long)sprintf(buf,(char *)"N/A\n");
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_ad_aggregator_id = {.attr = {.name = (char *)"ad_aggregator_id", .mode = (unsigned short)292U}, .show = & ad_aggregator_id_show};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t ad_actor_oper_port_state_show(struct slave *slave, char *buf)
{
  #line 83 
  struct port *ad_port;
  #line 85 
  if ((slave->bond)->params.mode == 4) {
    #line 86 
    ad_port = & (slave->ad_info)->port;
    #line 87 
    if (ad_port->aggregator != (struct aggregator *)0) {
      #line 88 
      return (long)sprintf(buf,(char *)"%u\n",(int)ad_port->actor_oper_port_state);
    }
  }
  #line 92 
  return (long)sprintf(buf,(char *)"N/A\n");
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_ad_actor_oper_port_state = {.attr = {.name = (char *)"ad_actor_oper_port_state", .mode = (unsigned short)292U}, .show = & ad_actor_oper_port_state_show};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t ad_partner_oper_port_state_show(struct slave *slave, char *buf)
{
  #line 98 
  struct port *ad_port;
  #line 100 
  if ((slave->bond)->params.mode == 4) {
    #line 101 
    ad_port = & (slave->ad_info)->port;
    #line 102 
    if (ad_port->aggregator != (struct aggregator *)0) {
      #line 103 
      return (long)sprintf(buf,(char *)"%u\n",(int)ad_port->partner_oper.port_state);
    }
  }
  #line 107 
  return (long)sprintf(buf,(char *)"N/A\n");
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute slave_attr_ad_partner_oper_port_state = {.attr = {.name = (char *)"ad_partner_oper_port_state", .mode = (unsigned short)292U}, .show = & ad_partner_oper_port_state_show};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct slave_attribute *slave_attrs[9U] = {& slave_attr_state, & slave_attr_mii_status, & slave_attr_link_failure_count, & slave_attr_perm_hwaddr, & slave_attr_queue_id, & slave_attr_ad_aggregator_id, & slave_attr_ad_actor_oper_port_state, & slave_attr_ad_partner_oper_port_state};
#line 126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static ssize_t slave_show(struct kobject *kobj, struct attribute *attr, char *buf)
{
  #line 129 
  void *__mptr;
  #line 130 
  void *__mptr_0;
  #line 129 
  __mptr = (void *)attr;
  #line 129 
  struct slave_attribute *slave_attr = ((struct slave_attribute *)__mptr);
  #line 130 
  __mptr_0 = (void *)kobj;
  #line 130 
  struct slave *slave = ((struct slave *)(__mptr_0 + 18446744073709551184U));
  #line 132 
  return (*(slave_attr->show))(slave,buf);
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct sysfs_ops slave_sysfs_ops = {.show = & slave_show};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
static struct kobj_type slave_ktype = {.sysfs_ops = & slave_sysfs_ops};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
int bond_sysfs_slave_add(struct slave *slave)
{
  #line 147 
  struct slave_attribute **a;
  #line 148 
  int err;
  #line 150 
  err = kobject_init_and_add(& slave->kobj,& slave_ktype,& (slave->dev)->dev.kobj,(char *)"bonding_slave");
  #line 152 
  if (err != 0) 
                #line 153 
                return err;
  #line 155 
  a = (struct slave_attribute **)(& slave_attrs);
  #line 155 
  while (*a != (struct slave_attribute *)0) {
    #line 156 
    err = sysfs_create_file(& slave->kobj,& (*a)->attr);
    #line 157 
    if (err != 0) {
      #line 158 
      kobject_put(& slave->kobj);
      #line 159 
      return err;
    }
    #line 155 
    a ++;
  }
  #line 163 
  return 0;
}

#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs_slave.c"
void bond_sysfs_slave_del(struct slave *slave)
{
  #line 168 
  struct slave_attribute **a;
  #line 170 
  a = (struct slave_attribute **)(& slave_attrs);
  #line 170 
  while (*a != (struct slave_attribute *)0) {
    #line 171 
    sysfs_remove_file(& slave->kobj,& (*a)->attr);
    #line 170 
    a ++;
  }
  #line 173 
  kobject_put(& slave->kobj);
  #line 174 
  return;
}

#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 487 
int sscanf(char *, char * , ...);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
static size_t cif_strlen(char *s);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 184 
char *kstrndup(char *, size_t, gfp_t);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void set_ti_thread_flag(struct thread_info *ti, int flag)
{
  #line 55 
  cif_set_bit((long)flag,& ti->flags);
  #line 56 
  return;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 27 
#line 27 
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 1660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static struct thread_info *task_thread_info(struct task_struct *task)
{
  #line 1662 
  return & task->thread_info;
}

#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
  #line 1727 
  ;
  #line 1727 
  set_ti_thread_flag(task_thread_info(tsk),flag);
  #line 1728 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
#line 210 
bool capable(int);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
__inline static int restart_syscall(void)
{
  #line 343 
  set_tsk_thread_flag(ldv_get_current(),2);
  #line 344 
  return -513;
}

#line 3684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3684 
bool dev_valid_name(char *);
#line 4470 
#line 4470 
int netdev_class_create_file_ns(struct class_attribute *, void *);
#line 4472 
#line 4472 
void netdev_class_remove_file_ns(struct class_attribute *, void *);
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
#line 106 
int bond_opt_tryset_rtnl(struct bonding *bond, unsigned int option, char *buf);
#line 111 
#line 111 
struct bond_option *bond_opt_get_by_name(char *name);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
static struct net_device *bond_option_active_slave_get_rcu(struct bonding *bond)
{
  #line 329 
  struct slave *________p1;
  #line 331 
  struct net_device *tmp_4;
  {
    #line 330 
    union __anonunion___u_3230 __u;
    #line 329 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 329 
    ________p1 = (__u.__val);
    {
      #line 329 
      bool __warned;
      #line 329 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 329 
        if (! __warned) {
          #line 329 
          if (rcu_read_lock_held() == 0) {
            #line 329 
            __warned = (_Bool)1;
            #line 329 
            lockdep_rcu_suspicious((char *)"./include/net/bonding.h",329,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 329 
  struct slave *slave = ________p1;
  #line 331 
  if ((int)bond_uses_primary(bond) != 0) 
    #line 331 
    if (slave != (struct slave *)0) 
                                    #line 331 
                                    tmp_4 = slave->dev; else 
                                                             #line 331 
                                                             tmp_4 = (struct net_device *)0;
  else 
       #line 331 
       tmp_4 = (struct net_device *)0;
  #line 331 
  return tmp_4;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_bonds(struct class *cls, struct class_attribute *attr, char *buf)
{
  #line 45 
  void *__mptr_0;
  #line 39 
  void *__mptr;
  #line 41 
  struct bonding *bond;
  #line 39 
  __mptr = (void *)attr;
  #line 38 
  struct bond_net *bn = ((struct bond_net *)(__mptr + 18446744073709551584U));
  #line 40 
  int res = 0;
  #line 43 
  rtnl_lock();
  #line 45 
  __mptr_0 = (void *)bn->dev_list.next;
  #line 45 
  bond = ((struct bonding *)(__mptr_0 + 18446744073709551384U));
  #line 45 
  while (& bond->bond_list != & bn->dev_list) {
    #line 45 
    void *__mptr_1;
    {
      #line 46 
      if ((unsigned int)res > 4080U) {
        #line 48 
        if (4096UL - (unsigned long)res > 10UL) 
                                                #line 49 
                                                res = 4086;
        #line 50 
        res = sprintf(buf + (unsigned long)res,(char *)"++more++ ") + res;
        #line 51 
        break;
      }
      #line 53 
      res = sprintf(buf + (unsigned long)res,(char *)"%s ",
                (char *)(& (bond->dev)->name)) + res;
    }
    #line 45 
    __mptr_1 = (void *)bond->bond_list.next;
    #line 45 
    bond = ((struct bonding *)(__mptr_1 + 18446744073709551384U));
  }
  #line 55 
  if (res != 0) 
                #line 56 
                *(buf + ((unsigned long)res + 18446744073709551615U)) = (char)10;
  #line 58 
  rtnl_unlock();
  #line 59 
  return (long)res;
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct net_device *bond_get_by_name(struct bond_net *bn, char *ifname)
{
  #line 66 
  void *__mptr;
  #line 64 
  struct bonding *bond;
  #line 66 
  __mptr = (void *)bn->dev_list.next;
  #line 66 
  bond = ((struct bonding *)(__mptr + 18446744073709551384U));
  #line 66 
  while (& bond->bond_list != & bn->dev_list) {
    #line 66 
    void *__mptr_0;
    #line 67 
    if (cif_strncmp((char *)(& (bond->dev)->name),ifname,16UL) == 0) 
      #line 68 
      return bond->dev;
    #line 66 
    __mptr_0 = (void *)bond->bond_list.next;
    #line 66 
    bond = ((struct bonding *)(__mptr_0 + 18446744073709551384U));
  }
  #line 70 
  return (struct net_device *)0;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_store_bonds(struct class *cls, struct class_attribute *attr, char *buffer, size_t count)
{
  #line 83 
  void *__mptr;
  #line 85 
  char *ifname;
  #line 86 
  int rv;
  #line 83 
  __mptr = (void *)attr;
  #line 82 
  struct bond_net *bn = ((struct bond_net *)(__mptr + 18446744073709551584U));
  #line 84 
  char command[17U] = {(char)0};
  #line 86 
  int res = (int)count;
  #line 88 
  sscanf(buffer,(char *)"%16s",(char *)(& command));
  #line 89 
  ifname = (char *)(& command) + 1U;
  #line 90 
  if (cif_strlen((char *)(& command)) <= 1UL) 
                                              #line 90 
                                              goto _LOR;
  else {
    #line 91 
    if (! dev_valid_name(ifname)) 
                                  #line 90 
                                  _LOR: 
                                        #line 92 
                                        goto err_no_cmd;
  }
  #line 94 
  if ((int)command[0] == 43) {
    #line 95 
    printk((char *)"\001",ifname);
    #line 96 
    rv = bond_create(bn->net,ifname);
    #line 97 
    if (rv != 0) {
      #line 98 
      if (rv == -17) 
                     #line 99 
                     printk((char *)"\001",ifname); else 
                                                         #line 101 
                                                         printk((char *)"\001",ifname);
      #line 102 
      res = rv;
    }
  }
  else 
    #line 104 
    if ((int)command[0] == 45) {
      #line 105 
      struct net_device *bond_dev;
      #line 107 
      rtnl_lock();
      #line 108 
      bond_dev = bond_get_by_name(bn,ifname);
      #line 109 
      if (bond_dev != (struct net_device *)0) {
        #line 110 
        printk((char *)"\001",ifname);
        #line 111 
        unregister_netdevice(bond_dev);
      }
      else {
        #line 113 
        printk((char *)"\001",ifname);
        #line 114 
        res = -19;
      }
      #line 116 
      rtnl_unlock();
    }
    else 
         #line 118 
         goto err_no_cmd;
  #line 123 
  return (long)res;
  #line 125 
  err_no_cmd: 
              #line 125 
  ;
  #line 126 
  printk((char *)"\001");
  #line 127 
  return -1L;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct class_attribute class_attr_bonding_masters = {.attr = {.name = (char *)"bonding_masters", .mode = (unsigned short)420U}, .show = & bonding_show_bonds, .store = & bonding_store_bonds};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_sysfs_store_option(struct device *d, struct device_attribute *attr, char *buffer, size_t count)
{
  #line 151 
  int __ret_warn_on;
  #line 145 
  void *__mptr;
  #line 146 
  struct bond_option *opt;
  #line 147 
  char *buffer_clone;
  #line 148 
  int ret;
  #line 145 
  __mptr = (void *)d;
  #line 145 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 150 
  opt = bond_opt_get_by_name(attr->attr.name);
  #line 151 
  __ret_warn_on = opt == (struct bond_option *)0;
  #line 151 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 152 
    ldv_inline_asm();
    #line 153 
    ldv_inline_asm();
  }
  #line 151 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 152 
                                                return -2L;
  #line 153 
  buffer_clone = kstrndup(buffer,count,3264U);
  #line 154 
  if (buffer_clone == (char *)0) 
                                 #line 155 
                                 return -12L;
  #line 156 
  ret = bond_opt_tryset_rtnl(bond,(unsigned int)opt->id,buffer_clone);
  #line 157 
  if (ret == 0) 
                #line 158 
                ret = (int)count;
  #line 159 
  kfree((void *)buffer_clone);
  #line 161 
  return (long)ret;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_slaves(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 168 
  void *__mptr;
  #line 169 
  struct list_head *iter;
  #line 170 
  struct slave *slave;
  #line 168 
  __mptr = (void *)d;
  #line 168 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 171 
  int res = 0;
  #line 173 
  if (rtnl_trylock() == 0) {
    #line 174 
    return (long)restart_syscall();
  }
  #line 176 
  iter = (bond->dev)->adj_list.lower.next;
  #line 176 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 176 
  while (slave != (struct slave *)0) {
    {
      #line 177 
      if ((unsigned int)res > 4080U) {
        #line 179 
        if (4096UL - (unsigned long)res > 10UL) 
                                                #line 180 
                                                res = 4086;
        #line 181 
        res = sprintf(buf + (unsigned long)res,(char *)"++more++ ") + res;
        #line 182 
        break;
      }
      #line 184 
      res = sprintf(buf + (unsigned long)res,(char *)"%s ",
                (char *)(& (slave->dev)->name)) + res;
    }
    #line 176 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 187 
  rtnl_unlock();
  #line 189 
  if (res != 0) 
                #line 190 
                *(buf + ((unsigned long)res + 18446744073709551615U)) = (char)10;
  #line 192 
  return (long)res;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_slaves = {.attr = {.name = (char *)"slaves", .mode = (unsigned short)420U}, .show = & bonding_show_slaves, .store = & bonding_sysfs_store_option};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_mode(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 201 
  void *__mptr;
  #line 202 
  struct bond_opt_value *val;
  #line 201 
  __mptr = (void *)d;
  #line 201 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 204 
  val = bond_opt_get_val(0U,(unsigned long long)bond->params.mode);
  #line 206 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,bond->params.mode);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_mode = {.attr = {.name = (char *)"mode", .mode = (unsigned short)420U}, .show = & bonding_show_mode, .store = & bonding_sysfs_store_option};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_xmit_hash(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 215 
  void *__mptr;
  #line 216 
  struct bond_opt_value *val;
  #line 215 
  __mptr = (void *)d;
  #line 215 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 218 
  val = bond_opt_get_val(2U,(unsigned long long)bond->params.xmit_policy);
  #line 220 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,bond->params.xmit_policy);
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_xmit_hash_policy = {.attr = {.name = (char *)"xmit_hash_policy", .mode = (unsigned short)420U}, .show = & bonding_show_xmit_hash, .store = & bonding_sysfs_store_option};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_arp_validate(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 230 
  void *__mptr;
  #line 231 
  struct bond_opt_value *val;
  #line 230 
  __mptr = (void *)d;
  #line 230 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 233 
  val = bond_opt_get_val(3U,(unsigned long long)bond->params.arp_validate);
  #line 236 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,bond->params.arp_validate);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_arp_validate = {.attr = {.name = (char *)"arp_validate", .mode = (unsigned short)420U}, .show = & bonding_show_arp_validate, .store = & bonding_sysfs_store_option};
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_arp_all_targets(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 246 
  void *__mptr;
  #line 247 
  struct bond_opt_value *val;
  #line 246 
  __mptr = (void *)d;
  #line 246 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 249 
  val = bond_opt_get_val(4U,(unsigned long long)bond->params.arp_all_targets);
  #line 251 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,
                bond->params.arp_all_targets);
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_arp_all_targets = {.attr = {.name = (char *)"arp_all_targets", .mode = (unsigned short)420U}, .show = & bonding_show_arp_all_targets, .store = & bonding_sysfs_store_option};
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_fail_over_mac(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 262 
  void *__mptr;
  #line 263 
  struct bond_opt_value *val;
  #line 262 
  __mptr = (void *)d;
  #line 262 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 265 
  val = bond_opt_get_val(5U,(unsigned long long)bond->params.fail_over_mac);
  #line 268 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,bond->params.fail_over_mac);
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_fail_over_mac = {.attr = {.name = (char *)"fail_over_mac", .mode = (unsigned short)420U}, .show = & bonding_show_fail_over_mac, .store = & bonding_sysfs_store_option};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_arp_interval(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 278 
  void *__mptr;
  #line 278 
  __mptr = (void *)d;
  #line 278 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 280 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.arp_interval);
}

#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_arp_interval = {.attr = {.name = (char *)"arp_interval", .mode = (unsigned short)420U}, .show = & bonding_show_arp_interval, .store = & bonding_sysfs_store_option};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_arp_targets(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 290 
  void *__mptr;
  #line 291 
  int i;
  #line 290 
  __mptr = (void *)d;
  #line 290 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 291 
  int res = 0;
  #line 293 
  i = 0;
  #line 293 
  while (i <= 15) {
    #line 294 
    if (bond->params.arp_targets[i] != 0U) {
      #line 296 
      res = sprintf(buf + (unsigned long)res,(char *)"%pI4 ",
                & bond->params.arp_targets[i]) + res;
    }
    #line 293 
    i ++;
  }
  #line 298 
  if (res != 0) 
                #line 299 
                *(buf + ((unsigned long)res + 18446744073709551615U)) = (char)10;
  #line 301 
  return (long)res;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_arp_ip_target = {.attr = {.name = (char *)"arp_ip_target", .mode = (unsigned short)420U}, .show = & bonding_show_arp_targets, .store = & bonding_sysfs_store_option};
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_downdelay(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 311 
  void *__mptr;
  #line 311 
  __mptr = (void *)d;
  #line 311 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 313 
  return (long)sprintf(buf,(char *)"%d\n",
                bond->params.downdelay * bond->params.miimon);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_downdelay = {.attr = {.name = (char *)"downdelay", .mode = (unsigned short)420U}, .show = & bonding_show_downdelay, .store = & bonding_sysfs_store_option};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_updelay(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 322 
  void *__mptr;
  #line 322 
  __mptr = (void *)d;
  #line 322 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 324 
  return (long)sprintf(buf,(char *)"%d\n",
                bond->params.updelay * bond->params.miimon);
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_updelay = {.attr = {.name = (char *)"updelay", .mode = (unsigned short)420U}, .show = & bonding_show_updelay, .store = & bonding_sysfs_store_option};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_peer_notif_delay(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 334 
  void *__mptr;
  #line 334 
  __mptr = (void *)d;
  #line 334 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 336 
  return (long)sprintf(buf,(char *)"%d\n",
                bond->params.peer_notif_delay * bond->params.miimon);
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_peer_notif_delay = {.attr = {.name = (char *)"peer_notif_delay", .mode = (unsigned short)420U}, .show = & bonding_show_peer_notif_delay, .store = & bonding_sysfs_store_option};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_lacp(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 347 
  void *__mptr;
  #line 348 
  struct bond_opt_value *val;
  #line 347 
  __mptr = (void *)d;
  #line 347 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 350 
  val = bond_opt_get_val(10U,(unsigned long long)bond->params.lacp_fast);
  #line 352 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,bond->params.lacp_fast);
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_lacp_rate = {.attr = {.name = (char *)"lacp_rate", .mode = (unsigned short)420U}, .show = & bonding_show_lacp, .store = & bonding_sysfs_store_option};
#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_min_links(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 361 
  void *__mptr;
  #line 361 
  __mptr = (void *)d;
  #line 361 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 363 
  return (long)sprintf(buf,(char *)"%u\n",bond->params.min_links);
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_min_links = {.attr = {.name = (char *)"min_links", .mode = (unsigned short)420U}, .show = & bonding_show_min_links, .store = & bonding_sysfs_store_option};
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_select(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 372 
  void *__mptr;
  #line 373 
  struct bond_opt_value *val;
  #line 372 
  __mptr = (void *)d;
  #line 372 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 375 
  val = bond_opt_get_val(12U,(unsigned long long)bond->params.ad_select);
  #line 377 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,bond->params.ad_select);
}

#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_select = {.attr = {.name = (char *)"ad_select", .mode = (unsigned short)420U}, .show = & bonding_show_ad_select, .store = & bonding_sysfs_store_option};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_num_peer_notif(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 387 
  void *__mptr;
  #line 387 
  __mptr = (void *)d;
  #line 387 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 388 
  return (long)sprintf(buf,(char *)"%d\n",(int)bond->params.num_peer_notif);
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_num_grat_arp = {.attr = {.name = (char *)"num_grat_arp", .mode = (unsigned short)420U}, .show = & bonding_show_num_peer_notif, .store = & bonding_sysfs_store_option};
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_num_unsol_na = {.attr = {.name = (char *)"num_unsol_na", .mode = (unsigned short)420U}, .show = & bonding_show_num_peer_notif, .store = & bonding_sysfs_store_option};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_miimon(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 400 
  void *__mptr;
  #line 400 
  __mptr = (void *)d;
  #line 400 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 402 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.miimon);
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_miimon = {.attr = {.name = (char *)"miimon", .mode = (unsigned short)420U}, .show = & bonding_show_miimon, .store = & bonding_sysfs_store_option};
#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_primary(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 412 
  void *__mptr;
  #line 417 
  struct slave *________p1;
  #line 413 
  struct slave *primary_0;
  #line 412 
  __mptr = (void *)d;
  #line 412 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 414 
  int count = 0;
  #line 416 
  rcu_read_lock();
  {
    #line 418 
    union __anonunion___u_3234 __u;
    #line 417 
    __read_once_size((void *)(& bond->primary_slave),(void *)(& __u.__c),8);
    #line 417 
    ________p1 = (__u.__val);
    {
      #line 417 
      bool __warned;
      #line 417 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 417 
        if (! __warned) {
          #line 417 
          if (rcu_read_lock_held() == 0) {
            #line 417 
            __warned = (_Bool)1;
            #line 417 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c",417,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 417 
  primary_0 = ________p1;
  #line 418 
  if (primary_0 != (struct slave *)0) 
                                      #line 419 
                                      count = sprintf(buf,(char *)"%s\n",(char *)(& (primary_0->dev)->name));
  #line 420 
  rcu_read_unlock();
  #line 422 
  return (long)count;
}

#line 424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_primary = {.attr = {.name = (char *)"primary", .mode = (unsigned short)420U}, .show = & bonding_show_primary, .store = & bonding_sysfs_store_option};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_primary_reselect(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 432 
  void *__mptr;
  #line 433 
  struct bond_opt_value *val;
  #line 432 
  __mptr = (void *)d;
  #line 432 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 435 
  val = bond_opt_get_val(16U,(unsigned long long)bond->params.primary_reselect);
  #line 438 
  return (long)sprintf(buf,(char *)"%s %d\n",val->string,
                bond->params.primary_reselect);
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_primary_reselect = {.attr = {.name = (char *)"primary_reselect", .mode = (unsigned short)420U}, .show = & bonding_show_primary_reselect, .store = & bonding_sysfs_store_option};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_carrier(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 449 
  void *__mptr;
  #line 449 
  __mptr = (void *)d;
  #line 449 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 451 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.use_carrier);
}

#line 453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_use_carrier = {.attr = {.name = (char *)"use_carrier", .mode = (unsigned short)420U}, .show = & bonding_show_carrier, .store = & bonding_sysfs_store_option};
#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_active_slave(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 462 
  void *__mptr;
  #line 463 
  struct net_device *slave_dev;
  #line 462 
  __mptr = (void *)d;
  #line 462 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 464 
  int count = 0;
  #line 466 
  rcu_read_lock();
  #line 467 
  slave_dev = bond_option_active_slave_get_rcu(bond);
  #line 468 
  if (slave_dev != (struct net_device *)0) 
                                           #line 469 
                                           count = sprintf(buf,(char *)"%s\n",(char *)(& slave_dev->name));
  #line 470 
  rcu_read_unlock();
  #line 472 
  return (long)count;
}

#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_active_slave = {.attr = {.name = (char *)"active_slave", .mode = (unsigned short)420U}, .show = & bonding_show_active_slave, .store = & bonding_sysfs_store_option};
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_mii_status(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 482 
  void *__mptr;
  #line 485 
  char *tmp_2;
  #line 482 
  __mptr = (void *)d;
  #line 482 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 483 
  bool active = netif_carrier_ok(bond->dev);
  #line 485 
  if ((int)active != 0) 
                        #line 485 
                        tmp_2 = (char *)"up"; else 
                                                   #line 485 
                                                   tmp_2 = (char *)"down";
  #line 485 
  ;
  #line 485 
  return (long)sprintf(buf,(char *)"%s\n",tmp_2);
}

#line 487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_mii_status = {.attr = {.name = (char *)"mii_status", .mode = (unsigned short)292U}, .show = & bonding_show_mii_status};
#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_aggregator(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 495 
  void *__mptr;
  #line 494 
  int count = 0;
  #line 495 
  __mptr = (void *)d;
  #line 495 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 497 
  if (bond->params.mode == 4) {
    #line 498 
    struct ad_info ad_info;
    #line 499 
    int tmp_2;
    #line 499 
    if (bond_3ad_get_active_agg_info(bond,& ad_info) == 0) 
                                                           #line 499 
                                                           tmp_2 = (int)ad_info.aggregator_id; else 
                                                                    #line 499 
                                                                    tmp_2 = 0;
    #line 499 
    ;
    #line 499 
    count = sprintf(buf,(char *)"%d\n",tmp_2);
  }
  #line 504 
  return (long)count;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_aggregator = {.attr = {.name = (char *)"ad_aggregator", .mode = (unsigned short)292U}, .show = & bonding_show_ad_aggregator};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_num_ports(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 515 
  void *__mptr;
  #line 514 
  int count = 0;
  #line 515 
  __mptr = (void *)d;
  #line 515 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 517 
  if (bond->params.mode == 4) {
    #line 518 
    struct ad_info ad_info;
    #line 519 
    int tmp_2;
    #line 519 
    if (bond_3ad_get_active_agg_info(bond,& ad_info) == 0) 
                                                           #line 519 
                                                           tmp_2 = (int)ad_info.ports; else 
                                                                    #line 519 
                                                                    tmp_2 = 0;
    #line 519 
    ;
    #line 519 
    count = sprintf(buf,(char *)"%d\n",tmp_2);
  }
  #line 524 
  return (long)count;
}

#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_num_ports = {.attr = {.name = (char *)"ad_num_ports", .mode = (unsigned short)292U}, .show = & bonding_show_ad_num_ports};
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_actor_key(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 535 
  void *__mptr;
  #line 534 
  int count = 0;
  #line 535 
  __mptr = (void *)d;
  #line 535 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 537 
  if (bond->params.mode == 4) {
    #line 537 
    if ((int)capable(12) != 0) {
      #line 538 
      struct ad_info ad_info;
      #line 539 
      int tmp_2;
      #line 539 
      if (bond_3ad_get_active_agg_info(bond,& ad_info) == 0) 
                                                             #line 539 
                                                             tmp_2 = (int)ad_info.actor_key; else 
                                                                    #line 539 
                                                                    tmp_2 = 0;
      #line 539 
      ;
      #line 539 
      count = sprintf(buf,(char *)"%d\n",tmp_2);
    }
  }
  #line 544 
  return (long)count;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_actor_key = {.attr = {.name = (char *)"ad_actor_key", .mode = (unsigned short)292U}, .show = & bonding_show_ad_actor_key};
#line 550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_partner_key(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 555 
  void *__mptr;
  #line 554 
  int count = 0;
  #line 555 
  __mptr = (void *)d;
  #line 555 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 557 
  if (bond->params.mode == 4) {
    #line 557 
    if ((int)capable(12) != 0) {
      #line 558 
      struct ad_info ad_info;
      #line 559 
      int tmp_2;
      #line 559 
      if (bond_3ad_get_active_agg_info(bond,& ad_info) == 0) 
                                                             #line 559 
                                                             tmp_2 = (int)ad_info.partner_key; else 
                                                                    #line 559 
                                                                    tmp_2 = 0;
      #line 559 
      ;
      #line 559 
      count = sprintf(buf,(char *)"%d\n",tmp_2);
    }
  }
  #line 564 
  return (long)count;
}

#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_partner_key = {.attr = {.name = (char *)"ad_partner_key", .mode = (unsigned short)292U}, .show = & bonding_show_ad_partner_key};
#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_partner_mac(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 575 
  void *__mptr;
  #line 574 
  int count = 0;
  #line 575 
  __mptr = (void *)d;
  #line 575 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 577 
  if (bond->params.mode == 4) {
    #line 577 
    if ((int)capable(12) != 0) {
      #line 578 
      struct ad_info ad_info;
      #line 579 
      if (bond_3ad_get_active_agg_info(bond,& ad_info) == 0) 
                                                             #line 580 
                                                             count = sprintf(buf,(char *)"%pM\n",(__u8 *)(& ad_info.partner_system));
    }
  }
  #line 583 
  return (long)count;
}

#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_partner_mac = {.attr = {.name = (char *)"ad_partner_mac", .mode = (unsigned short)292U}, .show = & bonding_show_ad_partner_mac};
#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_queue_id(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 592 
  void *__mptr;
  #line 593 
  struct list_head *iter;
  #line 594 
  struct slave *slave;
  #line 592 
  __mptr = (void *)d;
  #line 592 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 595 
  int res = 0;
  #line 597 
  if (rtnl_trylock() == 0) {
    #line 598 
    return (long)restart_syscall();
  }
  #line 600 
  iter = (bond->dev)->adj_list.lower.next;
  #line 600 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 600 
  while (slave != (struct slave *)0) {
    {
      #line 601 
      if ((unsigned int)res > 4074U) {
        #line 603 
        if (4096UL - (unsigned long)res > 10UL) 
                                                #line 604 
                                                res = 4086;
        #line 605 
        res = sprintf(buf + (unsigned long)res,(char *)"++more++ ") + res;
        #line 606 
        break;
      }
      #line 609 
      res = sprintf(buf + (unsigned long)res,(char *)"%s:%d ",
                (char *)(& (slave->dev)->name),(int)slave->queue_id) + res;
    }
    #line 600 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 611 
  if (res != 0) 
                #line 612 
                *(buf + ((unsigned long)res + 18446744073709551615U)) = (char)10;
  #line 614 
  rtnl_unlock();
  #line 616 
  return (long)res;
}

#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_queue_id = {.attr = {.name = (char *)"queue_id", .mode = (unsigned short)420U}, .show = & bonding_show_queue_id, .store = & bonding_sysfs_store_option};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_slaves_active(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 627 
  void *__mptr;
  #line 627 
  __mptr = (void *)d;
  #line 627 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 629 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.all_slaves_active);
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_all_slaves_active = {.attr = {.name = (char *)"all_slaves_active", .mode = (unsigned short)420U}, .show = & bonding_show_slaves_active, .store = & bonding_sysfs_store_option};
#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_resend_igmp(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 639 
  void *__mptr;
  #line 639 
  __mptr = (void *)d;
  #line 639 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 641 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.resend_igmp);
}

#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_resend_igmp = {.attr = {.name = (char *)"resend_igmp", .mode = (unsigned short)420U}, .show = & bonding_show_resend_igmp, .store = & bonding_sysfs_store_option};
#line 647  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_lp_interval(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 651 
  void *__mptr;
  #line 651 
  __mptr = (void *)d;
  #line 651 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 653 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.lp_interval);
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_lp_interval = {.attr = {.name = (char *)"lp_interval", .mode = (unsigned short)420U}, .show = & bonding_show_lp_interval, .store = & bonding_sysfs_store_option};
#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_tlb_dynamic_lb(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 662 
  void *__mptr;
  #line 662 
  __mptr = (void *)d;
  #line 662 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 663 
  return (long)sprintf(buf,(char *)"%d\n",bond->params.tlb_dynamic_lb);
}

#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_tlb_dynamic_lb = {.attr = {.name = (char *)"tlb_dynamic_lb", .mode = (unsigned short)420U}, .show = & bonding_show_tlb_dynamic_lb, .store = & bonding_sysfs_store_option};
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_packets_per_slave(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 672 
  void *__mptr;
  #line 672 
  __mptr = (void *)d;
  #line 672 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 673 
  unsigned int packets_per_slave_0 = (unsigned int)bond->params.packets_per_slave;
  #line 675 
  return (long)sprintf(buf,(char *)"%u\n",packets_per_slave_0);
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_packets_per_slave = {.attr = {.name = (char *)"packets_per_slave", .mode = (unsigned short)420U}, .show = & bonding_show_packets_per_slave, .store = & bonding_sysfs_store_option};
#line 680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_actor_sys_prio(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 684 
  void *__mptr;
  #line 684 
  __mptr = (void *)d;
  #line 684 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 686 
  if (bond->params.mode == 4) {
    #line 686 
    if ((int)capable(12) != 0) {
      #line 687 
      return (long)sprintf(buf,(char *)"%hu\n",(int)bond->params.ad_actor_sys_prio);
    }
  }
  #line 689 
  return 0L;
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_actor_sys_prio = {.attr = {.name = (char *)"ad_actor_sys_prio", .mode = (unsigned short)420U}, .show = & bonding_show_ad_actor_sys_prio, .store = & bonding_sysfs_store_option};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_actor_system(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 698 
  void *__mptr;
  #line 698 
  __mptr = (void *)d;
  #line 698 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 700 
  if (bond->params.mode == 4) {
    #line 700 
    if ((int)capable(12) != 0) {
      #line 701 
      return (long)sprintf(buf,(char *)"%pM\n",(u8 *)(& bond->params.ad_actor_system));
    }
  }
  #line 703 
  return 0L;
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_actor_system = {.attr = {.name = (char *)"ad_actor_system", .mode = (unsigned short)420U}, .show = & bonding_show_ad_actor_system, .store = & bonding_sysfs_store_option};
#line 709  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static ssize_t bonding_show_ad_user_port_key(struct device *d, struct device_attribute *attr, char *buf)
{
  #line 713 
  void *__mptr;
  #line 713 
  __mptr = (void *)d;
  #line 713 
  struct bonding *bond = (struct bonding *)netdev_priv(((struct net_device *)(__mptr + 18446744073709550144U)));
  #line 715 
  if (bond->params.mode == 4) {
    #line 715 
    if ((int)capable(12) != 0) {
      #line 716 
      return (long)sprintf(buf,(char *)"%hu\n",(int)bond->params.ad_user_port_key);
    }
  }
  #line 718 
  return 0L;
}

#line 720  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct device_attribute dev_attr_ad_user_port_key = {.attr = {.name = (char *)"ad_user_port_key", .mode = (unsigned short)420U}, .show = & bonding_show_ad_user_port_key, .store = & bonding_sysfs_store_option};
#line 723  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct attribute *per_bond_attrs[37U] = {& dev_attr_slaves.attr, & dev_attr_mode.attr, & dev_attr_fail_over_mac.attr, & dev_attr_arp_validate.attr, & dev_attr_arp_all_targets.attr, & dev_attr_arp_interval.attr, & dev_attr_arp_ip_target.attr, & dev_attr_downdelay.attr, & dev_attr_updelay.attr, & dev_attr_peer_notif_delay.attr, & dev_attr_lacp_rate.attr, & dev_attr_ad_select.attr, & dev_attr_xmit_hash_policy.attr, & dev_attr_num_grat_arp.attr, & dev_attr_num_unsol_na.attr, & dev_attr_miimon.attr, & dev_attr_primary.attr, & dev_attr_primary_reselect.attr, & dev_attr_use_carrier.attr, & dev_attr_active_slave.attr, & dev_attr_mii_status.attr, & dev_attr_ad_aggregator.attr, & dev_attr_ad_num_ports.attr, & dev_attr_ad_actor_key.attr, & dev_attr_ad_partner_key.attr, & dev_attr_ad_partner_mac.attr, & dev_attr_queue_id.attr, & dev_attr_all_slaves_active.attr, & dev_attr_resend_igmp.attr, & dev_attr_min_links.attr, & dev_attr_lp_interval.attr, & dev_attr_packets_per_slave.attr, & dev_attr_tlb_dynamic_lb.attr, & dev_attr_ad_actor_sys_prio.attr, & dev_attr_ad_actor_system.attr, & dev_attr_ad_user_port_key.attr};
#line 763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
static struct attribute_group bonding_group = {.name = (char *)"bonding", .attrs = (struct attribute **)(& per_bond_attrs)};
#line 771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
int bond_create_sysfs(struct bond_net *bn)
{
  #line 773 
  int ret;
  #line 775 
  bn->class_attr_bonding_masters = class_attr_bonding_masters;
  {
    #line 776 
    struct lock_class_key __key;
    #line 776 
    bn->class_attr_bonding_masters.attr.key = & __key;
  }
  #line 778 
  ret = netdev_class_create_file_ns(& bn->class_attr_bonding_masters,(void *)bn->net);
  #line 790 
  if (ret == -17) {
    #line 792 
    if (__dev_get_by_name(bn->net,class_attr_bonding_masters.attr.name) != (struct net_device *)0) 
      #line 794 
      printk((char *)"\001",class_attr_bonding_masters.attr.name);
    #line 796 
    ret = 0;
  }
  #line 799 
  return ret;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
void bond_destroy_sysfs(struct bond_net *bn)
{
  #line 806 
  netdev_class_remove_file_ns(& bn->class_attr_bonding_masters,(void *)bn->net);
  #line 807 
  return;
}

#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_sysfs.c"
void bond_prepare_sysfs_group(struct bonding *bond)
{
  #line 814 
  (bond->dev)->sysfs_groups[0] = & bonding_group;
  #line 815 
  return;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 115 
  ldv_set_bit(nr,addr);
  #line 116 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
static int cif_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 136 
  return ldv_strncmp(cs,ct,count);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_sysfs.i.aux"
static size_t cif_strlen(char *s)
{
  #line 143 
  return ldv_strlen(s);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 627 
bool mac_pton(char *, u8 *);
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_1(struct list_head *head)
{
  #line 269 
  union __anonunion___u_3251 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static int cif_strcmp_0(char *cs, char *ct);
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static int cif_strncmp_0(char *cs, char *ct, __kernel_size_t count);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 59 
char *strchr(char *, int);
#line 88 
#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static size_t cif_strlen_0(char *s);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static void atomic_dec_0(atomic_t *v);
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void set_ti_thread_flag_0(struct thread_info *ti, int flag)
{
  #line 55 
  cif_set_bit_0((long)flag,& ti->flags);
  #line 56 
  return;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static bool cif_queue_delayed_work_1(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 1725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static void set_tsk_thread_flag_0(struct task_struct *tsk, int flag)
{
  #line 1727 
  ;
  #line 1727 
  set_ti_thread_flag_0(task_thread_info(tsk),flag);
  #line 1728 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
__inline static int restart_syscall_0(void)
{
  #line 343 
  set_tsk_thread_flag_0(ldv_get_current(),2);
  #line 344 
  return -513;
}

#line 4342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4342 
struct net_device *netdev_master_upper_dev_get(struct net_device *);
#line 4614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_bond_slave(struct net_device *dev)
{
  #line 4616 
  return (_Bool)(((dev->flags & 2048U) != 0U && (dev->priv_flags & 4U) != 0U) != 0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ctype.h"
#line 19 
extern unsigned char _ctype[];
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ctype.h"
__inline static int isdigit(int c)
{
  #line 28 
  return (unsigned int)c + 4294967248U <= 9U;
}

#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
int __bond_opt_set(struct bonding *bond, unsigned int option, struct bond_opt_value *val);
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_options.h"
#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
void bond_option_arp_ip_targets_clear(struct bonding *bond);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void block_netpoll_tx_0(void)
{
  #line 94 
  atomic_inc_0(& netpoll_block_tx);
  #line 95 
  return;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static void unblock_netpoll_tx_0(void)
{
  #line 99 
  atomic_dec_0(& netpoll_block_tx);
  #line 100 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
#line 777 
static int bond_option_active_slave_set(struct bonding *bond, struct bond_opt_value *newval);
#line 21 
#line 841 
static int bond_option_miimon_set(struct bonding *bond, struct bond_opt_value *newval);
#line 23 
#line 911 
static int bond_option_updelay_set(struct bonding *bond, struct bond_opt_value *newval);
#line 25 
#line 918 
static int bond_option_downdelay_set(struct bonding *bond, struct bond_opt_value *newval);
#line 27 
#line 925 
static int bond_option_peer_notif_delay_set(struct bonding *bond, struct bond_opt_value *newval);
#line 29 
#line 934 
static int bond_option_use_carrier_set(struct bonding *bond, struct bond_opt_value *newval);
#line 31 
#line 948 
static int bond_option_arp_interval_set(struct bonding *bond, struct bond_opt_value *newval);
#line 33 
#line 1028 
static int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target);
#line 34 
#line 1033 
static int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target);
#line 35 
#line 1080 
static int bond_option_arp_ip_targets_set(struct bonding *bond, struct bond_opt_value *newval);
#line 37 
#line 1106 
static int bond_option_arp_validate_set(struct bonding *bond, struct bond_opt_value *newval);
#line 39 
#line 1116 
static int bond_option_arp_all_targets_set(struct bonding *bond, struct bond_opt_value *newval);
#line 41 
#line 1126 
static int bond_option_primary_set(struct bonding *bond, struct bond_opt_value *newval);
#line 43 
#line 1175 
static int bond_option_primary_reselect_set(struct bonding *bond, struct bond_opt_value *newval);
#line 45 
#line 1189 
static int bond_option_fail_over_mac_set(struct bonding *bond, struct bond_opt_value *newval);
#line 47 
#line 1199 
static int bond_option_xmit_hash_policy_set(struct bonding *bond, struct bond_opt_value *newval);
#line 49 
#line 1209 
static int bond_option_resend_igmp_set(struct bonding *bond, struct bond_opt_value *newval);
#line 51 
#line 1219 
static int bond_option_num_peer_notif_set(struct bonding *bond, struct bond_opt_value *newval);
#line 53 
#line 1227 
static int bond_option_all_slaves_active_set(struct bonding *bond, struct bond_opt_value *newval);
#line 55 
#line 1248 
static int bond_option_min_links_set(struct bonding *bond, struct bond_opt_value *newval);
#line 57 
#line 1259 
static int bond_option_lp_interval_set(struct bonding *bond, struct bond_opt_value *newval);
#line 59 
#line 1267 
static int bond_option_pps_set(struct bonding *bond, struct bond_opt_value *newval);
#line 61 
#line 1287 
static int bond_option_lacp_rate_set(struct bonding *bond, struct bond_opt_value *newval);
#line 63 
#line 1298 
static int bond_option_ad_select_set(struct bonding *bond, struct bond_opt_value *newval);
#line 65 
#line 1308 
static int bond_option_queue_id_set(struct bonding *bond, struct bond_opt_value *newval);
#line 67 
#line 748 
static int bond_option_mode_set(struct bonding *bond, struct bond_opt_value *newval);
#line 69 
#line 1369 
static int bond_option_slaves_set(struct bonding *bond, struct bond_opt_value *newval);
#line 71 
#line 1417 
static int bond_option_tlb_dynamic_lb_set(struct bonding *bond, struct bond_opt_value *newval);
#line 73 
#line 1427 
static int bond_option_ad_actor_sys_prio_set(struct bonding *bond, struct bond_opt_value *newval);
#line 75 
#line 1439 
static int bond_option_ad_actor_system_set(struct bonding *bond, struct bond_opt_value *newval);
#line 77 
#line 1467 
static int bond_option_ad_user_port_key_set(struct bonding *bond, struct bond_opt_value *newval);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_mode_tbl[8U] = {{.string = (char *)"balance-rr", .flags = 1U}, {.string = (char *)"active-backup", .value = 1ULL}, {.string = (char *)"balance-xor", .value = 2ULL}, {.string = (char *)"broadcast", .value = 3ULL}, {.string = (char *)"802.3ad", .value = 4ULL}, {.string = (char *)"balance-tlb", .value = 5ULL}, {.string = (char *)"balance-alb", .value = 6ULL}, {.value = 18446744073709551615ULL}};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_pps_tbl[3U] = {{.string = (char *)"default", .value = 1ULL, .flags = 1U}, {.string = (char *)"maxval", .value = 65535ULL, .flags = 4U}, {.value = 18446744073709551615ULL}};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_xmit_hashtype_tbl[6U] = {{.string = (char *)"layer2", .flags = 1U}, {.string = (char *)"layer3+4", .value = 1ULL}, {.string = (char *)"layer2+3", .value = 2ULL}, {.string = (char *)"encap2+3", .value = 3ULL}, {.string = (char *)"encap3+4", .value = 4ULL}, {.value = 18446744073709551615ULL}};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_arp_validate_tbl[8U] = {{.string = (char *)"none", .flags = 1U}, {.string = (char *)"active", .value = 1ULL}, {.string = (char *)"backup", .value = 2ULL}, {.string = (char *)"all", .value = 3ULL}, {.string = (char *)"filter", .value = 4ULL}, {.string = (char *)"filter_active", .value = 5ULL}, {.string = (char *)"filter_backup", .value = 6ULL}, {.value = 18446744073709551615ULL}};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_arp_all_targets_tbl[3U] = {{.string = (char *)"any", .flags = 1U}, {.string = (char *)"all", .value = 1ULL}, {.value = 18446744073709551615ULL}};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_fail_over_mac_tbl[4U] = {{.string = (char *)"none", .flags = 1U}, {.string = (char *)"active", .value = 1ULL}, {.string = (char *)"follow", .value = 2ULL}, {.value = 18446744073709551615ULL}};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_intmax_tbl[3U] = {{.string = (char *)"off", .flags = 1U}, {.string = (char *)"maxval", .value = 2147483647ULL, .flags = 4U}, {.value = 18446744073709551615ULL}};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_lacp_rate_tbl[3U] = {{.string = (char *)"slow"}, {.string = (char *)"fast", .value = 1ULL}, {.value = 18446744073709551615ULL}};
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_ad_select_tbl[4U] = {{.string = (char *)"stable", .flags = 1U}, {.string = (char *)"bandwidth", .value = 1ULL}, {.string = (char *)"count", .value = 2ULL}, {.value = 18446744073709551615ULL}};
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_num_peer_notif_tbl[4U] = {{.string = (char *)"off"}, {.string = (char *)"maxval", .value = 255ULL, .flags = 4U}, {.string = (char *)"default", .value = 1ULL, .flags = 1U}, {.value = 18446744073709551615ULL}};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_primary_reselect_tbl[4U] = {{.string = (char *)"always", .flags = 1U}, {.string = (char *)"better", .value = 1ULL}, {.string = (char *)"failure", .value = 2ULL}, {.value = 18446744073709551615ULL}};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_use_carrier_tbl[3U] = {{.string = (char *)"off"}, {.string = (char *)"on", .value = 1ULL, .flags = 1U}, {.value = 18446744073709551615ULL}};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_all_slaves_active_tbl[3U] = {{.string = (char *)"off", .flags = 1U}, {.string = (char *)"on", .value = 1ULL}, {.value = 18446744073709551615ULL}};
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_resend_igmp_tbl[4U] = {{.string = (char *)"off"}, {.string = (char *)"maxval", .value = 255ULL, .flags = 4U}, {.string = (char *)"default", .value = 1ULL, .flags = 1U}, {.value = 18446744073709551615ULL}};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_lp_interval_tbl[3U] = {{.string = (char *)"minval", .value = 1ULL, .flags = 3U}, {.string = (char *)"maxval", .value = 2147483647ULL, .flags = 4U}, {.value = 18446744073709551615ULL}};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_tlb_dynamic_lb_tbl[3U] = {{.string = (char *)"off"}, {.string = (char *)"on", .value = 1ULL, .flags = 1U}, {.value = 18446744073709551615ULL}};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_ad_actor_sys_prio_tbl[3U] = {{.string = (char *)"minval", .value = 1ULL, .flags = 2U}, {.string = (char *)"maxval", .value = 65535ULL, .flags = 5U}, {.value = 18446744073709551615ULL}};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value bond_ad_user_port_key_tbl[3U] = {{.string = (char *)"minval", .flags = 3U}, {.string = (char *)"maxval", .value = 1023ULL, .flags = 4U}, {.value = 18446744073709551615ULL}};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_option bond_opts[30U] = {{.name = (char *)"mode", .desc = (char *)"bond device mode", .flags = 3U, .values = (struct bond_opt_value *)(& bond_mode_tbl), .set = & bond_option_mode_set}, {.id = 1, .name = (char *)"packets_per_slave", .desc = (char *)"Packets to send per slave in RR mode", .unsuppmodes = 18446744073709551614UL, .values = (struct bond_opt_value *)(& bond_pps_tbl), .set = & bond_option_pps_set}, {.id = 2, .name = (char *)"xmit_hash_policy", .desc = (char *)"balance-xor, 802.3ad, and tlb hashing method", .values = (struct bond_opt_value *)(& bond_xmit_hashtype_tbl), .set = & bond_option_xmit_hash_policy_set}, {.id = 3, .name = (char *)"arp_validate", .desc = (char *)"validate src/dst of ARP probes", .unsuppmodes = 112UL, .values = (struct bond_opt_value *)(& bond_arp_validate_tbl), .set = & bond_option_arp_validate_set}, {.id = 4, .name = (char *)"arp_all_targets", .desc = (char *)"fail on any/all arp targets timeout", .values = (struct bond_opt_value *)(& bond_arp_all_targets_tbl), .set = & bond_option_arp_all_targets_set}, {.id = 5, .name = (char *)"fail_over_mac", .desc = (char *)"For active-backup, do not set all slaves to the same MAC", .flags = 1U, .values = (struct bond_opt_value *)(& bond_fail_over_mac_tbl), .set = & bond_option_fail_over_mac_set}, {.id = 6, .name = (char *)"arp_interval", .desc = (char *)"arp interval in milliseconds", .unsuppmodes = 112UL, .values = (struct bond_opt_value *)(& bond_intmax_tbl), .set = & bond_option_arp_interval_set}, {.id = 7, .name = (char *)"arp_ip_target", .desc = (char *)"arp targets in n.n.n.n form", .flags = 4U, .set = & bond_option_arp_ip_targets_set}, {.id = 8, .name = (char *)"downdelay", .desc = (char *)"Delay before considering link down, in milliseconds", .values = (struct bond_opt_value *)(& bond_intmax_tbl), .set = & bond_option_downdelay_set}, {.id = 9, .name = (char *)"updelay", .desc = (char *)"Delay before considering link up, in milliseconds", .values = (struct bond_opt_value *)(& bond_intmax_tbl), .set = & bond_option_updelay_set}, {.id = 10, .name = (char *)"lacp_rate", .desc = (char *)"LACPDU tx rate to request from 802.3ad partner", .flags = 2U, .unsuppmodes = 18446744073709551599UL, .values = (struct bond_opt_value *)(& bond_lacp_rate_tbl), .set = & bond_option_lacp_rate_set}, {.id = 11, .name = (char *)"min_links", .desc = (char *)"Minimum number of available links before turning on carrier", .values = (struct bond_opt_value *)(& bond_intmax_tbl), .set = & bond_option_min_links_set}, {.id = 12, .name = (char *)"ad_select", .desc = (char *)"803.ad aggregation selection logic", .flags = 2U, .values = (struct bond_opt_value *)(& bond_ad_select_tbl), .set = & bond_option_ad_select_set}, {.id = 13, .name = (char *)"num_unsol_na", .desc = (char *)"Number of peer notifications to send on failover event", .values = (struct bond_opt_value *)(& bond_num_peer_notif_tbl), .set = & bond_option_num_peer_notif_set}, {.id = 14, .name = (char *)"miimon", .desc = (char *)"Link check interval in milliseconds", .values = (struct bond_opt_value *)(& bond_intmax_tbl), .set = & bond_option_miimon_set}, {.id = 15, .name = (char *)"primary", .desc = (char *)"Primary network device to use", .flags = 4U, .unsuppmodes = 18446744073709551517UL, .set = & bond_option_primary_set}, {.id = 16, .name = (char *)"primary_reselect", .desc = (char *)"Reselect primary slave once it comes up", .values = (struct bond_opt_value *)(& bond_primary_reselect_tbl), .set = & bond_option_primary_reselect_set}, {.id = 17, .name = (char *)"use_carrier", .desc = (char *)"Use netif_carrier_ok (vs MII ioctls) in miimon", .values = (struct bond_opt_value *)(& bond_use_carrier_tbl), .set = & bond_option_use_carrier_set}, {.id = 18, .name = (char *)"active_slave", .desc = (char *)"Currently active slave", .flags = 4U, .unsuppmodes = 18446744073709551517UL, .set = & bond_option_active_slave_set}, {.id = 19, .name = (char *)"queue_id", .desc = (char *)"Set queue id of a slave", .flags = 4U, .set = & bond_option_queue_id_set}, {.id = 20, .name = (char *)"all_slaves_active", .desc = (char *)"Keep all frames received on an interface by setting active flag for all slaves", .values = (struct bond_opt_value *)(& bond_all_slaves_active_tbl), .set = & bond_option_all_slaves_active_set}, {.id = 21, .name = (char *)"resend_igmp", .desc = (char *)"Number of IGMP membership reports to send on link failure", .values = (struct bond_opt_value *)(& bond_resend_igmp_tbl), .set = & bond_option_resend_igmp_set}, {.id = 22, .name = (char *)"lp_interval", .desc = (char *)"The number of seconds between instances where the bonding driver sends learning packets to each slave\'s peer switch", .values = (struct bond_opt_value *)(& bond_lp_interval_tbl), .set = & bond_option_lp_interval_set}, {.id = 23, .name = (char *)"slaves", .desc = (char *)"Slave membership management", .flags = 4U, .set = & bond_option_slaves_set}, {.id = 24, .name = (char *)"tlb_dynamic_lb", .desc = (char *)"Enable dynamic flow shuffling", .flags = 2U, .unsuppmodes = 18446744073709551519UL, .values = (struct bond_opt_value *)(& bond_tlb_dynamic_lb_tbl), .set = & bond_option_tlb_dynamic_lb_set}, {.id = 25, .name = (char *)"ad_actor_sys_prio", .unsuppmodes = 18446744073709551599UL, .values = (struct bond_opt_value *)(& bond_ad_actor_sys_prio_tbl), .set = & bond_option_ad_actor_sys_prio_set}, {.id = 26, .name = (char *)"ad_actor_system", .flags = 4U, .unsuppmodes = 18446744073709551599UL, .set = & bond_option_ad_actor_system_set}, {.id = 27, .name = (char *)"ad_user_port_key", .flags = 2U, .unsuppmodes = 18446744073709551599UL, .values = (struct bond_opt_value *)(& bond_ad_user_port_key_tbl), .set = & bond_option_ad_user_port_key_set}, {.id = 28, .name = (char *)"num_grat_arp", .desc = (char *)"Number of peer notifications to send on failover event", .values = (struct bond_opt_value *)(& bond_num_peer_notif_tbl), .set = & bond_option_num_peer_notif_set}, {.id = 29, .name = (char *)"peer_notif_delay", .desc = (char *)"Delay between each peer notification on failover event, in milliseconds", .values = (struct bond_opt_value *)(& bond_intmax_tbl), .set = & bond_option_peer_notif_delay_set}};
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
struct bond_option *bond_opt_get_by_name(char *name)
{
  #line 442 
  struct bond_option *opt;
  #line 443 
  int option;
  #line 445 
  option = 0;
  #line 445 
  while (option <= 29) {
    #line 446 
    opt = bond_opt_get((unsigned int)option);
    #line 447 
    if (opt != (struct bond_option *)0) {
      #line 447 
      if (cif_strcmp_0(opt->name,name) == 0) 
                                             #line 448 
                                             return opt;
    }
    #line 445 
    option ++;
  }
  #line 451 
  return (struct bond_option *)0;
}

#line 455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
struct bond_opt_value *bond_opt_get_val(unsigned int option, u64 val)
{
  #line 461 
  int __ret_warn_on;
  #line 457 
  struct bond_option *opt;
  #line 458 
  int i;
  #line 460 
  opt = bond_opt_get(option);
  #line 461 
  __ret_warn_on = opt == (struct bond_option *)0;
  #line 461 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 462 
    ldv_inline_asm();
    #line 463 
    ldv_inline_asm();
  }
  #line 461 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 462 
                                                return (struct bond_opt_value *)0;
  #line 463 
  i = 0;
  #line 463 
  while (opt->values != (struct bond_opt_value *)0 && (opt->values + (unsigned long)i)->string != (char *)0) {
    #line 464 
    if ((opt->values + (unsigned long)i)->value == val) 
                                                        #line 465 
                                                        return opt->values + (unsigned long)i;
    #line 463 
    i ++;
  }
  #line 467 
  return (struct bond_opt_value *)0;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static struct bond_opt_value *bond_opt_get_flags(struct bond_option *opt, u32 flagmask)
{
  #line 474 
  int i;
  #line 476 
  i = 0;
  #line 476 
  while (opt->values != (struct bond_opt_value *)0 && (opt->values + (unsigned long)i)->string != (char *)0) {
    #line 477 
    if (((opt->values + (unsigned long)i)->flags & flagmask) != 0U) 
                                                                    #line 478 
                                                                    return opt->values + (unsigned long)i;
    #line 476 
    i ++;
  }
  #line 480 
  return (struct bond_opt_value *)0;
}

#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static bool bond_opt_check_range(struct bond_option *opt, u64 val)
{
  #line 488 
  struct bond_opt_value *minval;
  #line 488 
  struct bond_opt_value *maxval;
  #line 490 
  minval = bond_opt_get_flags(opt,2U);
  #line 491 
  maxval = bond_opt_get_flags(opt,4U);
  #line 492 
  if ((maxval == (struct bond_opt_value *)0 || minval != (struct bond_opt_value *)0 && minval->value > val) || maxval->value < val) 
    #line 493 
    return (_Bool)0;
  #line 495 
  return (_Bool)1;
}

#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
struct bond_opt_value *bond_opt_parse(struct bond_option *opt, struct bond_opt_value *val)
{
  #line 511 
  char *p;
  #line 512 
  struct bond_opt_value *tbl;
  #line 514 
  bool checkval;
  #line 515 
  int i;
  #line 515 
  int rv;
  #line 511 
  char valstr[33U] = {(char)0};
  #line 513 
  struct bond_opt_value *ret = (struct bond_opt_value *)0;
  #line 518 
  if ((opt->flags & 4U) != 0U) 
                               #line 519 
                               return val;
  #line 521 
  tbl = opt->values;
  #line 522 
  if (tbl == (struct bond_opt_value *)0) 
                                         #line 523 
                                         goto out;
  #line 526 
  checkval = (_Bool)(val->value != 18446744073709551615ULL);
  #line 527 
  if (! checkval) {
    #line 528 
    if (val->string == (char *)0) 
                                  #line 529 
                                  goto out;
    #line 530 
    p = strchr(val->string,10);
    #line 531 
    if (p != (char *)0) 
                        #line 532 
                        *p = (char)0;
    #line 533 
    p = val->string;
    #line 533 
    while ((int)*p != 0) {
      #line 534 
      if (isdigit((int)*p) == 0) 
        #line 534 
        if (((int)_ctype[(int)((unsigned char)*p)] & 32) == 0) 
                                                               #line 535 
                                                               break;
      #line 533 
      p ++;
    }
    #line 539 
    if ((int)*p != 0) 
                      #line 540 
                      rv = sscanf(val->string,(char *)"%32s",(char *)(& valstr));
    else {
      #line 542 
      rv = sscanf(val->string,(char *)"%llu",& val->value);
      #line 543 
      checkval = (_Bool)1;
    }
    #line 545 
    if (rv == 0) 
                 #line 546 
                 goto out;
  }
  #line 549 
  i = 0;
  #line 549 
  while ((tbl + (unsigned long)i)->string != (char *)0) {
    #line 551 
    if ((int)checkval != 0) {
      #line 552 
      if (val->value == (tbl + (unsigned long)i)->value) 
                                                         #line 553 
                                                         ret = tbl + (unsigned long)i;
    }
    else {
      #line 555 
      if (cif_strcmp_0((char *)(& valstr),(char *)"default") == 0) 
        #line 555 
        if (((tbl + (unsigned long)i)->flags & 1U) != 0U) 
                                                          #line 557 
                                                          ret = tbl + (unsigned long)i;
      #line 559 
      if (cif_strcmp_0((char *)(& valstr),(tbl + (unsigned long)i)->string) == 0) 
        #line 560 
        ret = tbl + (unsigned long)i;
    }
    #line 563 
    if (ret != (struct bond_opt_value *)0) 
                                           #line 564 
                                           goto out;
    #line 549 
    i ++;
  }
  #line 567 
  if ((int)checkval != 0) {
    #line 567 
    if ((int)bond_opt_check_range(opt,val->value) != 0) 
                                                        #line 568 
                                                        ret = val;
  }
  #line 569 
  out: 
       #line 569 
  ;
  #line 570 
  return ret;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_opt_check_deps(struct bonding *bond, struct bond_option *opt)
{
  #line 577 
  struct bond_params *params = & bond->params;
  #line 579 
  if ((int)test_bit((long)params->mode,& opt->unsuppmodes) != 0) 
                                                                 #line 580 
                                                                 return -13;
  #line 581 
  if ((opt->flags & 1U) != 0U) {
    #line 581 
    if (list_empty_1(& (bond->dev)->adj_list.lower) == 0) 
                                                          #line 582 
                                                          return -39;
  }
  #line 583 
  if ((opt->flags & 2U) != 0U && ((bond->dev)->flags & 1U) != 0U) 
                                                                  #line 584 
                                                                  return -16;
  #line 586 
  return 0;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static void bond_opt_dep_print(struct bonding *bond, struct bond_option *opt)
{
  #line 592 
  struct bond_opt_value *modeval;
  #line 593 
  struct bond_params *params;
  #line 595 
  params = & bond->params;
  #line 596 
  modeval = bond_opt_get_val(0U,(unsigned long long)params->mode);
  #line 597 
  if ((int)test_bit((long)params->mode,& opt->unsuppmodes) != 0) 
                                                                 #line 598 
                                                                 netdev_err(bond->dev,(char *)"option %s: mode dependency failed, not supported in mode %s(%llu)\n",opt->name,modeval->string,modeval->value);
  #line 600 
  return;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static void bond_opt_error_interpret(struct bonding *bond, struct bond_option *opt, int error, struct bond_opt_value *val)
{
  #line 606 
  struct bond_opt_value *minval;
  #line 606 
  struct bond_opt_value *maxval;
  #line 607 
  char *p;
  #line 609 
  switch (error) {
    #line 629 
    unsigned long long tmp;
    #line 610 
    case -22: 
              #line 610 
    ;
    #line 611 
    if (val != (struct bond_opt_value *)0) 
      #line 612 
      if (val->string != (char *)0) {
        #line 614 
        p = strchr(val->string,10);
        #line 615 
        if (p != (char *)0) 
                            #line 616 
                            *p = (char)0;
        #line 617 
        netdev_err(bond->dev,(char *)"option %s: invalid value (%s)\n",opt->name,val->string);
      }
      else 
           #line 620 
           netdev_err(bond->dev,(char *)"option %s: invalid value (%llu)\n",opt->name,val->value);
    #line 624 
    minval = bond_opt_get_flags(opt,2U);
    #line 625 
    maxval = bond_opt_get_flags(opt,4U);
    #line 626 
    if (maxval == (struct bond_opt_value *)0) 
                                              #line 627 
                                              break;
    #line 628 
    ;
    #line 629 
    if (minval != (struct bond_opt_value *)0) 
                                              #line 629 
                                              tmp = minval->value; else 
                                                                    #line 629 
                                                                    tmp = 0ULL;
    #line 628 
    ;
    #line 628 
    ;
    #line 628 
    netdev_err(bond->dev,(char *)"option %s: allowed values %llu - %llu\n",opt->name,tmp,maxval->value);
    #line 630 
    break;
    #line 631 
    case -13: 
              #line 631 
    ;
    #line 632 
    bond_opt_dep_print(bond,opt);
    #line 633 
    break;
    #line 634 
    case -39: 
              #line 634 
    ;
    #line 635 
    netdev_err(bond->dev,(char *)"option %s: unable to set because the bond device has slaves\n",opt->name);
    #line 637 
    break;
    #line 638 
    case -16: 
              #line 638 
    ;
    #line 639 
    netdev_err(bond->dev,(char *)"option %s: unable to set because the bond device is up\n",opt->name);
    #line 641 
    break;
    #line 642 
    default: 
             #line 642 
    ;
    #line 643 
    break;
  }
  #line 645 
  return;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
int __bond_opt_set(struct bonding *bond, unsigned int option, struct bond_opt_value *val)
{
  #line 667 
  int __ret_warn_on_0;
  #line 661 
  struct bond_option *opt;
  #line 660 
  struct bond_opt_value *retval = (struct bond_opt_value *)0;
  #line 662 
  int ret = -2;
  {
    #line 664 
    bool __warned;
    #line 664 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 664 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 664 
      __warned = (_Bool)1;
      {
        #line 664 
        int __ret_warn_on = 1;
        #line 664 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 664 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c",664);
          #line 665 
          ldv_inline_asm();
          #line 666 
          ldv_inline_asm();
        }
        #line 664 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 664 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 666 
  opt = bond_opt_get(option);
  #line 667 
  __ret_warn_on_0 = val == (struct bond_opt_value *)0;
  #line 667 
  if ((long)(__ret_warn_on_0 != 0) != 0L) {
    #line 668 
    ldv_inline_asm();
    #line 669 
    ldv_inline_asm();
  }
  #line 667 
  if ((long)((long)(__ret_warn_on_0 != 0)) != 0L) 
                                                  #line 667 
                                                  goto _LOR;
  else {
    #line 667 
    int __ret_warn_on_1;
    #line 667 
    __ret_warn_on_1 = opt == (struct bond_option *)0;
    #line 667 
    if ((long)(__ret_warn_on_1 != 0) != 0L) {
      #line 668 
      ldv_inline_asm();
      #line 669 
      ldv_inline_asm();
    }
    #line 667 
    if ((long)((long)(__ret_warn_on_1 != 0)) != 0L) 
                                                    #line 667 
                                                    _LOR: 
                                                          #line 668 
                                                          goto out;
  }
  #line 669 
  ret = bond_opt_check_deps(bond,opt);
  #line 670 
  if (ret != 0) 
                #line 671 
                goto out;
  #line 672 
  retval = bond_opt_parse(opt,val);
  #line 673 
  if (retval == (struct bond_opt_value *)0) {
    #line 674 
    ret = -22;
    #line 675 
    goto out;
  }
  #line 677 
  ret = (*(opt->set))(bond,retval);
  #line 678 
  out: 
       #line 678 
  ;
  #line 679 
  if (ret != 0) 
                #line 680 
                bond_opt_error_interpret(bond,opt,ret,val);
  #line 682 
  return ret;
}

#line 695  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
int __bond_opt_set_notify(struct bonding *bond, unsigned int option, struct bond_opt_value *val)
{
  #line 698 
  int ret = -2;
  {
    #line 700 
    bool __warned;
    #line 700 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 700 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 700 
      __warned = (_Bool)1;
      {
        #line 700 
        int __ret_warn_on = 1;
        #line 700 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 700 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c",700);
          #line 701 
          ldv_inline_asm();
          #line 702 
          ldv_inline_asm();
        }
        #line 700 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 700 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 702 
  ret = __bond_opt_set(bond,option,val);
  #line 704 
  if (ret == 0 && (unsigned int)(bond->dev)->reg_state == 1U) 
                                                              #line 705 
                                                              call_netdevice_notifiers(24UL,bond->dev);
  #line 707 
  return ret;
}

#line 719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
int bond_opt_tryset_rtnl(struct bonding *bond, unsigned int option, char *buf)
{
  #line 721 
  struct bond_opt_value optval;
  #line 722 
  int ret;
  #line 724 
  if (rtnl_trylock() == 0) {
    #line 725 
    return restart_syscall_0();
  }
  #line 726 
  __bond_opt_init(& optval,buf,18446744073709551615ULL);
  #line 727 
  ret = __bond_opt_set_notify(bond,option,& optval);
  #line 728 
  rtnl_unlock();
  #line 730 
  return ret;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
struct bond_option *bond_opt_get(unsigned int option)
{
  #line 742 
  if (option > 29U) 
                    #line 743 
                    return (struct bond_option *)0;
  #line 745 
  return & bond_opts[option];
}

#line 748  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_mode_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 751 
  if (! bond_mode_uses_arp((int)newval->value)) {
    #line 752 
    if (bond->params.arp_interval != 0) {
      {
        #line 753 
        bool branch;
        #line 753 
        struct _ddebug __UNIQUE_ID_ddebug441 = {.modname = (char *)"bonding", .function = (char *)"bond_option_mode_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"%s mode is incompatible with arp monitoring, start mii monitoring\n", .lineno = (unsigned int)753U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 753 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug441.key.dd_key_false.key,(_Bool)0);
        #line 753 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 753 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug441,bond->dev,(char *)"%s mode is incompatible with arp monitoring, start mii monitoring\n",newval->string);
      }
      #line 756 
      bond->params.arp_interval = 0;
    }
    #line 759 
    if (bond->params.miimon == 0) {
      #line 761 
      bond->params.miimon = 100;
      {
        #line 762 
        bool branch_0;
        #line 762 
        struct _ddebug __UNIQUE_ID_ddebug442 = {.modname = (char *)"bonding", .function = (char *)"bond_option_mode_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting MII monitoring interval to %d\n", .lineno = (unsigned int)762U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 762 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug442.key.dd_key_false.key,(_Bool)0);
        #line 762 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 762 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug442,bond->dev,(char *)"Setting MII monitoring interval to %d\n",bond->params.miimon);
      }
    }
  }
  #line 767 
  if (newval->value == 6ULL) 
                             #line 768 
                             bond->params.tlb_dynamic_lb = 1;
  #line 771 
  bond->params.arp_validate = 0;
  #line 772 
  bond->params.mode = (int)newval->value;
  #line 774 
  return 0;
}

#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_active_slave_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 781 
  struct net_device *slave_dev;
  #line 780 
  char ifname[16U] = {(char)0};
  #line 782 
  int ret = 0;
  #line 784 
  sscanf(newval->string,(char *)"%15s",(char *)(& ifname));
  #line 785 
  if (cif_strlen_0((char *)(& ifname)) == 0UL) 
                                               #line 785 
                                               goto _LOR;
  else 
    #line 785 
    if ((int)*(newval->string) == 10) 
                                      #line 785 
                                      _LOR: 
                                            #line 786 
                                            slave_dev = (struct net_device *)0;
    else {
      #line 788 
      slave_dev = __dev_get_by_name(dev_net(bond->dev),(char *)(& ifname));
      #line 789 
      if (slave_dev == (struct net_device *)0) 
                                               #line 790 
                                               return -19;
    }
  #line 793 
  if (slave_dev != (struct net_device *)0) {
    #line 794 
    if (! netif_is_bond_slave(slave_dev)) {
      #line 795 
      netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
      #line 796 
      return -22;
    }
    #line 799 
    ;
    #line 799 
    if (bond->dev != netdev_master_upper_dev_get(slave_dev)) {
      #line 800 
      netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& slave_dev->name));
      #line 801 
      return -22;
    }
  }
  #line 805 
  block_netpoll_tx_0();
  #line 807 
  if (slave_dev == (struct net_device *)0) {
    {
      #line 808 
      bool branch;
      #line 808 
      struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"bonding", .function = (char *)"bond_option_active_slave_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Clearing current active slave\n", .lineno = (unsigned int)808U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 808 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
      #line 808 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 808 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,bond->dev,(char *)"Clearing current active slave\n");
    }
    {
      #line 810 
      union __anonunion___u_3942 __u = {.__val = (struct slave *)0};
      #line 809 
      __write_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
      #line 809 
      struct slave *tmp_4 = __u.__val;
    }
    #line 810 
    bond_select_active_slave(bond);
  }
  else {
    {
      #line 812 
      bool __warned;
      #line 812 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 812 
        if (! __warned) {
          #line 812 
          if (! lockdep_rtnl_is_held()) {
            #line 812 
            __warned = (_Bool)1;
            #line 812 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c",812,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 812 
    struct slave *old_active = bond->curr_active_slave;
    {
      #line 813 
      bool __warned_0;
      #line 813 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 813 
        if (! __warned_0) {
          #line 813 
          if (! lockdep_rtnl_is_held()) {
            #line 813 
            __warned_0 = (_Bool)1;
            #line 813 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c",813,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 813 
    struct slave *new_active = (struct slave *)slave_dev->rx_handler_data;
    #line 815 
    if ((long)(new_active == (struct slave *)0) != 0L) {
      #line 816 
      ldv_inline_asm();
      #line 817 
      ldv_inline_asm();
      #line 818 
      ldv_inline_asm();
      #line 815 
      ;
    }
    #line 817 
    if (new_active == old_active) {
      #line 819 
      bool branch_0;
      #line 819 
      struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"bonding", .function = (char *)"bond_option_active_slave_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)819U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 819 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
      #line 819 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 819 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name));
    }
    else 
      #line 821 
      if (old_active != (struct slave *)0 && (int)new_active->link == 0) {
        #line 821 
        if ((int)bond_slave_is_up(new_active) != 0) {
          {
            #line 823 
            bool branch_1;
            #line 823 
            struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"bonding", .function = (char *)"bond_option_active_slave_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)823U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 823 
            branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
            #line 823 
            if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                          #line 823 
                                                          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name));
          }
          #line 824 
          bond_change_active_slave(bond,new_active);
        }
        else 
             #line 821 
             goto _LAND;
      }
      else {
        #line 821 
        _LAND: {
                 #line 826 
                 netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (new_active->dev)->name),(char *)(& (new_active->dev)->name));
                 #line 828 
                 ret = -22;
               }
      }
  }
  #line 832 
  unblock_netpoll_tx_0();
  #line 834 
  return ret;
}

#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_miimon_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 844 
    bool branch;
    #line 844 
    struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"bonding", .function = (char *)"bond_option_miimon_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting MII monitoring interval to %llu\n", .lineno = (unsigned int)844U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 844 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
    #line 844 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 844 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,bond->dev,(char *)"Setting MII monitoring interval to %llu\n",newval->value);
  }
  #line 846 
  bond->params.miimon = (int)newval->value;
  #line 847 
  if (bond->params.updelay != 0) {
    #line 848 
    bool branch_0;
    #line 848 
    struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"bonding", .function = (char *)"bond_option_miimon_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Note: Updating updelay (to %d) since it is a multiple of the miimon value\n", .lineno = (unsigned int)848U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 848 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
    #line 848 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 848 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,bond->dev,(char *)"Note: Updating updelay (to %d) since it is a multiple of the miimon value\n",bond->params.updelay * bond->params.miimon);
  }
  #line 850 
  if (bond->params.downdelay != 0) {
    #line 851 
    bool branch_1;
    #line 851 
    struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"bonding", .function = (char *)"bond_option_miimon_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n", .lineno = (unsigned int)851U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 851 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
    #line 851 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 851 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug449,bond->dev,(char *)"Note: Updating downdelay (to %d) since it is a multiple of the miimon value\n",bond->params.downdelay * bond->params.miimon);
  }
  #line 853 
  if (bond->params.peer_notif_delay != 0) {
    #line 854 
    bool branch_2;
    #line 854 
    struct _ddebug __UNIQUE_ID_ddebug450 = {.modname = (char *)"bonding", .function = (char *)"bond_option_miimon_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Note: Updating peer_notif_delay (to %d) since it is a multiple of the miimon value\n", .lineno = (unsigned int)854U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 854 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug450.key.dd_key_false.key,(_Bool)0);
    #line 854 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 854 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug450,bond->dev,(char *)"Note: Updating peer_notif_delay (to %d) since it is a multiple of the miimon value\n",bond->params.peer_notif_delay * bond->params.miimon);
  }
  #line 856 
  if (newval->value != 0ULL && bond->params.arp_interval != 0) {
    {
      #line 857 
      bool branch_3;
      #line 857 
      struct _ddebug __UNIQUE_ID_ddebug451 = {.modname = (char *)"bonding", .function = (char *)"bond_option_miimon_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n", .lineno = (unsigned int)857U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 857 
      branch_3 = arch_static_branch(& __UNIQUE_ID_ddebug451.key.dd_key_false.key,(_Bool)0);
      #line 857 
      if ((long)((long)((int)branch_3 != 0)) != 0L) 
                                                    #line 857 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug451,bond->dev,(char *)"MII monitoring cannot be used with ARP monitoring - disabling ARP monitoring...\n");
    }
    #line 858 
    bond->params.arp_interval = 0;
    #line 859 
    if (bond->params.arp_validate != 0) 
                                        #line 860 
                                        bond->params.arp_validate = 0;
  }
  #line 862 
  if (((bond->dev)->flags & 1U) != 0U) 
    #line 868 
    if (newval->value == 0ULL) 
                               #line 869 
                               cancel_delayed_work_sync(& bond->mii_work);
    else {
      #line 871 
      cancel_delayed_work_sync(& bond->arp_work);
      #line 872 
      cif_queue_delayed_work_1(bond->wq,& bond->mii_work,0UL);
    }
  #line 876 
  return 0;
}

#line 883  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int _bond_option_delay_set(struct bonding *bond, struct bond_opt_value *newval, char *name, int *target)
{
  #line 888 
  int value = (int)newval->value;
  #line 890 
  if (bond->params.miimon == 0) {
    #line 891 
    netdev_err(bond->dev,(char *)"Unable to set %s as MII monitoring is disabled\n",name);
    #line 893 
    return -1;
  }
  #line 895 
  if (value % bond->params.miimon != 0) 
                                        #line 896 
                                        netdev_warn(bond->dev,(char *)"%s (%d) is not a multiple of miimon (%d), value rounded to %d ms\n",name,value,bond->params.miimon,(value / bond->params.miimon) * bond->params.miimon);
  #line 903 
  *target = value / bond->params.miimon;
  {
    #line 904 
    bool branch;
    #line 904 
    struct _ddebug __UNIQUE_ID_ddebug452 = {.modname = (char *)"bonding", .function = (char *)"_bond_option_delay_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting %s to %d\n", .lineno = (unsigned int)904U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 904 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug452.key.dd_key_false.key,(_Bool)0);
    #line 904 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 904 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug452,bond->dev,(char *)"Setting %s to %d\n",name,*target * bond->params.miimon);
  }
  #line 908 
  return 0;
}

#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_updelay_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 914 
  return _bond_option_delay_set(bond,newval,(char *)"up delay",
                             & bond->params.updelay);
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_downdelay_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 921 
  return _bond_option_delay_set(bond,newval,(char *)"down delay",
                             & bond->params.downdelay);
}

#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_peer_notif_delay_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 928 
  int ret = _bond_option_delay_set(bond,newval,(char *)"peer notification delay",& bond->params.peer_notif_delay);
  #line 931 
  return ret;
}

#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_use_carrier_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 937 
    bool branch;
    #line 937 
    struct _ddebug __UNIQUE_ID_ddebug453 = {.modname = (char *)"bonding", .function = (char *)"bond_option_use_carrier_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting use_carrier to %llu\n", .lineno = (unsigned int)937U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 937 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug453.key.dd_key_false.key,(_Bool)0);
    #line 937 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 937 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug453,bond->dev,(char *)"Setting use_carrier to %llu\n",newval->value);
  }
  #line 939 
  bond->params.use_carrier = (int)newval->value;
  #line 941 
  return 0;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_arp_interval_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 951 
    bool branch;
    #line 951 
    struct _ddebug __UNIQUE_ID_ddebug454 = {.modname = (char *)"bonding", .function = (char *)"bond_option_arp_interval_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting ARP monitoring interval to %llu\n", .lineno = (unsigned int)951U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 951 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug454.key.dd_key_false.key,(_Bool)0);
    #line 951 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 951 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug454,bond->dev,(char *)"Setting ARP monitoring interval to %llu\n",newval->value);
  }
  #line 953 
  bond->params.arp_interval = (int)newval->value;
  #line 954 
  if (newval->value != 0ULL) {
    #line 955 
    if (bond->params.miimon != 0) {
      {
        #line 956 
        bool branch_0;
        #line 956 
        struct _ddebug __UNIQUE_ID_ddebug455 = {.modname = (char *)"bonding", .function = (char *)"bond_option_arp_interval_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n", .lineno = (unsigned int)956U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 956 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug455.key.dd_key_false.key,(_Bool)0);
        #line 956 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 956 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug455,bond->dev,(char *)"ARP monitoring cannot be used with MII monitoring. Disabling MII monitoring\n");
      }
      #line 957 
      bond->params.miimon = 0;
    }
    #line 959 
    if (bond->params.arp_targets[0] == 0U) {
      #line 960 
      bool branch_1;
      #line 960 
      struct _ddebug __UNIQUE_ID_ddebug456 = {.modname = (char *)"bonding", .function = (char *)"bond_option_arp_interval_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"ARP monitoring has been set up, but no ARP targets have been specified\n", .lineno = (unsigned int)960U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 960 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug456.key.dd_key_false.key,(_Bool)0);
      #line 960 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 960 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug456,bond->dev,(char *)"ARP monitoring has been set up, but no ARP targets have been specified\n");
    }
  }
  #line 962 
  if (((bond->dev)->flags & 1U) != 0U) 
    #line 968 
    if (newval->value == 0ULL) {
      #line 969 
      if (bond->params.arp_validate != 0) 
                                          #line 970 
                                          bond->recv_probe = (int (*)(struct sk_buff *, struct bonding *, struct slave *))0;
      #line 971 
      cancel_delayed_work_sync(& bond->arp_work);
    }
    else {
      #line 974 
      bond->recv_probe = & bond_arp_rcv;
      #line 975 
      cancel_delayed_work_sync(& bond->mii_work);
      #line 976 
      cif_queue_delayed_work_1(bond->wq,& bond->arp_work,0UL);
    }
  #line 980 
  return 0;
}

#line 983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static void _bond_options_arp_ip_target_set(struct bonding *bond, int slot, __be32 target, unsigned long last_rx)
{
  #line 988 
  struct list_head *iter;
  #line 989 
  struct slave *slave;
  #line 987 
  __be32 *targets = (__be32 *)(& bond->params.arp_targets);
  #line 991 
  if ((unsigned int)slot <= 15U) {
    #line 992 
    iter = (bond->dev)->adj_list.lower.next;
    #line 992 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    #line 992 
    while (slave != (struct slave *)0) {
      #line 993 
      slave->target_last_arp_rx[slot] = last_rx;
      #line 992 
      slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
    }
    #line 994 
    *(targets + (unsigned long)slot) = target;
  }
  #line 996 
  return;
}

#line 998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int _bond_option_arp_ip_target_add(struct bonding *bond, __be32 target)
{
  #line 1001 
  int ind;
  #line 1000 
  __be32 *targets = (__be32 *)(& bond->params.arp_targets);
  #line 1003 
  if (bond_is_ip_target_ok(target) == 0) {
    #line 1004 
    netdev_err(bond->dev,(char *)"invalid ARP target %pI4 specified for addition\n",& target);
    #line 1006 
    return -22;
  }
  #line 1009 
  if (bond_get_targets_ip(targets,target) != -1) {
    #line 1010 
    netdev_err(bond->dev,(char *)"ARP target %pI4 is already present\n",& target);
    #line 1012 
    return -22;
  }
  #line 1015 
  ind = bond_get_targets_ip(targets,0U);
  #line 1016 
  if (ind == -1) {
    #line 1017 
    netdev_err(bond->dev,(char *)"ARP target table is full!\n");
    #line 1018 
    return -22;
  }
  {
    #line 1021 
    bool branch;
    #line 1021 
    struct _ddebug __UNIQUE_ID_ddebug457 = {.modname = (char *)"bonding", .function = (char *)"_bond_option_arp_ip_target_add", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Adding ARP target %pI4\n", .lineno = (unsigned int)1021U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1021 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug457.key.dd_key_false.key,(_Bool)0);
    #line 1021 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1021 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug457,bond->dev,(char *)"Adding ARP target %pI4\n",& target);
  }
  #line 1023 
  _bond_options_arp_ip_target_set(bond,ind,target,jiffies);
  #line 1025 
  return 0;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_arp_ip_target_add(struct bonding *bond, __be32 target)
{
  #line 1030 
  return _bond_option_arp_ip_target_add(bond,target);
}

#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_arp_ip_target_rem(struct bonding *bond, __be32 target)
{
  #line 1036 
  struct list_head *iter;
  #line 1037 
  struct slave *slave;
  #line 1038 
  unsigned long *targets_rx;
  #line 1039 
  int ind;
  #line 1039 
  int i;
  #line 1035 
  __be32 *targets = (__be32 *)(& bond->params.arp_targets);
  #line 1041 
  if (bond_is_ip_target_ok(target) == 0) {
    #line 1042 
    netdev_err(bond->dev,(char *)"invalid ARP target %pI4 specified for removal\n",& target);
    #line 1044 
    return -22;
  }
  #line 1047 
  ind = bond_get_targets_ip(targets,target);
  #line 1048 
  if (ind == -1) {
    #line 1049 
    netdev_err(bond->dev,(char *)"unable to remove nonexistent ARP target %pI4\n",& target);
    #line 1051 
    return -22;
  }
  #line 1054 
  if ((ind == 0 && *(targets + 1U) == 0U) && bond->params.arp_interval != 0) 
    #line 1055 
    netdev_warn(bond->dev,(char *)"Removing last arp target with arp_interval on\n");
  {
    #line 1057 
    bool branch;
    #line 1057 
    struct _ddebug __UNIQUE_ID_ddebug458 = {.modname = (char *)"bonding", .function = (char *)"bond_option_arp_ip_target_rem", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Removing ARP target %pI4\n", .lineno = (unsigned int)1057U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1057 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug458.key.dd_key_false.key,(_Bool)0);
    #line 1057 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1057 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug458,bond->dev,(char *)"Removing ARP target %pI4\n",& target);
  }
  #line 1059 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1059 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1059 
  while (slave != (struct slave *)0) {
    #line 1060 
    targets_rx = (unsigned long *)(& slave->target_last_arp_rx);
    #line 1061 
    i = ind;
    #line 1061 
    while (i <= 14 && *(targets + ((unsigned long)i + (unsigned long)1U)) != 0U) {
      #line 1062 
      *(targets_rx + (unsigned long)i) = *(targets_rx + ((unsigned long)i + (unsigned long)1U));
      #line 1061 
      i ++;
    }
    #line 1063 
    *(targets_rx + (unsigned long)i) = 0UL;
    #line 1059 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1065 
  i = ind;
  #line 1065 
  while (i <= 14 && *(targets + ((unsigned long)i + (unsigned long)1U)) != 0U) {
    #line 1066 
    *(targets + (unsigned long)i) = *(targets + ((unsigned long)i + (unsigned long)1U));
    #line 1065 
    i ++;
  }
  #line 1067 
  *(targets + (unsigned long)i) = 0U;
  #line 1069 
  return 0;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
void bond_option_arp_ip_targets_clear(struct bonding *bond)
{
  #line 1074 
  int i;
  #line 1076 
  i = 0;
  #line 1076 
  while (i <= 15) {
    #line 1077 
    _bond_options_arp_ip_target_set(bond,i,0U,0UL);
    #line 1076 
    i ++;
  }
  #line 1078 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_arp_ip_targets_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1084 
  __be32 target;
  #line 1083 
  int ret = -1;
  #line 1086 
  if (newval->string != (char *)0) {
    #line 1087 
    if (in4_pton(newval->string + 1U,-1,(u8 *)(& target),-1,(char **)0) == 0) {
      #line 1088 
      netdev_err(bond->dev,(char *)"invalid ARP target %pI4 specified\n",& target);
      #line 1090 
      return ret;
    }
    #line 1092 
    if ((int)*(newval->string) == 43) 
                                      #line 1093 
                                      ret = bond_option_arp_ip_target_add(bond,target);
    else 
      #line 1094 
      if ((int)*(newval->string) == 45) 
                                        #line 1095 
                                        ret = bond_option_arp_ip_target_rem(bond,target); else 
                                                                    #line 1097 
                                                                    netdev_err(bond->dev,(char *)"no command found in arp_ip_targets file - use +<addr> or -<addr>\n");
  }
  else {
    #line 1099 
    target = (unsigned int)newval->value;
    #line 1100 
    ret = bond_option_arp_ip_target_add(bond,target);
  }
  #line 1103 
  return ret;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_arp_validate_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1109 
    bool branch;
    #line 1109 
    struct _ddebug __UNIQUE_ID_ddebug459 = {.modname = (char *)"bonding", .function = (char *)"bond_option_arp_validate_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting arp_validate to %s (%llu)\n", .lineno = (unsigned int)1109U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1109 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug459.key.dd_key_false.key,(_Bool)0);
    #line 1109 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1109 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug459,bond->dev,(char *)"Setting arp_validate to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1111 
  bond->params.arp_validate = (int)newval->value;
  #line 1113 
  return 0;
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_arp_all_targets_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1119 
    bool branch;
    #line 1119 
    struct _ddebug __UNIQUE_ID_ddebug460 = {.modname = (char *)"bonding", .function = (char *)"bond_option_arp_all_targets_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting arp_all_targets to %s (%llu)\n", .lineno = (unsigned int)1119U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1119 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug460.key.dd_key_false.key,(_Bool)0);
    #line 1119 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1119 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug460,bond->dev,(char *)"Setting arp_all_targets to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1121 
  bond->params.arp_all_targets = (int)newval->value;
  #line 1123 
  return 0;
}

#line 1126  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_primary_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1129 
  char *p;
  #line 1130 
  struct list_head *iter;
  #line 1131 
  struct slave *slave;
  #line 1129 
  char *primary_0 = newval->string;
  #line 1133 
  block_netpoll_tx_0();
  #line 1135 
  p = strchr(primary_0,10);
  #line 1136 
  if (p != (char *)0) 
                      #line 1137 
                      *p = (char)0;
  #line 1139 
  if (cif_strlen_0(primary_0) == 0UL) {
    {
      #line 1140 
      bool branch;
      #line 1140 
      struct _ddebug __UNIQUE_ID_ddebug461 = {.modname = (char *)"bonding", .function = (char *)"bond_option_primary_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting primary slave to None\n", .lineno = (unsigned int)1140U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1140 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug461.key.dd_key_false.key,(_Bool)0);
      #line 1140 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1140 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug461,bond->dev,(char *)"Setting primary slave to None\n");
    }
    {
      #line 1142 
      union __anonunion___u_3944 __u = {.__val = (struct slave *)0};
      #line 1141 
      __write_once_size((void *)(& bond->primary_slave),(void *)(& __u.__c),8);
      #line 1141 
      struct slave *tmp_2 = __u.__val;
    }
    #line 1142 
    memset((void *)(& bond->params.primary),0,16UL);
    #line 1143 
    bond_select_active_slave(bond);
    #line 1144 
    goto out;
  }
  #line 1147 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1147 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1147 
  while (slave != (struct slave *)0) {
    #line 1148 
    if (cif_strncmp_0((char *)(& (slave->dev)->name),primary_0,16UL) == 0) {
      {
        #line 1149 
        bool branch_0;
        #line 1149 
        struct _ddebug __UNIQUE_ID_ddebug462 = {.modname = (char *)"bonding", .function = (char *)"bond_option_primary_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1149U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1149 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug462.key.dd_key_false.key,(_Bool)0);
        #line 1149 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 1149 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug462,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
      }
      {
        #line 1150 
        uintptr_t _r_a_p__v = (unsigned long)slave;
        #line 1152 
        ldv_inline_asm();
        {
          #line 1151 
          union __anonunion___u_3948 __u_0 = {.__val = (struct slave *)_r_a_p__v};
          #line 1150 
          __write_once_size((void *)(& bond->primary_slave),(void *)(& __u_0.__c),8);
          #line 1150 
          struct slave *tmp_6 = __u_0.__val;
        }
      }
      #line 1151 
      strcpy((char *)(& bond->params.primary),(char *)(& (slave->dev)->name));
      #line 1152 
      bond->force_primary = (_Bool)1;
      #line 1153 
      bond_select_active_slave(bond);
      #line 1154 
      goto out;
    }
    #line 1147 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  {
    #line 1158 
    bool __warned;
    #line 1158 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 1158 
      if (! __warned) {
        #line 1158 
        if (! lockdep_rtnl_is_held()) {
          #line 1158 
          __warned = (_Bool)1;
          #line 1158 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c",1158,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 1158 
  if (bond->primary_slave != (struct slave *)0) {
    {
      #line 1159 
      bool branch_1;
      #line 1159 
      struct _ddebug __UNIQUE_ID_ddebug463 = {.modname = (char *)"bonding", .function = (char *)"bond_option_primary_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting primary slave to None\n", .lineno = (unsigned int)1159U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1159 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug463.key.dd_key_false.key,(_Bool)0);
      #line 1159 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1159 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug463,bond->dev,(char *)"Setting primary slave to None\n");
    }
    {
      #line 1161 
      union __anonunion___u_3950 __u_1 = {.__val = (struct slave *)0};
      #line 1160 
      __write_once_size((void *)(& bond->primary_slave),(void *)(& __u_1.__c),8);
      #line 1160 
      struct slave *tmp_8 = __u_1.__val;
    }
    #line 1161 
    bond_select_active_slave(bond);
  }
  #line 1163 
  strncpy((char *)(& bond->params.primary),primary_0,16UL);
  #line 1164 
  bond->params.primary[15] = (char)0;
  {
    #line 1166 
    bool branch_2;
    #line 1166 
    struct _ddebug __UNIQUE_ID_ddebug464 = {.modname = (char *)"bonding", .function = (char *)"bond_option_primary_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Recording %s as primary, but it has not been enslaved yet\n", .lineno = (unsigned int)1166U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1166 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug464.key.dd_key_false.key,(_Bool)0);
    #line 1166 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 1166 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug464,bond->dev,(char *)"Recording %s as primary, but it has not been enslaved yet\n",primary_0);
  }
  #line 1169 
  out: 
       #line 1169 
  ;
  #line 1170 
  unblock_netpoll_tx_0();
  #line 1172 
  return 0;
}

#line 1175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_primary_reselect_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1178 
    bool branch;
    #line 1178 
    struct _ddebug __UNIQUE_ID_ddebug465 = {.modname = (char *)"bonding", .function = (char *)"bond_option_primary_reselect_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting primary_reselect to %s (%llu)\n", .lineno = (unsigned int)1178U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1178 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug465.key.dd_key_false.key,(_Bool)0);
    #line 1178 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1178 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug465,bond->dev,(char *)"Setting primary_reselect to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1180 
  bond->params.primary_reselect = (int)newval->value;
  #line 1182 
  block_netpoll_tx_0();
  #line 1183 
  bond_select_active_slave(bond);
  #line 1184 
  unblock_netpoll_tx_0();
  #line 1186 
  return 0;
}

#line 1189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_fail_over_mac_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1192 
    bool branch;
    #line 1192 
    struct _ddebug __UNIQUE_ID_ddebug466 = {.modname = (char *)"bonding", .function = (char *)"bond_option_fail_over_mac_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting fail_over_mac to %s (%llu)\n", .lineno = (unsigned int)1192U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1192 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug466.key.dd_key_false.key,(_Bool)0);
    #line 1192 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1192 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug466,bond->dev,(char *)"Setting fail_over_mac to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1194 
  bond->params.fail_over_mac = (int)newval->value;
  #line 1196 
  return 0;
}

#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_xmit_hash_policy_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1202 
    bool branch;
    #line 1202 
    struct _ddebug __UNIQUE_ID_ddebug467 = {.modname = (char *)"bonding", .function = (char *)"bond_option_xmit_hash_policy_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting xmit hash policy to %s (%llu)\n", .lineno = (unsigned int)1202U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1202 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug467.key.dd_key_false.key,(_Bool)0);
    #line 1202 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1202 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug467,bond->dev,(char *)"Setting xmit hash policy to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1204 
  bond->params.xmit_policy = (int)newval->value;
  #line 1206 
  return 0;
}

#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_resend_igmp_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1212 
    bool branch;
    #line 1212 
    struct _ddebug __UNIQUE_ID_ddebug468 = {.modname = (char *)"bonding", .function = (char *)"bond_option_resend_igmp_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting resend_igmp to %llu\n", .lineno = (unsigned int)1212U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1212 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug468.key.dd_key_false.key,(_Bool)0);
    #line 1212 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1212 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug468,bond->dev,(char *)"Setting resend_igmp to %llu\n",newval->value);
  }
  #line 1214 
  bond->params.resend_igmp = (int)newval->value;
  #line 1216 
  return 0;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_num_peer_notif_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1222 
  bond->params.num_peer_notif = (unsigned char)newval->value;
  #line 1224 
  return 0;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_all_slaves_active_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1230 
  struct list_head *iter;
  #line 1231 
  struct slave *slave;
  #line 1233 
  if (newval->value == (unsigned long long)bond->params.all_slaves_active) 
    #line 1234 
    return 0;
  #line 1235 
  bond->params.all_slaves_active = (int)newval->value;
  #line 1236 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1236 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1236 
  while (slave != (struct slave *)0) {
    #line 1237 
    if (! bond_is_active_slave(slave)) 
      #line 1238 
      if (newval->value != 0ULL) 
                                 #line 1239 
                                 slave->inactive = (unsigned char)0U; else 
                                                                    #line 1241 
                                                                    slave->inactive = (unsigned char)1U;
    #line 1236 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1245 
  return 0;
}

#line 1248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_min_links_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1251 
    bool branch;
    #line 1251 
    struct _ddebug __UNIQUE_ID_ddebug469 = {.modname = (char *)"bonding", .function = (char *)"bond_option_min_links_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting min links value to %llu\n", .lineno = (unsigned int)1251U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1251 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug469.key.dd_key_false.key,(_Bool)0);
    #line 1251 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1251 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug469,bond->dev,(char *)"Setting min links value to %llu\n",newval->value);
  }
  #line 1253 
  bond->params.min_links = (unsigned int)newval->value;
  #line 1254 
  bond_set_carrier(bond);
  #line 1256 
  return 0;
}

#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_lp_interval_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1262 
  bond->params.lp_interval = (int)newval->value;
  #line 1264 
  return 0;
}

#line 1267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_pps_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1270 
    bool branch;
    #line 1270 
    struct _ddebug __UNIQUE_ID_ddebug470 = {.modname = (char *)"bonding", .function = (char *)"bond_option_pps_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting packets per slave to %llu\n", .lineno = (unsigned int)1270U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1270 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug470.key.dd_key_false.key,(_Bool)0);
    #line 1270 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1270 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug470,bond->dev,(char *)"Setting packets per slave to %llu\n",newval->value);
  }
  #line 1272 
  bond->params.packets_per_slave = (int)newval->value;
  #line 1273 
  if (newval->value != 0ULL) 
                             #line 1274 
                             bond->params.reciprocal_packets_per_slave = reciprocal_value((unsigned int)newval->value);
  else {
    #line 1280 
    struct reciprocal_value __constr_expr_34 = {.m = 0U, .sh1 = (unsigned char)0, .sh2 = (unsigned char)0};
    #line 1280 
    bond->params.reciprocal_packets_per_slave = __constr_expr_34;
  }
  #line 1284 
  return 0;
}

#line 1287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_lacp_rate_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1290 
    bool branch;
    #line 1290 
    struct _ddebug __UNIQUE_ID_ddebug471 = {.modname = (char *)"bonding", .function = (char *)"bond_option_lacp_rate_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting LACP rate to %s (%llu)\n", .lineno = (unsigned int)1290U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1290 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug471.key.dd_key_false.key,(_Bool)0);
    #line 1290 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1290 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug471,bond->dev,(char *)"Setting LACP rate to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1292 
  bond->params.lacp_fast = (int)newval->value;
  #line 1293 
  bond_3ad_update_lacp_rate(bond);
  #line 1295 
  return 0;
}

#line 1298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_ad_select_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1301 
    bool branch;
    #line 1301 
    struct _ddebug __UNIQUE_ID_ddebug472 = {.modname = (char *)"bonding", .function = (char *)"bond_option_ad_select_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting ad_select to %s (%llu)\n", .lineno = (unsigned int)1301U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1301 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug472.key.dd_key_false.key,(_Bool)0);
    #line 1301 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1301 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug472,bond->dev,(char *)"Setting ad_select to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1303 
  bond->params.ad_select = (int)newval->value;
  #line 1305 
  return 0;
}

#line 1308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_queue_id_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1311 
  struct slave *slave;
  #line 1311 
  struct slave *update_slave;
  #line 1312 
  struct net_device *sdev;
  #line 1313 
  struct list_head *iter;
  #line 1314 
  char *delim;
  #line 1316 
  u16 qid;
  #line 1315 
  int ret = 0;
  #line 1319 
  delim = strchr(newval->string,58);
  #line 1320 
  if (delim == (char *)0) 
                          #line 1321 
                          goto err_no_cmd;
  #line 1326 
  *delim = (char)0;
  #line 1327 
  delim ++;
  #line 1327 
  if (sscanf(delim,(char *)"%hd\n",& qid) != 1) 
                                                #line 1328 
                                                goto err_no_cmd;
  #line 1331 
  if (dev_valid_name(newval->string)) {
    #line 1331 
    if ((unsigned int)qid > (bond->dev)->real_num_tx_queues) 
                                                             #line 1331 
                                                             _LOR: 
                                                                   #line 1333 
                                                                   goto err_no_cmd;
  }
  else 
       #line 1331 
       goto _LOR;
  #line 1336 
  ;
  #line 1336 
  sdev = __dev_get_by_name(dev_net(bond->dev),newval->string);
  #line 1337 
  if (sdev == (struct net_device *)0) 
                                      #line 1338 
                                      goto err_no_cmd;
  #line 1341 
  update_slave = (struct slave *)0;
  #line 1342 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1342 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1342 
  while (slave != (struct slave *)0) {
    #line 1343 
    if (slave->dev == sdev) 
                            #line 1347 
                            update_slave = slave;
    else 
      #line 1348 
      if ((unsigned int)qid != 0U && (int)slave->queue_id == (int)qid) 
        #line 1349 
        goto err_no_cmd;
    #line 1342 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1353 
  if (update_slave == (struct slave *)0) 
                                         #line 1354 
                                         goto err_no_cmd;
  #line 1357 
  update_slave->queue_id = qid;
  #line 1359 
  out: 
       #line 1359 
  ;
  #line 1360 
  return ret;
  #line 1362 
  err_no_cmd: 
              #line 1362 
  ;
  {
    #line 1363 
    bool branch;
    #line 1363 
    struct _ddebug __UNIQUE_ID_ddebug473 = {.modname = (char *)"bonding", .function = (char *)"bond_option_queue_id_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"invalid input for queue_id set\n", .lineno = (unsigned int)1363U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1363 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug473.key.dd_key_false.key,(_Bool)0);
    #line 1363 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1363 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug473,bond->dev,(char *)"invalid input for queue_id set\n");
  }
  #line 1364 
  ret = -1;
  #line 1365 
  goto out;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_slaves_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1373 
  struct net_device *dev;
  #line 1374 
  char *ifname;
  #line 1375 
  int ret;
  #line 1372 
  char command[17U] = {(char)0};
  #line 1377 
  sscanf(newval->string,(char *)"%16s",(char *)(& command));
  #line 1378 
  ifname = (char *)(& command) + 1U;
  #line 1379 
  if (cif_strlen_0((char *)(& command)) <= 1UL) 
                                                #line 1379 
                                                goto _LOR;
  else 
    #line 1379 
    if ((int)command[0] != 43 && (int)command[0] != 45) 
                                                        #line 1379 
                                                        goto _LOR;
    else {
      #line 1381 
      if (! dev_valid_name(ifname)) 
                                    #line 1379 
                                    _LOR: 
                                          #line 1382 
                                          goto err_no_cmd;
    }
  #line 1384 
  ;
  #line 1384 
  dev = __dev_get_by_name(dev_net(bond->dev),ifname);
  #line 1385 
  if (dev == (struct net_device *)0) {
    {
      #line 1386 
      bool branch;
      #line 1386 
      struct _ddebug __UNIQUE_ID_ddebug474 = {.modname = (char *)"bonding", .function = (char *)"bond_option_slaves_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"interface %s does not exist!\n", .lineno = (unsigned int)1386U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1386 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug474.key.dd_key_false.key,(_Bool)0);
      #line 1386 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1386 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug474,bond->dev,(char *)"interface %s does not exist!\n",ifname);
    }
    #line 1388 
    ret = -19;
    #line 1389 
    goto out;
  }
  #line 1392 
  switch ((int)command[0]) {
    #line 1393 
    case 43: 
             #line 1393 
    ;
    {
      #line 1394 
      bool branch_0;
      #line 1394 
      struct _ddebug __UNIQUE_ID_ddebug475 = {.modname = (char *)"bonding", .function = (char *)"bond_option_slaves_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1394U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1394 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug475.key.dd_key_false.key,(_Bool)0);
      #line 1394 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 1394 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug475,bond->dev,(char *)"(slave %s): ",(char *)(& dev->name));
    }
    #line 1395 
    ret = bond_enslave(bond->dev,dev,(struct netlink_ext_ack *)0);
    #line 1396 
    break;
    #line 1398 
    case 45: 
             #line 1398 
    ;
    {
      #line 1399 
      bool branch_1;
      #line 1399 
      struct _ddebug __UNIQUE_ID_ddebug476 = {.modname = (char *)"bonding", .function = (char *)"bond_option_slaves_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)1399U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1399 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug476.key.dd_key_false.key,(_Bool)0);
      #line 1399 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 1399 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug476,bond->dev,(char *)"(slave %s): ",(char *)(& dev->name));
    }
    #line 1400 
    ret = bond_release(bond->dev,dev);
    #line 1401 
    break;
    #line 1403 
    default: 
             #line 1403 
    ;
    #line 1405 
    goto err_no_cmd;
  }
  #line 1408 
  out: 
       #line 1408 
  ;
  #line 1409 
  return ret;
  #line 1411 
  err_no_cmd: 
              #line 1411 
  ;
  #line 1412 
  netdev_err(bond->dev,(char *)"no command found in slaves file - use +ifname or -ifname\n");
  #line 1413 
  ret = -1;
  #line 1414 
  goto out;
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_tlb_dynamic_lb_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1420 
    bool branch;
    #line 1420 
    struct _ddebug __UNIQUE_ID_ddebug477 = {.modname = (char *)"bonding", .function = (char *)"bond_option_tlb_dynamic_lb_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting dynamic-lb to %s (%llu)\n", .lineno = (unsigned int)1420U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1420 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug477.key.dd_key_false.key,(_Bool)0);
    #line 1420 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1420 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug477,bond->dev,(char *)"Setting dynamic-lb to %s (%llu)\n",newval->string,newval->value);
  }
  #line 1422 
  bond->params.tlb_dynamic_lb = (int)newval->value;
  #line 1424 
  return 0;
}

#line 1427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_ad_actor_sys_prio_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1430 
    bool branch;
    #line 1430 
    struct _ddebug __UNIQUE_ID_ddebug478 = {.modname = (char *)"bonding", .function = (char *)"bond_option_ad_actor_sys_prio_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting ad_actor_sys_prio to %llu\n", .lineno = (unsigned int)1430U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1430 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug478.key.dd_key_false.key,(_Bool)0);
    #line 1430 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1430 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug478,bond->dev,(char *)"Setting ad_actor_sys_prio to %llu\n",newval->value);
  }
  #line 1433 
  bond->params.ad_actor_sys_prio = (unsigned short)newval->value;
  #line 1434 
  bond_3ad_update_ad_actor_settings(bond);
  #line 1436 
  return 0;
}

#line 1439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_ad_actor_system_set(struct bonding *bond, struct bond_opt_value *newval)
{
  #line 1442 
  u8 macaddr[6U];
  #line 1443 
  u8 *mac;
  #line 1445 
  if (newval->string != (char *)0) {
    #line 1446 
    if (! mac_pton(newval->string,(u8 *)(& macaddr))) 
                                                      #line 1447 
                                                      goto err;
    #line 1448 
    mac = (u8 *)(& macaddr);
  }
  else 
       #line 1450 
       mac = (u8 *)(& newval->value);
  #line 1453 
  if (! is_valid_ether_addr(mac)) 
                                  #line 1454 
                                  goto err;
  {
    #line 1456 
    bool branch;
    #line 1456 
    struct _ddebug __UNIQUE_ID_ddebug479 = {.modname = (char *)"bonding", .function = (char *)"bond_option_ad_actor_system_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting ad_actor_system to %pM\n", .lineno = (unsigned int)1456U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1456 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug479.key.dd_key_false.key,(_Bool)0);
    #line 1456 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1456 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug479,bond->dev,(char *)"Setting ad_actor_system to %pM\n",mac);
  }
  #line 1457 
  ether_addr_copy((u8 *)(& bond->params.ad_actor_system),mac);
  #line 1458 
  bond_3ad_update_ad_actor_settings(bond);
  #line 1460 
  return 0;
  #line 1462 
  err: 
       #line 1462 
  ;
  #line 1463 
  netdev_err(bond->dev,(char *)"Invalid ad_actor_system MAC address.\n");
  #line 1464 
  return -22;
}

#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c"
static int bond_option_ad_user_port_key_set(struct bonding *bond, struct bond_opt_value *newval)
{
  {
    #line 1470 
    bool branch;
    #line 1470 
    struct _ddebug __UNIQUE_ID_ddebug480 = {.modname = (char *)"bonding", .function = (char *)"bond_option_ad_user_port_key_set", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_options.c", .format = (char *)"Setting ad_user_port_key to %llu\n", .lineno = (unsigned int)1470U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1470 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug480.key.dd_key_false.key,(_Bool)0);
    #line 1470 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1470 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug480,bond->dev,(char *)"Setting ad_user_port_key to %llu\n",newval->value);
  }
  #line 1473 
  bond->params.ad_user_port_key = (unsigned short)newval->value;
  #line 1474 
  return 0;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 115 
  ldv_set_bit(nr,addr);
  #line 116 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static int cif_strncmp_0(char *cs, char *ct, __kernel_size_t count)
{
  #line 136 
  return ldv_strncmp(cs,ct,count);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static size_t cif_strlen_0(char *s)
{
  #line 143 
  return ldv_strlen(s);
}

#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 178 
  ldv_atomic_inc(v);
  #line 179 
  return;
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static void atomic_dec_0(atomic_t *v)
{
  #line 185 
  ldv_atomic_dec(v);
  #line 186 
  return;
}

#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static bool cif_queue_delayed_work_1(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 300 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_options.i.aux"
static int cif_strcmp_0(char *cs, char *ct)
{
  #line 653 
  return ldv_strcmp(cs,ct);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_debugfs.c"
void bond_debug_register(struct bonding *bond)
{
  #line 107 
  return;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_debugfs.c"
void bond_debug_unregister(struct bonding *bond)
{
  #line 111 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_debugfs.c"
void bond_debug_reregister(struct bonding *bond)
{
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_debugfs.c"
void bond_create_debugfs(void)
{
  #line 119 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_debugfs.c"
void bond_destroy_debugfs(void)
{
  #line 123 
  return;
}

#line 1316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
__inline static struct inode *file_inode(struct file *f)
{
  #line 1318 
  return f->f_inode;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/proc_fs.h"
#line 24 
struct proc_dir_entry *proc_mkdir(char *, struct proc_dir_entry *);
#line 31 
#line 31 
struct proc_dir_entry *proc_create_seq_private(char *, umode_t, struct proc_dir_entry *, struct seq_operations *, unsigned int, void *);
#line 52 
#line 52 
void *PDE_DATA(struct inode *);
#line 55 
#line 55 
void remove_proc_entry(char *, struct proc_dir_entry *);
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 120 
#line 120 
void seq_puts(struct seq_file *, char *);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/generic.h"
__inline static void *net_generic_0(struct net *net, unsigned int id)
{
  #line 45 
  struct net_generic *________p1;
  #line 41 
  struct net_generic *ng;
  #line 42 
  void *ptr;
  #line 44 
  rcu_read_lock();
  {
    #line 46 
    union __anonunion___u_5218 __u;
    #line 45 
    __read_once_size((void *)(& net->gen),(void *)(& __u.__c),8);
    #line 45 
    ________p1 = (__u.__val);
    {
      #line 45 
      bool __warned;
      #line 45 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 45 
        if (! __warned) {
          #line 45 
          if (rcu_read_lock_held() == 0) {
            #line 45 
            __warned = (_Bool)1;
            #line 45 
            lockdep_rcu_suspicious((char *)"./include/net/netns/generic.h",45,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 45 
  ng = ________p1;
  #line 46 
  ptr = ng->__anonCompField_net_generic_198.ptr[id];
  #line 47 
  rcu_read_unlock();
  #line 49 
  return ptr;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bond_3ad.h"
__inline static char *bond_3ad_churn_desc(churn_state_t state)
{
  #line 278 
  char *churn_description[4U] = {(char *)"monitoring", (char *)"churned", (char *)"none", (char *)"unknown"};
  #line 284 
  int max_size = 4;
  #line 286 
  if (state >= max_size) 
                         #line 287 
                         state = max_size + -1;
  #line 289 
  return churn_description[(unsigned int)state];
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_is_nondyn_tlb(struct bonding *bond)
{
  #line 292 
  int tmp_0;
  #line 292 
  if ((int)bond_is_lb(bond) != 0) 
    #line 292 
    if (bond->params.tlb_dynamic_lb == 0) 
                                          #line 292 
                                          tmp_0 = 1; else 
                                                          #line 292 
                                                          tmp_0 = 0;
  else 
       #line 292 
       tmp_0 = 0;
  #line 292 
  return (_Bool)(tmp_0 != 0);
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_mode_uses_xmit_hash(struct bonding *bond)
{
  #line 306 
  int tmp_0;
  #line 306 
  if (bond->params.mode == 4 || bond->params.mode == 2) 
                                                        #line 306 
                                                        tmp_0 = 1;
  else {
    #line 306 
    if ((int)bond_is_nondyn_tlb(bond) != 0) 
                                            #line 306 
                                            tmp_0 = 1; else 
                                                            #line 306 
                                                            tmp_0 = 0;
  }
  #line 306 
  return (_Bool)(tmp_0 != 0);
}

#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static void *bond_info_seq_start(struct seq_file *seq, loff_t *pos)
{
  #line 14 
  struct list_head *iter;
  #line 15 
  struct slave *slave;
  #line 13 
  struct bonding *bond = (struct bonding *)PDE_DATA(file_inode(seq->file));
  #line 16 
  loff_t off = 0LL;
  #line 18 
  rcu_read_lock();
  #line 20 
  if (*pos == 0LL) 
                   #line 21 
                   return (void *)1;
  #line 23 
  iter = & (bond->dev)->adj_list.lower;
  #line 23 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 23 
  while (slave != (struct slave *)0) {
    #line 24 
    off ++;
    #line 24 
    ;
    #line 24 
    if (off == *pos) 
                     #line 25 
                     return (void *)slave;
    #line 23 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 27 
  return (void *)0;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static void *bond_info_seq_next(struct seq_file *seq, void *v, loff_t *pos)
{
  #line 33 
  struct list_head *iter;
  #line 34 
  struct slave *slave;
  #line 32 
  struct bonding *bond = (struct bonding *)PDE_DATA(file_inode(seq->file));
  #line 35 
  bool found = (_Bool)0;
  #line 37 
  (*pos) ++;
  #line 38 
  if (v == (void *)1) {
    #line 39 
    return netdev_lower_get_first_private_rcu(bond->dev);
  }
  #line 41 
  iter = & (bond->dev)->adj_list.lower;
  #line 41 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 41 
  while (slave != (struct slave *)0) {
    #line 42 
    if ((int)found != 0) 
                         #line 43 
                         return (void *)slave;
    #line 44 
    if ((void *)slave == v) 
                            #line 45 
                            found = (_Bool)1;
    #line 41 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 48 
  return (void *)0;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static void bond_info_seq_stop(struct seq_file *seq, void *v)
{
  #line 54 
  rcu_read_unlock();
  #line 55 
  return;
}

#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static void bond_info_show_master(struct seq_file *seq)
{
  #line 64 
  struct slave *________p1;
  #line 60 
  struct bond_opt_value *optval;
  #line 61 
  struct slave *curr;
  #line 61 
  struct slave *primary_0;
  #line 62 
  int i;
  #line 100 
  char *tmp_15;
  #line 59 
  struct bonding *bond = (struct bonding *)PDE_DATA(file_inode(seq->file));
  {
    #line 65 
    union __anonunion___u_5372 __u;
    #line 64 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 64 
    ________p1 = (__u.__val);
    {
      #line 64 
      bool __warned;
      #line 64 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 64 
        if (! __warned) {
          #line 64 
          if (rcu_read_lock_held() == 0) {
            #line 64 
            __warned = (_Bool)1;
            #line 64 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c",64,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 64 
  curr = ________p1;
  #line 66 
  ;
  #line 66 
  seq_printf(seq,(char *)"Bonding Mode: %s",bond_mode_name(bond->params.mode));
  #line 69 
  if (bond->params.mode == 1 && bond->params.fail_over_mac != 0) {
    #line 71 
    optval = bond_opt_get_val(5U,(unsigned long long)bond->params.fail_over_mac);
    #line 73 
    seq_printf(seq,(char *)" (fail_over_mac %s)",optval->string);
  }
  #line 76 
  seq_printf(seq,(char *)"\n");
  #line 78 
  if ((int)bond_mode_uses_xmit_hash(bond) != 0) {
    #line 79 
    optval = bond_opt_get_val(2U,(unsigned long long)bond->params.xmit_policy);
    #line 81 
    seq_printf(seq,(char *)"Transmit Hash Policy: %s (%d)\n",optval->string,bond->params.xmit_policy);
  }
  #line 85 
  if ((int)bond_uses_primary(bond) != 0) {
    #line 86 
    struct slave *________p1_0;
    #line 87 
    char *tmp_11;
    #line 96 
    char *tmp_12;
    {
      #line 87 
      union __anonunion___u_5374 __u_0;
      #line 86 
      __read_once_size((void *)(& bond->primary_slave),(void *)(& __u_0.__c),8);
      #line 86 
      ________p1_0 = (__u_0.__val);
      {
        #line 86 
        bool __warned_0;
        #line 86 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 86 
          if (! __warned_0) {
            #line 86 
            if (rcu_read_lock_held() == 0) {
              #line 86 
              __warned_0 = (_Bool)1;
              #line 86 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c",86,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      }
    #line 86 
    primary_0 = ________p1_0;
    #line 87 
    if (primary_0 != (struct slave *)0) 
                                        #line 87 
                                        tmp_11 = (char *)(& (primary_0->dev)->name); else 
                                                                    #line 87 
                                                                    tmp_11 = (char *)"None";
    #line 87 
    ;
    #line 87 
    seq_printf(seq,(char *)"Primary Slave: %s",tmp_11);
    #line 89 
    if (primary_0 != (struct slave *)0) {
      #line 90 
      optval = bond_opt_get_val(16U,(unsigned long long)bond->params.primary_reselect);
      #line 92 
      seq_printf(seq,(char *)" (primary_reselect %s)",optval->string);
    }
    #line 96 
    if (curr != (struct slave *)0) 
                                   #line 96 
                                   tmp_12 = (char *)(& (curr->dev)->name); else 
                                                                    #line 96 
                                                                    tmp_12 = (char *)"None";
    #line 96 
    ;
    #line 96 
    seq_printf(seq,(char *)"\nCurrently Active Slave: %s\n",tmp_12);
  }
  #line 100 
  if ((int)netif_carrier_ok(bond->dev) != 0) 
                                             #line 100 
                                             tmp_15 = (char *)"up"; else 
                                                                    #line 100 
                                                                    tmp_15 = (char *)"down";
  #line 100 
  ;
  #line 100 
  seq_printf(seq,(char *)"MII Status: %s\n",tmp_15);
  #line 102 
  seq_printf(seq,(char *)"MII Polling Interval (ms): %d\n",bond->params.miimon);
  #line 103 
  seq_printf(seq,(char *)"Up Delay (ms): %d\n",bond->params.updelay * bond->params.miimon);
  #line 105 
  seq_printf(seq,(char *)"Down Delay (ms): %d\n",bond->params.downdelay * bond->params.miimon);
  #line 107 
  seq_printf(seq,(char *)"Peer Notification Delay (ms): %d\n",bond->params.peer_notif_delay * bond->params.miimon);
  #line 112 
  if (bond->params.arp_interval > 0) {
    #line 113 
    int printed = 0;
    #line 114 
    seq_printf(seq,(char *)"ARP Polling Interval (ms): %d\n",bond->params.arp_interval);
    #line 117 
    seq_printf(seq,(char *)"ARP IP target/s (n.n.n.n form):");
    #line 119 
    i = 0;
    #line 119 
    while (i <= 15) {
      #line 120 
      if (bond->params.arp_targets[i] == 0U) 
                                             #line 121 
                                             break;
      #line 122 
      if (printed != 0) 
                        #line 123 
                        seq_printf(seq,(char *)",");
      #line 124 
      seq_printf(seq,(char *)" %pI4",& bond->params.arp_targets[i]);
      #line 125 
      printed = 1;
      #line 119 
      i ++;
    }
    #line 127 
    seq_printf(seq,(char *)"\n");
  }
  #line 130 
  if (bond->params.mode == 4) {
    #line 131 
    struct ad_info ad_info;
    #line 134 
    char *tmp_16;
    #line 133 
    seq_puts(seq,(char *)"\n802.3ad info\n");
    #line 134 
    if (bond->params.lacp_fast != 0) 
                                     #line 134 
                                     tmp_16 = (char *)"fast"; else 
                                                                   #line 134 
                                                                   tmp_16 = (char *)"slow";
    #line 134 
    ;
    #line 134 
    seq_printf(seq,(char *)"LACP rate: %s\n",tmp_16);
    #line 136 
    seq_printf(seq,(char *)"Min links: %d\n",bond->params.min_links);
    #line 137 
    optval = bond_opt_get_val(12U,(unsigned long long)bond->params.ad_select);
    #line 139 
    seq_printf(seq,(char *)"Aggregator selection policy (ad_select): %s\n",optval->string);
    #line 141 
    if ((int)capable(12) != 0) {
      #line 142 
      seq_printf(seq,(char *)"System priority: %d\n",(int)bond->ad_info.system.sys_priority);
      #line 144 
      seq_printf(seq,(char *)"System MAC address: %pM\n",& bond->ad_info.system.sys_mac_addr);
      #line 147 
      if (__bond_3ad_get_active_agg_info(bond,& ad_info) != 0) 
                                                               #line 148 
                                                               seq_printf(seq,(char *)"bond %s has no active aggregator\n",(char *)(& (bond->dev)->name));
      else {
        #line 152 
        seq_printf(seq,(char *)"Active Aggregator Info:\n");
        #line 154 
        seq_printf(seq,(char *)"\tAggregator ID: %d\n",(int)ad_info.aggregator_id);
        #line 156 
        seq_printf(seq,(char *)"\tNumber of ports: %d\n",(int)ad_info.ports);
        #line 158 
        seq_printf(seq,(char *)"\tActor Key: %d\n",(int)ad_info.actor_key);
        #line 160 
        seq_printf(seq,(char *)"\tPartner Key: %d\n",(int)ad_info.partner_key);
        #line 162 
        seq_printf(seq,(char *)"\tPartner Mac Address: %pM\n",(__u8 *)(& ad_info.partner_system));
      }
    }
  }
  #line 167 
  return;
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static void bond_info_show_slave(struct seq_file *seq, struct slave *slave)
{
  #line 172 
  struct bonding *bond = (struct bonding *)PDE_DATA(file_inode(seq->file));
  #line 174 
  seq_printf(seq,(char *)"\nSlave Interface: %s\n",(char *)(& (slave->dev)->name));
  #line 175 
  ;
  #line 175 
  seq_printf(seq,(char *)"MII Status: %s\n",bond_slave_link_status((signed char)((int)slave->link)));
  #line 176 
  if (slave->speed == 4294967295U) 
                                   #line 177 
                                   seq_printf(seq,(char *)"Speed: %s\n",(char *)"Unknown"); else 
                                                                    #line 179 
                                                                    seq_printf(seq,(char *)"Speed: %d Mbps\n",slave->speed);
  #line 181 
  if ((unsigned int)slave->duplex == 255U) 
                                           #line 182 
                                           seq_printf(seq,(char *)"Duplex: %s\n",(char *)"Unknown");
  else {
    #line 184 
    char *tmp_2;
    #line 184 
    if ((unsigned int)slave->duplex != 0U) 
                                           #line 184 
                                           tmp_2 = (char *)"full"; else 
                                                                    #line 184 
                                                                    tmp_2 = (char *)"half";
    #line 184 
    ;
    #line 184 
    seq_printf(seq,(char *)"Duplex: %s\n",tmp_2);
  }
  #line 186 
  seq_printf(seq,(char *)"Link Failure Count: %u\n",slave->link_failure_count);
  #line 189 
  seq_printf(seq,(char *)"Permanent HW addr: %*phC\n",(int)(slave->dev)->addr_len,(u8 *)(& slave->perm_hwaddr));
  #line 191 
  seq_printf(seq,(char *)"Slave queue ID: %d\n",(int)slave->queue_id);
  #line 193 
  if (bond->params.mode == 4) {
    #line 194 
    struct port *port = & (slave->ad_info)->port;
    #line 195 
    struct aggregator *agg = port->aggregator;
    #line 197 
    if (agg != (struct aggregator *)0) {
      #line 198 
      seq_printf(seq,(char *)"Aggregator ID: %d\n",(int)agg->aggregator_identifier);
      #line 200 
      ;
      #line 200 
      seq_printf(seq,(char *)"Actor Churn State: %s\n",bond_3ad_churn_desc(port->sm_churn_actor_state));
      #line 202 
      ;
      #line 202 
      seq_printf(seq,(char *)"Partner Churn State: %s\n",bond_3ad_churn_desc(port->sm_churn_partner_state));
      #line 204 
      seq_printf(seq,(char *)"Actor Churned Count: %d\n",port->churn_actor_count);
      #line 206 
      seq_printf(seq,(char *)"Partner Churned Count: %d\n",port->churn_partner_count);
      #line 209 
      if ((int)capable(12) != 0) {
        #line 210 
        seq_puts(seq,(char *)"details actor lacp pdu:\n");
        #line 211 
        seq_printf(seq,(char *)"    system priority: %d\n",(int)port->actor_system_priority);
        #line 213 
        seq_printf(seq,(char *)"    system mac address: %pM\n",& port->actor_system);
        #line 215 
        seq_printf(seq,(char *)"    port key: %d\n",(int)port->actor_oper_port_key);
        #line 217 
        seq_printf(seq,(char *)"    port priority: %d\n",(int)port->actor_port_priority);
        #line 219 
        seq_printf(seq,(char *)"    port number: %d\n",(int)port->actor_port_number);
        #line 221 
        seq_printf(seq,(char *)"    port state: %d\n",(int)port->actor_oper_port_state);
        #line 224 
        seq_puts(seq,(char *)"details partner lacp pdu:\n");
        #line 225 
        seq_printf(seq,(char *)"    system priority: %d\n",(int)port->partner_oper.system_priority);
        #line 227 
        seq_printf(seq,(char *)"    system mac address: %pM\n",& port->partner_oper.system);
        #line 229 
        seq_printf(seq,(char *)"    oper key: %d\n",(int)port->partner_oper.key);
        #line 231 
        seq_printf(seq,(char *)"    port priority: %d\n",(int)port->partner_oper.port_priority);
        #line 233 
        seq_printf(seq,(char *)"    port number: %d\n",(int)port->partner_oper.port_number);
        #line 235 
        seq_printf(seq,(char *)"    port state: %d\n",(int)port->partner_oper.port_state);
      }
    }
    else 
         #line 239 
         seq_puts(seq,(char *)"Aggregator ID: N/A\n");
  }
  #line 241 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static int bond_info_seq_show(struct seq_file *seq, void *v)
{
  #line 246 
  if (v == (void *)1) {
    #line 247 
    seq_printf(seq,(char *)"%s\n",(char *)"Ethernet Channel Bonding Driver");
    #line 248 
    bond_info_show_master(seq);
  }
  else 
       #line 250 
       bond_info_show_slave(seq,(struct slave *)v);
  #line 252 
  return 0;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
static struct seq_operations bond_info_seq_ops = {.start = & bond_info_seq_start, .stop = & bond_info_seq_stop, .next = & bond_info_seq_next, .show = & bond_info_seq_show};
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
void bond_create_proc_entry(struct bonding *bond)
{
  #line 264 
  struct net_device *bond_dev = bond->dev;
  #line 265 
  ;
  #line 265 
  struct bond_net *bn = (struct bond_net *)net_generic_0(dev_net(bond_dev),bond_net_id);
  #line 267 
  if (bn->proc_dir != (struct proc_dir_entry *)0) {
    #line 268 
    bond->proc_entry = proc_create_seq_private((char *)(& bond_dev->name),(unsigned short)292,bn->proc_dir,& bond_info_seq_ops,0U,(void *)bond);
    #line 270 
    if (bond->proc_entry == (struct proc_dir_entry *)0) 
                                                        #line 271 
                                                        netdev_warn(bond_dev,(char *)"Cannot create /proc/net/%s/%s\n",(char *)"bonding",(char *)(& bond_dev->name)); else 
                                                                    #line 274 
                                                                    memcpy((void *)(& bond->proc_file_name),(void *)(& bond_dev->name),16UL);
  }
  #line 276 
  return;
}

#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
void bond_remove_proc_entry(struct bonding *bond)
{
  #line 280 
  struct net_device *bond_dev = bond->dev;
  #line 281 
  ;
  #line 281 
  struct bond_net *bn = (struct bond_net *)net_generic_0(dev_net(bond_dev),bond_net_id);
  #line 283 
  if (bn->proc_dir != (struct proc_dir_entry *)0 && bond->proc_entry != (struct proc_dir_entry *)0) {
    #line 284 
    remove_proc_entry((char *)(& bond->proc_file_name),bn->proc_dir);
    #line 285 
    memset((void *)(& bond->proc_file_name),0,16UL);
    #line 286 
    bond->proc_entry = (struct proc_dir_entry *)0;
  }
  #line 288 
  return;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
void bond_create_proc_dir(struct bond_net *bn)
{
  #line 295 
  if (bn->proc_dir == (struct proc_dir_entry *)0) {
    #line 296 
    bn->proc_dir = proc_mkdir((char *)"bonding",(bn->net)->proc_net);
    #line 297 
    if (bn->proc_dir == (struct proc_dir_entry *)0) 
                                                    #line 298 
                                                    printk((char *)"\001",(char *)"bonding");
  }
  #line 300 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_procfs.c"
void bond_destroy_proc_dir(struct bond_net *bn)
{
  #line 308 
  if (bn->proc_dir != (struct proc_dir_entry *)0) {
    #line 309 
    remove_proc_entry((char *)"bonding",(bn->net)->proc_net);
    #line 310 
    bn->proc_dir = (struct proc_dir_entry *)0;
  }
  #line 312 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 2684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2684 
struct net_device *__dev_get_by_index(struct net *, int);
#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
#line 444 
int nla_memcpy(void *, struct nlattr *, int);
#line 460 
#line 460 
int nla_put(struct sk_buff *, int, int, void *);
#line 923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void nlmsg_trim(struct sk_buff *skb, void *mark)
{
  #line 925 
  if (mark != (void *)0) {
    {
      #line 926 
      int __ret_warn_on = skb->data > (unsigned char *)mark;
      #line 926 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 927 
        ldv_inline_asm();
        #line 928 
        ldv_inline_asm();
      }
      #line 926 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 927 
    skb_trim(skb,(unsigned int)((unsigned char *)mark - skb->data));
  }
  #line 929 
  return;
}

#line 1072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void *nla_data(struct nlattr *nla)
{
  #line 1074 
  return (void *)((char *)nla + 4U);
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_len(struct nlattr *nla)
{
  #line 1083 
  return (int)nla->nla_len + -4;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_ok(struct nlattr *nla, int remaining)
{
  #line 1094 
  return ((remaining > 3 && (unsigned int)nla->nla_len > 3U) && (int)nla->nla_len <= remaining) != 0;
}

#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nla_next(struct nlattr *nla, int *remaining)
{
  #line 1108 
  unsigned int totlen = (unsigned int)((int)nla->nla_len + 3) & 4294967292U;
  #line 1110 
  *remaining = (int)((unsigned int)*remaining - totlen);
  #line 1111 
  return (struct nlattr *)((char *)nla + (unsigned long)totlen);
}

#line 1176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_u8(struct sk_buff *skb, int attrtype, u8 value)
{
  #line 1179 
  u8 tmp = value;
  #line 1181 
  return nla_put(skb,attrtype,1,(void *)(& tmp));
}

#line 1190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_u16(struct sk_buff *skb, int attrtype, u16 value)
{
  #line 1192 
  u16 tmp = value;
  #line 1194 
  return nla_put(skb,attrtype,2,(void *)(& tmp));
}

#line 1242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_u32(struct sk_buff *skb, int attrtype, u32 value)
{
  #line 1244 
  u32 tmp = value;
  #line 1246 
  return nla_put(skb,attrtype,4,(void *)(& tmp));
}

#line 1255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_put_be32(struct sk_buff *skb, int attrtype, __be32 value)
{
  #line 1257 
  __be32 tmp = value;
  #line 1259 
  return nla_put(skb,attrtype,4,(void *)(& tmp));
}

#line 1472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u32 nla_get_u32(struct nlattr *nla)
{
  #line 1474 
  return *((u32 *)nla_data(nla));
}

#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static __be32 nla_get_be32(struct nlattr *nla)
{
  #line 1483 
  return *((__be32 *)nla_data(nla));
}

#line 1499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u16 nla_get_u16(struct nlattr *nla)
{
  #line 1501 
  return *((u16 *)nla_data(nla));
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u8 nla_get_u8(struct nlattr *nla)
{
  #line 1528 
  return *((u8 *)nla_data(nla));
}

#line 1535  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static u64 nla_get_u64(struct nlattr *nla)
{
  #line 1537 
  u64 tmp;
  #line 1539 
  nla_memcpy((void *)(& tmp),nla,8);
  #line 1541 
  return tmp;
}

#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static struct nlattr *nla_nest_start_noflag(struct sk_buff *skb, int attrtype)
{
  #line 1685 
  struct nlattr *start = skb_tail_pointer(skb);
  #line 1687 
  if (nla_put(skb,attrtype,0,(void *)0) < 0) 
                                             #line 1688 
                                             return (struct nlattr *)0;
  #line 1690 
  return start;
}

#line 1718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static int nla_nest_end(struct sk_buff *skb, struct nlattr *start)
{
  #line 1720 
  start->nla_len = (unsigned short)(skb_tail_pointer(skb) - (unsigned char *)start);
  #line 1721 
  return (int)skb->len;
}

#line 1732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
__inline static void nla_nest_cancel(struct sk_buff *skb, struct nlattr *start)
{
  #line 1734 
  nlmsg_trim(skb,(void *)start);
  #line 1735 
  return;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
#line 118 
int rtnl_link_register(struct rtnl_link_ops *);
#line 119 
#line 119 
void rtnl_link_unregister(struct rtnl_link_ops *);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
static struct net_device *bond_option_active_slave_get_rcu_0(struct bonding *bond)
{
  #line 329 
  struct slave *________p1;
  #line 331 
  struct net_device *tmp_4;
  {
    #line 330 
    union __anonunion___u_6084 __u;
    #line 329 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 329 
    ________p1 = (__u.__val);
    {
      #line 329 
      bool __warned;
      #line 329 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 329 
        if (! __warned) {
          #line 329 
          if (rcu_read_lock_held() == 0) {
            #line 329 
            __warned = (_Bool)1;
            #line 329 
            lockdep_rcu_suspicious((char *)"./include/net/bonding.h",329,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 329 
  struct slave *slave = ________p1;
  #line 331 
  if ((int)bond_uses_primary(bond) != 0) 
    #line 331 
    if (slave != (struct slave *)0) 
                                    #line 331 
                                    tmp_4 = slave->dev; else 
                                                             #line 331 
                                                             tmp_4 = (struct net_device *)0;
  else 
       #line 331 
       tmp_4 = (struct net_device *)0;
  #line 331 
  return tmp_4;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static size_t bond_get_slave_size(struct net_device *bond_dev, struct net_device *slave_dev)
{
  #line 28 
  return (unsigned long)(((((((nla_total_size_64bit(1) + nla_total_size_64bit(1)) + nla_total_size_64bit(4)) + nla_total_size_64bit(32)) + nla_total_size_64bit(2)) + nla_total_size_64bit(2)) + nla_total_size_64bit(1)) + nla_total_size_64bit(2));
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_fill_slave_info(struct sk_buff *skb, struct net_device *bond_dev, struct net_device *slave_dev)
{
  {
    #line 36 
    bool __warned;
    #line 36 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 36 
      if (! __warned) {
        #line 36 
        if (! lockdep_rtnl_is_held()) {
          #line 36 
          __warned = (_Bool)1;
          #line 36 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c",36,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 36 
  struct slave *slave = (struct slave *)slave_dev->rx_handler_data;
  #line 38 
  ;
  #line 38 
  if (nla_put_u8(skb,1,
                   (unsigned char)((int)((unsigned char)bond_slave_state(slave)))) != 0) 
    #line 39 
    goto nla_put_failure;
  #line 41 
  if (nla_put_u8(skb,2,(unsigned char)((int)((unsigned char)slave->link))) != 0) 
    #line 42 
    goto nla_put_failure;
  #line 44 
  if (nla_put_u32(skb,3,slave->link_failure_count) != 0) 
                                                         #line 46 
                                                         goto nla_put_failure;
  #line 48 
  if (nla_put(skb,4,(int)slave_dev->addr_len,
                (void *)(& slave->perm_hwaddr)) != 0) 
    #line 50 
    goto nla_put_failure;
  #line 52 
  if (nla_put_u16(skb,5,(unsigned short)((int)slave->queue_id)) != 0) 
    #line 53 
    goto nla_put_failure;
  #line 55 
  if ((slave->bond)->params.mode == 4) {
    #line 56 
    struct aggregator *agg;
    #line 57 
    struct port *ad_port;
    #line 59 
    ad_port = & (slave->ad_info)->port;
    #line 60 
    agg = (slave->ad_info)->port.aggregator;
    #line 61 
    if (agg != (struct aggregator *)0) {
      #line 62 
      if (nla_put_u16(skb,6,(unsigned short)((int)agg->aggregator_identifier)) != 0) 
        #line 64 
        goto nla_put_failure;
      #line 65 
      if (nla_put_u8(skb,7,
                   (unsigned char)((int)ad_port->actor_oper_port_state)) != 0) 
        #line 68 
        goto nla_put_failure;
      #line 69 
      if (nla_put_u16(skb,8,
                    (unsigned short)((int)ad_port->partner_oper.port_state)) != 0) 
        #line 72 
        goto nla_put_failure;
    }
  }
  #line 76 
  return 0;
  #line 78 
  nla_put_failure: 
                   #line 78 
  ;
  #line 79 
  return -90;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static struct nla_policy bond_policy[29U] = {[1] = {.type = (unsigned char)1U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)1U}, {.type = (unsigned char)3U}, {.type = (unsigned char)8U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)1U}, {.type = (unsigned char)1U}, {.type = (unsigned char)1U}, {.type = (unsigned char)3U}, {.type = (unsigned char)1U}, {.type = (unsigned char)1U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)3U}, {.type = (unsigned char)1U}, {.type = (unsigned char)1U}, {.type = (unsigned char)8U}, {.type = (unsigned char)2U}, {.type = (unsigned char)2U}, {.type = (unsigned char)11U, .len = (unsigned short)6U}, {.type = (unsigned char)1U}, {.type = (unsigned char)3U}};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static struct nla_policy bond_slave_policy[9U] = {[5] = {.type = (unsigned char)2U}};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_validate(struct nlattr **tb, struct nlattr **data, struct netlink_ext_ack *extack)
{
  #line 121 
  if (*(tb + 1U) != (struct nlattr *)0) {
    #line 122 
    if (nla_len(*(tb + 1U)) != 6) 
                                  #line 123 
                                  return -22;
    #line 124 
    if (! is_valid_ether_addr((u8 *)nla_data(*(tb + 1U)))) 
                                                           #line 125 
                                                           return -99;
  }
  #line 127 
  return 0;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_slave_changelink(struct net_device *bond_dev, struct net_device *slave_dev, struct nlattr **tb, struct nlattr **data, struct netlink_ext_ack *extack)
{
  #line 136 
  struct bond_opt_value newval;
  #line 137 
  int err;
  #line 135 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 139 
  if (data == (struct nlattr **)0) 
                                   #line 140 
                                   return 0;
  #line 142 
  if (*(data + 5U) != (struct nlattr *)0) {
    #line 144 
    char queue_id_str[23U];
    #line 143 
    u16 queue_id = nla_get_u16(*(data + 5U));
    #line 147 
    snprintf((char *)(& queue_id_str),23UL,(char *)"%s:%u\n",(char *)(& slave_dev->name),(int)queue_id);
    #line 149 
    __bond_opt_init(& newval,(char *)(& queue_id_str),18446744073709551615ULL);
    #line 150 
    err = __bond_opt_set(bond,19U,& newval);
    #line 151 
    if (err != 0) 
                  #line 152 
                  return err;
  }
  #line 155 
  return 0;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_changelink(struct net_device *bond_dev, struct nlattr **tb, struct nlattr **data, struct netlink_ext_ack *extack)
{
  #line 163 
  struct bond_opt_value newval;
  #line 165 
  int err;
  #line 162 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 164 
  int miimon_0 = 0;
  #line 167 
  if (data == (struct nlattr **)0) 
                                   #line 168 
                                   return 0;
  #line 170 
  if (*(data + 1U) != (struct nlattr *)0) {
    #line 171 
    int mode_0 = (int)nla_get_u8(*(data + 1U));
    #line 173 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)mode_0);
    #line 174 
    err = __bond_opt_set(bond,0U,& newval);
    #line 175 
    if (err != 0) 
                  #line 176 
                  return err;
  }
  #line 178 
  if (*(data + 2U) != (struct nlattr *)0) {
    #line 180 
    struct net_device *slave_dev;
    #line 179 
    int ifindex = (int)nla_get_u32(*(data + 2U));
    #line 181 
    char *active_slave = (char *)"";
    #line 183 
    if (ifindex != 0) {
      #line 184 
      ;
      #line 184 
      slave_dev = __dev_get_by_index(dev_net(bond_dev),ifindex);
      #line 186 
      if (slave_dev == (struct net_device *)0) 
                                               #line 187 
                                               return -19;
      #line 188 
      active_slave = (char *)(& slave_dev->name);
    }
    #line 190 
    __bond_opt_init(& newval,active_slave,18446744073709551615ULL);
    #line 191 
    err = __bond_opt_set(bond,18U,& newval);
    #line 192 
    if (err != 0) 
                  #line 193 
                  return err;
  }
  #line 195 
  if (*(data + 3U) != (struct nlattr *)0) {
    #line 196 
    miimon_0 = (int)nla_get_u32(*(data + 3U));
    #line 198 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)miimon_0);
    #line 199 
    err = __bond_opt_set(bond,14U,& newval);
    #line 200 
    if (err != 0) 
                  #line 201 
                  return err;
  }
  #line 203 
  if (*(data + 4U) != (struct nlattr *)0) {
    #line 204 
    int updelay_0 = (int)nla_get_u32(*(data + 4U));
    #line 206 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)updelay_0);
    #line 207 
    err = __bond_opt_set(bond,9U,& newval);
    #line 208 
    if (err != 0) 
                  #line 209 
                  return err;
  }
  #line 211 
  if (*(data + 5U) != (struct nlattr *)0) {
    #line 212 
    int downdelay_0 = (int)nla_get_u32(*(data + 5U));
    #line 214 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)downdelay_0);
    #line 215 
    err = __bond_opt_set(bond,8U,& newval);
    #line 216 
    if (err != 0) 
                  #line 217 
                  return err;
  }
  #line 219 
  if (*(data + 28U) != (struct nlattr *)0) {
    #line 220 
    int delay = (int)nla_get_u32(*(data + 28U));
    #line 222 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)delay);
    #line 223 
    err = __bond_opt_set(bond,29U,& newval);
    #line 224 
    if (err != 0) 
                  #line 225 
                  return err;
  }
  #line 227 
  if (*(data + 6U) != (struct nlattr *)0) {
    #line 228 
    int use_carrier_0 = (int)nla_get_u8(*(data + 6U));
    #line 230 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)use_carrier_0);
    #line 231 
    err = __bond_opt_set(bond,17U,& newval);
    #line 232 
    if (err != 0) 
                  #line 233 
                  return err;
  }
  #line 235 
  if (*(data + 7U) != (struct nlattr *)0) {
    #line 236 
    int arp_interval_0 = (int)nla_get_u32(*(data + 7U));
    #line 238 
    if (arp_interval_0 != 0 && miimon_0 != 0) {
      #line 239 
      netdev_err(bond->dev,(char *)"ARP monitoring cannot be used with MII monitoring\n");
      #line 240 
      return -22;
    }
    #line 243 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)arp_interval_0);
    #line 244 
    err = __bond_opt_set(bond,6U,& newval);
    #line 245 
    if (err != 0) 
                  #line 246 
                  return err;
  }
  #line 248 
  if (*(data + 8U) != (struct nlattr *)0) {
    #line 249 
    struct nlattr *attr;
    #line 250 
    int rem;
    #line 250 
    int i = 0;
    #line 252 
    bond_option_arp_ip_targets_clear(bond);
    #line 253 
    attr = (struct nlattr *)nla_data(*(data + 8U));
    #line 253 
    rem = nla_len(*(data + 8U));
    #line 253 
    while (1) {
      #line 253 
      if (! (nla_ok(attr,rem) != 0)) 
                                     #line 253 
                                     break;
      {
        #line 254 
        __be32 target;
        #line 256 
        if ((unsigned int)nla_len(attr) <= 3U) 
                                               #line 257 
                                               return -22;
        #line 259 
        target = nla_get_be32(attr);
        #line 261 
        __bond_opt_init(& newval,(char *)0,(unsigned long long)target);
        #line 262 
        err = __bond_opt_set(bond,7U,& newval);
        #line 264 
        if (err != 0) 
                      #line 265 
                      break;
        #line 266 
        i ++;
      }
      #line 253 
      attr = nla_next(attr,& rem);
    }
    #line 268 
    if (i == 0 && bond->params.arp_interval != 0) 
                                                  #line 269 
                                                  netdev_warn(bond->dev,(char *)"Removing last arp target with arp_interval on\n");
    #line 270 
    if (err != 0) 
                  #line 271 
                  return err;
  }
  #line 273 
  if (*(data + 9U) != (struct nlattr *)0) {
    #line 274 
    int arp_validate_0 = (int)nla_get_u32(*(data + 9U));
    #line 276 
    if (arp_validate_0 != 0 && miimon_0 != 0) {
      #line 277 
      netdev_err(bond->dev,(char *)"ARP validating cannot be used with MII monitoring\n");
      #line 278 
      return -22;
    }
    #line 281 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)arp_validate_0);
    #line 282 
    err = __bond_opt_set(bond,3U,& newval);
    #line 283 
    if (err != 0) 
                  #line 284 
                  return err;
  }
  #line 286 
  if (*(data + 10U) != (struct nlattr *)0) {
    #line 287 
    int arp_all_targets_0 = (int)nla_get_u32(*(data + 10U));
    #line 290 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)arp_all_targets_0);
    #line 291 
    err = __bond_opt_set(bond,4U,& newval);
    #line 292 
    if (err != 0) 
                  #line 293 
                  return err;
  }
  #line 295 
  if (*(data + 11U) != (struct nlattr *)0) {
    #line 297 
    struct net_device *dev;
    #line 296 
    int ifindex_0 = (int)nla_get_u32(*(data + 11U));
    #line 298 
    char *primary_0 = (char *)"";
    #line 300 
    ;
    #line 300 
    dev = __dev_get_by_index(dev_net(bond_dev),ifindex_0);
    #line 301 
    if (dev != (struct net_device *)0) 
                                       #line 302 
                                       primary_0 = (char *)(& dev->name);
    #line 304 
    __bond_opt_init(& newval,primary_0,18446744073709551615ULL);
    #line 305 
    err = __bond_opt_set(bond,15U,& newval);
    #line 306 
    if (err != 0) 
                  #line 307 
                  return err;
  }
  #line 309 
  if (*(data + 12U) != (struct nlattr *)0) {
    #line 310 
    int primary_reselect_0 = (int)nla_get_u8(*(data + 12U));
    #line 313 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)primary_reselect_0);
    #line 314 
    err = __bond_opt_set(bond,16U,& newval);
    #line 315 
    if (err != 0) 
                  #line 316 
                  return err;
  }
  #line 318 
  if (*(data + 13U) != (struct nlattr *)0) {
    #line 319 
    int fail_over_mac_0 = (int)nla_get_u8(*(data + 13U));
    #line 322 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)fail_over_mac_0);
    #line 323 
    err = __bond_opt_set(bond,5U,& newval);
    #line 324 
    if (err != 0) 
                  #line 325 
                  return err;
  }
  #line 327 
  if (*(data + 14U) != (struct nlattr *)0) {
    #line 328 
    int xmit_hash_policy_0 = (int)nla_get_u8(*(data + 14U));
    #line 331 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)xmit_hash_policy_0);
    #line 332 
    err = __bond_opt_set(bond,2U,& newval);
    #line 333 
    if (err != 0) 
                  #line 334 
                  return err;
  }
  #line 336 
  if (*(data + 15U) != (struct nlattr *)0) {
    #line 337 
    int resend_igmp_0 = (int)nla_get_u32(*(data + 15U));
    #line 340 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)resend_igmp_0);
    #line 341 
    err = __bond_opt_set(bond,21U,& newval);
    #line 342 
    if (err != 0) 
                  #line 343 
                  return err;
  }
  #line 345 
  if (*(data + 16U) != (struct nlattr *)0) {
    #line 346 
    int num_peer_notif_0 = (int)nla_get_u8(*(data + 16U));
    #line 349 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)num_peer_notif_0);
    #line 350 
    err = __bond_opt_set(bond,13U,& newval);
    #line 351 
    if (err != 0) 
                  #line 352 
                  return err;
  }
  #line 354 
  if (*(data + 17U) != (struct nlattr *)0) {
    #line 355 
    int all_slaves_active_0 = (int)nla_get_u8(*(data + 17U));
    #line 358 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)all_slaves_active_0);
    #line 359 
    err = __bond_opt_set(bond,20U,& newval);
    #line 360 
    if (err != 0) 
                  #line 361 
                  return err;
  }
  #line 363 
  if (*(data + 18U) != (struct nlattr *)0) {
    #line 364 
    int min_links_0 = (int)nla_get_u32(*(data + 18U));
    #line 367 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)min_links_0);
    #line 368 
    err = __bond_opt_set(bond,11U,& newval);
    #line 369 
    if (err != 0) 
                  #line 370 
                  return err;
  }
  #line 372 
  if (*(data + 19U) != (struct nlattr *)0) {
    #line 373 
    int lp_interval_0 = (int)nla_get_u32(*(data + 19U));
    #line 376 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)lp_interval_0);
    #line 377 
    err = __bond_opt_set(bond,22U,& newval);
    #line 378 
    if (err != 0) 
                  #line 379 
                  return err;
  }
  #line 381 
  if (*(data + 20U) != (struct nlattr *)0) {
    #line 382 
    int packets_per_slave_0 = (int)nla_get_u32(*(data + 20U));
    #line 385 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)packets_per_slave_0);
    #line 386 
    err = __bond_opt_set(bond,1U,& newval);
    #line 387 
    if (err != 0) 
                  #line 388 
                  return err;
  }
  #line 390 
  if (*(data + 21U) != (struct nlattr *)0) {
    #line 391 
    int lacp_rate_0 = (int)nla_get_u8(*(data + 21U));
    #line 394 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)lacp_rate_0);
    #line 395 
    err = __bond_opt_set(bond,10U,& newval);
    #line 396 
    if (err != 0) 
                  #line 397 
                  return err;
  }
  #line 399 
  if (*(data + 22U) != (struct nlattr *)0) {
    #line 400 
    int ad_select_0 = (int)nla_get_u8(*(data + 22U));
    #line 403 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)ad_select_0);
    #line 404 
    err = __bond_opt_set(bond,12U,& newval);
    #line 405 
    if (err != 0) 
                  #line 406 
                  return err;
  }
  #line 408 
  if (*(data + 24U) != (struct nlattr *)0) {
    #line 409 
    int actor_sys_prio = (int)nla_get_u16(*(data + 24U));
    #line 412 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)actor_sys_prio);
    #line 413 
    err = __bond_opt_set(bond,25U,& newval);
    #line 414 
    if (err != 0) 
                  #line 415 
                  return err;
  }
  #line 417 
  if (*(data + 25U) != (struct nlattr *)0) {
    #line 418 
    int port_key = (int)nla_get_u16(*(data + 25U));
    #line 421 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)port_key);
    #line 422 
    err = __bond_opt_set(bond,27U,& newval);
    #line 423 
    if (err != 0) 
                  #line 424 
                  return err;
  }
  #line 426 
  if (*(data + 26U) != (struct nlattr *)0) {
    #line 427 
    if (nla_len(*(data + 26U)) != 6) 
                                     #line 428 
                                     return -22;
    #line 430 
    __bond_opt_init(& newval,(char *)0,nla_get_u64(*(data + 26U)));
    #line 432 
    err = __bond_opt_set(bond,26U,& newval);
    #line 433 
    if (err != 0) 
                  #line 434 
                  return err;
  }
  #line 436 
  if (*(data + 27U) != (struct nlattr *)0) {
    #line 437 
    int dynamic_lb = (int)nla_get_u8(*(data + 27U));
    #line 439 
    __bond_opt_init(& newval,(char *)0,(unsigned long long)dynamic_lb);
    #line 440 
    err = __bond_opt_set(bond,24U,& newval);
    #line 441 
    if (err != 0) 
                  #line 442 
                  return err;
  }
  #line 445 
  return 0;
}

#line 448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_newlink(struct net *src_net, struct net_device *bond_dev, struct nlattr **tb, struct nlattr **data, struct netlink_ext_ack *extack)
{
  #line 452 
  int err;
  #line 454 
  err = bond_changelink(bond_dev,tb,data,extack);
  #line 455 
  if (err < 0) 
               #line 456 
               return err;
  #line 458 
  err = register_netdevice(bond_dev);
  #line 460 
  netif_carrier_off(bond_dev);
  #line 461 
  if (err == 0) {
    #line 462 
    struct bonding *bond = netdev_priv(bond_dev);
    #line 464 
    bond_work_init_all(bond);
  }
  #line 467 
  return err;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static size_t bond_get_size(struct net_device *bond_dev)
{
  #line 506 
  return (unsigned long)(((((((((((((((((((((((((((((((((nla_total_size_64bit(1) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(1)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4) * 16) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(1)) + nla_total_size_64bit(1)) + nla_total_size_64bit(1)) + nla_total_size_64bit(4)) + nla_total_size_64bit(1)) + nla_total_size_64bit(1)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(4)) + nla_total_size_64bit(1)) + nla_total_size_64bit(1)) + nla_total_size_64bit(4)) + nla_total_size_64bit(2)) + nla_total_size_64bit(2)) + nla_total_size_64bit(2)) + nla_total_size_64bit(2)) + nla_total_size_64bit(6)) + nla_total_size_64bit(2)) + nla_total_size_64bit(2)) + nla_total_size_64bit(6)) + nla_total_size_64bit(1)) + nla_total_size_64bit(4));
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_option_active_slave_get_ifindex(struct bonding *bond)
{
  #line 512 
  struct net_device *slave;
  #line 513 
  int ifindex;
  #line 515 
  rcu_read_lock();
  #line 516 
  slave = bond_option_active_slave_get_rcu_0(bond);
  #line 517 
  if (slave != (struct net_device *)0) 
                                       #line 517 
                                       ifindex = slave->ifindex; else 
                                                                   #line 517 
                                                                   ifindex = 0;
  #line 518 
  rcu_read_unlock();
  #line 519 
  return ifindex;
}

#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_fill_info(struct sk_buff *skb, struct net_device *bond_dev)
{
  #line 526 
  unsigned int packets_per_slave_0;
  #line 527 
  int ifindex;
  #line 527 
  int i;
  #line 527 
  int targets_added;
  #line 528 
  struct nlattr *targets;
  #line 529 
  struct slave *primary_0;
  #line 525 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 531 
  if (nla_put_u8(skb,1,
                   (unsigned char)((int)((unsigned char)bond->params.mode))) != 0) 
    #line 532 
    goto nla_put_failure;
  #line 534 
  ifindex = bond_option_active_slave_get_ifindex(bond);
  #line 535 
  if (ifindex != 0) {
    #line 535 
    if (nla_put_u32(skb,2,(unsigned int)ifindex) != 0) 
                                                       #line 536 
                                                       goto nla_put_failure;
  }
  #line 538 
  if (nla_put_u32(skb,3,(unsigned int)bond->params.miimon) != 0) 
                                                                 #line 539 
                                                                 goto nla_put_failure;
  #line 541 
  if (nla_put_u32(skb,4,
                    (unsigned int)(bond->params.updelay * bond->params.miimon)) != 0) 
    #line 543 
    goto nla_put_failure;
  #line 545 
  if (nla_put_u32(skb,5,
                    (unsigned int)(bond->params.downdelay * bond->params.miimon)) != 0) 
    #line 547 
    goto nla_put_failure;
  #line 549 
  if (nla_put_u32(skb,28,
                    (unsigned int)(bond->params.peer_notif_delay * bond->params.miimon)) != 0) 
    #line 551 
    goto nla_put_failure;
  #line 553 
  if (nla_put_u8(skb,6,
                   (unsigned char)((int)((unsigned char)bond->params.use_carrier))) != 0) 
    #line 554 
    goto nla_put_failure;
  #line 556 
  if (nla_put_u32(skb,7,(unsigned int)bond->params.arp_interval) != 0) 
    #line 557 
    goto nla_put_failure;
  #line 559 
  targets = nla_nest_start_noflag(skb,8);
  #line 560 
  if (targets == (struct nlattr *)0) 
                                     #line 561 
                                     goto nla_put_failure;
  #line 563 
  targets_added = 0;
  #line 564 
  i = 0;
  #line 564 
  while (i <= 15) {
    #line 565 
    if (bond->params.arp_targets[i] != 0U) {
      #line 566 
      if (nla_put_be32(skb,i,bond->params.arp_targets[i]) != 0) 
                                                                #line 567 
                                                                goto nla_put_failure;
      #line 568 
      targets_added = 1;
    }
    #line 564 
    i ++;
  }
  #line 572 
  if (targets_added != 0) 
                          #line 573 
                          nla_nest_end(skb,targets); else 
                                                          #line 575 
                                                          nla_nest_cancel(skb,targets);
  #line 577 
  if (nla_put_u32(skb,9,(unsigned int)bond->params.arp_validate) != 0) 
    #line 578 
    goto nla_put_failure;
  #line 580 
  if (nla_put_u32(skb,10,(unsigned int)bond->params.arp_all_targets) != 0) 
    #line 582 
    goto nla_put_failure;
  {
    #line 584 
    bool __warned;
    #line 584 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 584 
      if (! __warned) {
        #line 584 
        if (! lockdep_rtnl_is_held()) {
          #line 584 
          __warned = (_Bool)1;
          #line 584 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c",584,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 584 
  primary_0 = bond->primary_slave;
  #line 585 
  if (primary_0 != (struct slave *)0) {
    #line 585 
    if (nla_put_u32(skb,11,(unsigned int)(primary_0->dev)->ifindex) != 0) 
      #line 587 
      goto nla_put_failure;
  }
  #line 589 
  if (nla_put_u8(skb,12,
                    (unsigned char)((int)((unsigned char)bond->params.primary_reselect))) != 0) 
    #line 591 
    goto nla_put_failure;
  #line 593 
  if (nla_put_u8(skb,13,
                    (unsigned char)((int)((unsigned char)bond->params.fail_over_mac))) != 0) 
    #line 595 
    goto nla_put_failure;
  #line 597 
  if (nla_put_u8(skb,14,
                    (unsigned char)((int)((unsigned char)bond->params.xmit_policy))) != 0) 
    #line 599 
    goto nla_put_failure;
  #line 601 
  if (nla_put_u32(skb,15,(unsigned int)bond->params.resend_igmp) != 0) 
    #line 603 
    goto nla_put_failure;
  #line 605 
  if (nla_put_u8(skb,16,(unsigned char)((int)bond->params.num_peer_notif)) != 0) 
    #line 607 
    goto nla_put_failure;
  #line 609 
  if (nla_put_u8(skb,17,
                    (unsigned char)((int)((unsigned char)bond->params.all_slaves_active))) != 0) 
    #line 611 
    goto nla_put_failure;
  #line 613 
  if (nla_put_u32(skb,18,bond->params.min_links) != 0) 
                                                       #line 615 
                                                       goto nla_put_failure;
  #line 617 
  if (nla_put_u32(skb,19,(unsigned int)bond->params.lp_interval) != 0) 
    #line 619 
    goto nla_put_failure;
  #line 621 
  packets_per_slave_0 = (unsigned int)bond->params.packets_per_slave;
  #line 622 
  if (nla_put_u32(skb,20,packets_per_slave_0) != 0) 
                                                    #line 624 
                                                    goto nla_put_failure;
  #line 626 
  if (nla_put_u8(skb,21,
                    (unsigned char)((int)((unsigned char)bond->params.lacp_fast))) != 0) 
    #line 628 
    goto nla_put_failure;
  #line 630 
  if (nla_put_u8(skb,22,
                    (unsigned char)((int)((unsigned char)bond->params.ad_select))) != 0) 
    #line 632 
    goto nla_put_failure;
  #line 634 
  if (nla_put_u8(skb,27,
                    (unsigned char)((int)((unsigned char)bond->params.tlb_dynamic_lb))) != 0) 
    #line 636 
    goto nla_put_failure;
  #line 638 
  if (bond->params.mode == 4) {
    #line 639 
    struct ad_info info;
    #line 641 
    if ((int)capable(12) != 0) {
      #line 642 
      if (nla_put_u16(skb,24,
                     (unsigned short)((int)bond->params.ad_actor_sys_prio)) != 0) 
        #line 644 
        goto nla_put_failure;
      #line 646 
      if (nla_put_u16(skb,25,
                     (unsigned short)((int)bond->params.ad_user_port_key)) != 0) 
        #line 648 
        goto nla_put_failure;
      #line 650 
      if (nla_put(skb,26,6,(void *)(& bond->params.ad_actor_system)) != 0) 
        #line 652 
        goto nla_put_failure;
    }
    #line 654 
    if (bond_3ad_get_active_agg_info(bond,& info) == 0) {
      #line 655 
      struct nlattr *nest;
      #line 657 
      nest = nla_nest_start_noflag(skb,23);
      #line 658 
      if (nest == (struct nlattr *)0) 
                                      #line 659 
                                      goto nla_put_failure;
      #line 661 
      if (nla_put_u16(skb,1,(unsigned short)((int)info.aggregator_id)) != 0) 
        #line 663 
        goto nla_put_failure;
      #line 664 
      if (nla_put_u16(skb,2,(unsigned short)((int)info.ports)) != 0) 
        #line 666 
        goto nla_put_failure;
      #line 667 
      if (nla_put_u16(skb,3,(unsigned short)((int)info.actor_key)) != 0) 
        #line 669 
        goto nla_put_failure;
      #line 670 
      if (nla_put_u16(skb,4,(unsigned short)((int)info.partner_key)) != 0) 
        #line 672 
        goto nla_put_failure;
      #line 673 
      if (nla_put(skb,5,6,(void *)(& info.partner_system)) != 0) 
                                                                 #line 676 
                                                                 goto nla_put_failure;
      #line 678 
      nla_nest_end(skb,nest);
    }
  }
  #line 682 
  return 0;
  #line 684 
  nla_put_failure: 
                   #line 684 
  ;
  #line 685 
  return -90;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static size_t bond_get_linkxstats_size(struct net_device *dev, int attr)
{
  #line 690 
  switch (attr) {
    #line 691 
    case 2: 
            #line 691 
    ;
    #line 692 
    case 3: 
            #line 692 
    ;
    #line 693 
    break;
    #line 694 
    default: 
             #line 694 
    ;
    #line 695 
    return 0UL;
  }
  #line 698 
  return bond_3ad_stats_size() + (unsigned long)nla_total_size_64bit(0);
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
static int bond_fill_linkxstats(struct sk_buff *skb, struct net_device *dev, int *prividx, int attr)
{
  #line 705 
  struct nlattr *nla;
  #line 707 
  struct nlattr *nest;
  #line 707 
  struct nlattr *nest2;
  #line 708 
  struct bonding *bond;
  #line 706 
  struct slave *slave = (struct slave *)0;
  #line 710 
  switch (attr) {
    #line 711 
    case 2: 
            #line 711 
    ;
    #line 712 
    bond = (struct bonding *)netdev_priv(dev);
    #line 713 
    break;
    #line 714 
    case 3: 
            #line 714 
    ;
    {
      #line 715 
      bool __warned;
      #line 715 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 715 
        if (! __warned) {
          #line 715 
          if (! lockdep_rtnl_is_held()) {
            #line 715 
            __warned = (_Bool)1;
            #line 715 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c",715,(char *)"suspicious rcu_dereference_protected() usage");
          }
        }
    }
    #line 715 
    slave = (struct slave *)dev->rx_handler_data;
    #line 716 
    if (slave == (struct slave *)0) 
                                    #line 717 
                                    return 0;
    #line 718 
    bond = slave->bond;
    #line 719 
    break;
    #line 720 
    default: 
             #line 720 
    ;
    #line 721 
    return -22;
  }
  #line 724 
  nest = nla_nest_start_noflag(skb,2);
  #line 725 
  if (nest == (struct nlattr *)0) 
                                  #line 726 
                                  return -90;
  #line 727 
  if (bond->params.mode == 4) {
    #line 728 
    struct bond_3ad_stats *stats;
    #line 730 
    if (slave != (struct slave *)0) 
                                    #line 731 
                                    stats = & (slave->ad_info)->stats; else 
                                                                    #line 733 
                                                                    stats = & bond->ad_info.stats;
    #line 735 
    nest2 = nla_nest_start_noflag(skb,1);
    #line 736 
    if (nest2 == (struct nlattr *)0) {
      #line 737 
      nla_nest_end(skb,nest);
      #line 738 
      return -90;
    }
    #line 741 
    if (bond_3ad_stats_fill(skb,stats) != 0) {
      #line 742 
      nla_nest_cancel(skb,nest2);
      #line 743 
      nla_nest_end(skb,nest);
      #line 744 
      return -90;
    }
    #line 746 
    nla_nest_end(skb,nest2);
  }
  #line 748 
  nla_nest_end(skb,nest);
  #line 750 
  return 0;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
struct rtnl_link_ops bond_link_ops = {.kind = (char *)"bond", .priv_size = 1936UL, .setup = & bond_setup, .maxtype = 28U, .policy = (struct nla_policy *)(& bond_policy), .validate = & bond_validate, .newlink = & bond_newlink, .changelink = & bond_changelink, .get_size = & bond_get_size, .fill_info = & bond_fill_info, .get_num_tx_queues = & bond_get_num_tx_queues, .get_num_rx_queues = & bond_get_num_tx_queues, .slave_maxtype = 8U, .slave_policy = (struct nla_policy *)(& bond_slave_policy), .slave_changelink = & bond_slave_changelink, .get_slave_size = & bond_get_slave_size, .fill_slave_info = & bond_fill_slave_info, .get_linkxstats_size = & bond_get_linkxstats_size, .fill_linkxstats = & bond_fill_linkxstats};
#line 776  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
int bond_netlink_init(void)
{
  #line 778 
  return rtnl_link_register(& bond_link_ops);
}

#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_netlink.c"
void bond_netlink_fini(void)
{
  #line 783 
  rtnl_link_unregister(& bond_link_ops);
  #line 784 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_2(struct list_head *head)
{
  #line 269 
  union __anonunion___u_6103 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static bool IS_ERR_OR_NULL_0(void *ptr);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_lock_mode_lock_of_bonding_0(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_lock_bh_mode_lock_of_bonding_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_unlock_mode_lock_of_bonding_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_unlock_bh_mode_lock_of_bonding_0(spinlock_t *lock);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static bool cif_queue_delayed_work_2(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 385  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 4599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_is_macvlan(struct net_device *dev)
{
  #line 4601 
  return (_Bool)((dev->priv_flags & 65536U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static int __vlan_get_tag(struct sk_buff *skb, u16 *vlan_tci)
{
  #line 527 
  struct vlan_ethhdr *veth = (struct vlan_ethhdr *)skb->data;
  #line 529 
  if (! eth_type_vlan((unsigned short)((int)veth->h_vlan_proto))) 
                                                                  #line 530 
                                                                  return -22;
  #line 532 
  *vlan_tci = __builtin_bswap16((unsigned short)((int)veth->h_vlan_TCI));
  #line 533 
  return 0;
}

#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static int __vlan_hwaccel_get_tag(struct sk_buff *skb, u16 *vlan_tci)
{
  #line 546 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 547 
    *vlan_tci = skb->vlan_tci;
    #line 548 
    return 0;
  }
  else {
    #line 550 
    *vlan_tci = (unsigned short)0U;
    #line 551 
    return -22;
  }
}

#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static int vlan_get_tag(struct sk_buff *skb, u16 *vlan_tci)
{
  #line 564 
  if (((skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev)->features & 128ULL) != 0ULL) {
    #line 565 
    return __vlan_hwaccel_get_tag(skb,vlan_tci);
  }
  else {
    #line 567 
    return __vlan_get_tag(skb,vlan_tci);
  }
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipx.h"
__inline static struct ipxhdr *ipx_hdr(struct sk_buff *skb)
{
  #line 52 
  return (struct ipxhdr *)skb_transport_header(skb);
}

#line 635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ipv6.h"
__inline static bool ipv6_addr_any(struct in6_addr *a)
{
  #line 638 
  unsigned long *ul = (unsigned long *)a;
  #line 640 
  return (_Bool)((*ul | *(ul + 1U)) == 0UL);
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static struct slave *bond_slave_has_mac(struct bonding *bond, u8 *mac)
{
  #line 672 
  struct list_head *iter;
  #line 673 
  struct slave *tmp;
  #line 675 
  iter = (bond->dev)->adj_list.lower.next;
  #line 675 
  tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 675 
  while (tmp != (struct slave *)0) {
    #line 676 
    if ((int)ether_addr_equal_64bits(mac,(tmp->dev)->dev_addr) != 0) 
      #line 677 
      return tmp;
    #line 675 
    tmp = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 679 
  return (struct slave *)0;
}

#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/bonding.h"
__inline static bool bond_slave_has_mac_rx(struct bonding *bond, u8 *mac)
{
  #line 710 
  void *__mptr;
  #line 699 
  struct list_head *iter;
  #line 700 
  struct slave *tmp;
  #line 701 
  struct netdev_hw_addr *ha;
  #line 703 
  iter = & (bond->dev)->adj_list.lower;
  #line 703 
  tmp = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 703 
  while (tmp != (struct slave *)0) {
    #line 704 
    if ((int)ether_addr_equal_64bits(mac,(tmp->dev)->dev_addr) != 0) 
      #line 705 
      return (_Bool)1;
    #line 703 
    tmp = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 707 
  if ((bond->dev)->uc.count == 0) 
                                  #line 708 
                                  return (_Bool)0;
  #line 710 
  __mptr = (void *)(bond->dev)->uc.list.next;
  #line 710 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 710 
  while (& ha->list != & (bond->dev)->uc.list) {
    #line 710 
    void *__mptr_0;
    #line 711 
    if ((int)ether_addr_equal_64bits(mac,(u8 *)(& ha->addr)) != 0) 
                                                                   #line 712 
                                                                   return (_Bool)1;
    #line 710 
    __mptr_0 = (void *)ha->list.next;
    #line 710 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 714 
  return (_Bool)0;
}

#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static u8 mac_v6_allmcast[8U] = {(unsigned char)51U, (unsigned char)51U, [5] = (unsigned char)1U};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
__inline static struct arp_pkt *arp_pkt(struct sk_buff *skb)
{
  #line 55 
  return (struct arp_pkt *)skb_network_header(skb);
}

#line 59 
#line 982 
static void alb_send_learning_packets(struct slave *slave, u8 *mac_addr, bool strict_match);
#line 61 
#line 821 
static void rlb_purge_src_ip(struct bonding *bond, struct arp_pkt *arp);
#line 62 
#line 768 
static void rlb_src_unlink(struct bonding *bond, u32 index);
#line 63 
#line 805 
static void rlb_src_link(struct bonding *bond, u32 ip_src_hash, u32 ip_dst_hash);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
__inline static u8 _simple_hash(u8 *hash_start, int hash_size)
{
  #line 68 
  int i;
  #line 69 
  u8 hash = (unsigned char)0U;
  #line 71 
  i = 0;
  #line 71 
  while (i < hash_size) {
    #line 72 
    hash = (unsigned char)((int)*(hash_start + (unsigned long)i) ^ (int)hash);
    #line 71 
    i ++;
  }
  #line 74 
  return hash;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
__inline static void tlb_init_table_entry(struct tlb_client_info *entry, int save_load)
{
  #line 81 
  if (save_load != 0) {
    #line 82 
    entry->load_history = entry->tx_bytes / 10U + 1U;
    #line 84 
    entry->tx_bytes = 0U;
  }
  #line 87 
  entry->tx_slave = (struct slave *)0;
  #line 88 
  entry->next = 4294967295U;
  #line 89 
  entry->prev = 4294967295U;
  #line 90 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
__inline static void tlb_init_slave(struct slave *slave)
{
  #line 94 
  slave->tlb_info.load = 0U;
  #line 95 
  slave->tlb_info.head = 4294967295U;
  #line 96 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void __tlb_clear_slave(struct bonding *bond, struct slave *slave, int save_load)
{
  #line 101 
  struct tlb_client_info *tx_hash_table;
  #line 102 
  u32 index;
  #line 105 
  tx_hash_table = bond->alb_info.tx_hashtbl;
  #line 108 
  if (tx_hash_table != (struct tlb_client_info *)0) {
    #line 109 
    index = slave->tlb_info.head;
    #line 110 
    while (index != 4294967295U) {
      #line 111 
      u32 next_index = (tx_hash_table + (unsigned long)index)->next;
      #line 112 
      tlb_init_table_entry(tx_hash_table + (unsigned long)index,save_load);
      #line 113 
      index = next_index;
    }
  }
  #line 117 
  tlb_init_slave(slave);
  #line 118 
  return;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void tlb_clear_slave(struct bonding *bond, struct slave *slave, int save_load)
{
  #line 123 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 124 
  __tlb_clear_slave(bond,slave,save_load);
  #line 125 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 126 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int tlb_initialize(struct bonding *bond)
{
  #line 133 
  struct tlb_client_info *new_hashtbl;
  #line 134 
  int i;
  #line 131 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 132 
  int size = 6144;
  #line 136 
  new_hashtbl = (struct tlb_client_info *)kzalloc_0((unsigned long)size,3264U);
  #line 137 
  if (new_hashtbl == (struct tlb_client_info *)0) 
                                                  #line 138 
                                                  return -12;
  #line 140 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 142 
  bond_info->tx_hashtbl = new_hashtbl;
  #line 144 
  i = 0;
  #line 144 
  while (i <= 255) {
    #line 145 
    tlb_init_table_entry(bond_info->tx_hashtbl + (unsigned long)i,0);
    #line 144 
    i ++;
  }
  #line 147 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 149 
  return 0;
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void tlb_deinitialize(struct bonding *bond)
{
  #line 155 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 157 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 159 
  kfree((void *)bond_info->tx_hashtbl);
  #line 160 
  bond_info->tx_hashtbl = (struct tlb_client_info *)0;
  #line 162 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 163 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static long long compute_gap(struct slave *slave)
{
  #line 167 
  return (long long)(slave->speed << 20) - (long long)(slave->tlb_info.load << 3);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *tlb_get_least_loaded_slave(struct bonding *bond)
{
  #line 173 
  struct slave *slave;
  #line 173 
  struct slave *least_loaded;
  #line 174 
  struct list_head *iter;
  #line 175 
  long long max_gap;
  #line 177 
  least_loaded = (struct slave *)0;
  #line 178 
  max_gap = -9223372036854775807LL - (long long)1;
  #line 181 
  iter = & (bond->dev)->adj_list.lower;
  #line 181 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 181 
  while (slave != (struct slave *)0) {
    #line 182 
    if ((int)bond_slave_can_tx(slave) != 0) {
      #line 183 
      long long gap = compute_gap(slave);
      #line 185 
      if (max_gap < gap) {
        #line 186 
        least_loaded = slave;
        #line 187 
        max_gap = gap;
      }
    }
    #line 181 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 192 
  return least_loaded;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *__tlb_choose_channel(struct bonding *bond, u32 hash_index, u32 skb_len)
{
  #line 199 
  struct tlb_client_info *hash_table;
  #line 200 
  struct slave *assigned_slave;
  #line 198 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 202 
  hash_table = bond_info->tx_hashtbl;
  #line 203 
  assigned_slave = (hash_table + (unsigned long)hash_index)->tx_slave;
  #line 204 
  if (assigned_slave == (struct slave *)0) {
    #line 205 
    assigned_slave = tlb_get_least_loaded_slave(bond);
    #line 207 
    if (assigned_slave != (struct slave *)0) {
      #line 208 
      struct tlb_slave_info *slave_info = & assigned_slave->tlb_info;
      #line 210 
      u32 next_index = slave_info->head;
      #line 212 
      (hash_table + (unsigned long)hash_index)->tx_slave = assigned_slave;
      #line 213 
      (hash_table + (unsigned long)hash_index)->next = next_index;
      #line 214 
      (hash_table + (unsigned long)hash_index)->prev = 4294967295U;
      #line 216 
      if (next_index != 4294967295U) 
                                     #line 217 
                                     (hash_table + (unsigned long)next_index)->prev = hash_index;
      #line 219 
      slave_info->head = hash_index;
      #line 220 
      slave_info->load += (hash_table + (unsigned long)hash_index)->load_history;
    }
  }
  #line 225 
  if (assigned_slave != (struct slave *)0) 
                                           #line 226 
                                           (hash_table + (unsigned long)hash_index)->tx_bytes += skb_len;
  #line 228 
  return assigned_slave;
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *tlb_choose_channel(struct bonding *bond, u32 hash_index, u32 skb_len)
{
  #line 234 
  struct slave *tx_slave;
  #line 240 
  cif_spin_lock_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 241 
  tx_slave = __tlb_choose_channel(bond,hash_index,skb_len);
  #line 242 
  cif_spin_unlock_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 244 
  return tx_slave;
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_update_entry_from_arp(struct bonding *bond, struct arp_pkt *arp)
{
  #line 255 
  struct rlb_client_info *client_info;
  #line 256 
  u32 hash_index;
  #line 254 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 258 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 260 
  hash_index = (unsigned int)_simple_hash((u8 *)(& arp->ip_src),4);
  #line 261 
  client_info = bond_info->rx_hashtbl + (unsigned long)hash_index;
  #line 263 
  if (((unsigned int)client_info->assigned != 0U && client_info->ip_src == arp->ip_dst) && client_info->ip_dst == arp->ip_src) {
    #line 266 
    if (! ether_addr_equal_64bits((u8 *)(& client_info->mac_dst),
                                (u8 *)(& arp->mac_src))) {
      #line 268 
      ether_addr_copy((u8 *)(& client_info->mac_dst),(u8 *)(& arp->mac_src));
      #line 269 
      client_info->ntt = (unsigned char)1U;
      #line 270 
      bond_info->rx_ntt = (unsigned char)1U;
    }
  }
  #line 273 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 274 
  return;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int rlb_arp_recv(struct sk_buff *skb, struct bonding *bond, struct slave *slave)
{
  #line 279 
  struct arp_pkt *arp;
  #line 279 
  struct arp_pkt _arp;
  #line 281 
  if ((unsigned int)skb->protocol != 1544U) 
                                            #line 282 
                                            goto out;
  #line 284 
  arp = (struct arp_pkt *)skb_header_pointer(skb,0,28,(void *)(& _arp));
  #line 285 
  if (arp == (struct arp_pkt *)0) 
                                  #line 286 
                                  goto out;
  #line 298 
  rlb_purge_src_ip(bond,arp);
  #line 300 
  if ((unsigned int)arp->op_code == 512U) {
    #line 302 
    rlb_update_entry_from_arp(bond,arp);
    {
      #line 303 
      bool branch;
      #line 303 
      struct _ddebug __UNIQUE_ID_ddebug534 = {.modname = (char *)"bonding", .function = (char *)"rlb_arp_recv", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)303U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 303 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug534.key.dd_key_false.key,(_Bool)0);
      #line 303 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 303 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug534,bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
    }
  }
  #line 305 
  out: 
       #line 305 
  ;
  #line 306 
  return 1;
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *__rlb_next_rx_slave(struct bonding *bond)
{
  #line 313 
  struct slave *slave;
  #line 314 
  struct list_head *iter;
  #line 312 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 313 
  struct slave *before = (struct slave *)0;
  #line 313 
  struct slave *rx_slave = (struct slave *)0;
  #line 315 
  bool found = (_Bool)0;
  #line 317 
  iter = & (bond->dev)->adj_list.lower;
  #line 317 
  slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  #line 317 
  while (slave != (struct slave *)0) {
    {
      #line 318 
      if (! bond_slave_can_tx(slave)) 
                                      #line 319 
                                      goto __Cont;
      #line 320 
      if (! found) {
        #line 321 
        if (before == (struct slave *)0 || before->speed < slave->speed) 
          #line 322 
          before = slave;
      }
      else 
        #line 324 
        if (rx_slave == (struct slave *)0 || rx_slave->speed < slave->speed) 
          #line 325 
          rx_slave = slave;
      #line 327 
      if (bond_info->rx_slave == slave) 
                                        #line 328 
                                        found = (_Bool)1;
    }
    #line 317 
    __Cont: 
            #line 317 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
  }
  #line 333 
  if (rx_slave == (struct slave *)0 || before != (struct slave *)0 && rx_slave->speed < before->speed) 
    #line 334 
    rx_slave = before;
  #line 336 
  if (rx_slave != (struct slave *)0) 
                                     #line 337 
                                     bond_info->rx_slave = rx_slave;
  #line 339 
  return rx_slave;
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *rlb_next_rx_slave(struct bonding *bond)
{
  #line 345 
  struct slave *rx_slave;
  {
    #line 347 
    bool __warned;
    #line 347 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 347 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 347 
      __warned = (_Bool)1;
      {
        #line 347 
        int __ret_warn_on = 1;
        #line 347 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 347 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",347);
          #line 348 
          ldv_inline_asm();
          #line 349 
          ldv_inline_asm();
        }
        #line 347 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 347 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 349 
  rcu_read_lock();
  #line 350 
  rx_slave = __rlb_next_rx_slave(bond);
  #line 351 
  rcu_read_unlock();
  #line 353 
  return rx_slave;
}

#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_teach_disabled_mac_on_primary(struct bonding *bond, u8 *addr)
{
  {
    #line 363 
    bool __warned;
    #line 363 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 363 
      if (! __warned) {
        #line 363 
        if (! lockdep_rtnl_is_held()) {
          #line 363 
          __warned = (_Bool)1;
          #line 363 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",363,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 363 
  struct slave *curr_active = bond->curr_active_slave;
  #line 365 
  if (curr_active == (struct slave *)0) 
                                        #line 366 
                                        return;
  #line 368 
  if ((unsigned int)bond->alb_info.primary_is_promisc == 0U) {
    #line 369 
    if (dev_set_promiscuity(curr_active->dev,1) == 0) 
                                                      #line 370 
                                                      bond->alb_info.primary_is_promisc = (unsigned char)1U; else 
                                                                    #line 372 
                                                                    bond->alb_info.primary_is_promisc = (unsigned char)0U;
  }
  #line 375 
  bond->alb_info.rlb_promisc_timeout_counter = 0U;
  #line 377 
  alb_send_learning_packets(curr_active,addr,(_Bool)1);
  #line 378 
  return;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_clear_slave(struct bonding *bond, struct slave *slave)
{
  #line 387 
  struct rlb_client_info *rx_hash_table;
  #line 388 
  u32 index;
  #line 388 
  u32 next_index;
  #line 386 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 391 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 393 
  rx_hash_table = bond_info->rx_hashtbl;
  #line 394 
  index = bond_info->rx_hashtbl_used_head;
  #line 395 
  while (index != 4294967295U) {
    #line 396 
    next_index = (rx_hash_table + (unsigned long)index)->used_next;
    #line 397 
    if ((rx_hash_table + (unsigned long)index)->slave == slave) {
      #line 398 
      struct slave *assigned_slave = rlb_next_rx_slave(bond);
      #line 400 
      if (assigned_slave != (struct slave *)0) {
        #line 401 
        (rx_hash_table + (unsigned long)index)->slave = assigned_slave;
        #line 402 
        if ((int)is_valid_ether_addr((u8 *)(& (rx_hash_table + (unsigned long)index)->mac_dst)) != 0) {
          #line 403 
          (bond_info->rx_hashtbl + (unsigned long)index)->ntt = (unsigned char)1U;
          #line 404 
          bond_info->rx_ntt = (unsigned char)1U;
          #line 412 
          bond_info->rlb_update_retry_counter = 3U;
        }
      }
      else 
           #line 416 
           (rx_hash_table + (unsigned long)index)->slave = (struct slave *)0;
    }
    #line 395 
    index = next_index;
  }
  #line 421 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  {
    #line 423 
    bool __warned;
    #line 423 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 423 
      if (! __warned) {
        #line 423 
        if (! lockdep_rtnl_is_held()) {
          #line 423 
          __warned = (_Bool)1;
          #line 423 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",423,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 423 
  ;
  #line 423 
  if (bond->curr_active_slave != slave) 
                                        #line 424 
                                        rlb_teach_disabled_mac_on_primary(bond,(slave->dev)->dev_addr);
  #line 425 
  return;
}

#line 427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_update_client(struct rlb_client_info *client_info)
{
  #line 429 
  int i;
  #line 431 
  if (client_info->slave == (struct slave *)0) 
                                               #line 432 
                                               return;
  else {
    #line 431 
    if (! is_valid_ether_addr((u8 *)(& client_info->mac_dst))) 
                                                               #line 432 
                                                               return;
  }
  #line 434 
  i = 0;
  #line 434 
  while (i <= 1) {
    {
      #line 435 
      struct sk_buff *skb;
      #line 437 
      skb = arp_create(2,2054,client_info->ip_dst,(client_info->slave)->dev,client_info->ip_src,(unsigned char *)(& client_info->mac_dst),((client_info->slave)->dev)->dev_addr,(unsigned char *)(& client_info->mac_dst));
      #line 444 
      if (skb == (struct sk_buff *)0) {
        #line 445 
        netdev_err(((client_info->slave)->bond)->dev,(char *)"(slave %s): ",(char *)(& ((client_info->slave)->dev)->name));
        #line 448 
        goto __Cont;
      }
      #line 451 
      skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = (client_info->slave)->dev;
      #line 453 
      if ((unsigned int)client_info->vlan_id != 0U) 
                                                    #line 454 
                                                    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)client_info->vlan_id));
      #line 458 
      arp_xmit(skb);
    }
    #line 434 
    __Cont: 
            #line 434 
    i ++;
  }
  #line 460 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_update_rx_clients(struct bonding *bond)
{
  #line 466 
  struct rlb_client_info *client_info;
  #line 467 
  u32 hash_index;
  #line 465 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 469 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 471 
  hash_index = bond_info->rx_hashtbl_used_head;
  #line 472 
  while (hash_index != 4294967295U) {
    #line 474 
    client_info = bond_info->rx_hashtbl + (unsigned long)hash_index;
    #line 475 
    if ((unsigned int)client_info->ntt != 0U) {
      #line 476 
      rlb_update_client(client_info);
      #line 477 
      if (bond_info->rlb_update_retry_counter == 0U) 
                                                     #line 478 
                                                     client_info->ntt = (unsigned char)0U;
    }
    #line 472 
    hash_index = client_info->used_next;
  }
  #line 485 
  bond_info->rlb_update_delay_counter = 20U;
  #line 487 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 488 
  return;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_req_update_slave_clients(struct bonding *bond, struct slave *slave)
{
  #line 494 
  struct rlb_client_info *client_info;
  #line 496 
  u32 hash_index;
  #line 493 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 495 
  int ntt = 0;
  #line 498 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 500 
  hash_index = bond_info->rx_hashtbl_used_head;
  #line 501 
  while (hash_index != 4294967295U) {
    #line 503 
    client_info = bond_info->rx_hashtbl + (unsigned long)hash_index;
    #line 505 
    if (client_info->slave == slave) {
      #line 505 
      if ((int)is_valid_ether_addr((u8 *)(& client_info->mac_dst)) != 0) {
        #line 507 
        client_info->ntt = (unsigned char)1U;
        #line 508 
        ntt = 1;
      }
    }
    #line 501 
    hash_index = client_info->used_next;
  }
  #line 513 
  if (ntt != 0) {
    #line 514 
    bond_info->rx_ntt = (unsigned char)1U;
    #line 516 
    bond_info->rlb_update_retry_counter = 3U;
  }
  #line 519 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 520 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_req_update_subnet_clients(struct bonding *bond, __be32 src_ip)
{
  #line 526 
  struct rlb_client_info *client_info;
  #line 527 
  u32 hash_index;
  #line 525 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 529 
  cif_spin_lock_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 531 
  hash_index = bond_info->rx_hashtbl_used_head;
  #line 532 
  while (hash_index != 4294967295U) {
    #line 534 
    client_info = bond_info->rx_hashtbl + (unsigned long)hash_index;
    #line 536 
    if (client_info->slave == (struct slave *)0) {
      #line 537 
      netdev_err(bond->dev,(char *)"found a client with no channel in the client\'s hash table\n");
      #line 538 
      goto __Cont;
    }
    #line 544 
    if (client_info->ip_src == src_ip) {
      #line 545 
      if (! ether_addr_equal_64bits(((client_info->slave)->dev)->dev_addr,
                              (bond->dev)->dev_addr)) {
        #line 546 
        if ((int)is_valid_ether_addr((u8 *)(& client_info->mac_dst)) != 0) {
          #line 548 
          client_info->ntt = (unsigned char)1U;
          #line 549 
          bond_info->rx_ntt = (unsigned char)1U;
        }
      }
    }
    #line 532 
    __Cont: 
            #line 532 
    hash_index = client_info->used_next;
  }
  #line 553 
  cif_spin_unlock_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 554 
  return;
}

#line 556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *rlb_choose_channel(struct sk_buff *skb, struct bonding *bond)
{
  #line 566 
  struct slave *________p1;
  #line 560 
  struct slave *assigned_slave;
  #line 560 
  struct slave *curr_active_slave;
  #line 561 
  struct rlb_client_info *client_info;
  #line 558 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 559 
  struct arp_pkt *arp = arp_pkt(skb);
  #line 562 
  u32 hash_index = 0U;
  #line 564 
  cif_spin_lock_mode_lock_of_bonding_0(& bond->mode_lock);
  {
    #line 567 
    union __anonunion___u_7073 __u;
    #line 566 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 566 
    ________p1 = (__u.__val);
    {
      #line 566 
      bool __warned;
      #line 566 
      if (debug_lockdep_rcu_enabled() != 0) 
        #line 566 
        if (! __warned) {
          #line 566 
          if (rcu_read_lock_held() == 0) {
            #line 566 
            __warned = (_Bool)1;
            #line 566 
            lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",566,(char *)"suspicious rcu_dereference_check() usage");
          }
        }
    }
    }
  #line 566 
  curr_active_slave = ________p1;
  #line 568 
  hash_index = (unsigned int)_simple_hash((u8 *)(& arp->ip_dst),4);
  #line 569 
  client_info = bond_info->rx_hashtbl + (unsigned long)hash_index;
  #line 571 
  if ((unsigned int)client_info->assigned != 0U) 
    #line 572 
    if (client_info->ip_src == arp->ip_src && client_info->ip_dst == arp->ip_dst) {
      #line 575 
      if (! is_broadcast_ether_addr((u8 *)(& arp->mac_dst))) 
                                                             #line 577 
                                                             ether_addr_copy((u8 *)(& client_info->mac_dst),(u8 *)(& arp->mac_dst));
      #line 579 
      ether_addr_copy((u8 *)(& client_info->mac_src),(u8 *)(& arp->mac_src));
      #line 581 
      assigned_slave = client_info->slave;
      #line 582 
      if (assigned_slave != (struct slave *)0) {
        #line 583 
        cif_spin_unlock_mode_lock_of_bonding_0(& bond->mode_lock);
        #line 584 
        return assigned_slave;
      }
    }
    else 
      #line 591 
      if (curr_active_slave != (struct slave *)0 && client_info->slave != curr_active_slave) {
        #line 593 
        client_info->slave = curr_active_slave;
        #line 594 
        rlb_update_client(client_info);
      }
  #line 599 
  assigned_slave = __rlb_next_rx_slave(bond);
  #line 601 
  if (assigned_slave != (struct slave *)0) {
    #line 602 
    if ((unsigned int)client_info->assigned == 0U || client_info->ip_src != arp->ip_src) {
      #line 607 
      u32 hash_src = (unsigned int)_simple_hash((u8 *)(& arp->ip_src),4);
      #line 609 
      rlb_src_unlink(bond,hash_index);
      #line 610 
      rlb_src_link(bond,hash_src,hash_index);
    }
    #line 613 
    client_info->ip_src = arp->ip_src;
    #line 614 
    client_info->ip_dst = arp->ip_dst;
    #line 619 
    ether_addr_copy((u8 *)(& client_info->mac_dst),(u8 *)(& arp->mac_dst));
    #line 620 
    ether_addr_copy((u8 *)(& client_info->mac_src),(u8 *)(& arp->mac_src));
    #line 621 
    client_info->slave = assigned_slave;
    #line 623 
    if ((int)is_valid_ether_addr((u8 *)(& client_info->mac_dst)) != 0) {
      #line 624 
      client_info->ntt = (unsigned char)1U;
      #line 625 
      bond->alb_info.rx_ntt = (unsigned char)1U;
    }
    else 
         #line 627 
         client_info->ntt = (unsigned char)0U;
    #line 630 
    if (vlan_get_tag(skb,& client_info->vlan_id) != 0) 
                                                       #line 631 
                                                       client_info->vlan_id = (unsigned short)0U;
    #line 633 
    if ((unsigned int)client_info->assigned == 0U) {
      #line 634 
      u32 prev_tbl_head = bond_info->rx_hashtbl_used_head;
      #line 635 
      bond_info->rx_hashtbl_used_head = hash_index;
      #line 636 
      client_info->used_next = prev_tbl_head;
      #line 637 
      if (prev_tbl_head != 4294967295U) 
                                        #line 638 
                                        (bond_info->rx_hashtbl + (unsigned long)prev_tbl_head)->used_prev = hash_index;
      #line 641 
      client_info->assigned = (unsigned char)1U;
    }
  }
  #line 645 
  cif_spin_unlock_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 647 
  return assigned_slave;
}

#line 654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static struct slave *rlb_arp_xmit(struct sk_buff *skb, struct bonding *bond)
{
  #line 656 
  struct arp_pkt *arp = arp_pkt(skb);
  #line 657 
  struct slave *tx_slave = (struct slave *)0;
  #line 662 
  if (! bond_slave_has_mac_rx(bond,(u8 *)(& arp->mac_src))) 
                                                            #line 663 
                                                            return (struct slave *)0;
  #line 665 
  if ((unsigned int)arp->op_code == 512U) {
    #line 667 
    tx_slave = rlb_choose_channel(skb,bond);
    #line 668 
    if (tx_slave != (struct slave *)0) 
                                       #line 669 
                                       bond_hw_addr_copy((u8 *)(& arp->mac_src),(tx_slave->dev)->dev_addr,(unsigned int)(tx_slave->dev)->addr_len);
    {
      #line 671 
      bool branch;
      #line 671 
      struct _ddebug __UNIQUE_ID_ddebug536 = {.modname = (char *)"bonding", .function = (char *)"rlb_arp_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c", .format = (char *)"(slave %s): Server sent ARP Reply packet\n", .lineno = (unsigned int)671U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 671 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug536.key.dd_key_false.key,(_Bool)0);
      #line 671 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 671 
        char *tmp_1;
        #line 671 
        if (tx_slave != (struct slave *)0) 
                                           #line 671 
                                           tmp_1 = (char *)(& (tx_slave->dev)->name); else 
                                                                    #line 671 
                                                                    tmp_1 = (char *)"NULL";
        #line 671 
        ;
        #line 671 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug536,bond->dev,(char *)"(slave %s): Server sent ARP Reply packet\n",tmp_1);
      }
    }
  }
  else 
    #line 673 
    if ((unsigned int)arp->op_code == 256U) {
      #line 679 
      tx_slave = rlb_choose_channel(skb,bond);
      #line 684 
      bond->alb_info.rlb_update_delay_counter = 20U;
      #line 691 
      rlb_req_update_subnet_clients(bond,arp->ip_src);
      {
        #line 692 
        bool branch_0;
        #line 692 
        struct _ddebug __UNIQUE_ID_ddebug537 = {.modname = (char *)"bonding", .function = (char *)"rlb_arp_xmit", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c", .format = (char *)"(slave %s): Server sent ARP Request packet\n", .lineno = (unsigned int)692U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 692 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug537.key.dd_key_false.key,(_Bool)0);
        #line 692 
        if ((long)((long)((int)branch_0 != 0)) != 0L) {
          #line 692 
          char *tmp_3;
          #line 692 
          if (tx_slave != (struct slave *)0) 
                                             #line 692 
                                             tmp_3 = (char *)(& (tx_slave->dev)->name); else 
                                                                    #line 692 
                                                                    tmp_3 = (char *)"NULL";
          #line 692 
          ;
          #line 692 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug537,bond->dev,(char *)"(slave %s): Server sent ARP Request packet\n",tmp_3);
        }
      }
    }
  #line 696 
  return tx_slave;
}

#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_rebalance(struct bonding *bond)
{
  #line 702 
  struct slave *assigned_slave;
  #line 703 
  struct rlb_client_info *client_info;
  #line 704 
  int ntt;
  #line 705 
  u32 hash_index;
  #line 701 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 707 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 709 
  ntt = 0;
  #line 710 
  hash_index = bond_info->rx_hashtbl_used_head;
  #line 711 
  while (hash_index != 4294967295U) {
    #line 713 
    client_info = bond_info->rx_hashtbl + (unsigned long)hash_index;
    #line 714 
    assigned_slave = __rlb_next_rx_slave(bond);
    #line 715 
    if (assigned_slave != (struct slave *)0 && client_info->slave != assigned_slave) {
      #line 716 
      client_info->slave = assigned_slave;
      #line 717 
      if (! is_zero_ether_addr((u8 *)(& client_info->mac_dst))) {
        #line 718 
        client_info->ntt = (unsigned char)1U;
        #line 719 
        ntt = 1;
      }
    }
    #line 711 
    hash_index = client_info->used_next;
  }
  #line 725 
  if (ntt != 0) 
                #line 726 
                bond_info->rx_ntt = (unsigned char)1U;
  #line 727 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 728 
  return;
}

#line 731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_init_table_entry_dst(struct rlb_client_info *entry)
{
  #line 733 
  entry->used_next = 4294967295U;
  #line 734 
  entry->used_prev = 4294967295U;
  #line 735 
  entry->assigned = (unsigned char)0U;
  #line 736 
  entry->slave = (struct slave *)0;
  #line 737 
  entry->vlan_id = (unsigned short)0U;
  #line 738 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_init_table_entry_src(struct rlb_client_info *entry)
{
  #line 741 
  entry->src_first = 4294967295U;
  #line 742 
  entry->src_prev = 4294967295U;
  #line 743 
  entry->src_next = 4294967295U;
  #line 744 
  return;
}

#line 746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_init_table_entry(struct rlb_client_info *entry)
{
  #line 748 
  memset((void *)entry,0,64UL);
  #line 749 
  rlb_init_table_entry_dst(entry);
  #line 750 
  rlb_init_table_entry_src(entry);
  #line 751 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_delete_table_entry_dst(struct bonding *bond, u32 index)
{
  #line 755 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 756 
  u32 next_index = (bond_info->rx_hashtbl + (unsigned long)index)->used_next;
  #line 757 
  u32 prev_index = (bond_info->rx_hashtbl + (unsigned long)index)->used_prev;
  #line 759 
  if (bond_info->rx_hashtbl_used_head == index) 
                                                #line 760 
                                                bond_info->rx_hashtbl_used_head = next_index;
  #line 761 
  if (prev_index != 4294967295U) 
                                 #line 762 
                                 (bond_info->rx_hashtbl + (unsigned long)prev_index)->used_next = next_index;
  #line 763 
  if (next_index != 4294967295U) 
                                 #line 764 
                                 (bond_info->rx_hashtbl + (unsigned long)next_index)->used_prev = prev_index;
  #line 765 
  return;
}

#line 768  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_src_unlink(struct bonding *bond, u32 index)
{
  #line 770 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 771 
  u32 next_index = (bond_info->rx_hashtbl + (unsigned long)index)->src_next;
  #line 772 
  u32 prev_index = (bond_info->rx_hashtbl + (unsigned long)index)->src_prev;
  #line 774 
  (bond_info->rx_hashtbl + (unsigned long)index)->src_next = 4294967295U;
  #line 775 
  (bond_info->rx_hashtbl + (unsigned long)index)->src_prev = 4294967295U;
  #line 777 
  if (next_index != 4294967295U) 
                                 #line 778 
                                 (bond_info->rx_hashtbl + (unsigned long)next_index)->src_prev = prev_index;
  #line 780 
  if (prev_index == 4294967295U) 
                                 #line 781 
                                 return;
  #line 784 
  if ((bond_info->rx_hashtbl + (unsigned long)prev_index)->src_first == index) 
    #line 785 
    (bond_info->rx_hashtbl + (unsigned long)prev_index)->src_first = next_index; else 
                                                                    #line 787 
                                                                    (bond_info->rx_hashtbl + (unsigned long)prev_index)->src_next = next_index;
  #line 788 
  return;
}

#line 791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_delete_table_entry(struct bonding *bond, u32 index)
{
  #line 793 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 794 
  struct rlb_client_info *entry = bond_info->rx_hashtbl + (unsigned long)index;
  #line 796 
  rlb_delete_table_entry_dst(bond,index);
  #line 797 
  rlb_init_table_entry_dst(entry);
  #line 799 
  rlb_src_unlink(bond,index);
  #line 800 
  return;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_src_link(struct bonding *bond, u32 ip_src_hash, u32 ip_dst_hash)
{
  #line 808 
  u32 next;
  #line 807 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 810 
  (bond_info->rx_hashtbl + (unsigned long)ip_dst_hash)->src_prev = ip_src_hash;
  #line 811 
  next = (bond_info->rx_hashtbl + (unsigned long)ip_src_hash)->src_first;
  #line 812 
  (bond_info->rx_hashtbl + (unsigned long)ip_dst_hash)->src_next = next;
  #line 813 
  if (next != 4294967295U) 
                           #line 814 
                           (bond_info->rx_hashtbl + (unsigned long)next)->src_prev = ip_dst_hash;
  #line 815 
  (bond_info->rx_hashtbl + (unsigned long)ip_src_hash)->src_first = ip_dst_hash;
  #line 816 
  return;
}

#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_purge_src_ip(struct bonding *bond, struct arp_pkt *arp)
{
  #line 825 
  u32 index;
  #line 823 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 824 
  u32 ip_src_hash = (unsigned int)_simple_hash((u8 *)(& arp->ip_src),4);
  #line 827 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 829 
  index = (bond_info->rx_hashtbl + (unsigned long)ip_src_hash)->src_first;
  #line 830 
  while (index != 4294967295U) {
    #line 831 
    struct rlb_client_info *entry = bond_info->rx_hashtbl + (unsigned long)index;
    #line 832 
    u32 next_index = entry->src_next;
    #line 833 
    if (entry->ip_src == arp->ip_src) {
      #line 834 
      if (! ether_addr_equal_64bits((u8 *)(& arp->mac_src),
                                (u8 *)(& entry->mac_src))) 
        #line 835 
        rlb_delete_table_entry(bond,index);
    }
    #line 836 
    index = next_index;
  }
  #line 838 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 839 
  return;
}

#line 841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int rlb_initialize(struct bonding *bond)
{
  #line 844 
  struct rlb_client_info *new_hashtbl;
  #line 846 
  int i;
  #line 843 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 845 
  int size = 16384;
  #line 848 
  new_hashtbl = (struct rlb_client_info *)kmalloc_0((unsigned long)size,3264U);
  #line 849 
  if (new_hashtbl == (struct rlb_client_info *)0) 
                                                  #line 850 
                                                  return -1;
  #line 852 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 854 
  bond_info->rx_hashtbl = new_hashtbl;
  #line 856 
  bond_info->rx_hashtbl_used_head = 4294967295U;
  #line 858 
  i = 0;
  #line 858 
  while (i <= 255) {
    #line 859 
    rlb_init_table_entry(bond_info->rx_hashtbl + (unsigned long)i);
    #line 858 
    i ++;
  }
  #line 861 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 864 
  bond->recv_probe = & rlb_arp_recv;
  #line 866 
  return 0;
}

#line 869  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_deinitialize(struct bonding *bond)
{
  #line 871 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 873 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 875 
  kfree((void *)bond_info->rx_hashtbl);
  #line 876 
  bond_info->rx_hashtbl = (struct rlb_client_info *)0;
  #line 877 
  bond_info->rx_hashtbl_used_head = 4294967295U;
  #line 879 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 880 
  return;
}

#line 882  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void rlb_clear_vlan(struct bonding *bond, unsigned short vlan_id)
{
  #line 885 
  u32 curr_index;
  #line 884 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 887 
  cif_spin_lock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 889 
  curr_index = bond_info->rx_hashtbl_used_head;
  #line 890 
  while (curr_index != 4294967295U) {
    #line 891 
    struct rlb_client_info *curr = bond_info->rx_hashtbl + (unsigned long)curr_index;
    #line 892 
    u32 next_index = (bond_info->rx_hashtbl + (unsigned long)curr_index)->used_next;
    #line 894 
    if ((int)curr->vlan_id == (int)vlan_id) 
                                            #line 895 
                                            rlb_delete_table_entry(bond,curr_index);
    #line 897 
    curr_index = next_index;
  }
  #line 900 
  cif_spin_unlock_bh_mode_lock_of_bonding_0(& bond->mode_lock);
  #line 901 
  return;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void alb_send_lp_vid(struct slave *slave, u8 *mac_addr, __be16 vlan_proto, u16 vid)
{
  #line 908 
  struct learning_pkt pkt;
  #line 909 
  struct sk_buff *skb;
  #line 910 
  int size = 60;
  #line 912 
  memset((void *)(& pkt),0,(unsigned long)size);
  #line 913 
  ether_addr_copy((u8 *)(& pkt.mac_dst),mac_addr);
  #line 914 
  ether_addr_copy((u8 *)(& pkt.mac_src),mac_addr);
  #line 915 
  pkt.type = (unsigned short)144U;
  #line 917 
  skb = dev_alloc_skb((unsigned int)size);
  #line 918 
  if (skb == (struct sk_buff *)0) 
                                  #line 919 
                                  return;
  #line 921 
  skb_put_data(skb,(void *)(& pkt),(unsigned int)size);
  #line 923 
  skb_reset_mac_header(skb);
  #line 924 
  skb->network_header = (unsigned short)((unsigned int)skb->mac_header + 14U);
  #line 925 
  skb->protocol = pkt.type;
  #line 926 
  skb->priority = 7U;
  #line 927 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_487_86.__anonCompField___anonstruct_488_85.dev = slave->dev;
  {
    #line 929 
    bool branch;
    #line 929 
    struct _ddebug __UNIQUE_ID_ddebug538 = {.modname = (char *)"bonding", .function = (char *)"alb_send_lp_vid", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c", .format = (char *)"(slave %s): ", .lineno = (unsigned int)929U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 929 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug538.key.dd_key_false.key,(_Bool)0);
    #line 929 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 929 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug538,(slave->bond)->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),mac_addr,(int)vid);
  }
  #line 932 
  if ((unsigned int)vid != 0U) 
                               #line 933 
                               __vlan_hwaccel_put_tag(skb,(unsigned short)((int)vlan_proto),(unsigned short)((int)vid));
  #line 935 
  dev_queue_xmit(skb);
  #line 936 
  return;
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int alb_upper_dev_walk(struct net_device *upper, void *_data)
{
  #line 952 
  struct bond_vlan_tag *tags;
  #line 947 
  struct alb_walk_data *data = (struct alb_walk_data *)_data;
  #line 948 
  bool strict_match = data->strict_match;
  #line 949 
  struct bonding *bond = data->bond;
  #line 950 
  struct slave *slave = data->slave;
  #line 951 
  u8 *mac_addr = data->mac_addr;
  #line 954 
  if ((int)is_vlan_dev(upper) != 0) 
    #line 955 
    if ((int)(bond->dev)->lower_level == (int)upper->lower_level + -1) 
      #line 956 
      if ((unsigned int)upper->addr_assign_type == 2U) {
        #line 957 
        ;
        #line 957 
        ;
        #line 957 
        alb_send_lp_vid(slave,mac_addr,(unsigned short)((int)vlan_dev_vlan_proto(upper)),(unsigned short)((int)vlan_dev_vlan_id(upper)));
      }
      else {
        #line 961 
        ;
        #line 961 
        ;
        #line 961 
        alb_send_lp_vid(slave,upper->dev_addr,(unsigned short)((int)vlan_dev_vlan_proto(upper)),(unsigned short)((int)vlan_dev_vlan_id(upper)));
      }
  #line 970 
  if ((int)netif_is_macvlan(upper) != 0) 
    #line 970 
    if (! strict_match) {
      #line 971 
      tags = bond_verify_device_path(bond->dev,upper,0);
      #line 972 
      if ((int)IS_ERR_OR_NULL_0((void *)tags) != 0) {
        #line 974 
        ldv_inline_asm();
        #line 975 
        ldv_inline_asm();
        #line 976 
        ldv_inline_asm();
        #line 973 
        ;
      }
      #line 974 
      alb_send_lp_vid(slave,upper->dev_addr,(unsigned short)((int)tags->vlan_proto),(unsigned short)((int)tags->vlan_id));
      #line 976 
      kfree((void *)tags);
    }
  #line 979 
  return 0;
}

#line 982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void alb_send_learning_packets(struct slave *slave, u8 *mac_addr, bool strict_match)
{
  #line 985 
  struct bonding *bond = bond_get_bond_by_slave(slave);
  #line 986 
  struct alb_walk_data data = {.bond = bond, .slave = slave, .mac_addr = mac_addr, .strict_match = strict_match};
  #line 994 
  alb_send_lp_vid(slave,mac_addr,(unsigned short)0,(unsigned short)0);
  #line 999 
  rcu_read_lock();
  #line 1000 
  netdev_walk_all_upper_dev_rcu(bond->dev,& alb_upper_dev_walk,(void *)(& data));
  #line 1001 
  rcu_read_unlock();
  #line 1002 
  return;
}

#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int alb_set_slave_mac_addr(struct slave *slave, u8 *addr, unsigned int len)
{
  #line 1008 
  struct __kernel_sockaddr_storage ss;
  #line 1007 
  struct net_device *dev = slave->dev;
  #line 1010 
  if ((slave->bond)->params.mode == 5) {
    #line 1011 
    memcpy((void *)dev->dev_addr,(void *)addr,(unsigned long)len);
    #line 1012 
    return 0;
  }
  #line 1018 
  memcpy((void *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(void *)addr,(unsigned long)len);
  #line 1019 
  ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = dev->type;
  #line 1020 
  if (dev_set_mac_address(dev,(struct sockaddr *)(& ss),
                          (struct netlink_ext_ack *)0) != 0) {
    #line 1021 
    netdev_err((slave->bond)->dev,(char *)"(slave %s): ",(char *)(& dev->name));
    #line 1022 
    return -95;
  }
  #line 1024 
  return 0;
}

#line 1031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void alb_swap_mac_addr(struct slave *slave1, struct slave *slave2)
{
  #line 1033 
  u8 tmp_mac_addr[32U];
  #line 1035 
  bond_hw_addr_copy((u8 *)(& tmp_mac_addr),(slave1->dev)->dev_addr,(unsigned int)(slave1->dev)->addr_len);
  #line 1037 
  alb_set_slave_mac_addr(slave1,(slave2->dev)->dev_addr,(unsigned int)(slave2->dev)->addr_len);
  #line 1039 
  alb_set_slave_mac_addr(slave2,(u8 *)(& tmp_mac_addr),(unsigned int)(slave1->dev)->addr_len);
  #line 1041 
  return;
}

#line 1048  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void alb_fasten_mac_swap(struct bonding *bond, struct slave *slave1, struct slave *slave2)
{
  #line 1051 
  int slaves_state_differ = (int)bond_slave_can_tx(slave1) != (int)bond_slave_can_tx(slave2);
  #line 1052 
  struct slave *disabled_slave = (struct slave *)0;
  {
    #line 1054 
    bool __warned;
    #line 1054 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1054 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1054 
      __warned = (_Bool)1;
      {
        #line 1054 
        int __ret_warn_on = 1;
        #line 1054 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1054 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1054);
          #line 1055 
          ldv_inline_asm();
          #line 1056 
          ldv_inline_asm();
        }
        #line 1054 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1054 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1057 
  if ((int)bond_slave_can_tx(slave1) != 0) {
    #line 1058 
    alb_send_learning_packets(slave1,(slave1->dev)->dev_addr,(_Bool)0);
    #line 1059 
    if (bond->alb_info.rlb_enabled != 0) 
                                         #line 1063 
                                         rlb_req_update_slave_clients(bond,slave1);
  }
  else 
       #line 1066 
       disabled_slave = slave1;
  #line 1069 
  if ((int)bond_slave_can_tx(slave2) != 0) {
    #line 1070 
    alb_send_learning_packets(slave2,(slave2->dev)->dev_addr,(_Bool)0);
    #line 1071 
    if (bond->alb_info.rlb_enabled != 0) 
                                         #line 1075 
                                         rlb_req_update_slave_clients(bond,slave2);
  }
  else 
       #line 1078 
       disabled_slave = slave2;
  #line 1081 
  if (bond->alb_info.rlb_enabled != 0 && slaves_state_differ != 0) 
                                                                   #line 1083 
                                                                   rlb_teach_disabled_mac_on_primary(bond,(disabled_slave->dev)->dev_addr);
  #line 1085 
  return;
}

#line 1102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static void alb_change_hw_addr_on_detach(struct bonding *bond, struct slave *slave)
{
  #line 1104 
  int perm_curr_diff;
  #line 1105 
  int perm_bond_diff;
  #line 1106 
  struct slave *found_slave;
  #line 1108 
  int tmp_0;
  #line 1110 
  int tmp_2;
  #line 1108 
  if (ether_addr_equal_64bits((u8 *)(& slave->perm_hwaddr),
                              (slave->dev)->dev_addr)) 
    #line 1108 
    tmp_0 = 0; else 
                    #line 1108 
                    tmp_0 = 1;
  #line 1108 
  perm_curr_diff = tmp_0;
  #line 1110 
  if (ether_addr_equal_64bits((u8 *)(& slave->perm_hwaddr),
                                (bond->dev)->dev_addr)) 
    #line 1110 
    tmp_2 = 0; else 
                    #line 1110 
                    tmp_2 = 1;
  #line 1110 
  perm_bond_diff = tmp_2;
  #line 1113 
  if (perm_curr_diff != 0 && perm_bond_diff != 0) {
    #line 1114 
    found_slave = bond_slave_has_mac(bond,(u8 *)(& slave->perm_hwaddr));
    #line 1116 
    if (found_slave != (struct slave *)0) {
      #line 1117 
      alb_swap_mac_addr(slave,found_slave);
      #line 1118 
      alb_fasten_mac_swap(bond,slave,found_slave);
    }
  }
  #line 1121 
  return;
}

#line 1145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int alb_handle_addr_collision_on_attach(struct bonding *bond, struct slave *slave)
{
  #line 1147 
  struct slave *_________p1;
  #line 1148 
  struct slave *tmp_slave1;
  #line 1149 
  struct list_head *iter;
  {
    #line 1148 
    union __anonunion___u_7075 __u;
    #line 1147 
    __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
    #line 1147 
    _________p1 = (__u.__val);
    }
  #line 1147 
  struct slave *has_bond_addr = _________p1;
  #line 1148 
  struct slave *free_mac_slave = (struct slave *)0;
  #line 1151 
  if (list_empty_2(& (bond->dev)->adj_list.lower) != 0) 
                                                        #line 1153 
                                                        return 0;
  #line 1160 
  if (! ether_addr_equal_64bits((u8 *)(& slave->perm_hwaddr),
                                (bond->dev)->dev_addr)) {
    #line 1161 
    if (bond_slave_has_mac(bond,(slave->dev)->dev_addr) == (struct slave *)0) 
      #line 1162 
      return 0;
    #line 1167 
    alb_set_slave_mac_addr(slave,(bond->dev)->dev_addr,(unsigned int)(bond->dev)->addr_len);
  }
  #line 1174 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1174 
  tmp_slave1 = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1174 
  while (tmp_slave1 != (struct slave *)0) {
    {
      #line 1175 
      if (bond_slave_has_mac(bond,(u8 *)(& tmp_slave1->perm_hwaddr)) == (struct slave *)0) {
        #line 1179 
        free_mac_slave = tmp_slave1;
        #line 1180 
        break;
      }
      #line 1183 
      if (has_bond_addr == (struct slave *)0) {
        #line 1184 
        if ((int)ether_addr_equal_64bits((tmp_slave1->dev)->dev_addr,
                                (bond->dev)->dev_addr) != 0) 
          #line 1187 
          has_bond_addr = tmp_slave1;
      }
    }
    #line 1174 
    tmp_slave1 = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1192 
  if (free_mac_slave != (struct slave *)0) {
    #line 1193 
    alb_set_slave_mac_addr(slave,(u8 *)(& free_mac_slave->perm_hwaddr),(unsigned int)(free_mac_slave->dev)->addr_len);
    #line 1196 
    netdev_warn(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name),(char *)(& (free_mac_slave->dev)->name));
  }
  else 
    #line 1199 
    if (has_bond_addr != (struct slave *)0) {
      #line 1200 
      netdev_err(bond->dev,(char *)"(slave %s): ",(char *)(& (slave->dev)->name));
      #line 1201 
      return -14;
    }
  #line 1204 
  return 0;
}

#line 1221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static int alb_set_mac_address(struct bonding *bond, void *addr)
{
  #line 1223 
  struct slave *slave;
  #line 1223 
  struct slave *rollback_slave;
  #line 1224 
  struct list_head *iter;
  #line 1225 
  struct __kernel_sockaddr_storage ss;
  #line 1226 
  char tmp_addr[32U];
  #line 1227 
  int res;
  #line 1229 
  if (bond->alb_info.rlb_enabled != 0) 
                                       #line 1230 
                                       return 0;
  #line 1232 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1232 
  slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1232 
  while (slave != (struct slave *)0) {
    #line 1234 
    bond_hw_addr_copy((u8 *)(& tmp_addr),(slave->dev)->dev_addr,(unsigned int)(slave->dev)->addr_len);
    #line 1237 
    res = dev_set_mac_address(slave->dev,(struct sockaddr *)addr,(struct netlink_ext_ack *)0);
    #line 1240 
    bond_hw_addr_copy((slave->dev)->dev_addr,(u8 *)(& tmp_addr),(unsigned int)(slave->dev)->addr_len);
    #line 1243 
    if (res != 0) 
                  #line 1244 
                  goto unwind;
    #line 1232 
    slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1247 
  return 0;
  #line 1249 
  unwind: 
          #line 1249 
  ;
  #line 1250 
  memcpy((void *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(void *)(bond->dev)->dev_addr,(unsigned long)(bond->dev)->addr_len);
  #line 1251 
  ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = (bond->dev)->type;
  #line 1254 
  iter = (bond->dev)->adj_list.lower.next;
  #line 1254 
  rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  #line 1254 
  while (rollback_slave != (struct slave *)0) {
    #line 1255 
    if (rollback_slave == slave) 
                                 #line 1256 
                                 break;
    #line 1257 
    bond_hw_addr_copy((u8 *)(& tmp_addr),(rollback_slave->dev)->dev_addr,(unsigned int)(rollback_slave->dev)->addr_len);
    #line 1259 
    dev_set_mac_address(rollback_slave->dev,(struct sockaddr *)(& ss),(struct netlink_ext_ack *)0);
    #line 1261 
    bond_hw_addr_copy((rollback_slave->dev)->dev_addr,(u8 *)(& tmp_addr),(unsigned int)(rollback_slave->dev)->addr_len);
    #line 1254 
    rollback_slave = (struct slave *)netdev_lower_get_next_private(bond->dev,& iter);
  }
  #line 1265 
  return res;
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
int bond_alb_initialize(struct bonding *bond, int rlb_enabled)
{
  #line 1272 
  int res;
  #line 1274 
  res = tlb_initialize(bond);
  #line 1275 
  if (res != 0) 
                #line 1276 
                return res;
  #line 1278 
  if (rlb_enabled != 0) {
    #line 1279 
    bond->alb_info.rlb_enabled = 1;
    #line 1280 
    res = rlb_initialize(bond);
    #line 1281 
    if (res != 0) {
      #line 1282 
      tlb_deinitialize(bond);
      #line 1283 
      return res;
    }
  }
  else 
       #line 1286 
       bond->alb_info.rlb_enabled = 0;
  #line 1289 
  return 0;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
void bond_alb_deinitialize(struct bonding *bond)
{
  #line 1294 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 1296 
  tlb_deinitialize(bond);
  #line 1298 
  if (bond_info->rlb_enabled != 0) 
                                   #line 1299 
                                   rlb_deinitialize(bond);
  #line 1300 
  return;
}

#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
static netdev_tx_t bond_do_alb_xmit(struct sk_buff *skb, struct bonding *bond, struct slave *tx_slave)
{
  #line 1305 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 1306 
  struct ethhdr *eth_data = eth_hdr(skb);
  #line 1308 
  if (tx_slave == (struct slave *)0) {
    #line 1310 
    struct slave *________p1;
    {
      #line 1311 
      union __anonunion___u_7077 __u;
      #line 1310 
      __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
      #line 1310 
      ________p1 = (__u.__val);
      {
        #line 1310 
        bool __warned;
        #line 1310 
        if (debug_lockdep_rcu_enabled() != 0) 
          #line 1310 
          if (! __warned) {
            #line 1310 
            if (rcu_read_lock_held() == 0) {
              #line 1310 
              __warned = (_Bool)1;
              #line 1310 
              lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1310,(char *)"suspicious rcu_dereference_check() usage");
            }
          }
      }
      }
    #line 1310 
    tx_slave = ________p1;
    #line 1311 
    if (bond->params.tlb_dynamic_lb != 0) 
                                          #line 1312 
                                          bond_info->unbalanced_load += skb->len;
  }
  #line 1315 
  if (tx_slave != (struct slave *)0) {
    #line 1315 
    if ((int)bond_slave_can_tx(tx_slave) != 0) {
      #line 1316 
      struct slave *_________p1;
      {
        #line 1317 
        union __anonunion___u_7079 __u_0;
        #line 1316 
        __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_0.__c),8);
        #line 1316 
        _________p1 = (__u_0.__val);
        }
      #line 1316 
      ;
      #line 1316 
      if (_________p1 != tx_slave) 
                                   #line 1317 
                                   ether_addr_copy((u8 *)(& eth_data->h_source),(tx_slave->dev)->dev_addr);
      #line 1321 
      bond_dev_queue_xmit(bond,skb,tx_slave->dev);
      #line 1322 
      goto out;
    }
  }
  #line 1325 
  if (tx_slave != (struct slave *)0 && bond->params.tlb_dynamic_lb != 0) {
    #line 1326 
    cif_spin_lock_mode_lock_of_bonding_0(& bond->mode_lock);
    #line 1327 
    __tlb_clear_slave(bond,tx_slave,0);
    #line 1328 
    cif_spin_unlock_mode_lock_of_bonding_0(& bond->mode_lock);
  }
  #line 1332 
  bond_tx_drop(bond->dev,skb);
  #line 1333 
  out: 
       #line 1333 
  ;
  #line 1334 
  return NETDEV_TX_OK;
}

#line 1337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
enum netdev_tx bond_tlb_xmit(struct sk_buff *skb, struct net_device *bond_dev)
{
  #line 1340 
  struct ethhdr *eth_data;
  #line 1342 
  u32 hash_index;
  #line 1339 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1341 
  struct slave *tx_slave = (struct slave *)0;
  #line 1344 
  skb_reset_mac_header(skb);
  #line 1345 
  eth_data = eth_hdr(skb);
  #line 1348 
  if (! is_multicast_ether_addr((u8 *)(& eth_data->h_dest))) 
    #line 1349 
    switch ((int)skb->protocol) {
      #line 1350 
      case 8: 
              #line 1350 
      ;
      #line 1351 
      case 14209: 
                  #line 1351 
      ;
      #line 1353 
      case 56710: 
                  #line 1353 
      ;
      #line 1354 
      hash_index = bond_xmit_hash(bond,skb);
      #line 1355 
      if (bond->params.tlb_dynamic_lb != 0) 
                                            #line 1356 
                                            tx_slave = tlb_choose_channel(bond,hash_index & 255U,skb->len);
      else {
        #line 1363 
        struct bond_up_slave *________p1;
        #line 1360 
        struct bond_up_slave *slaves;
        #line 1361 
        unsigned int count;
        {
          #line 1364 
          union __anonunion___u_7081 __u;
          #line 1363 
          __read_once_size((void *)(& bond->slave_arr),(void *)(& __u.__c),8);
          #line 1363 
          ________p1 = (__u.__val);
          {
            #line 1363 
            bool __warned;
            #line 1363 
            if (debug_lockdep_rcu_enabled() != 0) 
              #line 1363 
              if (! __warned) {
                #line 1363 
                if (rcu_read_lock_held() == 0) {
                  #line 1363 
                  __warned = (_Bool)1;
                  #line 1363 
                  lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1363,(char *)"suspicious rcu_dereference_check() usage");
                }
              }
          }
          }
        #line 1363 
        slaves = ________p1;
        #line 1364 
        if (slaves != (struct bond_up_slave *)0) {
          #line 1365 
          union __anonunion___u_7083 __u_0;
          #line 1364 
          __read_once_size((void *)(& slaves->count),(void *)(& __u_0.__c),4);
          #line 1364 
          count = (__u_0.__val);
        }
        else 
             #line 1364 
             count = 0U;
        #line 1365 
        if ((long)(count != 0U) != 0L) 
                                       #line 1366 
                                       tx_slave = slaves->arr[hash_index % count];
      }
      #line 1369 
      break;
    }
  #line 1372 
  return bond_do_alb_xmit(skb,bond,tx_slave);
}

#line 1375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
enum netdev_tx bond_alb_xmit(struct sk_buff *skb, struct net_device *bond_dev)
{
  #line 1378 
  struct ethhdr *eth_data;
  #line 1386 
  struct ipv6hdr *ip6hdr;
  #line 1377 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1379 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 1380 
  struct slave *tx_slave = (struct slave *)0;
  #line 1381 
  __be32 ip_bcast = 4294967295U;
  #line 1382 
  int hash_size = 0;
  #line 1383 
  bool do_tx_balance = (_Bool)1;
  #line 1384 
  u32 hash_index = 0U;
  #line 1385 
  u8 *hash_start = (u8 *)0U;
  #line 1388 
  skb_reset_mac_header(skb);
  #line 1389 
  eth_data = eth_hdr(skb);
  #line 1391 
  switch ((int)__builtin_bswap16((unsigned short)((int)skb->protocol))) {
    #line 1392 
    case 2048: 
               #line 1392 
    ;
    {
      #line 1393 
      struct iphdr *iph = ip_hdr(skb);
      #line 1395 
      if ((int)is_broadcast_ether_addr((u8 *)(& eth_data->h_dest)) != 0) 
        #line 1395 
        goto _LOR;
      else 
        #line 1395 
        if (iph->daddr == 4294967295U) 
                                       #line 1395 
                                       goto _LOR;
        else 
          #line 1396 
          if ((unsigned int)iph->protocol == 2U) {
            #line 1395 
            _LOR: {
                    #line 1398 
                    do_tx_balance = (_Bool)0;
                    #line 1399 
                    break;
                  }
          }
      #line 1401 
      hash_start = (u8 *)(& iph->daddr);
      #line 1402 
      hash_size = 4;
    }
    #line 1404 
    break;
    #line 1405 
    case 34525: 
                #line 1405 
    ;
    #line 1409 
    if ((int)is_broadcast_ether_addr((u8 *)(& eth_data->h_dest)) != 0) {
      #line 1410 
      do_tx_balance = (_Bool)0;
      #line 1411 
      break;
    }
    #line 1417 
    if ((int)ether_addr_equal_64bits((u8 *)(& eth_data->h_dest),
                                (u8 *)(& mac_v6_allmcast)) != 0) {
      #line 1418 
      do_tx_balance = (_Bool)0;
      #line 1419 
      break;
    }
    #line 1426 
    ip6hdr = ipv6_hdr(skb);
    #line 1427 
    if ((int)ipv6_addr_any(& ip6hdr->saddr) != 0) {
      #line 1428 
      do_tx_balance = (_Bool)0;
      #line 1429 
      break;
    }
    #line 1432 
    hash_start = (u8 *)(& ipv6_hdr(skb)->daddr);
    #line 1433 
    hash_size = 16;
    #line 1434 
    break;
    #line 1435 
    case 33079: 
                #line 1435 
    ;
    #line 1436 
    ;
    #line 1436 
    if ((unsigned int)ipx_hdr(skb)->ipx_checksum != 65535U) {
      #line 1438 
      do_tx_balance = (_Bool)0;
      #line 1439 
      break;
    }
    #line 1442 
    ;
    #line 1442 
    if ((unsigned int)ipx_hdr(skb)->ipx_type != 17U) {
      #line 1447 
      do_tx_balance = (_Bool)0;
      #line 1448 
      break;
    }
    #line 1451 
    hash_start = (u8 *)(& eth_data->h_dest);
    #line 1452 
    hash_size = 6;
    #line 1453 
    break;
    #line 1454 
    case 2054: 
               #line 1454 
    ;
    #line 1455 
    do_tx_balance = (_Bool)0;
    #line 1456 
    if (bond_info->rlb_enabled != 0) 
                                     #line 1457 
                                     tx_slave = rlb_arp_xmit(skb,bond);
    #line 1458 
    break;
    #line 1459 
    default: 
             #line 1459 
    ;
    #line 1460 
    do_tx_balance = (_Bool)0;
    #line 1461 
    break;
  }
  #line 1464 
  if ((int)do_tx_balance != 0) 
    #line 1465 
    if (bond->params.tlb_dynamic_lb != 0) {
      #line 1466 
      hash_index = (unsigned int)_simple_hash(hash_start,hash_size);
      #line 1467 
      tx_slave = tlb_choose_channel(bond,hash_index,skb->len);
    }
    else {
      #line 1477 
      struct bond_up_slave *________p1;
      #line 1474 
      struct bond_up_slave *slaves;
      #line 1475 
      unsigned int count;
      {
        #line 1478 
        union __anonunion___u_7085 __u;
        #line 1477 
        __read_once_size((void *)(& bond->slave_arr),(void *)(& __u.__c),8);
        #line 1477 
        ________p1 = (__u.__val);
        {
          #line 1477 
          bool __warned;
          #line 1477 
          if (debug_lockdep_rcu_enabled() != 0) 
            #line 1477 
            if (! __warned) {
              #line 1477 
              if (rcu_read_lock_held() == 0) {
                #line 1477 
                __warned = (_Bool)1;
                #line 1477 
                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1477,(char *)"suspicious rcu_dereference_check() usage");
              }
            }
        }
        }
      #line 1477 
      slaves = ________p1;
      #line 1478 
      if (slaves != (struct bond_up_slave *)0) {
        #line 1479 
        union __anonunion___u_7087 __u_0;
        #line 1478 
        __read_once_size((void *)(& slaves->count),(void *)(& __u_0.__c),4);
        #line 1478 
        count = (__u_0.__val);
      }
      else 
           #line 1478 
           count = 0U;
      #line 1479 
      if ((long)(count != 0U) != 0L) {
        #line 1480 
        tx_slave = slaves->arr[bond_xmit_hash(bond,skb) % count];
      }
    }
  #line 1485 
  return bond_do_alb_xmit(skb,bond,tx_slave);
}

#line 1488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
void bond_alb_monitor(struct work_struct *work)
{
  #line 1490 
  void *__mptr;
  #line 1493 
  struct list_head *iter;
  #line 1494 
  struct slave *slave;
  #line 1490 
  __mptr = (void *)work;
  #line 1490 
  struct bonding *bond = ((struct bonding *)(__mptr + 18446744073709550632U));
  #line 1492 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 1496 
  if (list_empty_2(& (bond->dev)->adj_list.lower) != 0) {
    #line 1497 
    bond_info->tx_rebalance_counter = 0;
    #line 1498 
    bond_info->lp_counter = 0;
    #line 1499 
    goto re_arm;
  }
  #line 1502 
  rcu_read_lock();
  #line 1504 
  (bond_info->tx_rebalance_counter) ++;
  #line 1505 
  (bond_info->lp_counter) ++;
  #line 1508 
  if (bond_info->lp_counter >= bond->params.lp_interval * 10) {
    #line 1509 
    bool strict_match;
    #line 1511 
    iter = & (bond->dev)->adj_list.lower;
    #line 1511 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    #line 1511 
    while (slave != (struct slave *)0) {
      {
        #line 1517 
        struct slave *_________p1;
        #line 1517 
        int tmp_5;
        {
          #line 1518 
          union __anonunion___u_7089 __u;
          #line 1517 
          __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
          #line 1517 
          _________p1 = (__u.__val);
          }
        #line 1517 
        ;
        #line 1517 
        if (_________p1 != slave) 
                                  #line 1517 
                                  tmp_5 = 1;
        else 
          #line 1517 
          if (bond_info->rlb_enabled != 0) 
                                           #line 1517 
                                           tmp_5 = 1; else 
                                                           #line 1517 
                                                           tmp_5 = 0;
        #line 1517 
        strict_match = (_Bool)(tmp_5 != 0);
        #line 1519 
        alb_send_learning_packets(slave,(slave->dev)->dev_addr,(_Bool)((bool)((int)strict_match) != 0));
      }
      #line 1511 
      slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    }
    #line 1522 
    bond_info->lp_counter = 0;
  }
  #line 1526 
  if (bond_info->tx_rebalance_counter > 99) {
    #line 1527 
    iter = & (bond->dev)->adj_list.lower;
    #line 1527 
    slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    #line 1527 
    while (slave != (struct slave *)0) {
      {
        #line 1529 
        struct slave *_________p1_0;
        #line 1528 
        tlb_clear_slave(bond,slave,1);
        {
          #line 1530 
          union __anonunion___u_7091 __u_0;
          #line 1529 
          __read_once_size((void *)(& bond->curr_active_slave),(void *)(& __u_0.__c),8);
          #line 1529 
          _________p1_0 = (__u_0.__val);
          }
        #line 1529 
        ;
        #line 1529 
        if (_________p1_0 == slave) {
          #line 1530 
          slave->tlb_info.load = bond_info->unbalanced_load / 10U;
          #line 1533 
          bond_info->unbalanced_load = 0U;
        }
      }
      #line 1527 
      slave = (struct slave *)netdev_lower_get_next_private_rcu(bond->dev,& iter);
    }
    #line 1536 
    bond_info->tx_rebalance_counter = 0;
  }
  #line 1539 
  if (bond_info->rlb_enabled != 0) {
    #line 1540 
    if ((unsigned int)bond_info->primary_is_promisc != 0U) {
      #line 1541 
      (bond_info->rlb_promisc_timeout_counter) ++;
      #line 1541 
      if (bond_info->rlb_promisc_timeout_counter > 99U) {
        #line 1546 
        rcu_read_unlock();
        #line 1547 
        if (rtnl_trylock() == 0) 
                                 #line 1548 
                                 goto re_arm;
        #line 1550 
        bond_info->rlb_promisc_timeout_counter = 0U;
        {
          #line 1556 
          bool __warned;
          #line 1556 
          if (debug_lockdep_rcu_enabled() != 0) 
            #line 1556 
            if (! __warned) {
              #line 1556 
              if (! lockdep_rtnl_is_held()) {
                #line 1556 
                __warned = (_Bool)1;
                #line 1556 
                lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1556,(char *)"suspicious rcu_dereference_protected() usage");
              }
            }
        }
        #line 1556 
        dev_set_promiscuity((bond->curr_active_slave)->dev,-1);
        #line 1558 
        bond_info->primary_is_promisc = (unsigned char)0U;
        #line 1560 
        rtnl_unlock();
        #line 1561 
        rcu_read_lock();
      }
    }
    #line 1564 
    if ((unsigned int)bond_info->rlb_rebalance != 0U) {
      #line 1565 
      bond_info->rlb_rebalance = (unsigned char)0U;
      #line 1566 
      rlb_rebalance(bond);
    }
    #line 1570 
    if ((unsigned int)bond_info->rx_ntt != 0U) 
      #line 1571 
      if (bond_info->rlb_update_delay_counter != 0U) 
                                                     #line 1572 
                                                     (bond_info->rlb_update_delay_counter) --;
      else {
        #line 1574 
        rlb_update_rx_clients(bond);
        #line 1575 
        if (bond_info->rlb_update_retry_counter != 0U) 
                                                       #line 1576 
                                                       (bond_info->rlb_update_retry_counter) --; else 
                                                                    #line 1578 
                                                                    bond_info->rx_ntt = (unsigned char)0U;
      }
  }
  #line 1582 
  rcu_read_unlock();
  #line 1583 
  re_arm: 
          #line 1583 
  ;
  #line 1584 
  cif_queue_delayed_work_2(bond->wq,& bond->alb_work,25UL);
  #line 1585 
  return;
}

#line 1590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
int bond_alb_init_slave(struct bonding *bond, struct slave *slave)
{
  #line 1592 
  int res;
  #line 1594 
  res = alb_set_slave_mac_addr(slave,(u8 *)(& slave->perm_hwaddr),(unsigned int)(slave->dev)->addr_len);
  #line 1596 
  if (res != 0) 
                #line 1597 
                return res;
  #line 1599 
  res = alb_handle_addr_collision_on_attach(bond,slave);
  #line 1600 
  if (res != 0) 
                #line 1601 
                return res;
  #line 1603 
  tlb_init_slave(slave);
  #line 1606 
  bond->alb_info.tx_rebalance_counter = 100;
  #line 1608 
  if (bond->alb_info.rlb_enabled != 0) 
                                       #line 1609 
                                       bond->alb_info.rlb_rebalance = (unsigned char)1U;
  #line 1611 
  return 0;
}

#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
void bond_alb_deinit_slave(struct bonding *bond, struct slave *slave)
{
  #line 1621 
  if (list_empty_2(& (bond->dev)->adj_list.lower) == 0) 
                                                        #line 1622 
                                                        alb_change_hw_addr_on_detach(bond,slave);
  #line 1624 
  tlb_clear_slave(bond,slave,0);
  #line 1626 
  if (bond->alb_info.rlb_enabled != 0) {
    #line 1627 
    bond->alb_info.rx_slave = (struct slave *)0;
    #line 1628 
    rlb_clear_slave(bond,slave);
  }
  #line 1630 
  return;
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
void bond_alb_handle_link_change(struct bonding *bond, struct slave *slave, char link)
{
  #line 1635 
  struct alb_bond_info *bond_info = & bond->alb_info;
  #line 1637 
  if ((int)link == 2) {
    #line 1638 
    tlb_clear_slave(bond,slave,0);
    #line 1639 
    if (bond->alb_info.rlb_enabled != 0) 
                                         #line 1640 
                                         rlb_clear_slave(bond,slave);
  }
  else 
    #line 1641 
    if ((int)link == 0) {
      #line 1643 
      bond_info->tx_rebalance_counter = 100;
      #line 1644 
      if (bond->alb_info.rlb_enabled != 0) 
                                           #line 1645 
                                           bond->alb_info.rlb_rebalance = (unsigned char)1U;
    }
  #line 1654 
  if ((int)bond_is_nondyn_tlb(bond) != 0) {
    #line 1655 
    if (bond_update_slave_arr(bond,(struct slave *)0) != 0) 
                                                            #line 1656 
                                                            printk((char *)"\001");
  }
  #line 1657 
  return;
}

#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
void bond_alb_handle_active_change(struct bonding *bond, struct slave *new_slave)
{
  #line 1672 
  struct slave *swap_slave;
  #line 1673 
  struct slave *curr_active;
  {
    #line 1675 
    bool __warned;
    #line 1675 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 1675 
      if (! __warned) {
        #line 1675 
        if (! lockdep_rtnl_is_held()) {
          #line 1675 
          __warned = (_Bool)1;
          #line 1675 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1675,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 1675 
  curr_active = bond->curr_active_slave;
  #line 1676 
  if (curr_active == new_slave) 
                                #line 1677 
                                return;
  #line 1679 
  if (curr_active != (struct slave *)0 && (unsigned int)bond->alb_info.primary_is_promisc != 0U) {
    #line 1680 
    dev_set_promiscuity(curr_active->dev,-1);
    #line 1681 
    bond->alb_info.primary_is_promisc = (unsigned char)0U;
    #line 1682 
    bond->alb_info.rlb_promisc_timeout_counter = 0U;
  }
  #line 1685 
  swap_slave = curr_active;
  {
    #line 1686 
    uintptr_t _r_a_p__v = (unsigned long)new_slave;
    #line 1688 
    ldv_inline_asm();
    {
      #line 1687 
      union __anonunion___u_7095 __u = {.__val = (struct slave *)_r_a_p__v};
      #line 1686 
      __write_once_size((void *)(& bond->curr_active_slave),(void *)(& __u.__c),8);
      #line 1686 
      struct slave *tmp_4 = __u.__val;
    }
  }
  #line 1688 
  if (new_slave == (struct slave *)0) 
                                      #line 1689 
                                      return;
  else {
    #line 1688 
    if (list_empty_2(& (bond->dev)->adj_list.lower) != 0) 
                                                          #line 1689 
                                                          return;
  }
  #line 1694 
  if (swap_slave == (struct slave *)0) 
                                       #line 1695 
                                       swap_slave = bond_slave_has_mac(bond,(bond->dev)->dev_addr);
  #line 1701 
  if (swap_slave != (struct slave *)0) 
                                       #line 1702 
                                       tlb_clear_slave(bond,swap_slave,1);
  #line 1703 
  tlb_clear_slave(bond,new_slave,1);
  #line 1708 
  if (bond->params.mode == 5) {
    #line 1709 
    struct __kernel_sockaddr_storage ss;
    #line 1710 
    u8 tmp_addr[32U];
    #line 1712 
    bond_hw_addr_copy((u8 *)(& tmp_addr),(new_slave->dev)->dev_addr,(unsigned int)(new_slave->dev)->addr_len);
    #line 1715 
    bond_hw_addr_copy((u8 *)(& ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(bond->dev)->dev_addr,(unsigned int)(bond->dev)->addr_len);
    #line 1717 
    ss.__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.ss_family = (bond->dev)->type;
    #line 1719 
    dev_set_mac_address(new_slave->dev,(struct sockaddr *)(& ss),(struct netlink_ext_ack *)0);
    #line 1722 
    bond_hw_addr_copy((new_slave->dev)->dev_addr,(u8 *)(& tmp_addr),(unsigned int)(new_slave->dev)->addr_len);
  }
  #line 1727 
  if (swap_slave != (struct slave *)0) {
    #line 1729 
    alb_swap_mac_addr(swap_slave,new_slave);
    #line 1730 
    alb_fasten_mac_swap(bond,swap_slave,new_slave);
  }
  else {
    #line 1733 
    alb_set_slave_mac_addr(new_slave,(bond->dev)->dev_addr,(unsigned int)(bond->dev)->addr_len);
    #line 1735 
    alb_send_learning_packets(new_slave,(bond->dev)->dev_addr,(_Bool)0);
  }
  #line 1737 
  return;
}

#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
int bond_alb_set_mac_address(struct net_device *bond_dev, void *addr)
{
  #line 1745 
  struct slave *curr_active;
  #line 1746 
  struct slave *swap_slave;
  #line 1747 
  int res;
  #line 1743 
  struct bonding *bond = netdev_priv(bond_dev);
  #line 1744 
  struct __kernel_sockaddr_storage *ss = (struct __kernel_sockaddr_storage *)addr;
  #line 1749 
  if (! is_valid_ether_addr((u8 *)(& ss->__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data))) 
    #line 1750 
    return -99;
  #line 1752 
  res = alb_set_mac_address(bond,addr);
  #line 1753 
  if (res != 0) 
                #line 1754 
                return res;
  #line 1756 
  bond_hw_addr_copy(bond_dev->dev_addr,(u8 *)(& ss->__anonCompField___kernel_sockaddr_storage_85.__anonCompField___anonunion_1193_84.__data),(unsigned int)bond_dev->addr_len);
  {
    #line 1762 
    bool __warned;
    #line 1762 
    if (debug_lockdep_rcu_enabled() != 0) 
      #line 1762 
      if (! __warned) {
        #line 1762 
        if (! lockdep_rtnl_is_held()) {
          #line 1762 
          __warned = (_Bool)1;
          #line 1762 
          lockdep_rcu_suspicious((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c",1762,(char *)"suspicious rcu_dereference_protected() usage");
        }
      }
  }
  #line 1762 
  curr_active = bond->curr_active_slave;
  #line 1763 
  if (curr_active == (struct slave *)0) 
                                        #line 1764 
                                        return 0;
  #line 1766 
  swap_slave = bond_slave_has_mac(bond,bond_dev->dev_addr);
  #line 1768 
  if (swap_slave != (struct slave *)0) {
    #line 1769 
    alb_swap_mac_addr(swap_slave,curr_active);
    #line 1770 
    alb_fasten_mac_swap(bond,swap_slave,curr_active);
  }
  else {
    #line 1772 
    alb_set_slave_mac_addr(curr_active,bond_dev->dev_addr,(unsigned int)bond_dev->addr_len);
    #line 1775 
    alb_send_learning_packets(curr_active,bond_dev->dev_addr,(_Bool)0);
    #line 1777 
    if (bond->alb_info.rlb_enabled != 0) 
                                         #line 1779 
                                         rlb_req_update_slave_clients(bond,curr_active);
  }
  #line 1783 
  return 0;
}

#line 1786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/bonding/bond_alb.c"
void bond_alb_clear_vlan(struct bonding *bond, unsigned short vlan_id)
{
  #line 1788 
  if (bond->alb_info.rlb_enabled != 0) 
                                       #line 1789 
                                       rlb_clear_vlan(bond,(unsigned short)((int)vlan_id));
  #line 1790 
  return;
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static bool IS_ERR_OR_NULL_0(void *ptr)
{
  #line 220 
  return ldv_is_err_or_null(ptr);
}

#line 296  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static bool cif_queue_delayed_work_2(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 300 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 385  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 388 
  return ldv_kmalloc(size,flags);
}

#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 423 
  return ldv_kzalloc(size,flags);
}

#line 791  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_lock_bh_mode_lock_of_bonding_0(spinlock_t *lock)
{
  #line 794 
  ldv_spin_model_lock((char *)"mode_lock_of_bonding");
  #line 796 
  spin_lock_bh_1(lock);
  #line 797 
  return;
}

#line 800  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_unlock_bh_mode_lock_of_bonding_0(spinlock_t *lock)
{
  #line 803 
  ldv_spin_model_unlock((char *)"mode_lock_of_bonding");
  #line 805 
  spin_unlock_bh_1(lock);
  #line 806 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_lock_mode_lock_of_bonding_0(spinlock_t *lock)
{
  #line 812 
  ldv_spin_model_lock((char *)"mode_lock_of_bonding");
  #line 814 
  spin_lock_1(lock);
  #line 815 
  return;
}

#line 818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/0/concurrency safety/weaver/bond_alb.i.aux"
static void cif_spin_unlock_mode_lock_of_bonding_0(spinlock_t *lock)
{
  #line 821 
  ldv_spin_model_unlock((char *)"mode_lock_of_bonding");
  #line 823 
  spin_unlock_1(lock);
  #line 824 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/emg/0/environment_model.c"
#line 109 
void *emg_entry_point_insmod(void *arg0);
#line 22 
#line 138 
int main(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_netdev_mqs(int arg0, char *arg1, unsigned char arg2, void (*arg3)(struct net_device *), unsigned int arg4, unsigned int arg5)
{
  #line 29 
  struct net_device *emg_2_netdev;
  #line 30 
  void (*emg_2_setup)(struct net_device *);
  #line 32 
  emg_2_setup = & emg_wrapper_bond_setup;
  #line 33 
  if (ldv_undef_int() != 0) {
    #line 35 
    emg_2_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 36 
    emg_2_setup = arg3;
    #line 40 
    emg_wrapper_bond_setup(emg_2_netdev);
    #line 44 
    return emg_2_netdev;
  }
  else 
       #line 48 
       return (struct net_device *)0;
}

#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 59 
  struct net_device *emg_3_netdev;
  #line 62 
  emg_3_netdev = arg0;
  #line 63 
  ldv_free((void *)emg_3_netdev);
  #line 66 
  return;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 74 
  struct delayed_work *emg_4_delayed_work;
  #line 75 
  struct work_struct *emg_4_emg_param_0_0;
  #line 77 
  if (ldv_undef_int() != 0) {
    #line 79 
    emg_4_delayed_work = arg1;
    #line 83 
    emg_4_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 83 
    emg_4_emg_param_0_0 = emg_4_emg_param_0_0;
    #line 87 
    if (emg_4_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 88 
      (*(emg_4_delayed_work->work.func))(emg_4_emg_param_0_0);
    #line 93 
    ldv_free((void *)emg_4_emg_param_0_0);
    #line 97 
    return (_Bool)1;
  }
  else 
       #line 101 
       return (_Bool)0;
}

#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 112 
  int emg_1_ret;
  #line 115 
  emg_1_ret = emg_bonding_init();
  #line 116 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 119 
  if (ldv_undef_int() != 0) {
    #line 121 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 125 
    emg_bonding_exit();
  }
  else 
       #line 129 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 133 
  return (void *)0;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/bonding/bonding.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 140 
  ldv_initialize();
  #line 142 
  emg_entry_point_insmod((void *)0);
  #line 144 
  return 0;
}

