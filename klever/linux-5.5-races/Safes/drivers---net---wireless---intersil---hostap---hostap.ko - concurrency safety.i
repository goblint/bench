/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_proc.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_162 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_162 seqlock_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_164 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_163 {
   struct __anonstruct_164 __anonCompField___anonunion_163_26 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_163 __anonCompField_lockref_27 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_166 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_165 {
   struct __anonstruct_166 __anonCompField___anonunion_165_28 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_165 __anonCompField_qstr_29 ;
   unsigned char *name ;
};
#line 89 
struct inode;
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_167 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_168 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_167 __anonCompField_dentry_30 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_168 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_171 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_171 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_172 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_172 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct __anonstruct_nodemask_t_173 {
   unsigned long bits[16U] ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
typedef struct __anonstruct_nodemask_t_173 nodemask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct mem_cgroup;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_186 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_187 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_185 {
   struct __anonstruct_186 __anonCompField___anonunion_185_33 ;
   struct __anonstruct_187 __anonCompField___anonunion_185_34 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_185 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_188 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_188 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_190 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_193 {
   struct list_head slab_list ;
   struct __anonstruct_194 __anonCompField___anonunion_193_38 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_195 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_196 __anonCompField___anonunion_195_40 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_192 {
   union __anonunion_193 __anonCompField___anonstruct_192_39 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_195 __anonCompField___anonstruct_192_41 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_197 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_200 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_199 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_200 __anonCompField___anonstruct_199_45 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_189 {
   struct __anonstruct_190 __anonCompField___anonunion_189_36 ;
   struct __anonstruct_191 __anonCompField___anonunion_189_37 ;
   struct __anonstruct_192 __anonCompField___anonunion_189_42 ;
   struct __anonstruct_197 __anonCompField___anonunion_189_43 ;
   struct __anonstruct_198 __anonCompField___anonunion_189_44 ;
   struct __anonstruct_199 __anonCompField___anonunion_189_46 ;
   struct __anonstruct_201 __anonCompField___anonunion_189_47 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_202 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_189 __anonCompField_page_48 ;
   union __anonunion_202 __anonCompField_page_49 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_203 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_203 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_204 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_204 __anonCompField_mm_struct_50 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_307 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_307 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_310 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_310 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_312 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_313 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_314 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_317 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_318 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_316 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_317 _addr_bnd ;
   struct __anonstruct__addr_pkey_318 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_315 {
   void *_addr ;
   union __anonunion_316 __anonCompField___anonstruct__sigfault_315_54 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_319 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_320 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_311 _kill ;
   struct __anonstruct__timer_312 _timer ;
   struct __anonstruct__rt_313 _rt ;
   struct __anonstruct__sigchld_314 _sigchld ;
   struct __anonstruct__sigfault_315 _sigfault ;
   struct __anonstruct__sigpoll_319 _sigpoll ;
   struct __anonstruct__sigsys_320 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_325 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_325 __anonCompField_kernel_siginfo_57 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_330 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_330 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_332 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_332 __anonCompField_task_struct_59 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_339 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_340 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_339 __anonCompField_io_cq_60 ;
   union __anonunion_340 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 288 
struct export_operations;
#line 290 
struct iovec;
#line 291 
struct kiocb;
#line 292 
struct kobject;
#line 294 
struct kstatfs;
#line 295 
struct swap_info_struct;
#line 296 
struct iov_iter;
#line 297 
struct fscrypt_info;
#line 298 
struct fscrypt_operations;
#line 299 
struct fsverity_info;
#line 300 
struct fsverity_operations;
#line 301 
struct fs_context;
#line 302 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_341 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_341 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_342 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_342 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_347 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_348 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_349 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_350 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_347 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_348 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_349 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_350 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_351 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_351 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_353 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_352 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_353 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_352 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 3629 
struct proc_dir_entry;
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/proc_fs.h"
struct ns_common;
#line 151 
struct percpu_ref;
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/proc_fs.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_428 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_430 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_429 {
   unsigned long nr_segs ;
   struct __anonstruct_430 __anonCompField___anonunion_429_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_428 __anonCompField_iov_iter_67 ;
   union __anonunion_429 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_433 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_433 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_434 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_434 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_435 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_435 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_436 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_436 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_437 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_437 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_438 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_438 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_439 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_439 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_440 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_440 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_441 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_442 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_441 ifr_ifrn ;
   union __anonunion_ifr_ifru_442 ifr_ifru ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_474 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_474 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_477 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_477 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_478 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_478 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_500 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_499 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_500 __anonCompField___anonstruct_499_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   struct __anonstruct_499 __anonCompField___anonunion_498_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_501 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_502 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_504 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_503 {
   struct __anonstruct_504 __anonCompField___anonunion_503_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_506 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_505 {
   __wsum csum ;
   struct __anonstruct_506 __anonCompField___anonunion_505_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_507 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_508 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_509 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_498 __anonCompField_sk_buff_87 ;
   union __anonunion_501 __anonCompField_sk_buff_88 ;
   union __anonunion_502 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_503 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_505 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_507 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_508 __anonCompField_sk_buff_95 ;
   union __anonunion_509 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14542 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14543 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14542 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14543 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypto_ops {
   char *name ;
   struct list_head list ;
   void *(*init)(int ) ;
   void (*deinit)(void *) ;
   int (*encrypt_mpdu)(struct sk_buff *, int , void *) ;
   int (*decrypt_mpdu)(struct sk_buff *, int , void *) ;
   int (*encrypt_msdu)(struct sk_buff *, int , void *) ;
   int (*decrypt_msdu)(struct sk_buff *, int , int , void *) ;
   int (*set_key)(void *, int , u8 *, void *) ;
   int (*get_key)(void *, int , u8 *, void *) ;
   void (*print_stats)(struct seq_file *, void *) ;
   unsigned long (*get_flags)(void *) ;
   unsigned long (*set_flags)(unsigned long , void *) ;
   int extra_mpdu_prefix_len ;
   int extra_mpdu_postfix_len ;
   int extra_msdu_prefix_len ;
   int extra_msdu_postfix_len ;
   struct module *owner ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypt_data {
   struct list_head list ;
   struct lib80211_crypto_ops *ops ;
   void *priv ;
   atomic_t refcnt ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
struct lib80211_crypt_info {
   char *name ;
   spinlock_t *lock ;
   struct lib80211_crypt_data *crypt[4U] ;
   int tx_keyidx ;
   struct list_head crypt_deinit_list ;
   struct timer_list crypt_deinit_timer ;
   int crypt_quiesced ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_param {
   __s32 value ;
   __u8 fixed ;
   __u8 disabled ;
   __u16 flags ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_point {
   void *pointer ;
   __u16 length ;
   __u16 flags ;
};
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_freq {
   __s32 m ;
   __s16 e ;
   __u8 i ;
   __u8 flags ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_quality {
   __u8 qual ;
   __u8 level ;
   __u8 noise ;
   __u8 updated ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_discarded {
   __u32 nwid ;
   __u32 code ;
   __u32 fragment ;
   __u32 retries ;
   __u32 misc ;
};
#line 737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_missed {
   __u32 beacon ;
};
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_statistics {
   __u16 status ;
   struct iw_quality qual ;
   struct iw_discarded discard ;
   struct iw_missed miss ;
};
#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
union iwreq_data {
   char name[16U] ;
   struct iw_point essid ;
   struct iw_param nwid ;
   struct iw_freq freq ;
   struct iw_param sens ;
   struct iw_param bitrate ;
   struct iw_param txpower ;
   struct iw_param rts ;
   struct iw_param frag ;
   __u32 mode ;
   struct iw_param retry ;
   struct iw_point encoding ;
   struct iw_param power ;
   struct iw_quality qual ;
   struct sockaddr ap_addr ;
   struct sockaddr addr ;
   struct iw_param param ;
   struct iw_point data ;
};
#line 1057  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_priv_args {
   __u32 cmd ;
   __u16 set_args ;
   __u16 get_args ;
   char name[16U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_request_info {
   __u16 cmd ;
   __u16 flags ;
};
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
typedef int (*iw_handler)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_handler_def {
   iw_handler *standard ;
   __u16 num_standard ;
   __u16 num_private ;
   __u16 num_private_args ;
   iw_handler *private ;
   struct iw_priv_args *private_args ;
   struct iw_statistics *(*get_wireless_stats)(struct net_device *) ;
};
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_spy_data {
   int spy_number ;
   u_char spy_address[8U][6U] ;
   struct iw_quality spy_stat[8U] ;
   struct iw_quality spy_thr_low ;
   struct iw_quality spy_thr_high ;
   u_char spy_thr_under[8U] ;
};
#line 406 
struct libipw_device;
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
struct iw_public_data {
   struct iw_spy_data *spy_data ;
   struct libipw_device *libipw ;
};
#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct prism2_download_area {
   u32 addr ;
   u32 len ;
   void *ptr ;
};
#line 317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct prism2_download_param {
   u32 dl_cmd ;
   u32 start_addr ;
   u32 num_areas ;
   struct prism2_download_area data[0U] ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_hostscan_result {
   __le16 chid ;
   __le16 anl ;
   __le16 sl ;
   u8 bssid[6U] ;
   __le16 beacon_interval ;
   __le16 capability ;
   __le16 ssid_len ;
   u8 ssid[32U] ;
   u8 sup_rates[10U] ;
   __le16 rate ;
   __le16 atim ;
} __attribute__((__packed__));
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct comm_tallies_sums {
   unsigned int tx_unicast_frames ;
   unsigned int tx_multicast_frames ;
   unsigned int tx_fragments ;
   unsigned int tx_unicast_octets ;
   unsigned int tx_multicast_octets ;
   unsigned int tx_deferred_transmissions ;
   unsigned int tx_single_retry_frames ;
   unsigned int tx_multiple_retry_frames ;
   unsigned int tx_retry_limit_exceeded ;
   unsigned int tx_discards ;
   unsigned int rx_unicast_frames ;
   unsigned int rx_multicast_frames ;
   unsigned int rx_fragments ;
   unsigned int rx_unicast_octets ;
   unsigned int rx_multicast_octets ;
   unsigned int rx_fcs_errors ;
   unsigned int rx_discards_no_buffer ;
   unsigned int tx_discards_wrong_sa ;
   unsigned int rx_discards_wep_undecryptable ;
   unsigned int rx_message_in_msg_fragments ;
   unsigned int rx_message_in_bad_msg_fragments ;
};
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_regs {
   u16 cmd ;
   u16 evstat ;
   u16 offset0 ;
   u16 offset1 ;
   u16 swsupport0 ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hostap_tx_callback_info {
   u16 idx ;
   void (*func)(struct sk_buff *, int , void *) ;
   void *data ;
   struct hostap_tx_callback_info *next ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct prism2_frag_entry {
   unsigned long first_frag_time ;
   unsigned int seq ;
   unsigned int last_frag ;
   struct sk_buff *skb ;
   u8 src_addr[6U] ;
   u8 dst_addr[6U] ;
};
#line 565 
struct local_info;
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
typedef struct local_info local_info_t;
#line 571 
enum ldv_15455 {
    HOSTAP_HW_PCCARD = 0,
    HOSTAP_HW_PLX = 1,
    HOSTAP_HW_PCI = 2
};
#line 572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct prism2_helper_functions {
   int (*card_present)(local_info_t *) ;
   void (*cor_sreset)(local_info_t *) ;
   void (*genesis_reset)(local_info_t *, int ) ;
   int (*cmd)(struct net_device *, u16 , u16 , u16 *, u16 *) ;
   void (*read_regs)(struct net_device *, struct hfa384x_regs *) ;
   int (*get_rid)(struct net_device *, u16 , void *, int , int ) ;
   int (*set_rid)(struct net_device *, u16 , void *, int ) ;
   int (*hw_enable)(struct net_device *, int ) ;
   int (*hw_config)(struct net_device *, int ) ;
   void (*hw_reset)(struct net_device *) ;
   void (*hw_shutdown)(struct net_device *, int ) ;
   int (*reset_port)(struct net_device *) ;
   void (*schedule_reset)(local_info_t *) ;
   int (*download)(local_info_t *, struct prism2_download_param *) ;
   int (*tx)(struct sk_buff *, struct net_device *) ;
   int (*set_tim)(struct net_device *, int , int ) ;
   struct file_operations *read_aux_fops ;
   int need_tx_headroom ;
   enum ldv_15455 hw_type ;
};
#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct prism2_download_data_area {
   u32 addr ;
   u32 len ;
   u8 *data ;
};
#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct prism2_download_data {
   u32 dl_cmd ;
   u32 start_addr ;
   u32 num_areas ;
   struct prism2_download_data_area data[0U] ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hostap_bss_info {
   struct list_head list ;
   unsigned long last_update ;
   unsigned int count ;
   u8 bssid[6U] ;
   u16 capab_info ;
   u8 ssid[32U] ;
   size_t ssid_len ;
   u8 wpa_ie[64U] ;
   size_t wpa_ie_len ;
   u8 rsn_ie[64U] ;
   size_t rsn_ie_len ;
   int chan ;
   int included ;
};
#line 646 
struct ap_data;
#line 646  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct local_info {
   struct module *hw_module ;
   int card_idx ;
   int dev_enabled ;
   int master_dev_auto_open ;
   int num_dev_open ;
   struct net_device *dev ;
   struct net_device *ddev ;
   struct list_head hostap_interfaces ;
   rwlock_t iface_lock ;
   spinlock_t cmdlock ;
   spinlock_t baplock ;
   spinlock_t lock ;
   spinlock_t irq_init_lock ;
   struct mutex rid_bap_mtx ;
   u16 infofid ;
   spinlock_t txfidlock ;
   int txfid_len ;
   u16 txfid[8U] ;
   u16 intransmitfid[8U] ;
   int next_txfid ;
   int next_alloc ;
   unsigned long bits ;
   struct ap_data *ap ;
   char essid[33U] ;
   char name[33U] ;
   int name_set ;
   u16 channel_mask ;
   u16 scan_channel_mask ;
   struct comm_tallies_sums comm_tallies ;
   struct proc_dir_entry *proc ;
   int iw_mode ;
   int pseudo_adhoc ;
   char bssid[6U] ;
   int channel ;
   int beacon_int ;
   int dtim_period ;
   int mtu ;
   int frame_dump ;
   int fw_tx_rate_control ;
   u16 tx_rate_control ;
   u16 basic_rates ;
   int hw_resetting ;
   int hw_ready ;
   int hw_reset_tries ;
   int hw_downloading ;
   int shutdown ;
   int pri_only ;
   int no_pri ;
   int sram_type ;
   int txpower_type ;
   int txpower ;
   struct list_head cmd_queue ;
   int cmd_queue_len ;
   struct work_struct reset_queue ;
   int is_promisc ;
   struct work_struct set_multicast_list_queue ;
   struct work_struct set_tim_queue ;
   struct list_head set_tim_list ;
   spinlock_t set_tim_lock ;
   int wds_max_connections ;
   int wds_connections ;
   u32 wds_type ;
   u16 tx_control ;
   int manual_retry_count ;
   struct iw_statistics wstats ;
   unsigned long scan_timestamp ;
   int monitor_type ;
   int monitor_allow_fcserr ;
   int hostapd ;
   int hostapd_sta ;
   struct net_device *apdev ;
   struct net_device_stats apdevstats ;
   char assoc_ap_addr[6U] ;
   struct net_device *stadev ;
   struct net_device_stats stadevstats ;
   struct lib80211_crypt_info crypt_info ;
   int open_wep ;
   int host_encrypt ;
   int host_decrypt ;
   int privacy_invoked ;
   int fw_encrypt_ok ;
   int bcrx_sta_key ;
   struct prism2_frag_entry frag_cache[4U] ;
   unsigned int frag_next_idx ;
   int ieee_802_1x ;
   int antsel_tx ;
   int antsel_rx ;
   int rts_threshold ;
   int fragm_threshold ;
   int auth_algs ;
   int enh_sec ;
   int tallies32 ;
   struct prism2_helper_functions *func ;
   u8 *pda ;
   int fw_ap ;
   u32 sta_fw_ver ;
   struct tasklet_struct bap_tasklet ;
   struct tasklet_struct info_tasklet ;
   struct sk_buff_head info_list ;
   struct hostap_tx_callback_info *tx_callback ;
   struct tasklet_struct rx_tasklet ;
   struct sk_buff_head rx_list ;
   struct tasklet_struct sta_tx_exc_tasklet ;
   struct sk_buff_head sta_tx_exc_list ;
   int host_roaming ;
   unsigned long last_join_time ;
   struct hfa384x_hostscan_result *last_scan_results ;
   int last_scan_results_count ;
   int last_scan_type ;
   struct work_struct info_queue ;
   unsigned long pending_info ;
   int prev_link_status ;
   int prev_linkstatus_connected ;
   u8 preferred_ap[6U] ;
   wait_queue_head_t hostscan_wq ;
   struct timer_list passive_scan_timer ;
   int passive_scan_interval ;
   int passive_scan_channel ;
   int passive_scan_state ;
   struct timer_list tick_timer ;
   unsigned long last_tick_timer ;
   unsigned int sw_tick_stuck ;
   unsigned long last_comms_qual_update ;
   int comms_qual ;
   int avg_signal ;
   int avg_noise ;
   struct work_struct comms_qual_update ;
   int rssi_to_dBm ;
   struct list_head bss_list ;
   int num_bss_info ;
   int wpa ;
   int tkip_countermeasures ;
   int drop_unencrypted ;
   u8 *generic_elem ;
   size_t generic_elem_len ;
   struct prism2_download_data *dl_pri ;
   struct prism2_download_data *dl_sec ;
   void *hw_priv ;
};
#line 910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hostap_interface_wds {
   u8 remote_addr[6U] ;
};
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
union __anonunion_u_742 {
   struct hostap_interface_wds wds ;
};
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hostap_interface {
   struct list_head list ;
   struct net_device *dev ;
   struct local_info *local ;
   struct net_device_stats stats ;
   struct iw_spy_data spy_data ;
   struct iw_public_data wireless_data ;
   int type ;
   union __anonunion_u_742 u ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct __anonstruct_sta_755 {
   char *challenge ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct __anonstruct_ap_756 {
   int ssid_len ;
   unsigned char ssid[33U] ;
   int channel ;
   unsigned long last_beacon ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
union __anonunion_u_754 {
   struct __anonstruct_sta_755 sta ;
   struct __anonstruct_ap_756 ap ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct sta_info {
   struct list_head list ;
   struct sta_info *hnext ;
   atomic_t users ;
   struct proc_dir_entry *proc ;
   u8 addr[6U] ;
   u16 aid ;
   u32 flags ;
   u16 capability ;
   u16 listen_interval ;
   u8 supported_rates[32U] ;
   unsigned long last_auth ;
   unsigned long last_assoc ;
   unsigned long last_rx ;
   unsigned long last_tx ;
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   struct sk_buff_head tx_buf ;
   s8 last_rx_silence ;
   s8 last_rx_signal ;
   u8 last_rx_rate ;
   u8 last_rx_updated ;
   u8 tx_supp_rates ;
   u8 tx_rate ;
   u8 tx_rate_idx ;
   u8 tx_max_rate ;
   u32 tx_count[4U] ;
   u32 rx_count[4U] ;
   u32 tx_since_last_failure ;
   u32 tx_consecutive_exc ;
   struct lib80211_crypt_data *crypt ;
   int ap ;
   local_info_t *local ;
   union __anonunion_u_754 u ;
   struct timer_list timer ;
   int timeout_next ;
};
#line 101 
enum ldv_15509 {
    AP_OTHER_AP_SKIP_ALL = 0,
    AP_OTHER_AP_SAME_SSID = 1,
    AP_OTHER_AP_ALL = 2,
    AP_OTHER_AP_EVEN_IBSS = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
typedef enum ldv_15509 ap_policy_enum;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct mac_restrictions {
   int policy ;
   unsigned int entries ;
   struct list_head mac_list ;
   spinlock_t lock ;
};
#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct add_sta_proc_data {
   u8 addr[6U] ;
   struct add_sta_proc_data *next ;
};
#line 155 
enum ldv_15516 {
    WDS_ADD = 0,
    WDS_DEL = 1
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
typedef enum ldv_15516 wds_oper_type;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct wds_oper_data {
   wds_oper_type type ;
   u8 addr[6U] ;
   struct wds_oper_data *next ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct ap_data {
   int initialized ;
   local_info_t *local ;
   int bridge_packets ;
   unsigned int bridged_unicast ;
   unsigned int bridged_multicast ;
   unsigned int tx_drop_nonassoc ;
   int nullfunc_ack ;
   spinlock_t sta_table_lock ;
   int num_sta ;
   struct list_head sta_list ;
   struct sta_info *sta_hash[256U] ;
   struct proc_dir_entry *proc ;
   ap_policy_enum ap_policy ;
   unsigned int max_inactivity ;
   int autom_ap_wds ;
   struct mac_restrictions mac_restrictions ;
   int last_tx_rate ;
   struct work_struct add_sta_proc_queue ;
   struct add_sta_proc_data *add_sta_proc_entries ;
   struct work_struct wds_oper_queue ;
   struct wds_oper_data *wds_oper_entries ;
   u16 tx_callback_idx ;
   struct sta_info *sta_aid[128U] ;
   u16 tx_callback_auth ;
   u16 tx_callback_assoc ;
   u16 tx_callback_poll ;
   struct lib80211_crypto_ops *crypt ;
   void *crypt_priv ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_764 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_764 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
struct wait_queue_entry;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
typedef struct wait_queue_entry wait_queue_entry_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_1446 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_1446 __anonCompField_kernel_param_160 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 762  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_scan_req {
   __u8 scan_type ;
   __u8 essid_len ;
   __u8 num_channels ;
   __u8 flags ;
   struct sockaddr bssid ;
   __u8 essid[32U] ;
   __u32 min_channel_time ;
   __u32 max_channel_time ;
   struct iw_freq channel_list[32U] ;
};
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_encode_ext {
   __u32 ext_flags ;
   __u8 tx_seq[8U] ;
   __u8 rx_seq[8U] ;
   struct sockaddr addr ;
   __u16 alg ;
   __u16 key_len ;
   __u8 key[0U] ;
};
#line 836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_mlme {
   __u16 cmd ;
   __u16 reason_code ;
   struct sockaddr addr ;
};
#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
union __anonunion_ifr_ifrn_1492 {
   char ifrn_name[16U] ;
};
#line 933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iwreq {
   union __anonunion_ifr_ifrn_1492 ifr_ifrn ;
   union iwreq_data u ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_range {
   __u32 throughput ;
   __u32 min_nwid ;
   __u32 max_nwid ;
   __u16 old_num_channels ;
   __u8 old_num_frequency ;
   __u8 scan_capa ;
   __u32 event_capa[6U] ;
   __s32 sensitivity ;
   struct iw_quality max_qual ;
   struct iw_quality avg_qual ;
   __u8 num_bitrates ;
   __s32 bitrate[32U] ;
   __s32 min_rts ;
   __s32 max_rts ;
   __s32 min_frag ;
   __s32 max_frag ;
   __s32 min_pmp ;
   __s32 max_pmp ;
   __s32 min_pmt ;
   __s32 max_pmt ;
   __u16 pmp_flags ;
   __u16 pmt_flags ;
   __u16 pm_capa ;
   __u16 encoding_size[8U] ;
   __u8 num_encoding_sizes ;
   __u8 max_encoding_tokens ;
   __u8 encoding_login_index ;
   __u16 txpower_capa ;
   __u8 num_txpower ;
   __s32 txpower[8U] ;
   __u8 we_version_compiled ;
   __u8 we_version_source ;
   __u16 retry_capa ;
   __u16 retry_flags ;
   __u16 r_time_flags ;
   __s32 min_retry ;
   __s32 max_retry ;
   __s32 min_r_time ;
   __s32 max_r_time ;
   __u16 num_channels ;
   __u8 num_frequency ;
   struct iw_freq freq[32U] ;
   __u32 enc_capa ;
};
#line 1074  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/wireless.h"
struct iw_event {
   __u16 len ;
   __u16 cmd ;
   union iwreq_data u ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_add_sta_1494 {
   u16 aid ;
   u16 capability ;
   u8 tx_supp_rates ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_get_info_sta_1495 {
   u32 inactive_sec ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_crypt_1496 {
   u8 alg[16U] ;
   u32 flags ;
   u32 err ;
   u8 idx ;
   u8 seq[8U] ;
   u16 key_len ;
   u8 key[0U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_set_flags_sta_1497 {
   u32 flags_and ;
   u32 flags_or ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_rid_1498 {
   u16 rid ;
   u16 len ;
   u8 data[0U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_generic_elem_1499 {
   u8 len ;
   u8 data[0U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_mlme_1500 {
   u16 cmd ;
   u16 reason_code ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct __anonstruct_scan_req_1501 {
   u8 ssid_len ;
   u8 ssid[32U] ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
union __anonunion_u_1493 {
   struct __anonstruct_add_sta_1494 add_sta ;
   struct __anonstruct_get_info_sta_1495 get_info_sta ;
   struct __anonstruct_crypt_1496 crypt ;
   struct __anonstruct_set_flags_sta_1497 set_flags_sta ;
   struct __anonstruct_rid_1498 rid ;
   struct __anonstruct_generic_elem_1499 generic_elem ;
   struct __anonstruct_mlme_1500 mlme ;
   struct __anonstruct_scan_req_1501 scan_req ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct prism2_hostapd_param {
   u32 cmd ;
   u8 sta_addr[6U] ;
   union __anonunion_u_1493 u ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_scan_request {
   __le16 channel_list ;
   __le16 txrate ;
} __attribute__((__packed__));
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_hostscan_request {
   __le16 channel_list ;
   __le16 txrate ;
   __le16 target_ssid_len ;
   u8 target_ssid[32U] ;
} __attribute__((__packed__));
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_join_request {
   u8 bssid[6U] ;
   __le16 channel ;
} __attribute__((__packed__));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_1589 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
struct ieee80211_hdr {
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
} __attribute__((__packed__, __aligned__(2)));
#line 925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hostap_skb_tx_data {
   unsigned int __padding_for_default_qdiscs ;
   u32 magic ;
   u8 rate ;
   u8 flags ;
   u16 tx_cb_idx ;
   struct hostap_interface *iface ;
   unsigned long jiffies ;
   unsigned short ethertype ;
};
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
enum ldv_15486 {
    AP_TX_CONTINUE = 0,
    AP_TX_DROP = 1,
    AP_TX_RETRY = 2,
    AP_TX_BUFFERED = 3,
    AP_TX_CONTINUE_NOT_AUTHORIZED = 4
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
typedef enum ldv_15486 ap_tx_ret;
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct hostap_tx_data {
   struct sk_buff *skb ;
   int host_encrypt ;
   struct lib80211_crypt_data *crypt ;
   void *sta_ptr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
enum ldv_15558 {
    WDS_NO = 0,
    WDS_OWN_FRAME = 1,
    WDS_COMPLIANT_FRAME = 2
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_info_frame {
   __le16 len ;
   __le16 type ;
} __attribute__((__packed__));
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_comm_tallies {
   __le16 tx_unicast_frames ;
   __le16 tx_multicast_frames ;
   __le16 tx_fragments ;
   __le16 tx_unicast_octets ;
   __le16 tx_multicast_octets ;
   __le16 tx_deferred_transmissions ;
   __le16 tx_single_retry_frames ;
   __le16 tx_multiple_retry_frames ;
   __le16 tx_retry_limit_exceeded ;
   __le16 tx_discards ;
   __le16 rx_unicast_frames ;
   __le16 rx_multicast_frames ;
   __le16 rx_fragments ;
   __le16 rx_unicast_octets ;
   __le16 rx_multicast_octets ;
   __le16 rx_fcs_errors ;
   __le16 rx_discards_no_buffer ;
   __le16 tx_discards_wrong_sa ;
   __le16 rx_discards_wep_undecryptable ;
   __le16 rx_message_in_msg_fragments ;
   __le16 rx_message_in_bad_msg_fragments ;
} __attribute__((__packed__));
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_comm_tallies32 {
   __le32 tx_unicast_frames ;
   __le32 tx_multicast_frames ;
   __le32 tx_fragments ;
   __le32 tx_unicast_octets ;
   __le32 tx_multicast_octets ;
   __le32 tx_deferred_transmissions ;
   __le32 tx_single_retry_frames ;
   __le32 tx_multiple_retry_frames ;
   __le32 tx_retry_limit_exceeded ;
   __le32 tx_discards ;
   __le32 rx_unicast_frames ;
   __le32 rx_multicast_frames ;
   __le32 rx_fragments ;
   __le32 rx_unicast_octets ;
   __le32 rx_multicast_octets ;
   __le32 rx_fcs_errors ;
   __le32 rx_discards_no_buffer ;
   __le32 tx_discards_wrong_sa ;
   __le32 rx_discards_wep_undecryptable ;
   __le32 rx_message_in_msg_fragments ;
   __le32 rx_message_in_bad_msg_fragments ;
} __attribute__((__packed__));
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_scan_result {
   __le16 chid ;
   __le16 anl ;
   __le16 sl ;
   u8 bssid[6U] ;
   __le16 beacon_interval ;
   __le16 capability ;
   __le16 ssid_len ;
   u8 ssid[32U] ;
   u8 sup_rates[10U] ;
   __le16 rate ;
} __attribute__((__packed__));
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3047 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3049 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_common.h"
struct hfa384x_comms_quality {
   __le16 comm_qual ;
   __le16 signal_level ;
   __le16 noise_level ;
} __attribute__((__packed__));
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_rx_frame {
   __le16 status ;
   __le32 time ;
   u8 silence ;
   u8 signal ;
   u8 rate ;
   u8 rxflow ;
   __le32 reserved ;
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
   __le16 data_len ;
   u8 dst_addr[6U] ;
   u8 src_addr[6U] ;
   __be16 len ;
} __attribute__((__packed__));
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hfa384x_tx_frame {
   __le16 status ;
   __le16 reserved1 ;
   __le16 reserved2 ;
   __le32 sw_support ;
   u8 retry_count ;
   u8 tx_rate ;
   __le16 tx_control ;
   __le16 frame_control ;
   __le16 duration_id ;
   u8 addr1[6U] ;
   u8 addr2[6U] ;
   u8 addr3[6U] ;
   __le16 seq_ctrl ;
   u8 addr4[6U] ;
   __le16 data_len ;
   u8 dst_addr[6U] ;
   u8 src_addr[6U] ;
   __be16 len ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_auth_3787 {
   __le16 auth_alg ;
   __le16 auth_transaction ;
   __le16 status_code ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_deauth_3788 {
   __le16 reason_code ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_assoc_req_3789 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_assoc_resp_3790 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_reassoc_resp_3791 {
   __le16 capab_info ;
   __le16 status_code ;
   __le16 aid ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_reassoc_req_3792 {
   __le16 capab_info ;
   __le16 listen_interval ;
   u8 current_ap[6U] ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_disassoc_3793 {
   __le16 reason_code ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_probe_req_3794 {
   };
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_beacon_3795 {
   u8 timestamp[8U] ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct __anonstruct_probe_resp_3796 {
   u8 timestamp[8U] ;
   __le16 beacon_int ;
   __le16 capab_info ;
   u8 variable[0U] ;
} __attribute__((__packed__));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
union __anonunion_u_3786 {
   struct __anonstruct_auth_3787 auth ;
   struct __anonstruct_deauth_3788 deauth ;
   struct __anonstruct_assoc_req_3789 assoc_req ;
   struct __anonstruct_assoc_resp_3790 assoc_resp ;
   struct __anonstruct_reassoc_resp_3791 reassoc_resp ;
   struct __anonstruct_reassoc_req_3792 reassoc_req ;
   struct __anonstruct_disassoc_3793 disassoc ;
   struct __anonstruct_probe_req_3794 probe_req ;
   struct __anonstruct_beacon_3795 beacon ;
   struct __anonstruct_probe_resp_3796 probe_resp ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct hostap_ieee80211_mgmt {
   __le16 frame_control ;
   __le16 duration ;
   u8 da[6U] ;
   u8 sa[6U] ;
   u8 bssid[6U] ;
   __le16 seq_ctrl ;
   union __anonunion_u_3786 u ;
} __attribute__((__packed__));
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
enum ldv_15919 {
    NONE = 0,
    WEP = 1,
    OTHER = 2
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3812 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_3814 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
struct hostap_80211_rx_status {
   u32 mac_time ;
   u8 signal ;
   u8 noise ;
   u16 rate ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ieee80211_radiotap.h"
struct ieee80211_radiotap_header {
   uint8_t it_version ;
   uint8_t it_pad ;
   __le16 it_len ;
   __le32 it_present ;
} __attribute__((__packed__));
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct linux_wlan_ng_val {
   u32 did ;
   u16 status ;
   u16 len ;
   u32 data ;
} __attribute__((__packed__));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct linux_wlan_ng_prism_hdr {
   u32 msgcode ;
   u32 msglen ;
   char devname[16U] ;
   struct linux_wlan_ng_val hosttime ;
   struct linux_wlan_ng_val mactime ;
   struct linux_wlan_ng_val channel ;
   struct linux_wlan_ng_val rssi ;
   struct linux_wlan_ng_val sq ;
   struct linux_wlan_ng_val signal ;
   struct linux_wlan_ng_val noise ;
   struct linux_wlan_ng_val rate ;
   struct linux_wlan_ng_val istx ;
   struct linux_wlan_ng_val frmlen ;
} __attribute__((__packed__));
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct linux_wlan_ng_cap_hdr {
   __be32 version ;
   __be32 length ;
   __be64 mactime ;
   __be64 hosttime ;
   __be32 phytype ;
   __be32 channel ;
   __be32 datarate ;
   __be32 antenna ;
   __be32 priority ;
   __be32 ssi_type ;
   __be32 ssi_signal ;
   __be32 ssi_noise ;
   __be32 preamble ;
   __be32 encoding ;
} __attribute__((__packed__));
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_wlan.h"
struct hostap_radiotap_rx {
   struct ieee80211_radiotap_header hdr ;
   __le64 tsft ;
   u8 rate ;
   u8 padding ;
   __le16 chan_freq ;
   __le16 chan_flags ;
   s8 dbm_antsignal ;
   s8 dbm_antnoise ;
} __attribute__((__packed__));
#line 240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
enum ldv_15501 {
    AP_RX_CONTINUE = 0,
    AP_RX_DROP = 1,
    AP_RX_EXIT = 2,
    AP_RX_CONTINUE_NOT_AUTHORIZED = 3
};
#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
typedef enum ldv_15501 ap_rx_ret;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4568 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_4570 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_4622 {
   int __val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
struct mac_entry {
   struct list_head list ;
   u8 addr[6U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7092 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_7092 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7093 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_7093 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_7109 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_7109 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_7113 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_7113 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7114 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_7115 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_7114 __anonCompField_media_link_90 ;
   union __anonunion_7115 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_7117 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_7116 {
   struct __anonstruct_dev_7117 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_7116 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_7131 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_7132 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_7130 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_7131 i2c ;
   struct __anonstruct_custom_7132 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_7130 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_8033 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_8033 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock_api_smp.h"
#line 20 
void _raw_read_lock_bh(rwlock_t *);
#line 32 
#line 32 
void _raw_read_unlock_bh(rwlock_t *);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_proc.i.aux"
static void cif_spin_lock_bh_lock_of_local_info(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_proc.i.aux"
static void cif_spin_unlock_bh_lock_of_local_info(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 1316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
__inline static struct inode *file_inode(struct file *f)
{
  #line 1318 
  return f->f_inode;
}

#line 3135 
#line 3135 
loff_t generic_file_llseek(struct file *, loff_t, int);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/proc_fs.h"
#line 24 
struct proc_dir_entry *proc_mkdir(char *, struct proc_dir_entry *);
#line 31 
#line 31 
struct proc_dir_entry *proc_create_seq_private(char *, umode_t, struct proc_dir_entry *, struct seq_operations *, unsigned int, void *);
#line 38 
#line 38 
struct proc_dir_entry *proc_create_single_data(char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
#line 44 
#line 44 
struct proc_dir_entry *proc_create_data(char *, umode_t, struct proc_dir_entry *, struct file_operations *, void *);
#line 52 
#line 52 
void *PDE_DATA(struct inode *);
#line 54 
#line 54 
void proc_remove(struct proc_dir_entry *);
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 119 
#line 119 
void seq_putc(struct seq_file *, char);
#line 213 
#line 213 
struct list_head *seq_list_start(struct list_head *, loff_t);
#line 215 
#line 215 
struct list_head *seq_list_start_head(struct list_head *, loff_t);
#line 217 
#line 217 
struct list_head *seq_list_next(void *, struct list_head *, loff_t *);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
struct proc_dir_entry *hostap_proc;
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
void hostap_init_proc(local_info_t *local);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
void hostap_remove_proc(local_info_t *local);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static int prism2_debug_proc_show(struct seq_file *m, void *v)
{
  #line 18 
  int i;
  #line 17 
  local_info_t *local = (local_info_t *)m->private;
  #line 20 
  seq_printf(m,(char *)"next_txfid=%d next_alloc=%d\n",local->next_txfid,local->next_alloc);
  #line 22 
  i = 0;
  #line 22 
  while (i <= 7) {
    #line 23 
    seq_printf(m,(char *)"FID: tx=%04X intransmit=%04X\n",(int)local->txfid[i],(int)local->intransmitfid[i]);
    #line 22 
    i ++;
  }
  #line 25 
  seq_printf(m,(char *)"FW TX rate control: %d\n",local->fw_tx_rate_control);
  #line 26 
  seq_printf(m,(char *)"beacon_int=%d\n",local->beacon_int);
  #line 27 
  seq_printf(m,(char *)"dtim_period=%d\n",local->dtim_period);
  #line 28 
  seq_printf(m,(char *)"wds_max_connections=%d\n",local->wds_max_connections);
  #line 29 
  seq_printf(m,(char *)"dev_enabled=%d\n",local->dev_enabled);
  #line 30 
  seq_printf(m,(char *)"sw_tick_stuck=%d\n",local->sw_tick_stuck);
  #line 31 
  i = 0;
  #line 31 
  while (i <= 3) {
    #line 32 
    if (local->crypt_info.crypt[i] != (struct lib80211_crypt_data *)0 && (local->crypt_info.crypt[i])->ops != (struct lib80211_crypto_ops *)0) 
      #line 34 
      seq_printf(m,(char *)"crypt[%d]=%s\n",i,((local->crypt_info.crypt[i])->ops)->name);
    #line 31 
    i ++;
  }
  #line 38 
  seq_printf(m,(char *)"pri_only=%d\n",local->pri_only);
  #line 39 
  seq_printf(m,(char *)"pci=%d\n",(local->func)->hw_type == (unsigned int)HOSTAP_HW_PCI);
  #line 40 
  seq_printf(m,(char *)"sram_type=%d\n",local->sram_type);
  #line 41 
  seq_printf(m,(char *)"no_pri=%d\n",local->no_pri);
  #line 43 
  return 0;
}

#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static int prism2_stats_proc_show(struct seq_file *m, void *v)
{
  #line 50 
  local_info_t *local = (local_info_t *)m->private;
  #line 51 
  struct comm_tallies_sums *sums = & local->comm_tallies;
  #line 53 
  seq_printf(m,(char *)"TxUnicastFrames=%u\n",sums->tx_unicast_frames);
  #line 54 
  seq_printf(m,(char *)"TxMulticastframes=%u\n",sums->tx_multicast_frames);
  #line 55 
  seq_printf(m,(char *)"TxFragments=%u\n",sums->tx_fragments);
  #line 56 
  seq_printf(m,(char *)"TxUnicastOctets=%u\n",sums->tx_unicast_octets);
  #line 57 
  seq_printf(m,(char *)"TxMulticastOctets=%u\n",sums->tx_multicast_octets);
  #line 58 
  seq_printf(m,(char *)"TxDeferredTransmissions=%u\n",sums->tx_deferred_transmissions);
  #line 60 
  seq_printf(m,(char *)"TxSingleRetryFrames=%u\n",sums->tx_single_retry_frames);
  #line 61 
  seq_printf(m,(char *)"TxMultipleRetryFrames=%u\n",sums->tx_multiple_retry_frames);
  #line 63 
  seq_printf(m,(char *)"TxRetryLimitExceeded=%u\n",sums->tx_retry_limit_exceeded);
  #line 65 
  seq_printf(m,(char *)"TxDiscards=%u\n",sums->tx_discards);
  #line 66 
  seq_printf(m,(char *)"RxUnicastFrames=%u\n",sums->rx_unicast_frames);
  #line 67 
  seq_printf(m,(char *)"RxMulticastFrames=%u\n",sums->rx_multicast_frames);
  #line 68 
  seq_printf(m,(char *)"RxFragments=%u\n",sums->rx_fragments);
  #line 69 
  seq_printf(m,(char *)"RxUnicastOctets=%u\n",sums->rx_unicast_octets);
  #line 70 
  seq_printf(m,(char *)"RxMulticastOctets=%u\n",sums->rx_multicast_octets);
  #line 71 
  seq_printf(m,(char *)"RxFCSErrors=%u\n",sums->rx_fcs_errors);
  #line 72 
  seq_printf(m,(char *)"RxDiscardsNoBuffer=%u\n",sums->rx_discards_no_buffer);
  #line 73 
  seq_printf(m,(char *)"TxDiscardsWrongSA=%u\n",sums->tx_discards_wrong_sa);
  #line 74 
  seq_printf(m,(char *)"RxDiscardsWEPUndecryptable=%u\n",sums->rx_discards_wep_undecryptable);
  #line 76 
  seq_printf(m,(char *)"RxMessageInMsgFragments=%u\n",sums->rx_message_in_msg_fragments);
  #line 78 
  seq_printf(m,(char *)"RxMessageInBadMsgFragments=%u\n",sums->rx_message_in_bad_msg_fragments);
  #line 82 
  return 0;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static int prism2_wds_proc_show(struct seq_file *m, void *v)
{
  #line 91 
  void *__mptr;
  #line 89 
  struct hostap_interface *iface;
  #line 88 
  struct list_head *ptr = (struct list_head *)v;
  #line 91 
  __mptr = (void *)ptr;
  #line 91 
  iface = ((struct hostap_interface *)__mptr);
  #line 92 
  if (iface->type == (unsigned int)4) 
                                      #line 93 
                                      seq_printf(m,(char *)"%s\t%pM\n",(char *)(& (iface->dev)->name),(u8 *)(& iface->u.wds.remote_addr));
  #line 95 
  return 0;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void *prism2_wds_proc_start(struct seq_file *m, loff_t *_pos)
{
  #line 100 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 101 
  _raw_read_lock_bh(& local->iface_lock);
  #line 102 
  return (void *)seq_list_start(& local->hostap_interfaces,*_pos);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void *prism2_wds_proc_next(struct seq_file *m, void *v, loff_t *_pos)
{
  #line 107 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 108 
  return (void *)seq_list_next(v,& local->hostap_interfaces,_pos);
}

#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void prism2_wds_proc_stop(struct seq_file *m, void *v)
{
  #line 113 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 114 
  _raw_read_unlock_bh(& local->iface_lock);
  #line 115 
  return;
}

#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static struct seq_operations prism2_wds_proc_seqops = {.start = & prism2_wds_proc_start, .stop = & prism2_wds_proc_stop, .next = & prism2_wds_proc_next, .show = & prism2_wds_proc_show};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static int prism2_bss_list_proc_show(struct seq_file *m, void *v)
{
  #line 136 
  void *__mptr;
  #line 128 
  struct hostap_bss_info *bss;
  #line 126 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 127 
  struct list_head *ptr = (struct list_head *)v;
  #line 130 
  if (& local->bss_list == ptr) {
    #line 131 
    seq_printf(m,(char *)"#BSSID\tlast_update\tcount\tcapab_info\tSSID(txt)\t");
    #line 133 
    return 0;
  }
  #line 136 
  __mptr = (void *)ptr;
  #line 136 
  bss = ((struct hostap_bss_info *)__mptr);
  #line 137 
  seq_printf(m,(char *)"%pM\t%lu\t%u\t0x%x\t",(u8 *)(& bss->bssid),bss->last_update,bss->count,(int)bss->capab_info);
  #line 141 
  seq_printf(m,(char *)"%*pE",(int)bss->ssid_len,(u8 *)(& bss->ssid));
  #line 143 
  seq_putc(m,(char)9);
  #line 144 
  seq_printf(m,(char *)"%*phN",(int)bss->ssid_len,(u8 *)(& bss->ssid));
  #line 145 
  seq_putc(m,(char)9);
  #line 146 
  seq_printf(m,(char *)"%*phN",(int)bss->wpa_ie_len,(u8 *)(& bss->wpa_ie));
  #line 147 
  seq_putc(m,(char)10);
  #line 148 
  return 0;
}

#line 151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void *prism2_bss_list_proc_start(struct seq_file *m, loff_t *_pos)
{
  #line 153 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 154 
  cif_spin_lock_bh_lock_of_local_info(& local->lock);
  #line 155 
  return (void *)seq_list_start_head(& local->bss_list,*_pos);
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void *prism2_bss_list_proc_next(struct seq_file *m, void *v, loff_t *_pos)
{
  #line 160 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 161 
  return (void *)seq_list_next(v,& local->bss_list,_pos);
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void prism2_bss_list_proc_stop(struct seq_file *m, void *v)
{
  #line 166 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 167 
  cif_spin_unlock_bh_lock_of_local_info(& local->lock);
  #line 168 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static struct seq_operations prism2_bss_list_proc_seqops = {.start = & prism2_bss_list_proc_start, .stop = & prism2_bss_list_proc_stop, .next = & prism2_bss_list_proc_next, .show = & prism2_bss_list_proc_show};
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static int prism2_crypt_proc_show(struct seq_file *m, void *v)
{
  #line 181 
  int i;
  #line 180 
  local_info_t *local = (local_info_t *)m->private;
  #line 183 
  seq_printf(m,(char *)"tx_keyidx=%d\n",local->crypt_info.tx_keyidx);
  #line 184 
  i = 0;
  #line 184 
  while (i <= 3) {
    #line 185 
    if ((local->crypt_info.crypt[i] != (struct lib80211_crypt_data *)0 && (local->crypt_info.crypt[i])->ops != (struct lib80211_crypto_ops *)0) && ((local->crypt_info.crypt[i])->ops)->print_stats != (void (*)(struct seq_file *, void *))0) 
      #line 188 
      (*(((local->crypt_info.crypt[i])->ops)->print_stats))(m,(local->crypt_info.crypt[i])->priv);
    #line 184 
    i ++;
  }
  #line 192 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static ssize_t prism2_pda_proc_read(struct file *file, char *buf, size_t count, loff_t *_pos)
{
  #line 200 
  size_t off;
  #line 199 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(file));
  #line 202 
  if (local->pda == (u8 *)0U || *_pos > 1023LL) 
                                                #line 203 
                                                return 0L;
  #line 205 
  off = (unsigned long)*_pos;
  #line 206 
  if (1024UL - off < count) 
                            #line 207 
                            count = 1024UL - off;
  #line 208 
  if (copy_to_user((void *)buf,(void *)(local->pda + off),count) != 0UL) 
    #line 209 
    return -14L;
  #line 210 
  *_pos = (long long)((unsigned long long)*_pos + (unsigned long long)count);
  #line 211 
  return (long)count;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static struct file_operations prism2_pda_proc_fops = {.llseek = & generic_file_llseek, .read = & prism2_pda_proc_read};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static ssize_t prism2_aux_dump_proc_no_read(struct file *file, char *buf, size_t bufsize, loff_t *_pos)
{
  #line 223 
  return 0L;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static struct file_operations prism2_aux_dump_proc_fops = {.read = & prism2_aux_dump_proc_no_read};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static int prism2_scan_results_proc_show(struct seq_file *m, void *v)
{
  #line 273 
  unsigned long entry;
  #line 274 
  int i;
  #line 274 
  int len;
  #line 275 
  struct hfa384x_hostscan_result *scanres;
  #line 276 
  u8 *p;
  #line 272 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 278 
  if (v == (void *)1) {
    #line 279 
    seq_printf(m,(char *)"CHID ANL SL BcnInt Capab Rate BSSID ATIM SupRates SSID\n");
    #line 281 
    return 0;
  }
  #line 284 
  entry = (unsigned long)v + 18446744073709551614UL;
  #line 285 
  scanres = local->last_scan_results + entry;
  #line 287 
  seq_printf(m,(char *)"%d %d %d %d 0x%02x %d %pM %d ",(int)scanres->chid,(int)((short)scanres->anl),(int)((short)scanres->sl),(int)scanres->beacon_interval,(int)scanres->capability,(int)scanres->rate,(u8 *)(& scanres->bssid),(int)scanres->atim);
  #line 297 
  p = (u8 *)(& scanres->sup_rates);
  #line 298 
  i = 0;
  #line 298 
  while ((unsigned int)i <= 9U) {
    #line 299 
    if ((unsigned int)*(p + (unsigned long)i) == 0U) 
                                                     #line 300 
                                                     break;
    #line 301 
    seq_printf(m,(char *)"<%02x>",(int)*(p + (unsigned long)i));
    #line 298 
    i ++;
  }
  #line 303 
  seq_putc(m,(char)32);
  #line 305 
  p = (u8 *)(& scanres->ssid);
  #line 306 
  len = (int)scanres->ssid_len;
  #line 307 
  if (len > 32) 
                #line 308 
                len = 32;
  #line 309 
  i = 0;
  #line 309 
  while (i < len) {
    {
      #line 310 
      unsigned char c = *(p + (unsigned long)i);
      #line 311 
      if ((unsigned int)c + 224U <= 94U) 
                                         #line 312 
                                         seq_putc(m,(char)((int)((char)c))); else 
                                                                    #line 314 
                                                                    seq_printf(m,(char *)"<%02x>",(int)c);
    }
    #line 309 
    i ++;
  }
  #line 316 
  seq_putc(m,(char)10);
  #line 317 
  return 0;
}

#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void *prism2_scan_results_proc_start(struct seq_file *m, loff_t *_pos)
{
  #line 322 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 323 
  cif_spin_lock_bh_lock_of_local_info(& local->lock);
  #line 326 
  if (*_pos > (long long)local->last_scan_results_count) 
                                                         #line 327 
                                                         return (void *)0;
  #line 328 
  return (void *)(*_pos + 1LL);
}

#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void *prism2_scan_results_proc_next(struct seq_file *m, void *v, loff_t *_pos)
{
  #line 333 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 335 
  (*_pos) ++;
  #line 336 
  if (*_pos > (long long)local->last_scan_results_count) 
                                                         #line 337 
                                                         return (void *)0;
  #line 338 
  return (void *)(*_pos + 1LL);
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static void prism2_scan_results_proc_stop(struct seq_file *m, void *v)
{
  #line 343 
  local_info_t *local = (local_info_t *)PDE_DATA(file_inode(m->file));
  #line 344 
  cif_spin_unlock_bh_lock_of_local_info(& local->lock);
  #line 345 
  return;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
static struct seq_operations prism2_scan_results_proc_seqops = {.start = & prism2_scan_results_proc_start, .stop = & prism2_scan_results_proc_stop, .next = & prism2_scan_results_proc_next, .show = & prism2_scan_results_proc_show};
#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
void hostap_init_proc(local_info_t *local)
{
  #line 383 
  struct file_operations *tmp;
  #line 358 
  local->proc = (struct proc_dir_entry *)0;
  #line 360 
  if (hostap_proc == (struct proc_dir_entry *)0) {
    #line 361 
    printk((char *)"\001",(char *)(& (local->dev)->name));
    #line 363 
    return;
  }
  #line 366 
  local->proc = proc_mkdir((char *)(& (local->ddev)->name),hostap_proc);
  #line 367 
  if (local->proc == (struct proc_dir_entry *)0) {
    #line 368 
    printk((char *)"\001",(char *)(& (local->ddev)->name));
    #line 370 
    return;
  }
  #line 374 
  proc_create_single_data((char *)"debug",(unsigned short)0,local->proc,& prism2_debug_proc_show,(void *)local);
  #line 377 
  proc_create_single_data((char *)"stats",(unsigned short)0,local->proc,& prism2_stats_proc_show,(void *)local);
  #line 379 
  proc_create_seq_private((char *)"wds",(unsigned short)0,local->proc,& prism2_wds_proc_seqops,0U,(void *)local);
  #line 381 
  proc_create_data((char *)"pda",(unsigned short)0,local->proc,& prism2_pda_proc_fops,(void *)local);
  #line 383 
  ;
  #line 383 
  tmp = (struct file_operations *)((local->func)->read_aux_fops != (struct file_operations *)0);
  #line 383 
  if (! tmp) 
             #line 383 
             tmp = & prism2_aux_dump_proc_fops;
  #line 383 
  ;
  #line 383 
  proc_create_data((char *)"aux_dump",(unsigned short)0,local->proc,tmp,(void *)local);
  #line 386 
  proc_create_seq_private((char *)"bss_list",(unsigned short)0,local->proc,& prism2_bss_list_proc_seqops,0U,(void *)local);
  #line 388 
  proc_create_single_data((char *)"crypt",(unsigned short)0,local->proc,& prism2_crypt_proc_show,(void *)local);
  #line 395 
  proc_create_seq_private((char *)"scan_results",(unsigned short)0,local->proc,& prism2_scan_results_proc_seqops,0U,(void *)local);
  #line 396 
  return;
}

#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_proc.c"
void hostap_remove_proc(local_info_t *local)
{
  #line 403 
  proc_remove(local->proc);
  #line 404 
  return;
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_proc.i.aux"
static void cif_spin_lock_bh_lock_of_local_info(spinlock_t *lock)
{
  #line 649 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 651 
  spin_lock_bh(lock);
  #line 652 
  return;
}

#line 655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_proc.i.aux"
static void cif_spin_unlock_bh_lock_of_local_info(spinlock_t *lock)
{
  #line 658 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 660 
  spin_unlock_bh(lock);
  #line 661 
  return;
}

#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 13 
void *memdup_user(void *, size_t);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 49 
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static size_t cif_strlen(char *s);
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 13 
void __xchg_wrong_size(void);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static bool IS_ERR(void *ptr);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti, int flag)
{
  #line 84 
  return (int)test_bit((long)flag,& ti->flags);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif_spin_lock_bh_lock_of_local_info_0(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif_spin_unlock_bh_lock_of_local_info_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_local_info(spinlock_t *lock, unsigned long flags);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 653 
static void cif___ldv_spin_lock_lock_of_local_info(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 25 
size_t ldv_strlen(char *s);
#line 26 
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 17 
int default_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
__inline static void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
  #line 81 
  wq_entry->flags = 0U;
  #line 82 
  wq_entry->private = (void *)p;
  #line 83 
  wq_entry->func = & default_wake_function;
  #line 84 
  return;
}

#line 163 
#line 163 
void add_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
#line 165 
#line 165 
void remove_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
__inline static int timer_pending(struct timer_list *timer)
{
  #line 167 
  return timer->entry.pprev != (struct hlist_node **)0;
}

#line 172 
#line 689  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static int cif_del_timer(struct timer_list *timer);
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 181 
void add_timer(struct timer_list *);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 1319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static pid_t task_pid_nr(struct task_struct *tsk)
{
  #line 1321 
  return tsk->pid;
}

#line 1660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static struct thread_info *task_thread_info(struct task_struct *task)
{
  #line 1662 
  return & task->thread_info;
}

#line 1751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
  #line 1753 
  ;
  #line 1753 
  return test_ti_thread_flag(task_thread_info(tsk),flag);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
#line 210 
bool capable(int);
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
__inline static int signal_pending(struct task_struct *p)
{
  #line 349 
  return (long)(test_tsk_thread_flag(p,2) != 0);
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kmod.h"
#line 24 
int __request_module(bool, char * , ...);
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
#line 623 
bool try_module_get(struct module *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/lib80211.h"
#line 118 
struct lib80211_crypto_ops *lib80211_get_crypto_ops(char *);
#line 119 
#line 119 
void lib80211_crypt_delayed_deinit(struct lib80211_crypt_info *, struct lib80211_crypt_data **);
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
#line 454 
int iw_handler_set_spy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 457 
#line 457 
int iw_handler_get_spy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 460 
#line 460 
int iw_handler_set_thrspy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 463 
#line 463 
int iw_handler_get_thrspy(struct net_device *, struct iw_request_info *, union iwreq_data *, char *);
#line 474  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
__inline static int iwe_stream_lcp_len(struct iw_request_info *info)
{
  #line 477 
  if (((int)info->flags & 1) != 0) 
                                   #line 478 
                                   return 4;
  #line 480 
  return 8;
}

#line 509 
#line 509 
char *iwe_stream_add_event(struct iw_request_info *, char *, char *, struct iw_event *, int);
#line 528 
#line 528 
char *iwe_stream_add_point(struct iw_request_info *, char *, char *, struct iw_event *, char *);
#line 548 
#line 548 
char *iwe_stream_add_value(struct iw_request_info *, char *, char *, char *, struct iw_event *, int);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 237 
void hostap_handle_sta_release(void *ptr);
#line 255 
#line 255 
void hostap_update_rates(local_info_t *local);
#line 256 
#line 256 
void hostap_add_wds_links(local_info_t *local);
#line 260 
#line 260 
void hostap_deauth_all_stas(struct net_device *dev, struct ap_data *ap, int resend);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
static long freq_list[14U] = {2412L, 2417L, 2422L, 2427L, 2432L, 2437L, 2442L, 2447L, 2452L, 2457L, 2462L, 2467L, 2472L, 2484L};
#line 23 
#line 23 
int hostap_set_word(struct net_device *dev, int rid, u16 val);
#line 24 
#line 24 
int hostap_set_string(struct net_device *dev, int rid, char *val);
#line 25 
#line 25 
u16 hostap_get_porttype(local_info_t *local);
#line 26 
#line 26 
int hostap_set_encryption(local_info_t *local);
#line 27 
#line 27 
int hostap_set_antsel(local_info_t *local);
#line 28 
#line 28 
int hostap_set_roaming(local_info_t *local);
#line 29 
#line 29 
int hostap_set_auth_algs(local_info_t *local);
#line 40 
#line 40 
int hostap_set_hostapd(local_info_t *local, int val, int rtnl_locked);
#line 41 
#line 41 
int hostap_set_hostapd_sta(local_info_t *local, int val, int rtnl_locked);
#line 49 
#line 49 
int prism2_update_comms_qual(struct net_device *dev);
#line 50 
#line 50 
int prism2_sta_send_mgmt(local_info_t *local, u8 *dst, u16 stype, u8 *body, size_t bodylen);
#line 52 
#line 52 
int prism2_sta_deauth(local_info_t *local, u16 reason);
#line 53 
#line 53 
int prism2_wds_add(local_info_t *local, u8 *remote_addr, int rtnl_locked);
#line 55 
#line 55 
int prism2_wds_del(local_info_t *local, u8 *remote_addr, int rtnl_locked, int do_not_remove);
#line 61 
#line 61 
int ap_control_add_mac(struct mac_restrictions *mac_restrictions, u8 *mac);
#line 62 
#line 62 
int ap_control_del_mac(struct mac_restrictions *mac_restrictions, u8 *mac);
#line 63 
#line 63 
void ap_control_flush_macs(struct mac_restrictions *mac_restrictions);
#line 64 
#line 64 
int ap_control_kick_mac(struct ap_data *ap, struct net_device *dev, u8 *mac);
#line 65 
#line 65 
void ap_control_kickall(struct ap_data *ap);
#line 66 
#line 66 
void *ap_crypt_get_ptrs(struct ap_data *ap, u8 *addr, int permanent, struct lib80211_crypt_data ***crypt);
#line 68 
#line 68 
int prism2_ap_get_sta_qual(local_info_t *local, struct sockaddr *addr, struct iw_quality *qual, int buf_size, int aplist);
#line 71 
#line 71 
int prism2_ap_translate_scan(struct net_device *dev, struct iw_request_info *info, char *buffer);
#line 73 
#line 73 
int prism2_hostapd(struct ap_data *ap, struct prism2_hostapd_param *param);
#line 90 
#line 3945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
struct iw_handler_def hostap_iw_handler_def;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 3870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
struct ethtool_ops prism2_ethtool_ops;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
int hostap_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static struct iw_statistics *hostap_get_wireless_stats(struct net_device *dev)
{
  #line 19 
  struct hostap_interface *iface;
  #line 20 
  local_info_t *local;
  #line 21 
  struct iw_statistics *wstats;
  #line 23 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 24 
  local = iface->local;
  #line 27 
  if (iface->type != (unsigned int)1) 
                                      #line 28 
                                      return (struct iw_statistics *)0;
  #line 30 
  wstats = & local->wstats;
  #line 32 
  wstats->status = (unsigned short)0U;
  #line 33 
  wstats->discard.code = local->comm_tallies.rx_discards_wep_undecryptable;
  #line 35 
  wstats->discard.misc = (local->comm_tallies.rx_fcs_errors + local->comm_tallies.rx_discards_no_buffer) + local->comm_tallies.tx_discards_wrong_sa;
  #line 40 
  wstats->discard.retries = local->comm_tallies.tx_retry_limit_exceeded;
  #line 42 
  wstats->discard.fragment = local->comm_tallies.rx_message_in_bad_msg_fragments;
  #line 45 
  if ((unsigned int)local->iw_mode + 4294967293U > 1U) {
    #line 47 
    int update = 1;
    #line 55 
    if (preempt_count() != 0) 
                              #line 56 
                              update = 0;
    #line 59 
    if (update != 0) {
      #line 59 
      if (prism2_update_comms_qual(dev) == 0) 
                                              #line 60 
                                              wstats->qual.updated = (unsigned char)15U;
    }
    #line 63 
    wstats->qual.qual = (unsigned char)local->comms_qual;
    #line 64 
    wstats->qual.level = (unsigned char)local->avg_signal;
    #line 65 
    wstats->qual.noise = (unsigned char)local->avg_noise;
  }
  else {
    #line 67 
    wstats->qual.qual = (unsigned char)0U;
    #line 68 
    wstats->qual.level = (unsigned char)0U;
    #line 69 
    wstats->qual.noise = (unsigned char)0U;
    #line 70 
    wstats->qual.updated = (unsigned char)112U;
  }
  #line 73 
  return wstats;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_get_datarates(struct net_device *dev, u8 *rates)
{
  #line 79 
  struct hostap_interface *iface;
  #line 80 
  local_info_t *local;
  #line 81 
  u8 buf[12U];
  #line 82 
  int len;
  #line 83 
  u16 val;
  #line 85 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 86 
  local = iface->local;
  #line 88 
  len = (*((local->func)->get_rid))(dev,(unsigned short)64966,(void *)(& buf),12,0);
  #line 90 
  if (len <= 1) 
                #line 91 
                return 0;
  #line 93 
  val = *((__le16 *)(& buf));
  #line 95 
  if (len + -1 <= (int)val || (unsigned int)val > 10U) 
                                                       #line 96 
                                                       return 0;
  #line 98 
  memcpy((void *)rates,(void *)((u8 *)(& buf) + 2U),(unsigned long)val);
  #line 99 
  return (int)val;
}

#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_get_name(struct net_device *dev, struct iw_request_info *info, char *name, char *extra)
{
  #line 107 
  u8 rates[10U];
  #line 108 
  int len;
  #line 108 
  int i;
  #line 119 
  char *tmp;
  #line 108 
  int over2 = 0;
  #line 110 
  len = prism2_get_datarates(dev,(u8 *)(& rates));
  #line 112 
  i = 0;
  #line 112 
  while (i < len) {
    #line 113 
    if ((unsigned int)rates[i] == 11U || (unsigned int)rates[i] == 22U) {
      #line 114 
      over2 = 1;
      #line 115 
      break;
    }
    #line 112 
    i ++;
  }
  #line 119 
  if (over2 != 0) 
                  #line 119 
                  tmp = (char *)"IEEE 802.11b"; else 
                                                     #line 119 
                                                     tmp = (char *)"IEEE 802.11-DS";
  #line 119 
  ;
  #line 119 
  strcpy(name,tmp);
  #line 121 
  return 0;
}

#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwencode(struct net_device *dev, struct iw_request_info *info, struct iw_point *erq, char *keybuf)
{
  #line 129 
  struct hostap_interface *iface;
  #line 130 
  local_info_t *local;
  #line 131 
  int i;
  #line 132 
  struct lib80211_crypt_data **crypt;
  #line 134 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 135 
  local = iface->local;
  #line 137 
  i = (int)erq->flags & 255;
  #line 138 
  if ((unsigned int)i + 4294967295U > 3U) 
                                          #line 139 
                                          i = local->crypt_info.tx_keyidx; else 
                                                                    #line 141 
                                                                    i --;
  #line 142 
  if ((unsigned int)i > 3U) 
                            #line 143 
                            return -22;
  #line 145 
  crypt = & local->crypt_info.crypt[i];
  #line 147 
  if (((int)erq->flags & 32768) != 0) {
    #line 148 
    if (*crypt != (struct lib80211_crypt_data *)0) 
                                                   #line 149 
                                                   lib80211_crypt_delayed_deinit(& local->crypt_info,crypt);
    #line 150 
    goto done;
  }
  #line 153 
  if (*crypt != (struct lib80211_crypt_data *)0 && (*crypt)->ops != (struct lib80211_crypto_ops *)0) {
    #line 153 
    if (cif_strcmp(((*crypt)->ops)->name,(char *)"WEP") != 0) 
                                                              #line 156 
                                                              lib80211_crypt_delayed_deinit(& local->crypt_info,crypt);
  }
  #line 159 
  if (*crypt == (struct lib80211_crypt_data *)0) {
    #line 160 
    struct lib80211_crypt_data *new_crypt;
    #line 163 
    new_crypt = (struct lib80211_crypt_data *)kzalloc(40UL,3264U);
    #line 165 
    if (new_crypt == (struct lib80211_crypt_data *)0) 
                                                      #line 166 
                                                      return -12;
    #line 167 
    new_crypt->ops = lib80211_get_crypto_ops((char *)"WEP");
    #line 168 
    if (new_crypt->ops == (struct lib80211_crypto_ops *)0) {
      #line 169 
      __request_module((_Bool)1,(char *)"lib80211_crypt_wep");
      #line 170 
      new_crypt->ops = lib80211_get_crypto_ops((char *)"WEP");
    }
    #line 172 
    if (new_crypt->ops != (struct lib80211_crypto_ops *)0) {
      #line 172 
      if ((int)try_module_get((new_crypt->ops)->owner) != 0) 
                                                             #line 173 
                                                             new_crypt->priv = (*((new_crypt->ops)->init))(i);
    }
    #line 174 
    if (new_crypt->ops == (struct lib80211_crypto_ops *)0 || new_crypt->priv == (void *)0) {
      #line 175 
      kfree((void *)new_crypt);
      #line 176 
      new_crypt = (struct lib80211_crypt_data *)0;
      #line 178 
      printk((char *)"\001",(char *)(& dev->name));
      #line 181 
      return -95;
    }
    #line 183 
    *crypt = new_crypt;
  }
  #line 186 
  if ((unsigned int)erq->length != 0U) {
    #line 187 
    int tmp_3;
    #line 188 
    int j;
    #line 187 
    if ((unsigned int)erq->length <= 5U) 
                                         #line 187 
                                         tmp_3 = 5; else 
                                                         #line 187 
                                                         tmp_3 = 13;
    #line 187 
    int len = tmp_3;
    #line 188 
    int first = 1;
    #line 189 
    if ((int)erq->length < len) 
                                #line 190 
                                memset((void *)(keybuf + (unsigned long)erq->length),0,(unsigned long)(len - (int)erq->length));
    #line 191 
    (*(((*crypt)->ops)->set_key))((void *)keybuf,len,(u8 *)0U,(*crypt)->priv);
    #line 192 
    j = 0;
    #line 192 
    while (j <= 3) {
      #line 193 
      if (j != i && local->crypt_info.crypt[j] != (struct lib80211_crypt_data *)0) {
        #line 194 
        first = 0;
        #line 195 
        break;
      }
      #line 192 
      j ++;
    }
    #line 198 
    if (first != 0) 
                    #line 199 
                    local->crypt_info.tx_keyidx = i;
  }
  else 
       #line 202 
       local->crypt_info.tx_keyidx = i;
  #line 205 
  done: 
        #line 205 
  ;
  #line 206 
  local->open_wep = (int)erq->flags & 8192;
  #line 208 
  if (hostap_set_encryption(local) != 0) {
    #line 209 
    printk((char *)"\001",(char *)(& dev->name));
    #line 210 
    return -22;
  }
  #line 218 
  if (local->iw_mode != 2) {
    #line 218 
    if ((*((local->func)->reset_port))(dev) != 0) {
      #line 219 
      printk((char *)"\001",(char *)(& dev->name));
      #line 220 
      return -22;
    }
  }
  #line 223 
  return 0;
}

#line 227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwencode(struct net_device *dev, struct iw_request_info *info, struct iw_point *erq, char *key)
{
  #line 231 
  struct hostap_interface *iface;
  #line 232 
  local_info_t *local;
  #line 233 
  int i;
  #line 233 
  int len;
  #line 234 
  u16 val;
  #line 235 
  struct lib80211_crypt_data *crypt;
  #line 268 
  int tmp_1;
  #line 237 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 238 
  local = iface->local;
  #line 240 
  i = (int)erq->flags & 255;
  #line 241 
  if ((unsigned int)i + 4294967295U > 3U) 
                                          #line 242 
                                          i = local->crypt_info.tx_keyidx; else 
                                                                    #line 244 
                                                                    i --;
  #line 245 
  if ((unsigned int)i > 3U) 
                            #line 246 
                            return -22;
  #line 248 
  crypt = local->crypt_info.crypt[i];
  #line 249 
  erq->flags = (unsigned short)((unsigned int)((unsigned short)i) + 1U);
  #line 251 
  if (crypt == (struct lib80211_crypt_data *)0 || crypt->ops == (struct lib80211_crypto_ops *)0) {
    #line 252 
    erq->length = (unsigned short)0U;
    #line 253 
    erq->flags = (unsigned short)((unsigned int)erq->flags | 32768U);
    #line 254 
    return 0;
  }
  #line 257 
  if (cif_strcmp((crypt->ops)->name,(char *)"WEP") != 0) {
    #line 260 
    erq->length = (unsigned short)0U;
    #line 261 
    erq->flags = erq->flags;
    #line 262 
    return 0;
  }
  #line 267 
  len = (*((crypt->ops)->get_key))((void *)key,13,(u8 *)0U,crypt->priv);
  #line 268 
  if (0 > len) 
               #line 268 
               tmp_1 = 0; else 
                               #line 268 
                               tmp_1 = len;
  #line 268 
  erq->length = (unsigned short)tmp_1;
  #line 270 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64552,
                                    (void *)(& val),2,1) < 0) {
    #line 272 
    printk((char *)"CNFWEPFLAGS reading failed\n");
    #line 273 
    return -95;
  }
  #line 275 
  u16 *tmp_3 = & val;
  #line 276 
  if (((unsigned long)val & 1UL) != 0UL) 
                                         #line 277 
                                         erq->flags = erq->flags; else 
                                                                    #line 279 
                                                                    erq->flags = (unsigned short)((unsigned int)erq->flags | 32768U);
  #line 280 
  if (((unsigned long)val & 2UL) != 0UL) 
                                         #line 281 
                                         erq->flags = (unsigned short)((unsigned int)erq->flags | 16384U); else 
                                                                    #line 283 
                                                                    erq->flags = (unsigned short)((unsigned int)erq->flags | 8192U);
  #line 285 
  return 0;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int hostap_set_rate(struct net_device *dev)
{
  #line 291 
  struct hostap_interface *iface;
  #line 292 
  local_info_t *local;
  #line 293 
  int ret;
  #line 293 
  int basic_rates;
  #line 313 
  int tmp_4;
  #line 295 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 296 
  local = iface->local;
  #line 298 
  basic_rates = (int)local->basic_rates & (int)local->tx_rate_control;
  #line 299 
  if (basic_rates == 0 || (int)local->basic_rates != basic_rates) {
    #line 300 
    printk((char *)"\001",(char *)(& dev->name));
    #line 303 
    if (basic_rates == 0) 
                          #line 304 
                          basic_rates = (int)local->tx_rate_control;
    #line 306 
    local->basic_rates = (unsigned short)basic_rates;
    #line 307 
    if (hostap_set_word(dev,64691,
                        (unsigned short)((int)((unsigned short)basic_rates))) != 0) 
      #line 309 
      printk((char *)"\001",(char *)(& dev->name));
  }
  #line 313 
  if (hostap_set_word(dev,64644,
                        (unsigned short)((int)local->tx_rate_control)) != 0) 
    #line 313 
    tmp_4 = 1;
  else {
    #line 314 
    if (hostap_set_word(dev,64692,
                        (unsigned short)((int)local->tx_rate_control)) != 0) 
      #line 313 
      tmp_4 = 1;
    else {
      #line 316 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 313 
                                                    tmp_4 = 1; else 
                                                                    #line 313 
                                                                    tmp_4 = 0;
    }
  }
  #line 313 
  ret = tmp_4;
  #line 319 
  if (ret != 0) 
                #line 320 
                printk((char *)"\001",(char *)(& dev->name),(int)local->tx_rate_control);
  #line 327 
  hostap_update_rates(local);
  #line 329 
  return ret;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwrate(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 337 
  struct hostap_interface *iface;
  #line 338 
  local_info_t *local;
  #line 340 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 341 
  local = iface->local;
  #line 343 
  if ((unsigned int)rrq->fixed != 0U) 
    #line 344 
    switch (rrq->value) {
      #line 345 
      case 11000000: 
                     #line 345 
      ;
      #line 346 
      local->tx_rate_control = (unsigned short)8U;
      #line 347 
      break;
      #line 348 
      case 5500000: 
                    #line 348 
      ;
      #line 349 
      local->tx_rate_control = (unsigned short)4U;
      #line 350 
      break;
      #line 351 
      case 2000000: 
                    #line 351 
      ;
      #line 352 
      local->tx_rate_control = (unsigned short)2U;
      #line 353 
      break;
      #line 354 
      case 1000000: 
                    #line 354 
      ;
      #line 355 
      local->tx_rate_control = (unsigned short)1U;
      #line 356 
      break;
      #line 357 
      default: 
               #line 357 
      ;
      #line 358 
      local->tx_rate_control = (unsigned short)15U;
      #line 361 
      break;
    }
  else 
    #line 364 
    switch (rrq->value) {
      #line 365 
      case 11000000: 
                     #line 365 
      ;
      #line 366 
      local->tx_rate_control = (unsigned short)15U;
      #line 369 
      break;
      #line 370 
      case 5500000: 
                    #line 370 
      ;
      #line 371 
      local->tx_rate_control = (unsigned short)7U;
      #line 373 
      break;
      #line 374 
      case 2000000: 
                    #line 374 
      ;
      #line 375 
      local->tx_rate_control = (unsigned short)3U;
      #line 377 
      break;
      #line 378 
      case 1000000: 
                    #line 378 
      ;
      #line 379 
      local->tx_rate_control = (unsigned short)1U;
      #line 380 
      break;
      #line 381 
      default: 
               #line 381 
      ;
      #line 382 
      local->tx_rate_control = (unsigned short)15U;
      #line 385 
      break;
    }
  #line 389 
  return hostap_set_rate(dev);
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwrate(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 397 
  u16 val;
  #line 398 
  struct hostap_interface *iface;
  #line 399 
  local_info_t *local;
  #line 400 
  int ret = 0;
  #line 402 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 403 
  local = iface->local;
  #line 405 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64644,
                                    (void *)(& val),2,1) < 0) 
    #line 407 
    return -22;
  #line 409 
  if (((int)val & 1) != 0 && (unsigned int)val > 1U) 
                                                     #line 410 
                                                     rrq->fixed = (unsigned char)0U; else 
                                                                    #line 412 
                                                                    rrq->fixed = (unsigned char)1U;
  #line 414 
  if ((local->iw_mode == 3 && local->ap != (struct ap_data *)0) && local->fw_tx_rate_control == 0) {
    #line 419 
    if ((local->ap)->last_tx_rate > 0) 
                                       #line 419 
                                       rrq->value = (local->ap)->last_tx_rate * 100000; else 
                                                                    #line 419 
                                                                    rrq->value = 11000000;
    #line 421 
    return 0;
  }
  #line 424 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64836,
                                    (void *)(& val),2,1) < 0) 
    #line 426 
    return -22;
  #line 428 
  switch ((int)val) {
    #line 429 
    case 1: 
            #line 429 
    ;
    #line 430 
    rrq->value = 1000000;
    #line 431 
    break;
    #line 432 
    case 2: 
            #line 432 
    ;
    #line 433 
    rrq->value = 2000000;
    #line 434 
    break;
    #line 435 
    case 4: 
            #line 435 
    ;
    #line 436 
    rrq->value = 5500000;
    #line 437 
    break;
    #line 438 
    case 8: 
            #line 438 
    ;
    #line 439 
    rrq->value = 11000000;
    #line 440 
    break;
    #line 441 
    default: 
             #line 441 
    ;
    #line 443 
    rrq->value = 11000000;
    #line 444 
    ret = -22;
    #line 445 
    break;
  }
  #line 448 
  return ret;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwsens(struct net_device *dev, struct iw_request_info *info, struct iw_param *sens, char *extra)
{
  #line 456 
  struct hostap_interface *iface;
  #line 457 
  local_info_t *local;
  #line 459 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 460 
  local = iface->local;
  #line 463 
  if ((unsigned int)sens->value + 4294967295U > 2U) 
                                                    #line 464 
                                                    return -22;
  #line 466 
  if (hostap_set_word(dev,64518,
                        (unsigned short)((int)((unsigned short)sens->value))) != 0) 
    #line 468 
    return -22;
  else {
    #line 466 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 468 
                                                  return -22;
  }
  #line 470 
  return 0;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwsens(struct net_device *dev, struct iw_request_info *info, struct iw_param *sens, char *extra)
{
  #line 477 
  struct hostap_interface *iface;
  #line 478 
  local_info_t *local;
  #line 479 
  __le16 val;
  #line 481 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 482 
  local = iface->local;
  #line 485 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64518,
                                    (void *)(& val),2,1) < 0) 
    #line 487 
    return -22;
  #line 489 
  sens->value = (int)val;
  #line 490 
  sens->fixed = (unsigned char)1U;
  #line 492 
  return 0;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwaplist(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 501 
  struct hostap_interface *iface;
  #line 502 
  local_info_t *local;
  #line 503 
  struct sockaddr *addr;
  #line 504 
  struct iw_quality *qual;
  #line 506 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 507 
  local = iface->local;
  #line 509 
  if (local->iw_mode != 3) {
    #line 510 
    printk((char *)"\001");
    #line 512 
    data->length = (unsigned short)0U;
    #line 513 
    return -95;
  }
  #line 516 
  addr = (struct sockaddr *)kmalloc_array(64UL,16UL,3264U);
  #line 517 
  qual = (struct iw_quality *)kmalloc_array(64UL,4UL,3264U);
  #line 518 
  if (addr == (struct sockaddr *)0 || qual == (struct iw_quality *)0) {
    #line 519 
    kfree((void *)addr);
    #line 520 
    kfree((void *)qual);
    #line 521 
    data->length = (unsigned short)0U;
    #line 522 
    return -12;
  }
  #line 525 
  data->length = (unsigned short)prism2_ap_get_sta_qual(local,addr,qual,64,1);
  #line 527 
  memcpy((void *)extra,(void *)addr,(unsigned long)data->length * 16UL);
  #line 528 
  data->flags = (unsigned short)1U;
  #line 529 
  memcpy((void *)(extra + (unsigned long)data->length * 16UL),(void *)qual,(unsigned long)data->length * 4UL);
  #line 532 
  kfree((void *)addr);
  #line 533 
  kfree((void *)qual);
  #line 534 
  return 0;
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwrts(struct net_device *dev, struct iw_request_info *info, struct iw_param *rts, char *extra)
{
  #line 542 
  struct hostap_interface *iface;
  #line 543 
  local_info_t *local;
  #line 544 
  __le16 val;
  #line 546 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 547 
  local = iface->local;
  #line 549 
  if ((unsigned int)rts->disabled != 0U) 
                                         #line 550 
                                         val = (unsigned short)2347U;
  else 
    #line 551 
    if ((unsigned int)rts->value > 2347U) 
                                          #line 552 
                                          return -22; else 
                                                           #line 554 
                                                           val = (unsigned short)rts->value;
  #line 556 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64643,
                                    (void *)(& val),2) != 0) 
    #line 558 
    return -22;
  else {
    #line 556 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 558 
                                                  return -22;
  }
  #line 560 
  local->rts_threshold = rts->value;
  #line 562 
  return 0;
}

#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwrts(struct net_device *dev, struct iw_request_info *info, struct iw_param *rts, char *extra)
{
  #line 569 
  struct hostap_interface *iface;
  #line 570 
  local_info_t *local;
  #line 571 
  __le16 val;
  #line 573 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 574 
  local = iface->local;
  #line 576 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64643,
                                    (void *)(& val),2,1) < 0) 
    #line 578 
    return -22;
  #line 580 
  rts->value = (int)val;
  #line 581 
  rts->disabled = (unsigned char)(rts->value == 2347);
  #line 582 
  rts->fixed = (unsigned char)1U;
  #line 584 
  return 0;
}

#line 588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwfrag(struct net_device *dev, struct iw_request_info *info, struct iw_param *rts, char *extra)
{
  #line 592 
  struct hostap_interface *iface;
  #line 593 
  local_info_t *local;
  #line 594 
  __le16 val;
  #line 596 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 597 
  local = iface->local;
  #line 599 
  if ((unsigned int)rts->disabled != 0U) 
                                         #line 600 
                                         val = (unsigned short)2346U;
  else 
    #line 601 
    if ((unsigned int)rts->value + 4294967040U > 2090U) 
                                                        #line 602 
                                                        return -22; else 
                                                                    #line 604 
                                                                    val = (unsigned short)((unsigned int)((unsigned short)rts->value) & 65534U);
  #line 606 
  local->fragm_threshold = rts->value & -2;
  #line 607 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64642,
                                    (void *)(& val),2) != 0) 
    #line 610 
    return -22;
  else {
    #line 609 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 610 
                                                  return -22;
  }
  #line 612 
  return 0;
}

#line 615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwfrag(struct net_device *dev, struct iw_request_info *info, struct iw_param *rts, char *extra)
{
  #line 619 
  struct hostap_interface *iface;
  #line 620 
  local_info_t *local;
  #line 621 
  __le16 val;
  #line 623 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 624 
  local = iface->local;
  #line 626 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64642,
                                    (void *)(& val),2,1) < 0) 
    #line 628 
    return -22;
  #line 630 
  rts->value = (int)val;
  #line 631 
  rts->disabled = (unsigned char)(rts->value == 2346);
  #line 632 
  rts->fixed = (unsigned char)1U;
  #line 634 
  return 0;
}

#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int hostap_join_ap(struct net_device *dev)
{
  #line 641 
  struct hostap_interface *iface;
  #line 642 
  local_info_t *local;
  #line 643 
  struct hfa384x_join_request req;
  #line 644 
  unsigned long flags;
  #line 645 
  int i;
  #line 646 
  struct hfa384x_hostscan_result *entry;
  #line 648 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 649 
  local = iface->local;
  #line 651 
  memcpy((void *)(& req.bssid),(void *)(& local->preferred_ap),6UL);
  #line 652 
  req.channel = (unsigned short)0U;
  #line 654 
  cif___ldv_spin_lock_lock_of_local_info(& local->lock);
  #line 655 
  i = 0;
  #line 655 
  while (local->last_scan_results_count > i) {
    {
      #line 656 
      if (local->last_scan_results == (struct hfa384x_hostscan_result *)0) 
        #line 657 
        break;
      #line 658 
      entry = local->last_scan_results + (unsigned long)i;
      #line 659 
      if ((int)ether_addr_equal((u8 *)(& local->preferred_ap),
                         (u8 *)(& entry->bssid)) != 0) {
        #line 660 
        req.channel = entry->chid;
        #line 661 
        break;
      }
    }
    #line 655 
    i ++;
  }
  #line 664 
  cif_spin_unlock_irqrestore_lock_of_local_info(& local->lock,flags);
  #line 666 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64738,
                                    (void *)(& req),8) != 0) {
    #line 668 
    printk((char *)"\001",(char *)(& dev->name),(u8 *)(& local->preferred_ap));
    #line 670 
    return -1;
  }
  #line 673 
  printk((char *)"\001",(char *)(& dev->name),(u8 *)(& local->preferred_ap));
  #line 676 
  return 0;
}

#line 681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwap(struct net_device *dev, struct iw_request_info *info, struct sockaddr *ap_addr, char *extra)
{
  #line 688 
  struct hostap_interface *iface;
  #line 689 
  local_info_t *local;
  #line 691 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 692 
  local = iface->local;
  #line 694 
  memcpy((void *)(& local->preferred_ap),(void *)(& ap_addr->sa_data),6UL);
  #line 696 
  if (local->host_roaming == 1 && local->iw_mode == 2) {
    #line 697 
    struct hfa384x_scan_request scan_req;
    #line 698 
    memset((void *)(& scan_req),0,4UL);
    #line 699 
    scan_req.channel_list = (unsigned short)16383U;
    #line 700 
    scan_req.txrate = (unsigned short)1U;
    #line 701 
    if ((*((local->func)->set_rid))(dev,(unsigned short)64737,
                                    (void *)(& scan_req),4) != 0) 
      #line 703 
      printk((char *)"\001",(char *)(& dev->name));
  }
  else 
    #line 707 
    if (local->host_roaming == 2 && local->iw_mode == 2) {
      #line 709 
      if (hostap_join_ap(dev) != 0) 
                                    #line 710 
                                    return -22;
    }
    else 
         #line 712 
         printk((char *)"\001",(char *)(& dev->name));
  #line 717 
  return 0;
}

#line 721  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwap(struct net_device *dev, struct iw_request_info *info, struct sockaddr *ap_addr, char *extra)
{
  #line 725 
  struct hostap_interface *iface;
  #line 726 
  local_info_t *local;
  #line 728 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 729 
  local = iface->local;
  #line 731 
  ap_addr->sa_family = (unsigned short)1U;
  #line 732 
  switch ((unsigned int)iface->type) {
    #line 733 
    case (unsigned int)2: 
                          #line 733 
    ;
    #line 734 
    memcpy((void *)(& ap_addr->sa_data),(void *)dev->dev_addr,6UL);
    #line 735 
    break;
    #line 736 
    case (unsigned int)3: 
                          #line 736 
    ;
    #line 737 
    memcpy((void *)(& ap_addr->sa_data),(void *)(& local->assoc_ap_addr),6UL);
    #line 738 
    break;
    #line 739 
    case (unsigned int)4: 
                          #line 739 
    ;
    #line 740 
    memcpy((void *)(& ap_addr->sa_data),(void *)(& iface->u.wds.remote_addr),6UL);
    #line 741 
    break;
    #line 742 
    default: 
             #line 742 
    ;
    #line 743 
    if ((*((local->func)->get_rid))(dev,(unsigned short)64834,
                                    (void *)(& ap_addr->sa_data),6,1) < 0) 
      #line 745 
      return -95;
    #line 749 
    memcpy((void *)(& local->bssid),(void *)(& ap_addr->sa_data),6UL);
    #line 750 
    break;
  }
  #line 753 
  return 0;
}

#line 757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwnickn(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *nickname)
{
  #line 761 
  struct hostap_interface *iface;
  #line 762 
  local_info_t *local;
  #line 764 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 765 
  local = iface->local;
  #line 767 
  memset((void *)(& local->name),0,33UL);
  #line 768 
  memcpy((void *)(& local->name),(void *)nickname,(unsigned long)data->length);
  #line 769 
  local->name_set = 1;
  #line 771 
  if (hostap_set_string(dev,64526,(char *)(& local->name)) != 0) 
                                                                 #line 773 
                                                                 return -22;
  else {
    #line 771 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 773 
                                                  return -22;
  }
  #line 775 
  return 0;
}

#line 778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwnickn(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *nickname)
{
  #line 782 
  struct hostap_interface *iface;
  #line 783 
  local_info_t *local;
  #line 784 
  int len;
  #line 785 
  char name[35U];
  #line 786 
  u16 val;
  #line 788 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 789 
  local = iface->local;
  #line 791 
  len = (*((local->func)->get_rid))(dev,(unsigned short)64526,(void *)(& name),34,0);
  #line 793 
  val = *((__le16 *)(& name));
  #line 794 
  if ((unsigned int)len > 34U || (unsigned int)val > 32U) 
                                                          #line 795 
                                                          return -95;
  #line 797 
  name[(int)val + 2] = (char)0;
  #line 798 
  data->length = (unsigned short)((unsigned int)val + 1U);
  #line 799 
  memcpy((void *)nickname,(void *)((char *)(& name) + 2U),(unsigned long)((int)val + 1));
  #line 801 
  return 0;
}

#line 805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwfreq(struct net_device *dev, struct iw_request_info *info, struct iw_freq *freq, char *extra)
{
  #line 809 
  struct hostap_interface *iface;
  #line 810 
  local_info_t *local;
  #line 812 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 813 
  local = iface->local;
  #line 816 
  if (((int)freq->e == 1 && (long)(freq->m / 100000) >= freq_list[0]) && (long)(freq->m / 100000) <= freq_list[13UL]) {
    #line 819 
    int ch;
    #line 820 
    int fr = freq->m / 100000;
    #line 821 
    ch = 0;
    #line 821 
    while ((unsigned int)ch <= 13U) {
      #line 822 
      if ((long)fr == freq_list[ch]) {
        #line 823 
        freq->e = (short)0;
        #line 824 
        freq->m = ch + 1;
        #line 825 
        break;
      }
      #line 821 
      ch ++;
    }
  }
  #line 830 
  if ((((int)freq->e != 0 || freq->m <= 0) || (unsigned int)freq->m > 14U) || (((int)local->channel_mask >> (freq->m + -1)) & 1) == 0) 
    #line 832 
    return -22;
  #line 834 
  local->channel = freq->m;
  #line 835 
  if (hostap_set_word(dev,64515,
                        (unsigned short)((int)((unsigned short)local->channel))) != 0) 
    #line 837 
    return -22;
  else {
    #line 835 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 837 
                                                  return -22;
  }
  #line 839 
  return 0;
}

#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwfreq(struct net_device *dev, struct iw_request_info *info, struct iw_freq *freq, char *extra)
{
  #line 846 
  struct hostap_interface *iface;
  #line 847 
  local_info_t *local;
  #line 848 
  u16 val;
  #line 850 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 851 
  local = iface->local;
  #line 853 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64961,
                                    (void *)(& val),2,1) < 0) 
    #line 855 
    return -22;
  #line 857 
  u16 *tmp_2 = & val;
  #line 858 
  if ((unsigned int)val + 65535U > 13U) 
                                        #line 859 
                                        return -22;
  #line 861 
  freq->m = (int)(freq_list[(int)val + -1] * (long)100000U);
  #line 862 
  freq->e = (short)1;
  #line 864 
  return 0;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static void hostap_monitor_set_type(local_info_t *local)
{
  #line 870 
  struct net_device *dev = local->ddev;
  #line 872 
  if (dev == (struct net_device *)0) 
                                     #line 873 
                                     return;
  #line 875 
  if ((unsigned int)local->monitor_type + 4294967295U <= 1U) 
                                                             #line 877 
                                                             dev->type = (unsigned short)802U;
  else 
    #line 878 
    if (local->monitor_type == (unsigned int)3) 
                                                #line 879 
                                                dev->type = (unsigned short)803U; else 
                                                                    #line 881 
                                                                    dev->type = (unsigned short)801U;
  #line 882 
  return;
}

#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwessid(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *ssid)
{
  #line 890 
  struct hostap_interface *iface;
  #line 891 
  local_info_t *local;
  #line 893 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 894 
  local = iface->local;
  #line 896 
  if (iface->type == (unsigned int)4) 
                                      #line 897 
                                      return -95;
  #line 899 
  if ((unsigned int)data->flags == 0U) 
                                       #line 900 
                                       *ssid = (char)0;
  #line 902 
  if (local->iw_mode == 3 && (int)*ssid == 0) {
    #line 905 
    printk((char *)"\001",(char *)(& dev->name));
    #line 907 
    return -22;
  }
  #line 910 
  memcpy((void *)(& local->essid),(void *)ssid,(unsigned long)data->length);
  #line 911 
  local->essid[(int)data->length] = (char)0;
  #line 913 
  if (local->fw_ap == 0) {
    #line 913 
    if (hostap_set_string(dev,64514,(char *)(& local->essid)) != 0) 
                                                                    #line 917 
                                                                    return -22; else 
                                                                    #line 913 
                                                                    goto _LAND;
  }
  else {
    #line 913 
    _LAND: 
    #line 915 
    if (hostap_set_string(dev,64516,(char *)(& local->essid)) != 0) 
                                                                    #line 917 
                                                                    return -22;
    else {
      #line 915 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 917 
                                                    return -22;
    }
  }
  #line 919 
  return 0;
}

#line 922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwessid(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *essid)
{
  #line 926 
  struct hostap_interface *iface;
  #line 927 
  local_info_t *local;
  #line 928 
  u16 val;
  #line 930 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 931 
  local = iface->local;
  #line 933 
  if (iface->type == (unsigned int)4) 
                                      #line 934 
                                      return -95;
  #line 936 
  data->flags = (unsigned short)1U;
  #line 937 
  if (local->iw_mode == 3) {
    #line 938 
    data->length = (unsigned short)cif_strlen((char *)(& local->essid));
    #line 939 
    memcpy((void *)essid,(void *)(& local->essid),32UL);
  }
  else {
    #line 941 
    int len;
    #line 942 
    char ssid[34U];
    #line 943 
    memset((void *)(& ssid),0,34UL);
    #line 944 
    len = (*((local->func)->get_rid))(dev,(unsigned short)64833,(void *)(& ssid),34,0);
    #line 946 
    val = *((__le16 *)(& ssid));
    #line 947 
    if ((unsigned int)len > 34U || (unsigned int)val > 32U) 
                                                            #line 948 
                                                            return -95;
    #line 950 
    data->length = val;
    #line 951 
    memcpy((void *)essid,(void *)((char *)(& ssid) + 2U),32UL);
  }
  #line 954 
  return 0;
}

#line 958  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwrange(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 962 
  struct hostap_interface *iface;
  #line 963 
  local_info_t *local;
  #line 965 
  u8 rates[10U];
  #line 966 
  u16 val;
  #line 967 
  int i;
  #line 967 
  int len;
  #line 967 
  int over2;
  #line 964 
  struct iw_range *range = (struct iw_range *)extra;
  #line 969 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 970 
  local = iface->local;
  #line 972 
  data->length = (unsigned short)568U;
  #line 973 
  memset((void *)range,0,568UL);
  #line 978 
  range->txpower_capa = (unsigned short)0U;
  #line 980 
  if ((unsigned int)local->iw_mode + 4294967295U <= 1U) {
    #line 982 
    range->min_pmp = 1024;
    #line 983 
    range->max_pmp = 67107840;
    #line 984 
    range->min_pmt = 1024;
    #line 985 
    range->max_pmt = 1024000;
    #line 986 
    range->pmp_flags = (unsigned short)4096U;
    #line 987 
    range->pmt_flags = (unsigned short)8192U;
    #line 988 
    range->pm_capa = (unsigned short)13056U;
  }
  #line 992 
  range->we_version_compiled = (unsigned char)22U;
  #line 993 
  range->we_version_source = (unsigned char)18U;
  #line 995 
  range->retry_capa = (unsigned short)4096U;
  #line 996 
  range->retry_flags = (unsigned short)4096U;
  #line 997 
  range->min_retry = 0;
  #line 998 
  range->max_retry = 255;
  #line 1000 
  range->num_channels = (unsigned short)14U;
  #line 1002 
  val = (unsigned short)0U;
  #line 1003 
  i = 0;
  #line 1003 
  while ((unsigned int)i <= 13U) {
    #line 1004 
    if ((((int)local->channel_mask >> i) & 1) != 0) {
      #line 1005 
      range->freq[(int)val].i = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
      #line 1006 
      range->freq[(int)val].m = (int)(freq_list[i] * (long)100000U);
      #line 1007 
      range->freq[(int)val].e = (short)1;
      #line 1008 
      val = (u16)((int)val + 1);
    }
    #line 1010 
    if ((unsigned int)val == 32U) 
                                  #line 1011 
                                  break;
    #line 1003 
    i ++;
  }
  #line 1013 
  range->num_frequency = (unsigned char)val;
  #line 1015 
  if (local->sta_fw_ver > 66304U) {
    #line 1016 
    range->max_qual.qual = (unsigned char)70U;
    #line 1019 
    range->max_qual.level = (unsigned char)0U;
    #line 1020 
    range->max_qual.noise = (unsigned char)0U;
    #line 1023 
    range->avg_qual.qual = (unsigned char)20U;
    #line 1024 
    range->avg_qual.level = (unsigned char)196U;
    #line 1025 
    range->avg_qual.noise = (unsigned char)161U;
  }
  else {
    #line 1027 
    range->max_qual.qual = (unsigned char)92U;
    #line 1028 
    range->max_qual.level = (unsigned char)154U;
    #line 1029 
    range->max_qual.noise = (unsigned char)154U;
  }
  #line 1031 
  range->sensitivity = 3;
  #line 1033 
  range->max_encoding_tokens = (unsigned char)4U;
  #line 1034 
  range->num_encoding_sizes = (unsigned char)2U;
  #line 1035 
  range->encoding_size[0] = (unsigned short)5U;
  #line 1036 
  range->encoding_size[1] = (unsigned short)13U;
  #line 1038 
  over2 = 0;
  #line 1039 
  len = prism2_get_datarates(dev,(u8 *)(& rates));
  #line 1040 
  range->num_bitrates = (unsigned char)0U;
  #line 1041 
  i = 0;
  #line 1041 
  while (i < len) {
    #line 1042 
    if ((unsigned int)range->num_bitrates <= 31U) {
      #line 1043 
      range->bitrate[(int)range->num_bitrates] = (int)rates[i] * 500000;
      #line 1045 
      range->num_bitrates = (__u8)((int)range->num_bitrates + 1);
    }
    #line 1047 
    if ((unsigned int)rates[i] == 11U || (unsigned int)rates[i] == 22U) 
      #line 1048 
      over2 = 1;
    #line 1041 
    i ++;
  }
  #line 1051 
  if (over2 != 0) 
                  #line 1051 
                  range->throughput = 5500000U; else 
                                                     #line 1051 
                                                     range->throughput = 1500000U;
  #line 1053 
  range->min_rts = 0;
  #line 1054 
  range->max_rts = 2347;
  #line 1055 
  range->min_frag = 256;
  #line 1056 
  range->max_frag = 2346;
  #line 1059 
  range->event_capa[0] = 103284816U;
  #line 1063 
  range->event_capa[1] = 1024U;
  #line 1064 
  range->event_capa[4] = 29U;
  #line 1069 
  range->enc_capa = 15U;
  #line 1072 
  if (local->sta_fw_ver > 66304U) 
                                  #line 1073 
                                  range->scan_capa = (unsigned char)1U;
  #line 1075 
  return 0;
}

#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int hostap_monitor_mode_enable(local_info_t *local)
{
  #line 1081 
  struct net_device *dev = local->dev;
  #line 1083 
  printk((char *)"\001");
  #line 1084 
  hostap_monitor_set_type(local);
  #line 1086 
  if (hostap_set_word(dev,64512,(unsigned short)3) != 0) {
    #line 1088 
    printk((char *)"\001");
    #line 1090 
    return -95;
  }
  #line 1096 
  if (hostap_set_word(dev,64552,(unsigned short)144) != 0) {
    #line 1099 
    printk((char *)"\001");
    #line 1100 
    return -95;
  }
  #line 1103 
  if ((*((local->func)->reset_port))(dev) != 0) 
                                                #line 1103 
                                                goto _LOR;
  else {
    #line 1103 
    if ((*((local->func)->cmd))(dev,(unsigned short)2872,(unsigned short)0,
                                (u16 *)0U,(u16 *)0U) != 0) {
      #line 1103 
      _LOR: {
              #line 1107 
              printk((char *)"\001");
              #line 1108 
              return -95;
            }
    }
  }
  #line 1111 
  return 0;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int hostap_monitor_mode_disable(local_info_t *local)
{
  #line 1117 
  struct net_device *dev = local->ddev;
  #line 1119 
  if (dev == (struct net_device *)0) 
                                     #line 1120 
                                     return -1;
  #line 1122 
  printk((char *)"\001",(char *)(& dev->name));
  #line 1123 
  dev->type = (unsigned short)1U;
  #line 1125 
  if ((*((local->func)->cmd))(dev,(unsigned short)3896,(unsigned short)0,
                              (u16 *)0U,(u16 *)0U) != 0) 
    #line 1128 
    return -1;
  #line 1129 
  return hostap_set_encryption(local);
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwmode(struct net_device *dev, struct iw_request_info *info, __u32 *mode, char *extra)
{
  #line 1137 
  struct hostap_interface *iface;
  #line 1138 
  local_info_t *local;
  #line 1139 
  int double_reset = 0;
  #line 1141 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1142 
  local = iface->local;
  #line 1144 
  if (*mode + 4294967295U > 3U && *mode != 6U) 
                                               #line 1147 
                                               return -95;
  #line 1154 
  if (*mode == (unsigned int)local->iw_mode) 
                                             #line 1155 
                                             return 0;
  #line 1157 
  if (*mode == 3U && (int)local->essid[0] == 0) {
    #line 1158 
    printk((char *)"\001",(char *)(& dev->name));
    #line 1160 
    return -22;
  }
  #line 1163 
  if (local->iw_mode == 6) 
                           #line 1164 
                           hostap_monitor_mode_disable(local);
  #line 1166 
  if ((local->iw_mode == 1 || local->iw_mode == 6) && *mode == 3U) 
                                                                   #line 1172 
                                                                   double_reset = 1;
  #line 1175 
  printk((char *)"\001",(char *)(& dev->name),local->iw_mode,*mode);
  #line 1177 
  local->iw_mode = (int)*mode;
  #line 1179 
  if (local->iw_mode == 6) 
                           #line 1180 
                           hostap_monitor_mode_enable(local);
  else 
    #line 1181 
    if ((local->iw_mode == 3 && local->host_encrypt == 0) && local->fw_encrypt_ok == 0) {
      #line 1183 
      printk((char *)"\001",(char *)(& dev->name));
      #line 1186 
      local->host_encrypt = 1;
    }
  #line 1189 
  ;
  #line 1189 
  if (hostap_set_word(dev,64512,
                        (unsigned short)((int)hostap_get_porttype(local))) != 0) 
    #line 1191 
    return -95;
  #line 1193 
  if ((*((local->func)->reset_port))(dev) != 0) 
                                                #line 1194 
                                                return -22;
  #line 1195 
  if (double_reset != 0) {
    #line 1195 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 1196 
                                                  return -22;
  }
  #line 1198 
  if ((unsigned int)local->iw_mode + 4294967295U > 1U) {
    #line 1202 
    netif_carrier_on(local->dev);
    #line 1203 
    netif_carrier_on(local->ddev);
  }
  #line 1205 
  return 0;
}

#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwmode(struct net_device *dev, struct iw_request_info *info, __u32 *mode, char *extra)
{
  #line 1213 
  struct hostap_interface *iface;
  #line 1214 
  local_info_t *local;
  #line 1216 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1217 
  local = iface->local;
  #line 1219 
  switch ((unsigned int)iface->type) {
    #line 1220 
    case (unsigned int)3: 
                          #line 1220 
    ;
    #line 1221 
    *mode = 2U;
    #line 1222 
    break;
    #line 1223 
    case (unsigned int)4: 
                          #line 1223 
    ;
    #line 1224 
    *mode = 4U;
    #line 1225 
    break;
    #line 1226 
    default: 
             #line 1226 
    ;
    #line 1227 
    *mode = (unsigned int)local->iw_mode;
    #line 1228 
    break;
  }
  #line 1230 
  return 0;
}

#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwpower(struct net_device *dev, struct iw_request_info *info, struct iw_param *wrq, char *extra)
{
  #line 1241 
  int ret = 0;
  #line 1243 
  if ((unsigned int)wrq->disabled != 0U) {
    #line 1244 
    return hostap_set_word(dev,64521,(unsigned short)0);
  }
  #line 1246 
  switch ((int)wrq->flags & 3840) {
    #line 1247 
    case 256: 
              #line 1247 
    ;
    #line 1248 
    ret = hostap_set_word(dev,64523,(unsigned short)0);
    #line 1249 
    if (ret != 0) 
                  #line 1250 
                  return ret;
    #line 1251 
    ret = hostap_set_word(dev,64521,(unsigned short)1);
    #line 1252 
    if (ret != 0) 
                  #line 1253 
                  return ret;
    #line 1254 
    break;
    #line 1255 
    case 768: 
              #line 1255 
    ;
    #line 1256 
    ret = hostap_set_word(dev,64523,(unsigned short)1);
    #line 1257 
    if (ret != 0) 
                  #line 1258 
                  return ret;
    #line 1259 
    ret = hostap_set_word(dev,64521,(unsigned short)1);
    #line 1260 
    if (ret != 0) 
                  #line 1261 
                  return ret;
    #line 1262 
    break;
    #line 1263 
    case 0: 
            #line 1263 
    ;
    #line 1264 
    break;
    #line 1265 
    default: 
             #line 1265 
    ;
    #line 1266 
    return -22;
  }
  #line 1269 
  if (((int)wrq->flags & 8192) != 0) {
    #line 1270 
    ret = hostap_set_word(dev,64521,(unsigned short)1);
    #line 1271 
    if (ret != 0) 
                  #line 1272 
                  return ret;
    #line 1273 
    ret = hostap_set_word(dev,64525,(unsigned short)((int)((unsigned short)(wrq->value / 1024))));
    #line 1275 
    if (ret != 0) 
                  #line 1276 
                  return ret;
  }
  #line 1278 
  if (((int)wrq->flags & 4096) != 0) {
    #line 1279 
    ret = hostap_set_word(dev,64521,(unsigned short)1);
    #line 1280 
    if (ret != 0) 
                  #line 1281 
                  return ret;
    #line 1282 
    ret = hostap_set_word(dev,64524,(unsigned short)((int)((unsigned short)(wrq->value / 1024))));
    #line 1284 
    if (ret != 0) 
                  #line 1285 
                  return ret;
  }
  #line 1288 
  return ret;
}

#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwpower(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 1300 
  struct hostap_interface *iface;
  #line 1301 
  local_info_t *local;
  #line 1302 
  __le16 enable;
  #line 1302 
  __le16 mcast;
  #line 1304 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1305 
  local = iface->local;
  #line 1307 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64521,
                                    (void *)(& enable),2,1) < 0) 
    #line 1309 
    return -22;
  #line 1311 
  if ((unsigned int)enable == 0U) {
    #line 1312 
    rrq->disabled = (unsigned char)1U;
    #line 1313 
    return 0;
  }
  #line 1316 
  rrq->disabled = (unsigned char)0U;
  #line 1318 
  if (((int)rrq->flags & 61440) == 8192) {
    #line 1319 
    __le16 timeout;
    #line 1320 
    if ((*((local->func)->get_rid))(dev,(unsigned short)64525,
                                    (void *)(& timeout),2,1) < 0) 
      #line 1323 
      return -22;
    #line 1325 
    rrq->flags = (unsigned short)8192U;
    #line 1326 
    rrq->value = (int)timeout * 1024;
  }
  else {
    #line 1328 
    __le16 period;
    #line 1329 
    if ((*((local->func)->get_rid))(dev,(unsigned short)64524,
                                    (void *)(& period),2,1) < 0) 
      #line 1331 
      return -22;
    #line 1333 
    rrq->flags = (unsigned short)4096U;
    #line 1334 
    rrq->value = (int)period * 1024;
  }
  #line 1337 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64523,
                                    (void *)(& mcast),2,1) < 0) 
    #line 1339 
    return -22;
  #line 1341 
  if ((unsigned int)mcast != 0U) 
                                 #line 1342 
                                 rrq->flags = (unsigned short)((unsigned int)rrq->flags | 768U); else 
                                                                    #line 1344 
                                                                    rrq->flags = (unsigned short)((unsigned int)rrq->flags | 256U);
  #line 1346 
  return 0;
}

#line 1351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwretry(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 1355 
  struct hostap_interface *iface;
  #line 1356 
  local_info_t *local;
  #line 1358 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1359 
  local = iface->local;
  #line 1361 
  if ((unsigned int)rrq->disabled != 0U) 
                                         #line 1362 
                                         return -22;
  #line 1366 
  if ((unsigned int)rrq->flags == 4096U) {
    #line 1367 
    if (rrq->value < 0) {
      #line 1370 
      local->manual_retry_count = -1;
      #line 1371 
      local->tx_control = (unsigned short)((unsigned int)local->tx_control & 65503U);
    }
    else {
      #line 1373 
      if (hostap_set_word(dev,64562,
                        (unsigned short)((int)((unsigned short)rrq->value))) != 0) {
        #line 1375 
        printk((char *)"\001",(char *)(& dev->name),rrq->value);
        #line 1378 
        return -95;
      }
      #line 1381 
      local->manual_retry_count = rrq->value;
      #line 1382 
      local->tx_control = (unsigned short)((unsigned int)local->tx_control | 32U);
    }
    #line 1384 
    return 0;
  }
  #line 1387 
  return -95;
}

#line 1412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwretry(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 1416 
  struct hostap_interface *iface;
  #line 1417 
  local_info_t *local;
  #line 1418 
  __le16 shortretry;
  #line 1418 
  __le16 longretry;
  #line 1418 
  __le16 lifetime;
  #line 1418 
  __le16 altretry;
  #line 1420 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1421 
  local = iface->local;
  #line 1423 
  if ((*((local->func)->get_rid))(dev,(unsigned short)64840,
                                    (void *)(& shortretry),2,1) < 0) 
    #line 1429 
    return -22;
  else {
    #line 1424 
    if ((*((local->func)->get_rid))(dev,(unsigned short)64841,
                                    (void *)(& longretry),2,1) < 0) 
      #line 1429 
      return -22;
    else {
      #line 1426 
      if ((*((local->func)->get_rid))(dev,(unsigned short)64842,
                                    (void *)(& lifetime),2,1) < 0) 
        #line 1429 
        return -22;
    }
  }
  #line 1431 
  rrq->disabled = (unsigned char)0U;
  #line 1433 
  if (((int)rrq->flags & 61440) == 8192) {
    #line 1434 
    rrq->flags = (unsigned short)8192U;
    #line 1435 
    rrq->value = (int)lifetime * 1024;
  }
  else 
    #line 1437 
    if (local->manual_retry_count >= 0) {
      #line 1438 
      rrq->flags = (unsigned short)4096U;
      #line 1439 
      if ((*((local->func)->get_rid))(dev,(unsigned short)64562,
                                    (void *)(& altretry),2,1) >= 0) 
        #line 1442 
        rrq->value = (int)altretry; else 
                                         #line 1444 
                                         rrq->value = local->manual_retry_count;
    }
    else 
      #line 1445 
      if (((int)rrq->flags & 32) != 0) {
        #line 1446 
        rrq->flags = (unsigned short)4128U;
        #line 1447 
        rrq->value = (int)longretry;
      }
      else {
        #line 1449 
        rrq->flags = (unsigned short)4096U;
        #line 1450 
        rrq->value = (int)shortretry;
        #line 1451 
        if ((int)shortretry != (int)longretry) 
                                               #line 1452 
                                               rrq->flags = (unsigned short)((unsigned int)rrq->flags | 16U);
      }
  #line 1455 
  return 0;
}

#line 1506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwtxpow(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 1510 
  struct hostap_interface *iface;
  #line 1511 
  local_info_t *local;
  #line 1515 
  u16 val;
  #line 1516 
  int ret = 0;
  #line 1518 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1519 
  local = iface->local;
  #line 1521 
  if ((unsigned int)rrq->disabled != 0U) {
    #line 1531 
    int tmp_1;
    #line 1522 
    if (local->txpower_type != (unsigned int)1) {
      #line 1528 
      char *tmp_0;
      #line 1523 
      val = (unsigned short)255U;
      #line 1524 
      ret = (*((local->func)->cmd))(dev,(unsigned short)49,(unsigned short)26,& val,(u16 *)0U);
      #line 1528 
      if (ret != 0) 
                    #line 1528 
                    tmp_0 = (char *)"failed"; else 
                                                   #line 1528 
                                                   tmp_0 = (char *)"OK";
      #line 1527 
      ;
      #line 1527 
      printk((char *)"\001",(char *)(& dev->name),tmp_0);
      #line 1529 
      local->txpower_type = 1;
    }
    #line 1531 
    if (ret != 0) 
                  #line 1531 
                  tmp_1 = -95; else 
                                    #line 1531 
                                    tmp_1 = 0;
    #line 1531 
    return tmp_1;
  }
  #line 1534 
  if (local->txpower_type == (unsigned int)1) {
    #line 1539 
    char *tmp_2;
    #line 1535 
    val = (unsigned short)0U;
    #line 1536 
    ret = (*((local->func)->cmd))(dev,(unsigned short)49,(unsigned short)26,& val,(u16 *)0U);
    #line 1539 
    if (ret != 0) 
                  #line 1539 
                  tmp_2 = (char *)"failed"; else 
                                                 #line 1539 
                                                 tmp_2 = (char *)"OK";
    #line 1538 
    ;
    #line 1538 
    printk((char *)"\001",(char *)(& dev->name),tmp_2);
    #line 1540 
    local->txpower_type = 3;
  }
  #line 1580 
  if ((unsigned int)rrq->fixed != 0U) 
                                      #line 1581 
                                      ret = -95;
  #line 1584 
  return ret;
}

#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwtxpow(struct net_device *dev, struct iw_request_info *info, struct iw_param *rrq, char *extra)
{
  #line 1624 
  return -95;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_request_hostscan(struct net_device *dev, u8 *ssid, u8 ssid_len)
{
  #line 1637 
  struct hostap_interface *iface;
  #line 1638 
  local_info_t *local;
  #line 1639 
  struct hfa384x_hostscan_request scan_req;
  #line 1641 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1642 
  local = iface->local;
  #line 1644 
  memset((void *)(& scan_req),0,38UL);
  #line 1645 
  scan_req.channel_list = (unsigned short)((int)local->channel_mask & (int)local->scan_channel_mask);
  #line 1647 
  scan_req.txrate = (unsigned short)1U;
  #line 1648 
  if (ssid != (u8 *)0U) {
    #line 1649 
    if ((unsigned int)ssid_len > 32U) 
                                      #line 1650 
                                      return -22;
    #line 1651 
    scan_req.target_ssid_len = (unsigned short)ssid_len;
    #line 1652 
    memcpy((void *)(& scan_req.target_ssid),(void *)ssid,(unsigned long)ssid_len);
  }
  #line 1655 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64741,
                                    (void *)(& scan_req),38) != 0) {
    #line 1657 
    printk((char *)"\001",(char *)(& dev->name));
    #line 1658 
    return -22;
  }
  #line 1660 
  return 0;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_request_scan(struct net_device *dev)
{
  #line 1666 
  struct hostap_interface *iface;
  #line 1667 
  local_info_t *local;
  #line 1668 
  struct hfa384x_scan_request scan_req;
  #line 1669 
  int ret = 0;
  #line 1671 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1672 
  local = iface->local;
  #line 1674 
  memset((void *)(& scan_req),0,4UL);
  #line 1675 
  scan_req.channel_list = (unsigned short)((int)local->channel_mask & (int)local->scan_channel_mask);
  #line 1677 
  scan_req.txrate = (unsigned short)1U;
  #line 1688 
  if (local->host_roaming == 0) 
                                #line 1689 
                                hostap_set_word(dev,64557,(unsigned short)2);
  #line 1692 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64737,
                                    (void *)(& scan_req),4) != 0) {
    #line 1694 
    printk((char *)"\001");
    #line 1695 
    ret = -22;
  }
  #line 1698 
  if (local->host_roaming == 0) 
                                #line 1699 
                                hostap_set_word(dev,64557,(unsigned short)1);
  #line 1702 
  return ret;
}

#line 1722  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwscan(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 1726 
  struct hostap_interface *iface;
  #line 1727 
  local_info_t *local;
  #line 1728 
  int ret;
  #line 1729 
  u8 *ssid = (u8 *)0U;
  #line 1729 
  u8 ssid_len = (unsigned char)0U;
  #line 1730 
  struct iw_scan_req *req = (struct iw_scan_req *)extra;
  #line 1732 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1733 
  local = iface->local;
  #line 1735 
  if ((unsigned int)data->length <= 315U) 
                                          #line 1736 
                                          req = (struct iw_scan_req *)0;
  #line 1738 
  if (local->iw_mode == 3) {
    #line 1742 
    data->length = (unsigned short)0U;
    #line 1743 
    return 0;
  }
  #line 1746 
  if (local->dev_enabled == 0) 
                               #line 1747 
                               return -100;
  #line 1749 
  if (req != (struct iw_scan_req *)0 && ((int)data->flags & 2) != 0) {
    #line 1750 
    ssid = (u8 *)(& req->essid);
    #line 1751 
    ssid_len = req->essid_len;
    #line 1753 
    if ((unsigned int)ssid_len != 0U && ((unsigned int)local->iw_mode + 4294967295U > 1U || local->sta_fw_ver <= 66304U)) 
      #line 1757 
      return -95;
  }
  #line 1760 
  if (local->sta_fw_ver > 66304U) 
                                  #line 1761 
                                  ret = prism2_request_hostscan(dev,ssid,(unsigned char)((int)ssid_len)); else 
                                                                    #line 1763 
                                                                    ret = prism2_request_scan(dev);
  #line 1765 
  if (ret == 0) 
                #line 1766 
                local->scan_timestamp = jiffies;
  #line 1770 
  return ret;
}

#line 1775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static char *__prism2_translate_scan(local_info_t *local, struct iw_request_info *info, struct hfa384x_hostscan_result *scan, struct hostap_bss_info *bss, char *current_ev, char *end_buf)
{
  #line 1781 
  int i;
  #line 1781 
  int chan;
  #line 1782 
  struct iw_event iwe;
  #line 1783 
  char *current_val;
  #line 1784 
  u16 capabilities;
  #line 1785 
  u8 *pos;
  #line 1786 
  u8 *ssid;
  #line 1786 
  u8 *bssid;
  #line 1787 
  size_t ssid_len;
  #line 1788 
  char *buf;
  #line 1790 
  if (bss != (struct hostap_bss_info *)0) {
    #line 1791 
    ssid = (u8 *)(& bss->ssid);
    #line 1792 
    ssid_len = bss->ssid_len;
    #line 1793 
    bssid = (u8 *)(& bss->bssid);
  }
  else {
    #line 1795 
    ssid = (u8 *)(& scan->ssid);
    #line 1796 
    ssid_len = (unsigned long)scan->ssid_len;
    #line 1797 
    bssid = (u8 *)(& scan->bssid);
  }
  #line 1799 
  if (ssid_len > 32UL) 
                       #line 1800 
                       ssid_len = 32UL;
  #line 1803 
  memset((void *)(& iwe),0,24UL);
  #line 1804 
  iwe.cmd = (unsigned short)35605U;
  #line 1805 
  iwe.u.ap_addr.sa_family = (unsigned short)1U;
  #line 1806 
  memcpy((void *)(& iwe.u.ap_addr.sa_data),(void *)bssid,6UL);
  #line 1807 
  current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,24);
  #line 1812 
  memset((void *)(& iwe),0,24UL);
  #line 1813 
  iwe.cmd = (unsigned short)35611U;
  #line 1814 
  iwe.u.data.length = (unsigned short)ssid_len;
  #line 1815 
  iwe.u.data.flags = (unsigned short)1U;
  #line 1816 
  current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)ssid);
  #line 1819 
  memset((void *)(& iwe),0,24UL);
  #line 1820 
  iwe.cmd = (unsigned short)35591U;
  #line 1821 
  if (bss != (struct hostap_bss_info *)0) 
                                          #line 1822 
                                          capabilities = bss->capab_info; else 
                                                                    #line 1824 
                                                                    capabilities = scan->capability;
  #line 1826 
  if (((int)capabilities & 3) != 0) {
    #line 1828 
    if (((int)capabilities & 1) != 0) 
                                      #line 1829 
                                      iwe.u.mode = 3U; else 
                                                            #line 1831 
                                                            iwe.u.mode = 1U;
    #line 1832 
    current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,12);
  }
  #line 1836 
  memset((void *)(& iwe),0,24UL);
  #line 1837 
  iwe.cmd = (unsigned short)35589U;
  #line 1838 
  if (scan != (struct hfa384x_hostscan_result *)0) 
                                                   #line 1839 
                                                   chan = (int)scan->chid;
  else 
    #line 1840 
    if (bss != (struct hostap_bss_info *)0) 
                                            #line 1841 
                                            chan = bss->chan; else 
                                                                   #line 1843 
                                                                   chan = 0;
  #line 1846 
  if (chan > 0) {
    #line 1847 
    iwe.u.freq.m = (int)(freq_list[chan + -1] * (long)100000U);
    #line 1848 
    iwe.u.freq.e = (short)1;
    #line 1849 
    current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,16);
  }
  #line 1853 
  if (scan != (struct hfa384x_hostscan_result *)0) {
    #line 1854 
    memset((void *)(& iwe),0,24UL);
    #line 1855 
    iwe.cmd = (unsigned short)35841U;
    #line 1856 
    if (local->last_scan_type == (unsigned int)1) {
      #line 1857 
      iwe.u.qual.level = (unsigned char)scan->sl;
      #line 1858 
      iwe.u.qual.noise = (unsigned char)scan->anl;
    }
    else {
      #line 1860 
      iwe.u.qual.level = (unsigned char)((unsigned int)((unsigned char)(((int)scan->sl * 100) / 255)) + 156U);
      #line 1862 
      iwe.u.qual.noise = (unsigned char)((unsigned int)((unsigned char)(((int)scan->anl * 100) / 255)) + 156U);
    }
    #line 1865 
    iwe.u.qual.updated = (unsigned char)30U;
    #line 1869 
    current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,12);
  }
  #line 1873 
  memset((void *)(& iwe),0,24UL);
  #line 1874 
  iwe.cmd = (unsigned short)35627U;
  #line 1875 
  if (((int)capabilities & 16) != 0) 
                                     #line 1876 
                                     iwe.u.data.flags = (unsigned short)2048U; else 
                                                                    #line 1878 
                                                                    iwe.u.data.flags = (unsigned short)32768U;
  #line 1879 
  iwe.u.data.length = (unsigned short)0U;
  #line 1880 
  current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)"");
  #line 1883 
  if (scan != (struct hfa384x_hostscan_result *)0) {
    #line 1884 
    memset((void *)(& iwe),0,24UL);
    #line 1885 
    iwe.cmd = (unsigned short)35617U;
    #line 1886 
    current_val = current_ev + (unsigned long)iwe_stream_lcp_len(info);
    #line 1887 
    pos = (u8 *)(& scan->sup_rates);
    #line 1888 
    i = 0;
    #line 1888 
    while ((unsigned int)i <= 9U) {
      #line 1889 
      if ((unsigned int)*(pos + (unsigned long)i) == 0U) 
                                                         #line 1890 
                                                         break;
      #line 1892 
      iwe.u.bitrate.value = ((int)*(pos + (unsigned long)i) & 127) * 500000;
      #line 1893 
      current_val = iwe_stream_add_value(info,current_ev,current_val,end_buf,& iwe,16);
      #line 1888 
      i ++;
    }
    #line 1898 
    ;
    #line 1898 
    if (current_val - current_ev > (long)iwe_stream_lcp_len(info)) 
                                                                   #line 1899 
                                                                   current_ev = current_val;
  }
  #line 1903 
  buf = (char *)kmalloc(158UL,2592U);
  #line 1904 
  if (buf != (char *)0 && scan != (struct hfa384x_hostscan_result *)0) {
    #line 1905 
    memset((void *)(& iwe),0,24UL);
    #line 1906 
    iwe.cmd = (unsigned short)35842U;
    #line 1907 
    sprintf(buf,(char *)"bcn_int=%d",(int)scan->beacon_interval);
    #line 1908 
    iwe.u.data.length = (unsigned short)cif_strlen(buf);
    #line 1909 
    current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,buf);
    #line 1912 
    memset((void *)(& iwe),0,24UL);
    #line 1913 
    iwe.cmd = (unsigned short)35842U;
    #line 1914 
    sprintf(buf,(char *)"resp_rate=%d",(int)scan->rate);
    #line 1915 
    iwe.u.data.length = (unsigned short)cif_strlen(buf);
    #line 1916 
    current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,buf);
    #line 1919 
    if (local->last_scan_type == (unsigned int)1 && ((int)capabilities & 2) != 0) {
      #line 1921 
      memset((void *)(& iwe),0,24UL);
      #line 1922 
      iwe.cmd = (unsigned short)35842U;
      #line 1923 
      sprintf(buf,(char *)"atim=%d",(int)scan->atim);
      #line 1924 
      iwe.u.data.length = (unsigned short)cif_strlen(buf);
      #line 1925 
      current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,buf);
    }
  }
  #line 1929 
  kfree((void *)buf);
  #line 1931 
  if ((bss != (struct hostap_bss_info *)0 && bss->wpa_ie_len != 0UL) && bss->wpa_ie_len <= 64UL) {
    #line 1932 
    memset((void *)(& iwe),0,24UL);
    #line 1933 
    iwe.cmd = (unsigned short)35845U;
    #line 1934 
    iwe.u.data.length = (unsigned short)bss->wpa_ie_len;
    #line 1935 
    current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)(& bss->wpa_ie));
  }
  #line 1939 
  if ((bss != (struct hostap_bss_info *)0 && bss->rsn_ie_len != 0UL) && bss->rsn_ie_len <= 64UL) {
    #line 1940 
    memset((void *)(& iwe),0,24UL);
    #line 1941 
    iwe.cmd = (unsigned short)35845U;
    #line 1942 
    iwe.u.data.length = (unsigned short)bss->rsn_ie_len;
    #line 1943 
    current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)(& bss->rsn_ie));
  }
  #line 1947 
  return current_ev;
}

#line 1953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
__inline static int prism2_translate_scan(local_info_t *local, struct iw_request_info *info, char *buffer, int buflen)
{
  #line 1957 
  struct hfa384x_hostscan_result *scan;
  #line 1958 
  int entry;
  #line 1958 
  int hostscan;
  #line 1961 
  struct list_head *ptr;
  #line 1959 
  char *current_ev = buffer;
  #line 1960 
  char *end_buf = buffer + (unsigned long)buflen;
  #line 1963 
  cif_spin_lock_bh_lock_of_local_info_0(& local->lock);
  #line 1965 
  ptr = local->bss_list.next;
  #line 1965 
  while (& local->bss_list != ptr) {
    {
      #line 1967 
      void *__mptr;
      #line 1966 
      struct hostap_bss_info *bss;
      #line 1967 
      __mptr = (void *)ptr;
      #line 1967 
      bss = ((struct hostap_bss_info *)__mptr);
      #line 1968 
      bss->included = 0;
    }
    #line 1965 
    ptr = ptr->next;
  }
  #line 1971 
  hostscan = local->last_scan_type == (unsigned int)1;
  #line 1972 
  entry = 0;
  #line 1972 
  while (local->last_scan_results_count > entry) {
    {
      #line 1973 
      int found = 0;
      #line 1974 
      scan = local->last_scan_results + (unsigned long)entry;
      #line 1979 
      ptr = local->bss_list.next;
      #line 1979 
      while (& local->bss_list != ptr) {
        {
          #line 1981 
          void *__mptr_0;
          #line 1980 
          struct hostap_bss_info *bss_0;
          #line 1981 
          __mptr_0 = (void *)ptr;
          #line 1981 
          bss_0 = ((struct hostap_bss_info *)__mptr_0);
          #line 1982 
          if ((int)ether_addr_equal((u8 *)(& bss_0->bssid),(u8 *)(& scan->bssid)) != 0) {
            #line 1983 
            bss_0->included = 1;
            #line 1984 
            current_ev = __prism2_translate_scan(local,info,scan,bss_0,current_ev,end_buf);
            #line 1987 
            found ++;
          }
        }
        #line 1979 
        ptr = ptr->next;
      }
      #line 1990 
      if (found == 0) 
                      #line 1991 
                      current_ev = __prism2_translate_scan(local,info,scan,(struct hostap_bss_info *)0,current_ev,end_buf);
      #line 1995 
      if ((unsigned long)(end_buf - current_ev) <= 24UL) {
        #line 1997 
        cif_spin_unlock_bh_lock_of_local_info_0(& local->lock);
        #line 1998 
        return -7;
      }
    }
    #line 1972 
    entry ++;
  }
  #line 2005 
  ptr = local->bss_list.next;
  #line 2005 
  while (& local->bss_list != ptr) {
    {
      #line 2007 
      void *__mptr_1;
      #line 2006 
      struct hostap_bss_info *bss_1;
      #line 2007 
      __mptr_1 = (void *)ptr;
      #line 2007 
      bss_1 = ((struct hostap_bss_info *)__mptr_1);
      #line 2008 
      if (bss_1->included != 0) 
                                #line 2009 
                                goto __Cont;
      #line 2010 
      current_ev = __prism2_translate_scan(local,info,(struct hfa384x_hostscan_result *)0,bss_1,current_ev,end_buf);
      #line 2013 
      if ((unsigned long)(end_buf - current_ev) <= 24UL) {
        #line 2015 
        cif_spin_unlock_bh_lock_of_local_info_0(& local->lock);
        #line 2016 
        return -7;
      }
    }
    #line 2005 
    __Cont: 
            #line 2005 
    ptr = ptr->next;
  }
  #line 2020 
  cif_spin_unlock_bh_lock_of_local_info_0(& local->lock);
  #line 2022 
  return (int)(current_ev - buffer);
}

#line 2027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
__inline static int prism2_ioctl_giwscan_sta(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 2034 
  struct hostap_interface *iface;
  #line 2035 
  local_info_t *local;
  #line 2036 
  int res;
  #line 2038 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2039 
  local = iface->local;
  {
    #line 2044 
    unsigned long __dummy;
    #line 2044 
    unsigned long __dummy2;
    }
  #line 2043 
  if (1 != 0) {
    {
      #line 2044 
      unsigned long __dummy_0;
      #line 2044 
      unsigned long __dummy2_0;
      }
    #line 2044 
    if (1 != 0) 
      #line 2044 
      if ((long)((jiffies - local->scan_timestamp) + 18446744073709550866UL) < 0L) 
        #line 2043 
        if (local->scan_timestamp != 0UL) 
                                          #line 2053 
                                          return -11;
  }
  #line 2055 
  local->scan_timestamp = 0UL;
  #line 2057 
  res = prism2_translate_scan(local,info,extra,(int)data->length);
  #line 2059 
  if (res >= 0) {
    #line 2060 
    data->length = (unsigned short)res;
    #line 2061 
    return 0;
  }
  else {
    #line 2063 
    data->length = (unsigned short)0U;
    #line 2064 
    return res;
  }
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwscan(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 2074 
  struct hostap_interface *iface;
  #line 2075 
  local_info_t *local;
  #line 2076 
  int res;
  #line 2078 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2079 
  local = iface->local;
  #line 2081 
  if (local->iw_mode == 3) {
    #line 2090 
    res = prism2_ap_translate_scan(dev,info,extra);
    #line 2091 
    if (res >= 0) {
      #line 2092 
      printk((char *)"\001",res);
      #line 2094 
      data->length = (unsigned short)res;
      #line 2095 
      return 0;
    }
    else {
      #line 2097 
      printk((char *)"\001",res);
      #line 2100 
      data->length = (unsigned short)0U;
      #line 2101 
      return res;
    }
  }
  else {
    #line 2105 
    return prism2_ioctl_giwscan_sta(dev,info,data,extra);
  }
}

#line 2110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static struct iw_priv_args prism2_priv[86U] = {{.cmd = 35812U, .set_args = (unsigned short)18433U, .name = {(char)'m', (char)'o', (char)'n', (char)'i', (char)'t', (char)'o', (char)'r'}}, {.cmd = 35811U, .set_args = (unsigned short)6145U, .get_args = (unsigned short)6145U, .name = {(char)'r', (char)'e', (char)'a', (char)'d', (char)'m', (char)'i', (char)'f'}}, {.cmd = 35810U, .set_args = (unsigned short)6146U, .name = {(char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'m', (char)'i', (char)'f'}}, {.cmd = 35814U, .set_args = (unsigned short)18433U, .name = {(char)'r', (char)'e', (char)'s', (char)'e', (char)'t'}}, {.cmd = 35816U, .set_args = (unsigned short)18433U, .name = {(char)'i', (char)'n', (char)'q', (char)'u', (char)'i', (char)'r', (char)'e'}}, {.cmd = 35822U, .set_args = (unsigned short)18434U, .name = {(char)'s', (char)'e', (char)'t', (char)'_', (char)'r', (char)'i', (char)'d', (char)'_', (char)'w', (char)'o', (char)'r', (char)'d'}}, {.cmd = 35824U, .set_args = (unsigned short)18433U, .name = {(char)'m', (char)'a', (char)'c', (char)'c', (char)'m', (char)'d'}}, {.cmd = 35818U, .set_args = (unsigned short)26625U, .name = {(char)'w', (char)'d', (char)'s', (char)'_', (char)'a', (char)'d', (char)'d'}}, {.cmd = 35820U, .set_args = (unsigned short)26625U, .name = {(char)'w', (char)'d', (char)'s', (char)'_', (char)'d', (char)'e', (char)'l'}}, {.cmd = 35826U, .set_args = (unsigned short)26625U, .name = {(char)'a', (char)'d', (char)'d', (char)'m', (char)'a', (char)'c'}}, {.cmd = 35828U, .set_args = (unsigned short)26625U, .name = {(char)'d', (char)'e', (char)'l', (char)'m', (char)'a', (char)'c'}}, {.cmd = 35830U, .set_args = (unsigned short)26625U, .name = {(char)'k', (char)'i', (char)'c', (char)'k', (char)'m', (char)'a', (char)'c'}}, {.cmd = 35808U, .set_args = (unsigned short)18434U, .name = {(char)'p', (char)'r', (char)'i', (char)'s', (char)'m', (char)'2', (char)'_', (char)'p', (char)'a', (char)'r', (char)'a', (char)'m'}}, {.cmd = 35809U, .set_args = (unsigned short)18433U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'p', (char)'r', (char)'i', (char)'s', (char)'m', (char)'2', (char)'_', (char)'p', (char)'a', (char)'r', (char)'a', (char)'m'}}, {.cmd = 35808U, .set_args = (unsigned short)18433U}, {.cmd = 35809U, .get_args = (unsigned short)18433U}, {.cmd = 2U, .set_args = (unsigned short)18433U, .name = {(char)'t', (char)'x', (char)'r', (char)'a', (char)'t', (char)'e', (char)'c', (char)'t', (char)'r', (char)'l'}}, {.cmd = 2U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'t', (char)'x', (char)'r', (char)'a', (char)'t', (char)'e', (char)'c', (char)'t', (char)'r', (char)'l'}}, {.cmd = 3U, .set_args = (unsigned short)18433U, .name = {(char)'b', (char)'e', (char)'a', (char)'c', (char)'o', (char)'n', (char)'_', (char)'i', (char)'n', (char)'t'}}, {.cmd = 3U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'b', (char)'e', (char)'a', (char)'c', (char)'o', (char)'n', (char)'_', (char)'i', (char)'n', (char)'t'}}, {.cmd = 4U, .set_args = (unsigned short)18433U, .name = {(char)'p', (char)'s', (char)'e', (char)'u', (char)'d', (char)'o', (char)'_', (char)'i', (char)'b', (char)'s', (char)'s'}}, {.cmd = 4U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'p', (char)'s', (char)'e', (char)'u', (char)'d', (char)'o', (char)'_', (char)'i', (char)'b', (char)'s', (char)'s'}}, {.cmd = 5U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'l', (char)'c'}}, {.cmd = 5U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'l', (char)'c'}}, {.cmd = 7U, .set_args = (unsigned short)18433U, .name = {(char)'d', (char)'u', (char)'m', (char)'p'}}, {.cmd = 7U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'d', (char)'u', (char)'m', (char)'p'}}, {.cmd = 8U, .set_args = (unsigned short)18433U, .name = {(char)'o', (char)'t', (char)'h', (char)'e', (char)'r', (char)'_', (char)'a', (char)'p', (char)'_', (char)'p', (char)'o', (char)'l', (char)'i', (char)'c', (char)'y'}}, {.cmd = 8U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'o', (char)'t', (char)'h', (char)'e', (char)'r', (char)'_', (char)'a', (char)'p', (char)'_', (char)'p', (char)'o', (char)'l'}}, {.cmd = 9U, .set_args = (unsigned short)18433U, .name = {(char)'m', (char)'a', (char)'x', (char)'_', (char)'i', (char)'n', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'i', (char)'t', (char)'y'}}, {.cmd = 9U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'m', (char)'a', (char)'x', (char)'_', (char)'i', (char)'n', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'i'}}, {.cmd = 10U, .set_args = (unsigned short)18433U, .name = {(char)'b', (char)'r', (char)'i', (char)'d', (char)'g', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.cmd = 10U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'b', (char)'r', (char)'i', (char)'d', (char)'g', (char)'e', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e'}}, {.cmd = 11U, .set_args = (unsigned short)18433U, .name = {(char)'d', (char)'t', (char)'i', (char)'m', (char)'_', (char)'p', (char)'e', (char)'r', (char)'i', (char)'o', (char)'d'}}, {.cmd = 11U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'d', (char)'t', (char)'i', (char)'m', (char)'_', (char)'p', (char)'e', (char)'r', (char)'i', (char)'o', (char)'d'}}, {.cmd = 12U, .set_args = (unsigned short)18433U, .name = {(char)'n', (char)'u', (char)'l', (char)'l', (char)'f', (char)'u', (char)'n', (char)'c', (char)'_', (char)'a', (char)'c', (char)'k'}}, {.cmd = 12U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'n', (char)'u', (char)'l', (char)'l', (char)'f', (char)'u', (char)'n', (char)'c', (char)'_', (char)'a', (char)'c', (char)'k'}}, {.cmd = 13U, .set_args = (unsigned short)18433U, .name = {(char)'m', (char)'a', (char)'x', (char)'_', (char)'w', (char)'d', (char)'s'}}, {.cmd = 13U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'m', (char)'a', (char)'x', (char)'_', (char)'w', (char)'d', (char)'s'}}, {.cmd = 14U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'u', (char)'t', (char)'o', (char)'m', (char)'_', (char)'a', (char)'p', (char)'_', (char)'w', (char)'d', (char)'s'}}, {.cmd = 14U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'u', (char)'t', (char)'o', (char)'m', (char)'_', (char)'a', (char)'p', (char)'_', (char)'w', (char)'d', (char)'s'}}, {.cmd = 15U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'p', (char)'_', (char)'a', (char)'u', (char)'t', (char)'h', (char)'_', (char)'a', (char)'l', (char)'g', (char)'s'}}, {.cmd = 15U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'p', (char)'_', (char)'a', (char)'u', (char)'t', (char)'h', (char)'_', (char)'a', (char)'l', (char)'g', (char)'s'}}, {.cmd = 16U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'l', (char)'l', (char)'o', (char)'w', (char)'_', (char)'f', (char)'c', (char)'s', (char)'e', (char)'r', (char)'r'}}, {.cmd = 16U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'l', (char)'l', (char)'o', (char)'w', (char)'_', (char)'f', (char)'c', (char)'s', (char)'e', (char)'r', (char)'r'}}, {.cmd = 17U, .set_args = (unsigned short)18433U, .name = {(char)'h', (char)'o', (char)'s', (char)'t', (char)'_', (char)'e', (char)'n', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t'}}, {.cmd = 17U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'h', (char)'o', (char)'s', (char)'t', (char)'_', (char)'e', (char)'n', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t'}}, {.cmd = 18U, .set_args = (unsigned short)18433U, .name = {(char)'h', (char)'o', (char)'s', (char)'t', (char)'_', (char)'d', (char)'e', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t'}}, {.cmd = 18U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'h', (char)'o', (char)'s', (char)'t', (char)'_', (char)'d', (char)'e', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t'}}, {.cmd = 21U, .set_args = (unsigned short)18433U, .name = {(char)'h', (char)'o', (char)'s', (char)'t', (char)'_', (char)'r', (char)'o', (char)'a', (char)'m', (char)'i', (char)'n', (char)'g'}}, {.cmd = 21U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'h', (char)'o', (char)'s', (char)'t', (char)'_', (char)'r', (char)'o', (char)'a', (char)'m', (char)'i', (char)'n', (char)'g'}}, {.cmd = 22U, .set_args = (unsigned short)18433U, .name = {(char)'b', (char)'c', (char)'r', (char)'x', (char)'_', (char)'s', (char)'t', (char)'a', (char)'_', (char)'k', (char)'e', (char)'y'}}, {.cmd = 22U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'b', (char)'c', (char)'r', (char)'x', (char)'_', (char)'s', (char)'t', (char)'a', (char)'_', (char)'k', (char)'e', (char)'y'}}, {.cmd = 23U, .set_args = (unsigned short)18433U, .name = {(char)'i', (char)'e', (char)'e', (char)'e', (char)'_', (char)'8', (char)'0', (char)'2', (char)'_', (char)'1', (char)'x'}}, {.cmd = 23U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'i', (char)'e', (char)'e', (char)'e', (char)'_', (char)'8', (char)'0', (char)'2', (char)'_', (char)'1', (char)'x'}}, {.cmd = 24U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'n', (char)'t', (char)'s', (char)'e', (char)'l', (char)'_', (char)'t', (char)'x'}}, {.cmd = 24U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'n', (char)'t', (char)'s', (char)'e', (char)'l', (char)'_', (char)'t', (char)'x'}}, {.cmd = 25U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'n', (char)'t', (char)'s', (char)'e', (char)'l', (char)'_', (char)'r', (char)'x'}}, {.cmd = 25U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'n', (char)'t', (char)'s', (char)'e', (char)'l', (char)'_', (char)'r', (char)'x'}}, {.cmd = 26U, .set_args = (unsigned short)18433U, .name = {(char)'m', (char)'o', (char)'n', (char)'i', (char)'t', (char)'o', (char)'r', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e'}}, {.cmd = 26U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'m', (char)'o', (char)'n', (char)'i', (char)'t', (char)'o', (char)'r', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e'}}, {.cmd = 27U, .set_args = (unsigned short)18433U, .name = {(char)'w', (char)'d', (char)'s', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e'}}, {.cmd = 27U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'w', (char)'d', (char)'s', (char)'_', (char)'t', (char)'y', (char)'p', (char)'e'}}, {.cmd = 28U, .set_args = (unsigned short)18433U, .name = {(char)'h', (char)'o', (char)'s', (char)'t', (char)'s', (char)'c', (char)'a', (char)'n'}}, {.cmd = 28U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'h', (char)'o', (char)'s', (char)'t', (char)'s', (char)'c', (char)'a', (char)'n'}}, {.cmd = 29U, .set_args = (unsigned short)18433U, .name = {(char)'a', (char)'p', (char)'_', (char)'s', (char)'c', (char)'a', (char)'n'}}, {.cmd = 29U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'a', (char)'p', (char)'_', (char)'s', (char)'c', (char)'a', (char)'n'}}, {.cmd = 30U, .set_args = (unsigned short)18433U, .name = {(char)'e', (char)'n', (char)'h', (char)'_', (char)'s', (char)'e', (char)'c'}}, {.cmd = 30U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'e', (char)'n', (char)'h', (char)'_', (char)'s', (char)'e', (char)'c'}}, {.cmd = 32U, .set_args = (unsigned short)18433U, .name = {(char)'b', (char)'a', (char)'s', (char)'i', (char)'c', (char)'_', (char)'r', (char)'a', (char)'t', (char)'e', (char)'s'}}, {.cmd = 32U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'b', (char)'a', (char)'s', (char)'i', (char)'c', (char)'_', (char)'r', (char)'a', (char)'t', (char)'e', (char)'s'}}, {.cmd = 33U, .set_args = (unsigned short)18433U, .name = {(char)'o', (char)'p', (char)'e', (char)'r', (char)'_', (char)'r', (char)'a', (char)'t', (char)'e', (char)'s'}}, {.cmd = 33U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'o', (char)'p', (char)'e', (char)'r', (char)'_', (char)'r', (char)'a', (char)'t', (char)'e', (char)'s'}}, {.cmd = 34U, .set_args = (unsigned short)18433U, .name = {(char)'h', (char)'o', (char)'s', (char)'t', (char)'a', (char)'p', (char)'d'}}, {.cmd = 34U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'h', (char)'o', (char)'s', (char)'t', (char)'a', (char)'p', (char)'d'}}, {.cmd = 35U, .set_args = (unsigned short)18433U, .name = {(char)'h', (char)'o', (char)'s', (char)'t', (char)'a', (char)'p', (char)'d', (char)'_', (char)'s', (char)'t', (char)'a'}}, {.cmd = 35U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'h', (char)'o', (char)'s', (char)'t', (char)'a', (char)'p', (char)'d', (char)'_', (char)'s', (char)'t', (char)'a'}}, {.cmd = 36U, .set_args = (unsigned short)18433U, .name = {(char)'w', (char)'p', (char)'a'}}, {.cmd = 36U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'w', (char)'p', (char)'a'}}, {.cmd = 37U, .set_args = (unsigned short)18433U, .name = {(char)'p', (char)'r', (char)'i', (char)'v', (char)'a', (char)'c', (char)'y', (char)'_', (char)'i', (char)'n', (char)'v', (char)'o', (char)'k', (char)'e', (char)'d'}}, {.cmd = 37U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'p', (char)'r', (char)'i', (char)'v', (char)'a', (char)'c', (char)'y', (char)'_', (char)'i', (char)'n', (char)'v', (char)'o'}}, {.cmd = 38U, .set_args = (unsigned short)18433U, .name = {(char)'t', (char)'k', (char)'i', (char)'p', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'e', (char)'r', (char)'m', (char)'e', (char)'a'}}, {.cmd = 38U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'t', (char)'k', (char)'i', (char)'p', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'e', (char)'r'}}, {.cmd = 39U, .set_args = (unsigned short)18433U, .name = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'u', (char)'n', (char)'e', (char)'n', (char)'c', (char)'r', (char)'y', (char)'p', (char)'t', (char)'e'}}, {.cmd = 39U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'u', (char)'n', (char)'e', (char)'n', (char)'c', (char)'r', (char)'y'}}, {.cmd = 40U, .set_args = (unsigned short)18433U, .name = {(char)'s', (char)'c', (char)'a', (char)'n', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l', (char)'s'}}, {.cmd = 40U, .get_args = (unsigned short)18433U, .name = {(char)'g', (char)'e', (char)'t', (char)'s', (char)'c', (char)'a', (char)'n', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l'}}};
#line 2301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_inquire(struct net_device *dev, int *i)
{
  #line 2303 
  struct hostap_interface *iface;
  #line 2304 
  local_info_t *local;
  #line 2306 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2307 
  local = iface->local;
  #line 2309 
  if ((*((local->func)->cmd))(dev,(unsigned short)17,
                                (unsigned short)((int)((unsigned short)*i)),
                                (u16 *)0U,(u16 *)0U) != 0) 
    #line 2310 
    return -95;
  #line 2312 
  return 0;
}

#line 2316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_prism2_param(struct net_device *dev, struct iw_request_info *info, void *wrqu, char *extra)
{
  #line 2320 
  struct hostap_interface *iface;
  #line 2321 
  local_info_t *local;
  #line 2326 
  u16 val;
  #line 2322 
  int *i = (int *)extra;
  #line 2323 
  int param = *i;
  #line 2324 
  int value = *(i + 1U);
  #line 2325 
  int ret = 0;
  #line 2328 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2329 
  local = iface->local;
  #line 2331 
  switch (param) {
    #line 2372 
    char *tmp_5;
    #line 2332 
    case 2: 
            #line 2332 
    ;
    #line 2333 
    local->fw_tx_rate_control = value;
    #line 2334 
    break;
    #line 2336 
    case 3: 
            #line 2336 
    ;
    #line 2337 
    if (hostap_set_word(dev,64563,
                        (unsigned short)((int)((unsigned short)value))) != 0) 
      #line 2337 
      goto _LOR;
    else {
      #line 2337 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2337 
                                                    _LOR: 
                                                          #line 2339 
                                                          ret = -22; else 
                                                                    #line 2341 
                                                                    local->beacon_int = value;
    }
    #line 2342 
    break;
    #line 2345 
    case 4: 
            #line 2345 
    ;
    #line 2346 
    if (local->pseudo_adhoc == value) 
                                      #line 2347 
                                      break;
    #line 2349 
    if ((unsigned int)value > 1U) {
      #line 2350 
      ret = -22;
      #line 2351 
      break;
    }
    #line 2354 
    printk((char *)"\001",(char *)(& dev->name),local->pseudo_adhoc,value);
    #line 2356 
    local->pseudo_adhoc = value;
    #line 2357 
    if (local->iw_mode != 1) 
                             #line 2358 
                             break;
    #line 2360 
    ;
    #line 2360 
    if (hostap_set_word(dev,64512,
                        (unsigned short)((int)hostap_get_porttype(local))) != 0) {
      #line 2362 
      ret = -95;
      #line 2363 
      break;
    }
    #line 2366 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 2367 
                                                  ret = -22;
    #line 2368 
    break;
    #line 2371 
    case 5: 
            #line 2371 
    ;
    #line 2372 
    if (value == 0) 
                    #line 2372 
                    tmp_5 = (char *)"Disabling"; else 
                                                      #line 2372 
                                                      tmp_5 = (char *)"Enabling";
    #line 2372 
    ;
    #line 2372 
    printk((char *)"\001",(char *)(& dev->name),tmp_5);
    #line 2374 
    val = (unsigned short)8U;
    #line 2375 
    (*((local->func)->cmd))(dev,(unsigned short)5432,(unsigned short)(value != 0),& val,(u16 *)0U);
    #line 2378 
    break;
    #line 2380 
    case 7: 
            #line 2380 
    ;
    #line 2381 
    local->frame_dump = value;
    #line 2382 
    break;
    #line 2384 
    case 8: 
            #line 2384 
    ;
    #line 2385 
    if ((unsigned int)value > 3U) {
      #line 2386 
      ret = -22;
      #line 2387 
      break;
    }
    #line 2389 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2390 
                                          (local->ap)->ap_policy = (enum ldv_15509)value;
    #line 2391 
    break;
    #line 2393 
    case 9: 
            #line 2393 
    ;
    #line 2394 
    if ((unsigned int)value > 604800U) {
      #line 2395 
      ret = -22;
      #line 2396 
      break;
    }
    #line 2398 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2399 
                                          (local->ap)->max_inactivity = (unsigned int)(value * 250);
    #line 2400 
    break;
    #line 2402 
    case 10: 
             #line 2402 
    ;
    #line 2403 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2404 
                                          (local->ap)->bridge_packets = value;
    #line 2405 
    break;
    #line 2407 
    case 11: 
             #line 2407 
    ;
    #line 2408 
    if ((unsigned int)value > 65535U) {
      #line 2409 
      ret = -22;
      #line 2410 
      break;
    }
    #line 2412 
    if (hostap_set_word(dev,64528,
                        (unsigned short)((int)((unsigned short)value))) != 0) 
      #line 2412 
      goto _LOR_0;
    else {
      #line 2413 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2412 
                                                    _LOR_0: 
                                                            #line 2414 
                                                            ret = -22; else 
                                                                    #line 2416 
                                                                    local->dtim_period = value;
    }
    #line 2417 
    break;
    #line 2419 
    case 12: 
             #line 2419 
    ;
    #line 2420 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2421 
                                          (local->ap)->nullfunc_ack = value;
    #line 2422 
    break;
    #line 2424 
    case 13: 
             #line 2424 
    ;
    #line 2425 
    local->wds_max_connections = value;
    #line 2426 
    break;
    #line 2428 
    case 14: 
             #line 2428 
    ;
    #line 2429 
    if (local->ap != (struct ap_data *)0) {
      #line 2430 
      if ((local->ap)->autom_ap_wds == 0 && value != 0) 
                                                        #line 2432 
                                                        hostap_add_wds_links(local);
      #line 2434 
      (local->ap)->autom_ap_wds = value;
    }
    #line 2436 
    break;
    #line 2438 
    case 15: 
             #line 2438 
    ;
    #line 2439 
    local->auth_algs = value;
    #line 2440 
    if (hostap_set_auth_algs(local) != 0) 
                                          #line 2441 
                                          ret = -22;
    #line 2442 
    break;
    #line 2444 
    case 16: 
             #line 2444 
    ;
    #line 2445 
    local->monitor_allow_fcserr = value;
    #line 2446 
    break;
    #line 2448 
    case 17: 
             #line 2448 
    ;
    #line 2449 
    local->host_encrypt = value;
    #line 2450 
    if (hostap_set_encryption(local) != 0) 
                                           #line 2452 
                                           ret = -22;
    else {
      #line 2450 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2452 
                                                    ret = -22;
    }
    #line 2453 
    break;
    #line 2455 
    case 18: 
             #line 2455 
    ;
    #line 2456 
    local->host_decrypt = value;
    #line 2457 
    if (hostap_set_encryption(local) != 0) 
                                           #line 2459 
                                           ret = -22;
    else {
      #line 2457 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2459 
                                                    ret = -22;
    }
    #line 2460 
    break;
    #line 2463 
    case 21: 
             #line 2463 
    ;
    #line 2464 
    if ((unsigned int)value > 2U) {
      #line 2465 
      ret = -22;
      #line 2466 
      break;
    }
    #line 2468 
    local->host_roaming = value;
    #line 2469 
    if (hostap_set_roaming(local) != 0) 
                                        #line 2470 
                                        ret = -22;
    else {
      #line 2469 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2470 
                                                    ret = -22;
    }
    #line 2471 
    break;
    #line 2474 
    case 22: 
             #line 2474 
    ;
    #line 2475 
    local->bcrx_sta_key = value;
    #line 2476 
    break;
    #line 2478 
    case 23: 
             #line 2478 
    ;
    #line 2479 
    local->ieee_802_1x = value;
    #line 2480 
    break;
    #line 2482 
    case 24: 
             #line 2482 
    ;
    #line 2483 
    if ((unsigned int)value > 3U) {
      #line 2484 
      ret = -22;
      #line 2485 
      break;
    }
    #line 2487 
    local->antsel_tx = value;
    #line 2488 
    hostap_set_antsel(local);
    #line 2489 
    break;
    #line 2491 
    case 25: 
             #line 2491 
    ;
    #line 2492 
    if ((unsigned int)value > 3U) {
      #line 2493 
      ret = -22;
      #line 2494 
      break;
    }
    #line 2496 
    local->antsel_rx = value;
    #line 2497 
    hostap_set_antsel(local);
    #line 2498 
    break;
    #line 2500 
    case 26: 
             #line 2500 
    ;
    #line 2501 
    if ((value != 0 && value != 2) && (value != 1 && value != 3)) {
      #line 2505 
      ret = -22;
      #line 2506 
      break;
    }
    #line 2508 
    local->monitor_type = value;
    #line 2509 
    if (local->iw_mode == 6) 
                             #line 2510 
                             hostap_monitor_set_type(local);
    #line 2511 
    break;
    #line 2513 
    case 27: 
             #line 2513 
    ;
    #line 2514 
    local->wds_type = (unsigned int)value;
    #line 2515 
    break;
    #line 2517 
    case 28: 
             #line 2517 
    ;
    {
      #line 2519 
      struct hfa384x_hostscan_request scan_req;
      #line 2520 
      u16 rate;
      #line 2522 
      memset((void *)(& scan_req),0,38UL);
      #line 2523 
      scan_req.channel_list = (unsigned short)16383U;
      #line 2524 
      switch (value) {
        #line 2525 
        case 1: 
                #line 2525 
        ;
        #line 2525 
        rate = (unsigned short)1U;
        #line 2525 
        break;
        #line 2526 
        case 2: 
                #line 2526 
        ;
        #line 2526 
        rate = (unsigned short)2U;
        #line 2526 
        break;
        #line 2527 
        case 3: 
                #line 2527 
        ;
        #line 2527 
        rate = (unsigned short)4U;
        #line 2527 
        break;
        #line 2528 
        case 4: 
                #line 2528 
        ;
        #line 2528 
        rate = (unsigned short)8U;
        #line 2528 
        break;
        #line 2529 
        default: 
                 #line 2529 
        ;
        #line 2529 
        rate = (unsigned short)1U;
        #line 2529 
        break;
      }
      #line 2531 
      scan_req.txrate = rate;
      #line 2534 
      if (local->iw_mode == 3) {
        #line 2535 
        if (hostap_set_word(dev,64512,(unsigned short)1) != 0) 
                                                               #line 2538 
                                                               printk((char *)"\001");
        else {
          #line 2536 
          if ((*((local->func)->reset_port))(dev) != 0) 
                                                        #line 2538 
                                                        printk((char *)"\001");
        }
      }
      #line 2542 
      if ((*((local->func)->set_rid))(dev,(unsigned short)64741,
                                     (void *)(& scan_req),38) != 0) {
        #line 2544 
        printk((char *)"\001");
        #line 2545 
        ret = -22;
      }
      #line 2547 
      if (local->iw_mode == 3) {
        #line 2548 
        wait_queue_entry_t __wait;
        #line 2549 
        init_waitqueue_entry(& __wait,ldv_get_current());
        #line 2550 
        add_wait_queue(& local->hostscan_wq,& __wait);
        {
          {
            #line 2551 
            int __ret_warn_on = 0;
            #line 2551 
            if ((long)(__ret_warn_on != 0) != 0L) {
              #line 2552 
              ldv_inline_asm();
              #line 2553 
              ldv_inline_asm();
            }
            #line 2551 
            long tmp_19 = (long)(__ret_warn_on != 0);
          }
          #line 2551 
          __here_0: 
                    #line 2551 
          ;
          #line 2551 
          ldv_get_current()->task_state_change = (unsigned long)((void *)0);
          {
            #line 2551 
            long *__ai_ptr = & ldv_get_current()->state;
            #line 2551 
            kasan_check_read((void *)__ai_ptr,8U);
            {
              #line 2551 
              long __ret = 1L;
              #line 2551 
              switch (8UL) {
                #line 2551 
                case (unsigned long)1: 
                                       #line 2551 
                ;
                #line 2552 
                ldv_inline_asm();
                #line 2551 
                break;
                #line 2551 
                case (unsigned long)2: 
                                       #line 2551 
                ;
                #line 2552 
                ldv_inline_asm();
                #line 2551 
                break;
                #line 2551 
                case (unsigned long)4: 
                                       #line 2551 
                ;
                #line 2552 
                ldv_inline_asm();
                #line 2551 
                break;
                #line 2551 
                case (unsigned long)8: 
                                       #line 2551 
                ;
                #line 2552 
                ldv_inline_asm();
                #line 2551 
                break;
                #line 2551 
                default: 
                         #line 2551 
                ;
                #line 2551 
                __xchg_wrong_size();
              }
              #line 2551 
              long tmp_21 = __ret;
            }
          }
        }
        #line 2552 
        schedule_timeout(250L);
        #line 2553 
        if (signal_pending(ldv_get_current()) != 0) 
                                                    #line 2554 
                                                    ret = -4;
        {
          {
            #line 2555 
            int __ret_warn_on_0 = 0;
            #line 2555 
            if ((long)(__ret_warn_on_0 != 0) != 0L) {
              #line 2556 
              ldv_inline_asm();
              #line 2557 
              ldv_inline_asm();
            }
            #line 2555 
            long tmp_23 = (long)(__ret_warn_on_0 != 0);
          }
          #line 2555 
          __here_1: 
                    #line 2555 
          ;
          #line 2555 
          ldv_get_current()->task_state_change = (unsigned long)((void *)1);
          {
            #line 2555 
            long *__ai_ptr_0 = & ldv_get_current()->state;
            #line 2555 
            kasan_check_read((void *)__ai_ptr_0,8U);
            {
              #line 2555 
              long __ret_0 = 0L;
              #line 2555 
              switch (8UL) {
                #line 2555 
                case (unsigned long)1: 
                                       #line 2555 
                ;
                #line 2556 
                ldv_inline_asm();
                #line 2555 
                break;
                #line 2555 
                case (unsigned long)2: 
                                       #line 2555 
                ;
                #line 2556 
                ldv_inline_asm();
                #line 2555 
                break;
                #line 2555 
                case (unsigned long)4: 
                                       #line 2555 
                ;
                #line 2556 
                ldv_inline_asm();
                #line 2555 
                break;
                #line 2555 
                case (unsigned long)8: 
                                       #line 2555 
                ;
                #line 2556 
                ldv_inline_asm();
                #line 2555 
                break;
                #line 2555 
                default: 
                         #line 2555 
                ;
                #line 2555 
                __xchg_wrong_size();
              }
              #line 2555 
              long tmp_25 = __ret_0;
            }
          }
        }
        #line 2556 
        remove_wait_queue(& local->hostscan_wq,& __wait);
        #line 2558 
        if (hostap_set_word(dev,64512,(unsigned short)6) != 0) 
                                                               #line 2561 
                                                               printk((char *)"\001");
        else {
          #line 2559 
          if ((*((local->func)->reset_port))(dev) != 0) 
                                                        #line 2561 
                                                        printk((char *)"\001");
        }
      }
      #line 2564 
      break;
    }
    #line 2567 
    case 29: 
             #line 2567 
    ;
    #line 2568 
    local->passive_scan_interval = value;
    #line 2569 
    if (timer_pending(& local->passive_scan_timer) != 0) 
                                                         #line 2570 
                                                         cif_del_timer(& local->passive_scan_timer);
    #line 2571 
    if ((unsigned int)value + 4294967295U <= 8589932U) {
      #line 2572 
      local->passive_scan_timer.expires = (unsigned long)(local->passive_scan_interval * 250) + jiffies;
      #line 2574 
      add_timer(& local->passive_scan_timer);
    }
    #line 2576 
    break;
    #line 2578 
    case 30: 
             #line 2578 
    ;
    #line 2579 
    if ((unsigned int)value > 3U) {
      #line 2580 
      ret = -22;
      #line 2581 
      break;
    }
    #line 2583 
    local->enh_sec = value;
    #line 2584 
    if (hostap_set_word(dev,64579,
                         (unsigned short)((int)((unsigned short)local->enh_sec))) != 0) 
      #line 2584 
      goto _LOR_1;
    else {
      #line 2585 
      if ((*((local->func)->reset_port))(dev) != 0) {
        #line 2584 
        _LOR_1: {
                  #line 2587 
                  printk((char *)"\001",(char *)(& dev->name));
                  #line 2589 
                  ret = -95;
                }
      }
    }
    #line 2591 
    break;
    #line 2599 
    case 32: 
             #line 2599 
    ;
    #line 2600 
    if (((int)local->tx_rate_control & value) != value || value == 0) {
      #line 2601 
      printk((char *)"\001",(char *)(& dev->name));
      #line 2604 
      ret = -22;
      #line 2605 
      break;
    }
    #line 2607 
    local->basic_rates = (unsigned short)value;
    #line 2608 
    if (hostap_set_word(dev,64691,(unsigned short)((int)local->basic_rates)) != 0) 
      #line 2611 
      ret = -22;
    else {
      #line 2609 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2611 
                                                    ret = -22;
    }
    #line 2612 
    break;
    #line 2614 
    case 33: 
             #line 2614 
    ;
    #line 2615 
    local->tx_rate_control = (unsigned short)value;
    #line 2616 
    if (hostap_set_rate(dev) != 0) 
                                   #line 2617 
                                   ret = -22;
    #line 2618 
    break;
    #line 2620 
    case 34: 
             #line 2620 
    ;
    #line 2621 
    ret = hostap_set_hostapd(local,value,1);
    #line 2622 
    break;
    #line 2624 
    case 35: 
             #line 2624 
    ;
    #line 2625 
    ret = hostap_set_hostapd_sta(local,value,1);
    #line 2626 
    break;
    #line 2628 
    case 36: 
             #line 2628 
    ;
    #line 2629 
    local->wpa = value;
    #line 2630 
    if (local->sta_fw_ver <= 67327U) 
                                     #line 2631 
                                     ret = -95;
    else {
      #line 2632 
      if (hostap_set_word(dev,64699,(unsigned short)(value != 0)) != 0) 
        #line 2634 
        ret = -22;
    }
    #line 2635 
    break;
    #line 2637 
    case 37: 
             #line 2637 
    ;
    #line 2638 
    local->privacy_invoked = value;
    #line 2639 
    if (hostap_set_encryption(local) != 0) 
                                           #line 2641 
                                           ret = -22;
    else {
      #line 2639 
      if ((*((local->func)->reset_port))(dev) != 0) 
                                                    #line 2641 
                                                    ret = -22;
    }
    #line 2642 
    break;
    #line 2644 
    case 38: 
             #line 2644 
    ;
    #line 2645 
    local->tkip_countermeasures = value;
    #line 2646 
    break;
    #line 2648 
    case 39: 
             #line 2648 
    ;
    #line 2649 
    local->drop_unencrypted = value;
    #line 2650 
    break;
    #line 2652 
    case 40: 
             #line 2652 
    ;
    #line 2653 
    local->scan_channel_mask = (unsigned short)value;
    #line 2654 
    break;
    #line 2656 
    default: 
             #line 2656 
    ;
    #line 2657 
    printk((char *)"\001",(char *)(& dev->name),param);
    #line 2659 
    ret = -95;
    #line 2660 
    break;
  }
  #line 2663 
  return ret;
}

#line 2667  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_get_prism2_param(struct net_device *dev, struct iw_request_info *info, void *wrqu, char *extra)
{
  #line 2671 
  struct hostap_interface *iface;
  #line 2672 
  local_info_t *local;
  #line 2673 
  int *param = (int *)extra;
  #line 2674 
  int ret = 0;
  #line 2676 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2677 
  local = iface->local;
  #line 2679 
  switch (*param) {
    #line 2680 
    case 2: 
            #line 2680 
    ;
    #line 2681 
    *param = local->fw_tx_rate_control;
    #line 2682 
    break;
    #line 2684 
    case 3: 
            #line 2684 
    ;
    #line 2685 
    *param = local->beacon_int;
    #line 2686 
    break;
    #line 2688 
    case 4: 
            #line 2688 
    ;
    #line 2689 
    *param = local->pseudo_adhoc;
    #line 2690 
    break;
    #line 2692 
    case 5: 
            #line 2692 
    ;
    #line 2693 
    ret = -95;
    #line 2694 
    break;
    #line 2696 
    case 7: 
            #line 2696 
    ;
    #line 2697 
    *param = local->frame_dump;
    #line 2698 
    break;
    #line 2700 
    case 8: 
            #line 2700 
    ;
    #line 2701 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2702 
                                          *param = (int)(local->ap)->ap_policy; else 
                                                                    #line 2704 
                                                                    ret = -95;
    #line 2705 
    break;
    #line 2707 
    case 9: 
            #line 2707 
    ;
    #line 2708 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2709 
                                          *param = (int)((local->ap)->max_inactivity / 250U); else 
                                                                    #line 2711 
                                                                    ret = -95;
    #line 2712 
    break;
    #line 2714 
    case 10: 
             #line 2714 
    ;
    #line 2715 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2716 
                                          *param = (local->ap)->bridge_packets; else 
                                                                    #line 2718 
                                                                    ret = -95;
    #line 2719 
    break;
    #line 2721 
    case 11: 
             #line 2721 
    ;
    #line 2722 
    *param = local->dtim_period;
    #line 2723 
    break;
    #line 2725 
    case 12: 
             #line 2725 
    ;
    #line 2726 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2727 
                                          *param = (local->ap)->nullfunc_ack; else 
                                                                    #line 2729 
                                                                    ret = -95;
    #line 2730 
    break;
    #line 2732 
    case 13: 
             #line 2732 
    ;
    #line 2733 
    *param = local->wds_max_connections;
    #line 2734 
    break;
    #line 2736 
    case 14: 
             #line 2736 
    ;
    #line 2737 
    if (local->ap != (struct ap_data *)0) 
                                          #line 2738 
                                          *param = (local->ap)->autom_ap_wds; else 
                                                                    #line 2740 
                                                                    ret = -95;
    #line 2741 
    break;
    #line 2743 
    case 15: 
             #line 2743 
    ;
    #line 2744 
    *param = local->auth_algs;
    #line 2745 
    break;
    #line 2747 
    case 16: 
             #line 2747 
    ;
    #line 2748 
    *param = local->monitor_allow_fcserr;
    #line 2749 
    break;
    #line 2751 
    case 17: 
             #line 2751 
    ;
    #line 2752 
    *param = local->host_encrypt;
    #line 2753 
    break;
    #line 2755 
    case 18: 
             #line 2755 
    ;
    #line 2756 
    *param = local->host_decrypt;
    #line 2757 
    break;
    #line 2759 
    case 21: 
             #line 2759 
    ;
    #line 2760 
    *param = local->host_roaming;
    #line 2761 
    break;
    #line 2763 
    case 22: 
             #line 2763 
    ;
    #line 2764 
    *param = local->bcrx_sta_key;
    #line 2765 
    break;
    #line 2767 
    case 23: 
             #line 2767 
    ;
    #line 2768 
    *param = local->ieee_802_1x;
    #line 2769 
    break;
    #line 2771 
    case 24: 
             #line 2771 
    ;
    #line 2772 
    *param = local->antsel_tx;
    #line 2773 
    break;
    #line 2775 
    case 25: 
             #line 2775 
    ;
    #line 2776 
    *param = local->antsel_rx;
    #line 2777 
    break;
    #line 2779 
    case 26: 
             #line 2779 
    ;
    #line 2780 
    *param = local->monitor_type;
    #line 2781 
    break;
    #line 2783 
    case 27: 
             #line 2783 
    ;
    #line 2784 
    *param = (int)local->wds_type;
    #line 2785 
    break;
    #line 2787 
    case 28: 
             #line 2787 
    ;
    #line 2788 
    ret = -95;
    #line 2789 
    break;
    #line 2791 
    case 29: 
             #line 2791 
    ;
    #line 2792 
    *param = local->passive_scan_interval;
    #line 2793 
    break;
    #line 2795 
    case 30: 
             #line 2795 
    ;
    #line 2796 
    *param = local->enh_sec;
    #line 2797 
    break;
    #line 2805 
    case 32: 
             #line 2805 
    ;
    #line 2806 
    *param = (int)local->basic_rates;
    #line 2807 
    break;
    #line 2809 
    case 33: 
             #line 2809 
    ;
    #line 2810 
    *param = (int)local->tx_rate_control;
    #line 2811 
    break;
    #line 2813 
    case 34: 
             #line 2813 
    ;
    #line 2814 
    *param = local->hostapd;
    #line 2815 
    break;
    #line 2817 
    case 35: 
             #line 2817 
    ;
    #line 2818 
    *param = local->hostapd_sta;
    #line 2819 
    break;
    #line 2821 
    case 36: 
             #line 2821 
    ;
    #line 2822 
    if (local->sta_fw_ver <= 67327U) 
                                     #line 2823 
                                     ret = -95;
    #line 2824 
    *param = local->wpa;
    #line 2825 
    break;
    #line 2827 
    case 37: 
             #line 2827 
    ;
    #line 2828 
    *param = local->privacy_invoked;
    #line 2829 
    break;
    #line 2831 
    case 38: 
             #line 2831 
    ;
    #line 2832 
    *param = local->tkip_countermeasures;
    #line 2833 
    break;
    #line 2835 
    case 39: 
             #line 2835 
    ;
    #line 2836 
    *param = local->drop_unencrypted;
    #line 2837 
    break;
    #line 2839 
    case 40: 
             #line 2839 
    ;
    #line 2840 
    *param = (int)local->scan_channel_mask;
    #line 2841 
    break;
    #line 2843 
    default: 
             #line 2843 
    ;
    #line 2844 
    printk((char *)"\001",(char *)(& dev->name),*param);
    #line 2846 
    ret = -95;
    #line 2847 
    break;
  }
  #line 2850 
  return ret;
}

#line 2854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_readmif(struct net_device *dev, struct iw_request_info *info, void *wrqu, char *extra)
{
  #line 2858 
  struct hostap_interface *iface;
  #line 2859 
  local_info_t *local;
  #line 2860 
  u16 resp0;
  #line 2862 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2863 
  local = iface->local;
  #line 2865 
  if ((*((local->func)->cmd))(dev,(unsigned short)48,
                                (unsigned short)((int)((unsigned short)*extra)),
                                (u16 *)0U,& resp0) != 0) 
    #line 2867 
    return -95; else 
                     #line 2869 
                     *extra = (char)resp0;
  #line 2871 
  return 0;
}

#line 2875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_writemif(struct net_device *dev, struct iw_request_info *info, void *wrqu, char *extra)
{
  #line 2879 
  struct hostap_interface *iface;
  #line 2880 
  local_info_t *local;
  #line 2881 
  u16 cr;
  #line 2881 
  u16 val;
  #line 2883 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2884 
  local = iface->local;
  #line 2886 
  cr = (unsigned short)*extra;
  #line 2887 
  val = (unsigned short)*(extra + 1U);
  #line 2888 
  if ((*((local->func)->cmd))(dev,(unsigned short)49,
                                (unsigned short)((int)cr),& val,(u16 *)0U) != 0) 
    #line 2889 
    return -95;
  #line 2891 
  return 0;
}

#line 2895  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_monitor(struct net_device *dev, int *i)
{
  #line 2897 
  struct hostap_interface *iface;
  #line 2898 
  local_info_t *local;
  #line 2900 
  u32 mode;
  #line 2899 
  int ret = 0;
  #line 2902 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2903 
  local = iface->local;
  #line 2905 
  ;
  #line 2905 
  printk((char *)"\001",(char *)(& dev->name),task_pid_nr(ldv_get_current()),(char *)(& ldv_get_current()->comm));
  #line 2911 
  if (*i == 0) {
    #line 2914 
    mode = 3U;
    #line 2915 
    ret = prism2_ioctl_siwmode(dev,(struct iw_request_info *)0,& mode,(char *)0);
  }
  else 
    #line 2916 
    if (*i == 1) 
                 #line 2921 
                 ret = -95;
    else 
      #line 2922 
      if ((unsigned int)*i + 4294967294U <= 1U) {
        #line 2923 
        switch (*i) {
          #line 2924 
          case 2: 
                  #line 2924 
          ;
          #line 2925 
          local->monitor_type = 0;
          #line 2926 
          break;
          #line 2927 
          case 3: 
                  #line 2927 
          ;
          #line 2928 
          local->monitor_type = 1;
          #line 2929 
          break;
        }
        #line 2931 
        mode = 6U;
        #line 2932 
        ret = prism2_ioctl_siwmode(dev,(struct iw_request_info *)0,& mode,(char *)0);
        #line 2933 
        hostap_monitor_mode_enable(local);
      }
      else 
           #line 2935 
           ret = -22;
  #line 2937 
  return ret;
}

#line 2941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_reset(struct net_device *dev, int *i)
{
  #line 2943 
  struct hostap_interface *iface;
  #line 2944 
  local_info_t *local;
  #line 2946 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2947 
  local = iface->local;
  #line 2949 
  printk((char *)"\001",(char *)(& dev->name),*i);
  #line 2950 
  switch (*i) {
    #line 2951 
    case 0: 
            #line 2951 
    ;
    #line 2953 
    (*((local->func)->hw_shutdown))(dev,1);
    #line 2954 
    (*((local->func)->hw_config))(dev,0);
    #line 2955 
    break;
    #line 2957 
    case 1: 
            #line 2957 
    ;
    #line 2959 
    (*((local->func)->hw_reset))(dev);
    #line 2960 
    break;
    #line 2962 
    case 2: 
            #line 2962 
    ;
    #line 2964 
    (*((local->func)->reset_port))(dev);
    #line 2965 
    break;
    #line 2967 
    case 3: 
            #line 2967 
    ;
    #line 2968 
    prism2_sta_deauth(local,(unsigned short)3);
    #line 2969 
    if ((*((local->func)->cmd))(dev,(unsigned short)2,(unsigned short)0,
                                (u16 *)0U,(u16 *)0U) != 0) 
      #line 2971 
      return -22;
    #line 2972 
    break;
    #line 2974 
    case 4: 
            #line 2974 
    ;
    #line 2975 
    if ((*((local->func)->cmd))(dev,(unsigned short)1,(unsigned short)0,
                                (u16 *)0U,(u16 *)0U) != 0) 
      #line 2977 
      return -22;
    #line 2978 
    break;
    #line 2980 
    default: 
             #line 2980 
    ;
    #line 2981 
    printk((char *)"\001",*i);
    #line 2982 
    return -95;
  }
  #line 2985 
  return 0;
}

#line 2989  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_set_rid_word(struct net_device *dev, int *i)
{
  #line 2991 
  int rid = *i;
  #line 2992 
  int value = *(i + 1U);
  #line 2994 
  printk((char *)"\001",(char *)(& dev->name),rid,value);
  #line 2996 
  if (hostap_set_word(dev,rid,(unsigned short)((int)((unsigned short)value))) != 0) 
    #line 2997 
    return -22;
  #line 2999 
  return 0;
}

#line 3004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int ap_mac_cmd_ioctl(local_info_t *local, int *cmd)
{
  #line 3006 
  int ret = 0;
  #line 3008 
  switch (*cmd) {
    #line 3009 
    case 0: 
            #line 3009 
    ;
    #line 3010 
    (local->ap)->mac_restrictions.policy = 0;
    #line 3011 
    break;
    #line 3012 
    case 1: 
            #line 3012 
    ;
    #line 3013 
    (local->ap)->mac_restrictions.policy = 1;
    #line 3014 
    break;
    #line 3015 
    case 2: 
            #line 3015 
    ;
    #line 3016 
    (local->ap)->mac_restrictions.policy = 2;
    #line 3017 
    break;
    #line 3018 
    case 3: 
            #line 3018 
    ;
    #line 3019 
    ap_control_flush_macs(& (local->ap)->mac_restrictions);
    #line 3020 
    break;
    #line 3021 
    case 4: 
            #line 3021 
    ;
    #line 3022 
    ap_control_kickall(local->ap);
    #line 3023 
    hostap_deauth_all_stas(local->dev,local->ap,0);
    #line 3024 
    break;
    #line 3025 
    default: 
             #line 3025 
    ;
    #line 3026 
    ret = -95;
    #line 3027 
    break;
  }
  #line 3030 
  return ret;
}

#line 3036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_download(local_info_t *local, struct iw_point *p)
{
  #line 3038 
  struct prism2_download_param *param;
  #line 3039 
  int ret = 0;
  #line 3041 
  if ((unsigned int)p->length + 65520U > 1008U || p->pointer == (void *)0) 
    #line 3043 
    return -22;
  #line 3045 
  param = (struct prism2_download_param *)memdup_user(p->pointer,(unsigned long)p->length);
  #line 3046 
  if ((int)IS_ERR((void *)param) != 0) {
    #line 3047 
    return (int)PTR_ERR((void *)param);
  }
  #line 3050 
  if ((unsigned long)p->length < ((unsigned long)param->num_areas + 1UL) * 16UL) {
    #line 3052 
    ret = -22;
    #line 3053 
    goto out;
  }
  #line 3056 
  ret = (*((local->func)->download))(local,param);
  #line 3058 
  out: 
       #line 3058 
  ;
  #line 3059 
  kfree((void *)param);
  #line 3060 
  return ret;
}

#line 3065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_set_genericelement(struct net_device *dev, u8 *elem, size_t len)
{
  #line 3070 
  u8 *buf;
  #line 3068 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3069 
  local_info_t *local = iface->local;
  #line 3076 
  buf = (u8 *)kmalloc(len + 2UL,3264U);
  #line 3077 
  if (buf == (u8 *)0U) 
                       #line 3078 
                       return -12;
  #line 3080 
  *((__le16 *)buf) = (unsigned short)len;
  #line 3081 
  memcpy((void *)(buf + 2U),(void *)elem,len);
  #line 3083 
  kfree((void *)local->generic_elem);
  #line 3084 
  local->generic_elem = buf;
  #line 3085 
  local->generic_elem_len = len + 2UL;
  #line 3087 
  return (*((local->func)->set_rid))(local->dev,(unsigned short)64584,
                                    (void *)buf,(int)(len + (size_t)2U));
}

#line 3092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwauth(struct net_device *dev, struct iw_request_info *info, struct iw_param *data, char *extra)
{
  #line 3096 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3097 
  local_info_t *local = iface->local;
  #line 3099 
  switch ((int)data->flags & 4095) {
    #line 3100 
    case 0: 
            #line 3100 
    ;
    #line 3101 
    case 1: 
            #line 3101 
    ;
    #line 3102 
    case 2: 
            #line 3102 
    ;
    #line 3103 
    case 3: 
            #line 3103 
    ;
    #line 3108 
    break;
    #line 3109 
    case 4: 
            #line 3109 
    ;
    #line 3110 
    local->tkip_countermeasures = data->value;
    #line 3111 
    break;
    #line 3112 
    case 5: 
            #line 3112 
    ;
    #line 3113 
    local->drop_unencrypted = data->value;
    #line 3114 
    break;
    #line 3115 
    case 6: 
            #line 3115 
    ;
    #line 3116 
    local->auth_algs = data->value;
    #line 3117 
    break;
    #line 3118 
    case 7: 
            #line 3118 
    ;
    #line 3119 
    if (data->value == 0) {
      #line 3120 
      local->wpa = 0;
      #line 3121 
      if (local->sta_fw_ver <= 67327U) 
                                       #line 3122 
                                       break;
      #line 3123 
      prism2_set_genericelement(dev,(u8 *)"",0UL);
      #line 3124 
      local->host_roaming = 0;
      #line 3125 
      local->privacy_invoked = 0;
      #line 3126 
      if (hostap_set_word(dev,64699,(unsigned short)0) != 0) 
                                                             #line 3131 
                                                             return -22;
      else {
        #line 3127 
        if (hostap_set_roaming(local) != 0) 
                                            #line 3131 
                                            return -22;
        else {
          #line 3128 
          if (hostap_set_encryption(local) != 0) 
                                                 #line 3131 
                                                 return -22;
          else {
            #line 3129 
            if ((*((local->func)->reset_port))(dev) != 0) 
                                                          #line 3131 
                                                          return -22;
          }
        }
      }
      #line 3132 
      break;
    }
    #line 3134 
    if (local->sta_fw_ver <= 67327U) 
                                     #line 3135 
                                     return -95;
    #line 3136 
    local->host_roaming = 2;
    #line 3137 
    local->privacy_invoked = 1;
    #line 3138 
    local->wpa = 1;
    #line 3139 
    if (hostap_set_word(dev,64699,(unsigned short)1) != 0) 
                                                           #line 3143 
                                                           return -22;
    else {
      #line 3139 
      if (hostap_set_roaming(local) != 0) 
                                          #line 3143 
                                          return -22;
      else {
        #line 3140 
        if (hostap_set_encryption(local) != 0) 
                                               #line 3143 
                                               return -22;
        else {
          #line 3141 
          if ((*((local->func)->reset_port))(dev) != 0) 
                                                        #line 3143 
                                                        return -22;
        }
      }
    }
    #line 3144 
    break;
    #line 3145 
    case 8: 
            #line 3145 
    ;
    #line 3146 
    local->ieee_802_1x = data->value;
    #line 3147 
    break;
    #line 3148 
    case 10: 
             #line 3148 
    ;
    #line 3149 
    local->privacy_invoked = data->value;
    #line 3150 
    break;
    #line 3151 
    default: 
             #line 3151 
    ;
    #line 3152 
    return -95;
  }
  #line 3154 
  return 0;
}

#line 3158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwauth(struct net_device *dev, struct iw_request_info *info, struct iw_param *data, char *extra)
{
  #line 3162 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3163 
  local_info_t *local = iface->local;
  #line 3165 
  switch ((int)data->flags & 4095) {
    #line 3166 
    case 0: 
            #line 3166 
    ;
    #line 3167 
    case 1: 
            #line 3167 
    ;
    #line 3168 
    case 2: 
            #line 3168 
    ;
    #line 3169 
    case 3: 
            #line 3169 
    ;
    #line 3174 
    return -95;
    #line 3175 
    case 4: 
            #line 3175 
    ;
    #line 3176 
    data->value = local->tkip_countermeasures;
    #line 3177 
    break;
    #line 3178 
    case 5: 
            #line 3178 
    ;
    #line 3179 
    data->value = local->drop_unencrypted;
    #line 3180 
    break;
    #line 3181 
    case 6: 
            #line 3181 
    ;
    #line 3182 
    data->value = local->auth_algs;
    #line 3183 
    break;
    #line 3184 
    case 7: 
            #line 3184 
    ;
    #line 3185 
    data->value = local->wpa;
    #line 3186 
    break;
    #line 3187 
    case 8: 
            #line 3187 
    ;
    #line 3188 
    data->value = local->ieee_802_1x;
    #line 3189 
    break;
    #line 3190 
    default: 
             #line 3190 
    ;
    #line 3191 
    return -95;
  }
  #line 3193 
  return 0;
}

#line 3197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwencodeext(struct net_device *dev, struct iw_request_info *info, struct iw_point *erq, char *extra)
{
  #line 3204 
  int i;
  #line 3205 
  struct lib80211_crypto_ops *ops;
  #line 3206 
  struct lib80211_crypt_data **crypt;
  #line 3207 
  void *sta_ptr;
  #line 3208 
  u8 *addr;
  #line 3209 
  char *alg;
  #line 3209 
  char *module;
  #line 3201 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3202 
  local_info_t *local = iface->local;
  #line 3203 
  struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
  #line 3204 
  int ret = 0;
  #line 3211 
  i = (int)erq->flags & 255;
  #line 3212 
  if (i > 4) 
             #line 3213 
             return -22;
  #line 3214 
  if ((unsigned int)i + 4294967295U > 3U) 
                                          #line 3215 
                                          i = local->crypt_info.tx_keyidx; else 
                                                                    #line 3217 
                                                                    i --;
  #line 3218 
  if ((unsigned int)i > 3U) 
                            #line 3219 
                            return -22;
  #line 3221 
  addr = (u8 *)(& ext->addr.sa_data);
  #line 3222 
  if ((int)is_broadcast_ether_addr(addr) != 0) {
    #line 3223 
    sta_ptr = (void *)0;
    #line 3224 
    crypt = & local->crypt_info.crypt[i];
  }
  else {
    #line 3226 
    if (i != 0) 
                #line 3227 
                return -22;
    #line 3228 
    sta_ptr = ap_crypt_get_ptrs(local->ap,addr,0,& crypt);
    #line 3229 
    if (sta_ptr == (void *)0) 
      #line 3230 
      if (local->iw_mode == 2) {
        #line 3236 
        i = 0;
        #line 3237 
        crypt = & local->crypt_info.crypt[i];
      }
      else 
           #line 3239 
           return -22;
  }
  #line 3243 
  if (((int)erq->flags & 32768) != 0 || (unsigned int)ext->alg == 0U) {
    #line 3245 
    if (*crypt != (struct lib80211_crypt_data *)0) 
                                                   #line 3246 
                                                   lib80211_crypt_delayed_deinit(& local->crypt_info,crypt);
    #line 3247 
    goto done;
  }
  #line 3250 
  switch ((int)ext->alg) {
    #line 3251 
    case 1: 
            #line 3251 
    ;
    #line 3252 
    alg = (char *)"WEP";
    #line 3253 
    module = (char *)"lib80211_crypt_wep";
    #line 3254 
    break;
    #line 3255 
    case 2: 
            #line 3255 
    ;
    #line 3256 
    alg = (char *)"TKIP";
    #line 3257 
    module = (char *)"lib80211_crypt_tkip";
    #line 3258 
    break;
    #line 3259 
    case 3: 
            #line 3259 
    ;
    #line 3260 
    alg = (char *)"CCMP";
    #line 3261 
    module = (char *)"lib80211_crypt_ccmp";
    #line 3262 
    break;
    #line 3263 
    default: 
             #line 3263 
    ;
    #line 3264 
    printk((char *)"\001",(char *)(& (local->dev)->name),(int)ext->alg);
    #line 3266 
    ret = -95;
    #line 3267 
    goto done;
  }
  #line 3270 
  ops = lib80211_get_crypto_ops(alg);
  #line 3271 
  if (ops == (struct lib80211_crypto_ops *)0) {
    #line 3272 
    __request_module((_Bool)1,module);
    #line 3273 
    ops = lib80211_get_crypto_ops(alg);
  }
  #line 3275 
  if (ops == (struct lib80211_crypto_ops *)0) {
    #line 3276 
    printk((char *)"\001",(char *)(& (local->dev)->name),alg);
    #line 3278 
    ret = -95;
    #line 3279 
    goto done;
  }
  #line 3282 
  if (sta_ptr != (void *)0 || (unsigned int)ext->alg != 1U) {
    #line 3288 
    local->host_encrypt = 1;
    #line 3288 
    local->host_decrypt = 1;
  }
  #line 3291 
  if (*crypt == (struct lib80211_crypt_data *)0 || (*crypt)->ops != ops) {
    #line 3292 
    struct lib80211_crypt_data *new_crypt;
    #line 3294 
    lib80211_crypt_delayed_deinit(& local->crypt_info,crypt);
    #line 3296 
    new_crypt = (struct lib80211_crypt_data *)kzalloc(40UL,3264U);
    #line 3298 
    if (new_crypt == (struct lib80211_crypt_data *)0) {
      #line 3299 
      ret = -12;
      #line 3300 
      goto done;
    }
    #line 3302 
    new_crypt->ops = ops;
    #line 3303 
    if (new_crypt->ops != (struct lib80211_crypto_ops *)0) {
      #line 3303 
      if ((int)try_module_get((new_crypt->ops)->owner) != 0) 
                                                             #line 3304 
                                                             new_crypt->priv = (*((new_crypt->ops)->init))(i);
    }
    #line 3305 
    if (new_crypt->priv == (void *)0) {
      #line 3306 
      kfree((void *)new_crypt);
      #line 3307 
      ret = -22;
      #line 3308 
      goto done;
    }
    #line 3311 
    *crypt = new_crypt;
  }
  #line 3320 
  if (((ext->ext_flags & 8U) == 0U || (unsigned int)ext->key_len != 0U) && ((*crypt)->ops)->set_key != (int (*)(void *, int , u8 *, void *))0) {
    #line 3321 
    if ((*(((*crypt)->ops)->set_key))((void *)(& ext->key),(int)ext->key_len,
                                      (u8 *)(& ext->rx_seq),(*crypt)->priv) < 0) {
      #line 3324 
      printk((char *)"\001",(char *)(& (local->dev)->name));
      #line 3326 
      ret = -22;
      #line 3327 
      goto done;
    }
  }
  #line 3330 
  if ((ext->ext_flags & 8U) != 0U) 
    #line 3331 
    if (sta_ptr == (void *)0) 
                              #line 3332 
                              local->crypt_info.tx_keyidx = i;
  #line 3336 
  if (sta_ptr == (void *)0 && (unsigned int)ext->key_len != 0U) {
    #line 3337 
    int j;
    #line 3337 
    int first = 1;
    #line 3338 
    j = 0;
    #line 3338 
    while (j <= 3) {
      #line 3339 
      if (j != i && local->crypt_info.crypt[j] != (struct lib80211_crypt_data *)0) {
        #line 3340 
        first = 0;
        #line 3341 
        break;
      }
      #line 3338 
      j ++;
    }
    #line 3344 
    if (first != 0) 
                    #line 3345 
                    local->crypt_info.tx_keyidx = i;
  }
  #line 3348 
  done: 
        #line 3348 
  ;
  #line 3349 
  if (sta_ptr != (void *)0) 
                            #line 3350 
                            hostap_handle_sta_release(sta_ptr);
  #line 3352 
  local->open_wep = (int)erq->flags & 8192;
  #line 3361 
  if (ret == 0) {
    #line 3361 
    if (hostap_set_encryption(local) != 0) 
                                           #line 3365 
                                           ret = -22;
    else 
      #line 3362 
      if (local->iw_mode != 2) {
        #line 3363 
        if ((*((local->func)->reset_port))(local->dev) != 0) 
                                                             #line 3365 
                                                             ret = -22;
      }
  }
  #line 3367 
  return ret;
}

#line 3371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwencodeext(struct net_device *dev, struct iw_request_info *info, struct iw_point *erq, char *extra)
{
  #line 3377 
  struct lib80211_crypt_data **crypt;
  #line 3378 
  void *sta_ptr;
  #line 3379 
  int max_key_len;
  #line 3379 
  int i;
  #line 3381 
  u8 *addr;
  #line 3375 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3376 
  local_info_t *local = iface->local;
  #line 3380 
  struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
  #line 3383 
  max_key_len = (int)((unsigned int)erq->length + 4294967256U);
  #line 3384 
  if (max_key_len < 0) 
                       #line 3385 
                       return -22;
  #line 3387 
  i = (int)erq->flags & 255;
  #line 3388 
  if ((unsigned int)i + 4294967295U > 3U) 
                                          #line 3389 
                                          i = local->crypt_info.tx_keyidx; else 
                                                                    #line 3391 
                                                                    i --;
  #line 3393 
  addr = (u8 *)(& ext->addr.sa_data);
  #line 3394 
  if ((int)is_broadcast_ether_addr(addr) != 0) {
    #line 3395 
    sta_ptr = (void *)0;
    #line 3396 
    crypt = & local->crypt_info.crypt[i];
  }
  else {
    #line 3398 
    i = 0;
    #line 3399 
    sta_ptr = ap_crypt_get_ptrs(local->ap,addr,0,& crypt);
    #line 3400 
    if (sta_ptr == (void *)0) 
                              #line 3401 
                              return -22;
  }
  #line 3403 
  erq->flags = (unsigned short)((unsigned int)((unsigned short)i) + 1U);
  #line 3404 
  memset((void *)ext,0,40UL);
  #line 3406 
  if (*crypt == (struct lib80211_crypt_data *)0 || (*crypt)->ops == (struct lib80211_crypto_ops *)0) {
    #line 3407 
    ext->alg = (unsigned short)0U;
    #line 3408 
    ext->key_len = (unsigned short)0U;
    #line 3409 
    erq->flags = (unsigned short)((unsigned int)erq->flags | 32768U);
  }
  else {
    #line 3411 
    if (cif_strcmp(((*crypt)->ops)->name,(char *)"WEP") == 0) 
                                                              #line 3412 
                                                              ext->alg = (unsigned short)1U;
    else {
      #line 3413 
      if (cif_strcmp(((*crypt)->ops)->name,(char *)"TKIP") == 0) 
                                                                 #line 3414 
                                                                 ext->alg = (unsigned short)2U;
      else {
        #line 3415 
        if (cif_strcmp(((*crypt)->ops)->name,(char *)"CCMP") == 0) 
                                                                   #line 3416 
                                                                   ext->alg = (unsigned short)3U; else 
                                                                    #line 3418 
                                                                    return -22;
      }
    }
    #line 3420 
    if (((*crypt)->ops)->get_key != (int (*)(void *, int , u8 *, void *))0) {
      #line 3421 
      ext->key_len = (unsigned short)(*(((*crypt)->ops)->get_key))((void *)(& ext->key),max_key_len,
                                      (u8 *)(& ext->tx_seq),(*crypt)->priv);
      #line 3426 
      if ((unsigned int)ext->key_len != 0U && (unsigned int)ext->alg + 65534U <= 1U) 
        #line 3429 
        ext->ext_flags |= 1U;
    }
  }
  #line 3433 
  if (sta_ptr != (void *)0) 
                            #line 3434 
                            hostap_handle_sta_release(sta_ptr);
  #line 3436 
  return 0;
}

#line 3440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_set_encryption(local_info_t *local, struct prism2_hostapd_param *param, int param_len)
{
  #line 3445 
  struct lib80211_crypto_ops *ops;
  #line 3446 
  struct lib80211_crypt_data **crypt;
  #line 3447 
  void *sta_ptr;
  #line 3444 
  int ret = 0;
  #line 3449 
  param->u.crypt.err = 0U;
  #line 3450 
  param->u.crypt.alg[15] = (unsigned char)0U;
  #line 3454 
  if ((int)param->u.crypt.key_len + 48 != param_len) 
                                                     #line 3455 
                                                     return -22;
  #line 3457 
  if ((int)is_broadcast_ether_addr((u8 *)(& param->sta_addr)) != 0) {
    #line 3458 
    if ((unsigned int)param->u.crypt.idx > 3U) 
                                               #line 3459 
                                               return -22;
    #line 3460 
    sta_ptr = (void *)0;
    #line 3461 
    crypt = & local->crypt_info.crypt[(int)param->u.crypt.idx];
  }
  else {
    #line 3463 
    if ((unsigned int)param->u.crypt.idx != 0U) 
                                                #line 3464 
                                                return -22;
    #line 3465 
    sta_ptr = ap_crypt_get_ptrs(local->ap,(u8 *)(& param->sta_addr),(int)param->u.crypt.flags & 2,& crypt);
    #line 3470 
    if (sta_ptr == (void *)0) {
      #line 3471 
      param->u.crypt.err = 3U;
      #line 3472 
      return -22;
    }
  }
  #line 3476 
  if (cif_strcmp((char *)(& param->u.crypt.alg),(char *)"none") == 0) {
    #line 3477 
    if (crypt != (struct lib80211_crypt_data **)0) 
                                                   #line 3478 
                                                   lib80211_crypt_delayed_deinit(& local->crypt_info,crypt);
    #line 3479 
    goto done;
  }
  #line 3482 
  ops = lib80211_get_crypto_ops((char *)(& param->u.crypt.alg));
  #line 3483 
  if (ops == (struct lib80211_crypto_ops *)0) {
    #line 3483 
    if (cif_strcmp((char *)(& param->u.crypt.alg),(char *)"WEP") == 0) {
      #line 3484 
      __request_module((_Bool)1,(char *)"lib80211_crypt_wep");
      #line 3485 
      ops = lib80211_get_crypto_ops((char *)(& param->u.crypt.alg));
    }
    else 
         #line 3483 
         goto _LAND_0;
  }
  else {
    #line 3483 
    _LAND_0: 
             #line 3486 
    ;
    #line 3486 
    if (ops == (struct lib80211_crypto_ops *)0) {
      #line 3486 
      if (cif_strcmp((char *)(& param->u.crypt.alg),(char *)"TKIP") == 0) {
        #line 3487 
        __request_module((_Bool)1,(char *)"lib80211_crypt_tkip");
        #line 3488 
        ops = lib80211_get_crypto_ops((char *)(& param->u.crypt.alg));
      }
      else 
           #line 3486 
           goto _LAND;
    }
    else {
      #line 3486 
      _LAND: 
             #line 3489 
      ;
      #line 3489 
      if (ops == (struct lib80211_crypto_ops *)0) {
        #line 3489 
        if (cif_strcmp((char *)(& param->u.crypt.alg),(char *)"CCMP") == 0) {
          #line 3490 
          __request_module((_Bool)1,(char *)"lib80211_crypt_ccmp");
          #line 3491 
          ops = lib80211_get_crypto_ops((char *)(& param->u.crypt.alg));
        }
      }
    }
  }
  #line 3493 
  if (ops == (struct lib80211_crypto_ops *)0) {
    #line 3494 
    printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& param->u.crypt.alg));
    #line 3496 
    param->u.crypt.err = 2U;
    #line 3497 
    ret = -22;
    #line 3498 
    goto done;
  }
  #line 3503 
  local->host_encrypt = 1;
  #line 3503 
  local->host_decrypt = 1;
  #line 3505 
  if (*crypt == (struct lib80211_crypt_data *)0 || (*crypt)->ops != ops) {
    #line 3506 
    struct lib80211_crypt_data *new_crypt;
    #line 3508 
    lib80211_crypt_delayed_deinit(& local->crypt_info,crypt);
    #line 3510 
    new_crypt = (struct lib80211_crypt_data *)kzalloc(40UL,3264U);
    #line 3512 
    if (new_crypt == (struct lib80211_crypt_data *)0) {
      #line 3513 
      ret = -12;
      #line 3514 
      goto done;
    }
    #line 3516 
    new_crypt->ops = ops;
    #line 3517 
    new_crypt->priv = (*((new_crypt->ops)->init))((int)param->u.crypt.idx);
    #line 3518 
    if (new_crypt->priv == (void *)0) {
      #line 3519 
      kfree((void *)new_crypt);
      #line 3520 
      param->u.crypt.err = 4U;
      #line 3522 
      ret = -22;
      #line 3523 
      goto done;
    }
    #line 3526 
    *crypt = new_crypt;
  }
  #line 3529 
  if ((((unsigned long)param->u.crypt.flags & 1UL) == 0UL || (unsigned int)param->u.crypt.key_len != 0U) && ((*crypt)->ops)->set_key != (int (*)(void *, int , u8 *, void *))0) {
    #line 3530 
    if ((*(((*crypt)->ops)->set_key))((void *)(& param->u.crypt.key),
                                      (int)param->u.crypt.key_len,
                                      (u8 *)(& param->u.crypt.seq),
                                      (*crypt)->priv) < 0) {
      #line 3534 
      printk((char *)"\001",(char *)(& (local->dev)->name));
      #line 3536 
      param->u.crypt.err = 5U;
      #line 3537 
      ret = -22;
      #line 3538 
      goto done;
    }
  }
  #line 3541 
  if (((unsigned long)param->u.crypt.flags & 1UL) != 0UL) 
    #line 3542 
    if (sta_ptr == (void *)0) 
                              #line 3543 
                              local->crypt_info.tx_keyidx = (int)param->u.crypt.idx;
    else 
      #line 3544 
      if ((unsigned int)param->u.crypt.idx != 0U) {
        #line 3545 
        printk((char *)"\001",(char *)(& (local->dev)->name));
        #line 3547 
        param->u.crypt.err = 6U;
        #line 3549 
        ret = -22;
        #line 3550 
        goto done;
      }
  #line 3554 
  done: 
        #line 3554 
  ;
  #line 3555 
  if (sta_ptr != (void *)0) 
                            #line 3556 
                            hostap_handle_sta_release(sta_ptr);
  #line 3563 
  if (ret == 0) {
    #line 3563 
    if (hostap_set_encryption(local) != 0) 
                                           #line 3563 
                                           goto _LOR;
    else 
      #line 3564 
      if (local->iw_mode != 2) {
        #line 3565 
        if ((*((local->func)->reset_port))(local->dev) != 0) {
          #line 3563 
          _LOR: {
                  #line 3567 
                  param->u.crypt.err = 7U;
                  #line 3568 
                  return -22;
                }
        }
      }
  }
  #line 3571 
  return ret;
}

#line 3575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_get_encryption(local_info_t *local, struct prism2_hostapd_param *param, int param_len)
{
  #line 3579 
  struct lib80211_crypt_data **crypt;
  #line 3580 
  void *sta_ptr;
  #line 3581 
  int max_key_len;
  #line 3583 
  param->u.crypt.err = 0U;
  #line 3585 
  max_key_len = param_len + -48;
  #line 3587 
  if (max_key_len < 0) 
                       #line 3588 
                       return -22;
  #line 3590 
  if ((int)is_broadcast_ether_addr((u8 *)(& param->sta_addr)) != 0) {
    #line 3591 
    sta_ptr = (void *)0;
    #line 3592 
    if ((unsigned int)param->u.crypt.idx > 3U) 
                                               #line 3593 
                                               param->u.crypt.idx = (unsigned char)local->crypt_info.tx_keyidx;
    #line 3594 
    crypt = & local->crypt_info.crypt[(int)param->u.crypt.idx];
  }
  else {
    #line 3596 
    param->u.crypt.idx = (unsigned char)0U;
    #line 3597 
    sta_ptr = ap_crypt_get_ptrs(local->ap,(u8 *)(& param->sta_addr),0,& crypt);
    #line 3600 
    if (sta_ptr == (void *)0) {
      #line 3601 
      param->u.crypt.err = 3U;
      #line 3602 
      return -22;
    }
  }
  #line 3606 
  if (*crypt == (struct lib80211_crypt_data *)0 || (*crypt)->ops == (struct lib80211_crypto_ops *)0) {
    #line 3607 
    memcpy((void *)(& param->u.crypt.alg),(void *)"none",5UL);
    #line 3608 
    param->u.crypt.key_len = (unsigned short)0U;
    #line 3609 
    param->u.crypt.idx = (unsigned char)255U;
  }
  else {
    #line 3611 
    strncpy((char *)(& param->u.crypt.alg),((*crypt)->ops)->name,16UL);
    #line 3613 
    param->u.crypt.key_len = (unsigned short)0U;
    #line 3615 
    memset((void *)(& param->u.crypt.seq),0,8UL);
    #line 3616 
    if (((*crypt)->ops)->get_key != (int (*)(void *, int , u8 *, void *))0) {
      #line 3617 
      param->u.crypt.key_len = (unsigned short)(*(((*crypt)->ops)->get_key))((void *)(& param->u.crypt.key),
                                      max_key_len,
                                      (u8 *)(& param->u.crypt.seq),
                                      (*crypt)->priv);
    }
  }
  #line 3625 
  if (sta_ptr != (void *)0) 
                            #line 3626 
                            hostap_handle_sta_release(sta_ptr);
  #line 3628 
  return 0;
}

#line 3632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_get_rid(local_info_t *local, struct prism2_hostapd_param *param, int param_len)
{
  #line 3636 
  int max_len;
  #line 3636 
  int res;
  #line 3638 
  max_len = (int)((unsigned int)param_len + 4294967280U);
  #line 3639 
  if (max_len < 0) 
                   #line 3640 
                   return -22;
  #line 3642 
  res = (*((local->func)->get_rid))(local->dev,(unsigned short)((int)param->u.rid.rid),(void *)(& param->u.rid.data),(int)param->u.rid.len,0);
  #line 3644 
  if (res >= 0) {
    #line 3645 
    param->u.rid.len = (unsigned short)res;
    #line 3646 
    return 0;
  }
  #line 3649 
  return res;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_set_rid(local_info_t *local, struct prism2_hostapd_param *param, int param_len)
{
  #line 3657 
  int max_len;
  #line 3659 
  max_len = (int)((unsigned int)param_len + 4294967280U);
  #line 3660 
  if (max_len < 0 || (int)param->u.rid.len > max_len) 
                                                      #line 3661 
                                                      return -22;
  #line 3663 
  return (*((local->func)->set_rid))(local->dev,
                                  (unsigned short)((int)param->u.rid.rid),
                                  (void *)(& param->u.rid.data),
                                  (int)param->u.rid.len);
}

#line 3668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_set_assoc_ap_addr(local_info_t *local, struct prism2_hostapd_param *param, int param_len)
{
  #line 3672 
  printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& param->sta_addr));
  #line 3674 
  memcpy((void *)(& local->assoc_ap_addr),(void *)(& param->sta_addr),6UL);
  #line 3675 
  return 0;
}

#line 3679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwgenie(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 3683 
  return prism2_set_genericelement(dev,(u8 *)extra,(unsigned long)data->length);
}

#line 3687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_giwgenie(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 3691 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3692 
  local_info_t *local = iface->local;
  #line 3693 
  int len = (int)(local->generic_elem_len + (size_t)4294967294U);
  #line 3695 
  if (len <= 0 || local->generic_elem == (u8 *)0U) {
    #line 3696 
    data->length = (unsigned short)0U;
    #line 3697 
    return 0;
  }
  #line 3700 
  if ((int)data->length < len) 
                               #line 3701 
                               return -7;
  #line 3703 
  data->length = (unsigned short)len;
  #line 3704 
  memcpy((void *)extra,(void *)(local->generic_elem + 2U),(unsigned long)len);
  #line 3706 
  return 0;
}

#line 3710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_set_generic_element(local_info_t *local, struct prism2_hostapd_param *param, int param_len)
{
  #line 3714 
  int max_len;
  #line 3714 
  int len;
  #line 3716 
  len = (int)param->u.generic_elem.len;
  #line 3717 
  max_len = (int)((unsigned int)param_len + 4294967283U);
  #line 3718 
  if (max_len < 0 || max_len < len) 
                                    #line 3719 
                                    return -22;
  #line 3721 
  return prism2_set_genericelement(local->dev,
                                (u8 *)(& param->u.generic_elem.data),
                                (unsigned long)len);
}

#line 3726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_siwmlme(struct net_device *dev, struct iw_request_info *info, struct iw_point *data, char *extra)
{
  #line 3733 
  __le16 reason;
  #line 3730 
  struct hostap_interface *iface = netdev_priv(dev);
  #line 3731 
  local_info_t *local = iface->local;
  #line 3732 
  struct iw_mlme *mlme = (struct iw_mlme *)extra;
  #line 3735 
  reason = mlme->reason_code;
  #line 3737 
  switch ((int)mlme->cmd) {
    #line 3738 
    case 0: 
            #line 3738 
    ;
    #line 3739 
    return prism2_sta_send_mgmt(local,(u8 *)(& mlme->addr.sa_data),
                             (unsigned short)192,(u8 *)(& reason),2UL);
    #line 3742 
    case 1: 
            #line 3742 
    ;
    #line 3743 
    return prism2_sta_send_mgmt(local,(u8 *)(& mlme->addr.sa_data),
                             (unsigned short)160,(u8 *)(& reason),2UL);
    #line 3746 
    default: 
             #line 3746 
    ;
    #line 3747 
    return -95;
  }
}

#line 3752  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_mlme(local_info_t *local, struct prism2_hostapd_param *param)
{
  #line 3755 
  __le16 reason;
  #line 3757 
  reason = param->u.mlme.reason_code;
  #line 3758 
  switch ((int)param->u.mlme.cmd) {
    #line 3759 
    case 0: 
            #line 3759 
    ;
    #line 3760 
    return prism2_sta_send_mgmt(local,(u8 *)(& param->sta_addr),
                           (unsigned short)192,(u8 *)(& reason),2UL);
    #line 3763 
    case 1: 
            #line 3763 
    ;
    #line 3764 
    return prism2_sta_send_mgmt(local,(u8 *)(& param->sta_addr),
                             (unsigned short)160,(u8 *)(& reason),2UL);
    #line 3767 
    default: 
             #line 3767 
    ;
    #line 3768 
    return -95;
  }
}

#line 3773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_scan_req(local_info_t *local, struct prism2_hostapd_param *param)
{
  #line 3777 
  if ((unsigned int)local->iw_mode + 4294967295U > 1U || local->sta_fw_ver <= 66304U) 
    #line 3780 
    return -95;
  #line 3782 
  if (local->dev_enabled == 0) 
                               #line 3783 
                               return -100;
  #line 3785 
  return prism2_request_hostscan(local->dev,(u8 *)(& param->u.scan_req.ssid),
                              (unsigned char)((int)param->u.scan_req.ssid_len));
}

#line 3793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static int prism2_ioctl_priv_hostapd(local_info_t *local, struct iw_point *p)
{
  #line 3795 
  struct prism2_hostapd_param *param;
  #line 3796 
  int ret = 0;
  #line 3797 
  int ap_ioctl = 0;
  #line 3799 
  if ((unsigned int)p->length + 65488U > 976U || p->pointer == (void *)0) 
    #line 3801 
    return -22;
  #line 3803 
  param = (struct prism2_hostapd_param *)memdup_user(p->pointer,(unsigned long)p->length);
  #line 3804 
  if ((int)IS_ERR((void *)param) != 0) {
    #line 3805 
    return (int)PTR_ERR((void *)param);
  }
  #line 3808 
  switch (param->cmd) {
    #line 3809 
    case (u32)6: 
                 #line 3809 
    ;
    #line 3810 
    ret = prism2_ioctl_set_encryption(local,param,(int)p->length);
    #line 3811 
    break;
    #line 3812 
    case (u32)7: 
                 #line 3812 
    ;
    #line 3813 
    ret = prism2_ioctl_get_encryption(local,param,(int)p->length);
    #line 3814 
    break;
    #line 3815 
    case (u32)9: 
                 #line 3815 
    ;
    #line 3816 
    ret = prism2_ioctl_get_rid(local,param,(int)p->length);
    #line 3817 
    break;
    #line 3818 
    case (u32)10: 
                  #line 3818 
    ;
    #line 3819 
    ret = prism2_ioctl_set_rid(local,param,(int)p->length);
    #line 3820 
    break;
    #line 3821 
    case (u32)11: 
                  #line 3821 
    ;
    #line 3822 
    ret = prism2_ioctl_set_assoc_ap_addr(local,param,(int)p->length);
    #line 3823 
    break;
    #line 3824 
    case (u32)12: 
                  #line 3824 
    ;
    #line 3825 
    ret = prism2_ioctl_set_generic_element(local,param,(int)p->length);
    #line 3827 
    break;
    #line 3828 
    case (u32)13: 
                  #line 3828 
    ;
    #line 3829 
    ret = prism2_ioctl_mlme(local,param);
    #line 3830 
    break;
    #line 3831 
    case (u32)14: 
                  #line 3831 
    ;
    #line 3832 
    ret = prism2_ioctl_scan_req(local,param);
    #line 3833 
    break;
    #line 3834 
    default: 
             #line 3834 
    ;
    #line 3835 
    ret = prism2_hostapd(local->ap,param);
    #line 3836 
    ap_ioctl = 1;
    #line 3837 
    break;
  }
  #line 3840 
  if (ret == 1 || ap_ioctl == 0) {
    #line 3841 
    if (copy_to_user(p->pointer,(void *)param,(unsigned long)p->length) != 0UL) {
      #line 3842 
      ret = -14;
      #line 3843 
      goto out;
    }
    else 
      #line 3844 
      if (ap_ioctl != 0) 
                         #line 3845 
                         ret = 0;
  }
  #line 3848 
  out: 
       #line 3848 
  ;
  #line 3849 
  kfree((void *)param);
  #line 3850 
  return ret;
}

#line 3854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static void prism2_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 3857 
  struct hostap_interface *iface;
  #line 3858 
  local_info_t *local;
  #line 3860 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 3861 
  local = iface->local;
  #line 3863 
  strlcpy((char *)(& info->driver),(char *)"hostap",32UL);
  #line 3864 
  snprintf((char *)(& info->fw_version),32UL,(char *)"%d.%d.%d",(local->sta_fw_ver >> 16) & 255U,(local->sta_fw_ver >> 8) & 255U,local->sta_fw_ver & 255U);
  #line 3868 
  return;
}

#line 3870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
struct ethtool_ops prism2_ethtool_ops = {.get_drvinfo = & prism2_get_drvinfo};
#line 3877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static iw_handler prism2_handler[56U] = {[1] = (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_get_name), [4] = (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwfreq), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwfreq), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwmode), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwmode), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwsens), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwsens), [11] = (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwrange), [16] = & iw_handler_set_spy, & iw_handler_get_spy, & iw_handler_set_thrspy, & iw_handler_get_thrspy, (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwap), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwap), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwmlme), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwaplist), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwscan), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwscan), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwessid), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwessid), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwnickn), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwnickn), [32] = (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwrate), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwrate), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwrts), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwrts), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwfrag), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwfrag), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwtxpow), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwtxpow), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwretry), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwretry), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwencode), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwencode), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwpower), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwpower), [48] = (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwgenie), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwgenie), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwauth), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwauth), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_siwencodeext), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_giwencodeext)};
#line 3937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
static iw_handler prism2_private_handler[4U] = {(int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_priv_prism2_param), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_priv_get_prism2_param), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_priv_writemif), (int (*)(struct net_device *, struct iw_request_info *, union iwreq_data *, char *))(& prism2_ioctl_priv_readmif)};
#line 3945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
struct iw_handler_def hostap_iw_handler_def = {.standard = (iw_handler *)(& prism2_handler), .num_standard = (unsigned short)56U, .num_private = (unsigned short)4U, .num_private_args = (unsigned short)86U, .private = (iw_handler *)(& prism2_private_handler), .private_args = (struct iw_priv_args *)(& prism2_priv), .get_wireless_stats = & hostap_get_wireless_stats};
#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ioctl.c"
int hostap_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 3960 
  struct hostap_interface *iface;
  #line 3961 
  local_info_t *local;
  #line 3959 
  struct iwreq *wrq = (struct iwreq *)ifr;
  #line 3962 
  int ret = 0;
  #line 3964 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 3965 
  local = iface->local;
  #line 3967 
  switch (cmd) {
    #line 3971 
    case 35816: 
                #line 3971 
    ;
    #line 3972 
    if (capable(12)) 
                     #line 3973 
                     ret = prism2_ioctl_priv_inquire(dev,(int *)(& wrq->u.name)); else 
                                                                    #line 3972 
                                                                    ret = -1;
    #line 3974 
    break;
    #line 3976 
    case 35812: 
                #line 3976 
    ;
    #line 3977 
    if (capable(12)) 
                     #line 3978 
                     ret = prism2_ioctl_priv_monitor(dev,(int *)(& wrq->u.name)); else 
                                                                    #line 3977 
                                                                    ret = -1;
    #line 3979 
    break;
    #line 3981 
    case 35814: 
                #line 3981 
    ;
    #line 3982 
    if (capable(12)) 
                     #line 3983 
                     ret = prism2_ioctl_priv_reset(dev,(int *)(& wrq->u.name)); else 
                                                                    #line 3982 
                                                                    ret = -1;
    #line 3984 
    break;
    #line 3986 
    case 35818: 
                #line 3986 
    ;
    #line 3987 
    if (capable(12)) 
                     #line 3988 
                     ret = prism2_wds_add(local,(u8 *)(& wrq->u.ap_addr.sa_data),1); else 
                                                                    #line 3987 
                                                                    ret = -1;
    #line 3989 
    break;
    #line 3991 
    case 35820: 
                #line 3991 
    ;
    #line 3992 
    if (capable(12)) 
                     #line 3993 
                     ret = prism2_wds_del(local,(u8 *)(& wrq->u.ap_addr.sa_data),1,0); else 
                                                                    #line 3992 
                                                                    ret = -1;
    #line 3994 
    break;
    #line 3996 
    case 35822: 
                #line 3996 
    ;
    #line 3997 
    if (capable(12)) 
                     #line 3998 
                     ret = prism2_ioctl_priv_set_rid_word(dev,(int *)(& wrq->u.name)); else 
                                                                    #line 3997 
                                                                    ret = -1;
    #line 4000 
    break;
    #line 4003 
    case 35824: 
                #line 4003 
    ;
    #line 4004 
    if (capable(12)) 
                     #line 4005 
                     ret = ap_mac_cmd_ioctl(local,(int *)(& wrq->u.name)); else 
                                                                    #line 4004 
                                                                    ret = -1;
    #line 4006 
    break;
    #line 4008 
    case 35826: 
                #line 4008 
    ;
    #line 4009 
    if (capable(12)) 
                     #line 4010 
                     ret = ap_control_add_mac(& (local->ap)->mac_restrictions,(u8 *)(& wrq->u.ap_addr.sa_data)); else 
                                                                    #line 4009 
                                                                    ret = -1;
    #line 4012 
    break;
    #line 4013 
    case 35828: 
                #line 4013 
    ;
    #line 4014 
    if (capable(12)) 
                     #line 4015 
                     ret = ap_control_del_mac(& (local->ap)->mac_restrictions,(u8 *)(& wrq->u.ap_addr.sa_data)); else 
                                                                    #line 4014 
                                                                    ret = -1;
    #line 4017 
    break;
    #line 4018 
    case 35830: 
                #line 4018 
    ;
    #line 4019 
    if (capable(12)) 
                     #line 4020 
                     ret = ap_control_kick_mac(local->ap,local->dev,(u8 *)(& wrq->u.ap_addr.sa_data)); else 
                                                                    #line 4019 
                                                                    ret = -1;
    #line 4022 
    break;
    #line 4030 
    case 35325: 
                #line 4030 
    ;
    #line 4031 
    if (capable(12)) 
                     #line 4032 
                     ret = prism2_ioctl_priv_download(local,& wrq->u.data); else 
                                                                    #line 4031 
                                                                    ret = -1;
    #line 4033 
    break;
    #line 4036 
    case 35326: 
                #line 4036 
    ;
    #line 4037 
    if (capable(12)) 
                     #line 4038 
                     ret = prism2_ioctl_priv_hostapd(local,& wrq->u.data); else 
                                                                    #line 4037 
                                                                    ret = -1;
    #line 4039 
    break;
    #line 4041 
    default: 
             #line 4041 
    ;
    #line 4042 
    ret = -95;
    #line 4043 
    break;
  }
  #line 4046 
  return ret;
}

#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
#line 94 
int emg_del_timer(struct timer_list *arg0);
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static size_t cif_strlen(char *s)
{
  #line 147 
  return ldv_strlen(s);
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 210 
  return ldv_ptr_err(ptr);
}

#line 214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 217 
  return ldv_is_err(ptr);
}

#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 321 
  return ldv_kmalloc(size,flags);
}

#line 325  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 328 
  return ldv_kmalloc_array(n,size,flags);
}

#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 356 
  return ldv_kzalloc(size,flags);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 649 
  return ldv_strcmp(cs,ct);
}

#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif___ldv_spin_lock_lock_of_local_info(spinlock_t *lock)
{
  #line 656 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 658 
  __ldv_spin_lock(lock);
  #line 659 
  return;
}

#line 662  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_local_info(spinlock_t *lock, unsigned long flags)
{
  #line 665 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 667 
  spin_unlock_irqrestore(lock,flags);
  #line 668 
  return;
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif_spin_lock_bh_lock_of_local_info_0(spinlock_t *lock)
{
  #line 674 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 676 
  spin_lock_bh_0(lock);
  #line 677 
  return;
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static void cif_spin_unlock_bh_lock_of_local_info_0(spinlock_t *lock)
{
  #line 683 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 685 
  spin_unlock_bh_0(lock);
  #line 686 
  return;
}

#line 689  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ioctl.i.aux"
static int cif_del_timer(struct timer_list *timer)
{
  #line 693 
  return emg_del_timer(timer);
}

/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 8 
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 204 
void __might_sleep(char *, int, int);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
static int cif_strcmp_0(char *cs, char *ct);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_1589 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
static void atomic_inc(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
static void atomic_dec(atomic_t *v);
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static bool gfpflags_allow_blocking(gfp_t gfp_flags)
{
  #line 325 
  return (_Bool)((gfp_flags & 1024U) != 0U);
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1107 
#line 1107 
struct sk_buff *skb_copy(struct sk_buff *, gfp_t);
#line 1116 
#line 1116 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
#line 1117 
#line 1117 
struct sk_buff *skb_realloc_headroom(struct sk_buff *, unsigned int);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_cloned(struct sk_buff *skb)
{
  #line 1600 
  int tmp_1;
  #line 1600 
  if ((unsigned int)skb->cloned != 0U) {
    #line 1600 
    if ((atomic_read(& ((struct skb_shared_info *)skb_end_pointer(skb))->dataref) & 65535) != 1) 
      #line 1600 
      tmp_1 = 1; else 
                      #line 1600 
                      tmp_1 = 0;
  }
  else 
       #line 1600 
       tmp_1 = 0;
  #line 1600 
  return tmp_1;
}

#line 1714  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_unshare(struct sk_buff *skb, gfp_t pri)
{
  #line 1717 
  if ((int)gfpflags_allow_blocking(pri) != 0) 
                                              #line 1717 
                                              __might_sleep((char *)"./include/linux/skbuff.h",1717,0);
  #line 1718 
  if (skb_cloned(skb) != 0) {
    #line 1719 
    struct sk_buff *nskb = skb_copy(skb,pri);
    #line 1722 
    if ((long)(nskb != (struct sk_buff *)0) != 0L) 
                                                   #line 1723 
                                                   consume_skb(skb); else 
                                                                    #line 1725 
                                                                    kfree_skb(skb);
    #line 1726 
    skb = nskb;
  }
  #line 1728 
  return skb;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_data(struct sk_buff *skb, void *data, unsigned int len)
{
  #line 2233 
  void *tmp = skb_put(skb,len);
  #line 2235 
  memcpy(tmp,data,(unsigned long)len);
  #line 2237 
  return tmp;
}

#line 2245 
#line 2245 
void *skb_push(struct sk_buff *, unsigned int);
#line 2253 
#line 2253 
void *skb_pull(struct sk_buff *, unsigned int);
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff *skb)
{
  #line 2301 
  return (unsigned int)(skb->data - skb->head);
}

#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  #line 2513 
  skb->mac_header = (unsigned short)(skb->data - skb->head);
  #line 2514 
  return;
}

#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 3608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data_offset(struct sk_buff *skb, int offset, void *to, unsigned int len)
{
  #line 3612 
  memcpy(to,(void *)(skb->data + (unsigned long)offset),(unsigned long)len);
  #line 3613 
  return;
}

#line 2666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2666 
int dev_queue_xmit(struct sk_buff *);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
void hostap_dump_tx_80211(char *name, struct sk_buff *skb);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
netdev_tx_t hostap_data_start_xmit(struct sk_buff *skb, struct net_device *dev);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
netdev_tx_t hostap_mgmt_start_xmit(struct sk_buff *skb, struct net_device *dev);
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
netdev_tx_t hostap_master_start_xmit(struct sk_buff *skb, struct net_device *dev);
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_data(__le16 fc)
{
  #line 370 
  return (_Bool)(((int)fc & 12) == 8);
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 236 
ap_tx_ret hostap_handle_sta_tx(local_info_t *local, struct hostap_tx_data *tx);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 35 
int hostap_80211_get_hdrlen(__le16 fc);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
static unsigned char rfc1042_header[6U] = {(unsigned char)170U, (unsigned char)170U, (unsigned char)3U};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
static unsigned char bridge_tunnel_header[6U] = {(unsigned char)170U, (unsigned char)170U, (unsigned char)3U, [5] = (unsigned char)248U};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
void hostap_dump_tx_80211(char *name, struct sk_buff *skb)
{
  #line 23 
  struct ieee80211_hdr *hdr;
  #line 24 
  u16 fc;
  #line 38 
  char *tmp;
  #line 37 
  char *tmp_0;
  #line 26 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 28 
  printk((char *)"\001",name,skb->len,jiffies);
  #line 31 
  if (skb->len <= 1U) 
                      #line 32 
                      return;
  #line 34 
  fc = hdr->frame_control;
  #line 38 
  if (((int)fc & 512) != 0) 
                            #line 38 
                            tmp = (char *)" [FromDS]"; else 
                                                            #line 38 
                                                            tmp = (char *)"";
  #line 37 
  if (((int)fc & 256) != 0) 
                            #line 37 
                            tmp_0 = (char *)" [ToDS]"; else 
                                                            #line 37 
                                                            tmp_0 = (char *)"";
  #line 35 
  ;
  #line 35 
  ;
  #line 35 
  ;
  #line 35 
  printk((char *)"\001",(int)fc,((int)fc >> 2) & 3,((int)fc >> 4) & 15,tmp_0,tmp);
  #line 41 
  if (skb->len <= 23U) {
    #line 42 
    printk((char *)"\n");
    #line 43 
    return;
  }
  #line 46 
  printk((char *)" dur=0x%04x seq=0x%04x\n",(int)hdr->duration_id,(int)hdr->seq_ctrl);
  #line 49 
  printk((char *)"\001",(u8 *)(& hdr->addr1));
  #line 50 
  printk((char *)" A2=%pM",(u8 *)(& hdr->addr2));
  #line 51 
  printk((char *)" A3=%pM",(u8 *)(& hdr->addr3));
  #line 52 
  if (skb->len > 29U) 
                      #line 53 
                      printk((char *)" A4=%pM",(u8 *)(& hdr->addr4));
  #line 54 
  printk((char *)"\n");
  #line 55 
  return;
}

#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
netdev_tx_t hostap_data_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 64 
  struct hostap_interface *iface;
  #line 65 
  local_info_t *local;
  #line 66 
  int need_headroom;
  #line 67 
  struct ieee80211_hdr hdr;
  #line 68 
  u16 fc;
  #line 72 
  u8 *encaps_data;
  #line 73 
  int hdr_len;
  #line 73 
  int encaps_len;
  #line 73 
  int skip_header_bytes;
  #line 75 
  struct hostap_skb_tx_data *meta;
  #line 66 
  int need_tailroom = 0;
  #line 68 
  u16 ethertype = (unsigned short)0U;
  #line 71 
  enum ldv_15558 use_wds = WDS_NO;
  #line 74 
  int to_assoc_ap = 0;
  #line 77 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 78 
  local = iface->local;
  #line 80 
  if (skb->len <= 13U) {
    #line 81 
    printk((char *)"\001",(char *)(& dev->name),skb->len);
    #line 83 
    kfree_skb(skb);
    #line 84 
    return NETDEV_TX_OK;
  }
  #line 87 
  if (local->ddev != dev) {
    #line 88 
    if (local->iw_mode == 3 && ((unsigned long)local->wds_type & 4UL) == 0UL) 
      #line 88 
      use_wds = WDS_OWN_FRAME; else 
                                    #line 88 
                                    use_wds = WDS_COMPLIANT_FRAME;
    #line 91 
    if (local->stadev == dev) {
      #line 92 
      to_assoc_ap = 1;
      #line 93 
      use_wds = WDS_NO;
    }
    else 
      #line 94 
      if (local->apdev == dev) {
        #line 95 
        printk((char *)"\001",(char *)(& dev->name));
        #line 97 
        kfree_skb(skb);
        #line 98 
        return NETDEV_TX_OK;
      }
  }
  else 
    #line 101 
    if (local->iw_mode == 4) {
      #line 102 
      printk((char *)"\001",(char *)(& dev->name));
      #line 104 
      kfree_skb(skb);
      #line 105 
      return NETDEV_TX_OK;
    }
    else 
      #line 106 
      if (local->iw_mode == 2 && ((unsigned long)local->wds_type & 2UL) != 0UL) {
        #line 108 
        if (! ether_addr_equal(skb->data + 6U,dev->dev_addr)) 
                                                              #line 111 
                                                              use_wds = WDS_COMPLIANT_FRAME;
      }
  #line 122 
  ethertype = (unsigned short)(((int)*(skb->data + 12U) << 8) | (int)*(skb->data + 13U));
  #line 124 
  memset((void *)(& hdr),0,30UL);
  #line 127 
  encaps_data = (u8 *)0U;
  #line 128 
  encaps_len = 0;
  #line 129 
  skip_header_bytes = 14;
  #line 130 
  if ((unsigned int)ethertype == 33011U || (unsigned int)ethertype == 33079U) {
    #line 131 
    encaps_data = (u8 *)(& bridge_tunnel_header);
    #line 132 
    encaps_len = 6;
    #line 133 
    skip_header_bytes += -2;
  }
  else 
    #line 134 
    if ((unsigned int)ethertype > 1535U) {
      #line 135 
      encaps_data = (u8 *)(& rfc1042_header);
      #line 136 
      encaps_len = 6;
      #line 137 
      skip_header_bytes += -2;
    }
  #line 140 
  fc = (unsigned short)8U;
  #line 141 
  hdr_len = 24;
  #line 143 
  if (use_wds != (unsigned int)WDS_NO) {
    #line 152 
    if (use_wds == (unsigned int)WDS_COMPLIANT_FRAME) {
      #line 153 
      fc = (unsigned short)((unsigned int)fc | 768U);
      #line 156 
      skb_copy_from_linear_data_offset(skb,6,(void *)(& hdr.addr4),6U);
      #line 158 
      hdr_len += 6;
    }
    else {
      #line 162 
      fc = (unsigned short)((unsigned int)fc | 256U);
      #line 170 
      skb_copy_from_linear_data_offset(skb,6,(void *)(& hdr.addr4),6U);
      #line 172 
      need_tailroom += 6;
    }
    #line 177 
    if (((unsigned long)local->wds_type & 1UL) != 0UL) {
      #line 177 
      if ((int)is_multicast_ether_addr(skb->data) != 0) 
                                                        #line 179 
                                                        eth_broadcast_addr((u8 *)(& hdr.addr1)); else 
                                                                    #line 177 
                                                                    goto _LAND;
    }
    else {
      #line 177 
      _LAND: 
             #line 180 
      ;
      #line 180 
      if (iface->type == (unsigned int)4) 
                                          #line 181 
                                          memcpy((void *)(& hdr.addr1),(void *)(& iface->u.wds.remote_addr),6UL); else 
                                                                    #line 184 
                                                                    memcpy((void *)(& hdr.addr1),(void *)(& local->bssid),6UL);
    }
    #line 185 
    memcpy((void *)(& hdr.addr2),(void *)dev->dev_addr,6UL);
    #line 186 
    skb_copy_from_linear_data(skb,(void *)(& hdr.addr3),6U);
  }
  else 
    #line 187 
    if (local->iw_mode == 3 && to_assoc_ap == 0) {
      #line 188 
      fc = (unsigned short)((unsigned int)fc | 512U);
      #line 190 
      skb_copy_from_linear_data(skb,(void *)(& hdr.addr1),6U);
      #line 191 
      memcpy((void *)(& hdr.addr2),(void *)dev->dev_addr,6UL);
      #line 192 
      skb_copy_from_linear_data_offset(skb,6,(void *)(& hdr.addr3),6U);
    }
    else 
      #line 194 
      if (local->iw_mode == 2 || to_assoc_ap != 0) {
        #line 198 
        char (*tmp_2)[6U];
        #line 195 
        fc = (unsigned short)((unsigned int)fc | 256U);
        #line 198 
        if (to_assoc_ap != 0) 
                              #line 198 
                              tmp_2 = & local->assoc_ap_addr; else 
                                                                   #line 198 
                                                                   tmp_2 = & local->bssid;
        #line 197 
        memcpy((void *)(& hdr.addr1),(void *)tmp_2,6UL);
        #line 199 
        skb_copy_from_linear_data_offset(skb,6,(void *)(& hdr.addr2),6U);
        #line 201 
        skb_copy_from_linear_data(skb,(void *)(& hdr.addr3),6U);
      }
      else 
        #line 202 
        if (local->iw_mode == 1) {
          #line 204 
          skb_copy_from_linear_data(skb,(void *)(& hdr.addr1),6U);
          #line 205 
          skb_copy_from_linear_data_offset(skb,6,(void *)(& hdr.addr2),6U);
          #line 207 
          memcpy((void *)(& hdr.addr3),(void *)(& local->bssid),6UL);
        }
  #line 210 
  hdr.frame_control = fc;
  #line 212 
  skb_pull(skb,(unsigned int)skip_header_bytes);
  #line 213 
  need_headroom = ((local->func)->need_tx_headroom + hdr_len) + encaps_len;
  #line 214 
  ;
  #line 214 
  if (skb_tailroom(skb) < need_tailroom) {
    #line 215 
    skb = skb_unshare(skb,2592U);
    #line 216 
    if (skb == (struct sk_buff *)0) {
      #line 217 
      (iface->stats.tx_dropped) ++;
      #line 218 
      return NETDEV_TX_OK;
    }
    #line 220 
    if (pskb_expand_head(skb,need_headroom,need_tailroom,2592U) != 0) {
      #line 222 
      kfree_skb(skb);
      #line 223 
      (iface->stats.tx_dropped) ++;
      #line 224 
      return NETDEV_TX_OK;
    }
  }
  else {
    #line 226 
    ;
    #line 226 
    if (skb_headroom(skb) < (unsigned int)need_headroom) {
      #line 227 
      struct sk_buff *tmp = skb;
      #line 228 
      skb = skb_realloc_headroom(skb,(unsigned int)need_headroom);
      #line 229 
      kfree_skb(tmp);
      #line 230 
      if (skb == (struct sk_buff *)0) {
        #line 231 
        (iface->stats.tx_dropped) ++;
        #line 232 
        return NETDEV_TX_OK;
      }
    }
    else {
      #line 235 
      skb = skb_unshare(skb,2592U);
      #line 236 
      if (skb == (struct sk_buff *)0) {
        #line 237 
        (iface->stats.tx_dropped) ++;
        #line 238 
        return NETDEV_TX_OK;
      }
    }
  }
  #line 242 
  if (encaps_data != (u8 *)0U) {
    #line 243 
    ;
    #line 243 
    ;
    #line 243 
    memcpy(skb_push(skb,(unsigned int)encaps_len),(void *)encaps_data,(unsigned long)encaps_len);
  }
  #line 244 
  ;
  #line 244 
  memcpy(skb_push(skb,(unsigned int)hdr_len),(void *)(& hdr),(unsigned long)hdr_len);
  #line 245 
  if (use_wds == (unsigned int)WDS_OWN_FRAME) 
                                              #line 246 
                                              skb_put_data(skb,(void *)(& hdr.addr4),6U);
  #line 249 
  (iface->stats.tx_packets) ++;
  #line 250 
  iface->stats.tx_bytes += (unsigned long)skb->len;
  #line 252 
  skb_reset_mac_header(skb);
  #line 253 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 254 
  memset((void *)meta,0,40UL);
  #line 255 
  meta->magic = 4035589794U;
  #line 256 
  if (use_wds != (unsigned int)WDS_NO) 
                                       #line 257 
                                       meta->flags = (unsigned char)((unsigned int)meta->flags | 1U);
  #line 258 
  meta->ethertype = ethertype;
  #line 259 
  meta->iface = iface;
  #line 262 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = local->dev;
  #line 263 
  dev_queue_xmit(skb);
  #line 264 
  return NETDEV_TX_OK;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
netdev_tx_t hostap_mgmt_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 272 
  struct hostap_interface *iface;
  #line 273 
  local_info_t *local;
  #line 274 
  struct hostap_skb_tx_data *meta;
  #line 275 
  struct ieee80211_hdr *hdr;
  #line 276 
  u16 fc;
  #line 278 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 279 
  local = iface->local;
  #line 281 
  if (skb->len <= 9U) {
    #line 282 
    printk((char *)"\001",(char *)(& dev->name),skb->len);
    #line 284 
    kfree_skb(skb);
    #line 285 
    return NETDEV_TX_OK;
  }
  #line 288 
  (iface->stats.tx_packets) ++;
  #line 289 
  iface->stats.tx_bytes += (unsigned long)skb->len;
  #line 291 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 292 
  memset((void *)meta,0,40UL);
  #line 293 
  meta->magic = 4035589794U;
  #line 294 
  meta->iface = iface;
  #line 296 
  if (skb->len > 31U) {
    #line 297 
    hdr = (struct ieee80211_hdr *)skb->data;
    #line 298 
    fc = hdr->frame_control;
    #line 299 
    if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) 
      #line 299 
      if (((int)fc & 240) == 0) {
        #line 301 
        u8 *pos = skb->data + 30UL;
        #line 303 
        meta->ethertype = (unsigned short)(((int)*pos << 8) | (int)*(pos + 1U));
      }
  }
  #line 308 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = local->dev;
  #line 309 
  dev_queue_xmit(skb);
  #line 310 
  return NETDEV_TX_OK;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
static struct sk_buff *hostap_tx_encrypt(struct sk_buff *skb, struct lib80211_crypt_data *crypt)
{
  #line 318 
  struct hostap_interface *iface;
  #line 319 
  local_info_t *local;
  #line 320 
  struct ieee80211_hdr *hdr;
  #line 321 
  int prefix_len;
  #line 321 
  int postfix_len;
  #line 321 
  int hdr_len;
  #line 321 
  int res;
  #line 323 
  iface = (struct hostap_interface *)netdev_priv(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev);
  #line 324 
  local = iface->local;
  #line 326 
  if (skb->len <= 23U) {
    #line 327 
    kfree_skb(skb);
    #line 328 
    return (struct sk_buff *)0;
  }
  #line 331 
  if (local->tkip_countermeasures != 0) {
    #line 331 
    if (cif_strcmp_0((crypt->ops)->name,(char *)"TKIP") == 0) {
      #line 333 
      hdr = (struct ieee80211_hdr *)skb->data;
      #line 334 
      if (net_ratelimit() != 0) 
                                #line 335 
                                printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr1));
      #line 339 
      kfree_skb(skb);
      #line 340 
      return (struct sk_buff *)0;
    }
  }
  #line 343 
  skb = skb_unshare(skb,2592U);
  #line 344 
  if (skb == (struct sk_buff *)0) 
                                  #line 345 
                                  return (struct sk_buff *)0;
  #line 347 
  prefix_len = (crypt->ops)->extra_mpdu_prefix_len + (crypt->ops)->extra_msdu_prefix_len;
  #line 349 
  postfix_len = (crypt->ops)->extra_mpdu_postfix_len + (crypt->ops)->extra_msdu_postfix_len;
  #line 351 
  ;
  #line 351 
  if (skb_headroom(skb) < (unsigned int)prefix_len) 
                                                    #line 351 
                                                    goto _LOR;
  else {
    #line 351 
    ;
    #line 351 
    if (skb_tailroom(skb) < postfix_len) {
      #line 351 
      _LOR: 
      #line 352 
      if (pskb_expand_head(skb,prefix_len,postfix_len,2592U) != 0) {
        #line 354 
        kfree_skb(skb);
        #line 355 
        return (struct sk_buff *)0;
      }
    }
  }
  #line 358 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 359 
  hdr_len = hostap_80211_get_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 363 
  atomic_inc(& crypt->refcnt);
  #line 364 
  res = 0;
  #line 365 
  if ((crypt->ops)->encrypt_msdu != (int (*)(struct sk_buff *, int , void *))0) 
    #line 366 
    res = (*((crypt->ops)->encrypt_msdu))(skb,hdr_len,crypt->priv);
  #line 367 
  if (res == 0 && (crypt->ops)->encrypt_mpdu != (int (*)(struct sk_buff *, int , void *))0) 
    #line 368 
    res = (*((crypt->ops)->encrypt_mpdu))(skb,hdr_len,crypt->priv);
  #line 369 
  atomic_dec(& crypt->refcnt);
  #line 370 
  if (res < 0) {
    #line 371 
    kfree_skb(skb);
    #line 372 
    return (struct sk_buff *)0;
  }
  #line 375 
  return skb;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_tx.c"
netdev_tx_t hostap_master_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 385 
  struct hostap_interface *iface;
  #line 386 
  local_info_t *local;
  #line 388 
  u16 fc;
  #line 389 
  struct hostap_tx_data tx;
  #line 390 
  ap_tx_ret tx_ret;
  #line 391 
  struct hostap_skb_tx_data *meta;
  #line 393 
  struct ieee80211_hdr *hdr;
  #line 387 
  netdev_tx_t ret = (enum netdev_tx)16;
  #line 392 
  int no_encrypt = 0;
  #line 395 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 396 
  local = iface->local;
  #line 398 
  tx.skb = skb;
  #line 399 
  tx.sta_ptr = (void *)0;
  #line 401 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 402 
  if (meta->magic != 4035589794U) {
    #line 403 
    printk((char *)"\001",(char *)(& dev->name),meta->magic,4035589794U);
    #line 406 
    ret = NETDEV_TX_OK;
    #line 407 
    (iface->stats.tx_dropped) ++;
    #line 408 
    goto fail;
  }
  #line 411 
  if (local->host_encrypt != 0) {
    #line 414 
    tx.crypt = local->crypt_info.crypt[local->crypt_info.tx_keyidx];
    #line 415 
    tx.host_encrypt = 1;
  }
  else {
    #line 417 
    tx.crypt = (struct lib80211_crypt_data *)0;
    #line 418 
    tx.host_encrypt = 0;
  }
  #line 421 
  if (skb->len <= 23U) {
    #line 422 
    printk((char *)"\001",(char *)(& dev->name),skb->len);
    #line 424 
    ret = NETDEV_TX_OK;
    #line 425 
    (iface->stats.tx_dropped) ++;
    #line 426 
    goto fail;
  }
  #line 433 
  tx_ret = hostap_handle_sta_tx(local,& tx);
  #line 434 
  skb = tx.skb;
  #line 435 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 436 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 437 
  fc = hdr->frame_control;
  #line 438 
  switch ((unsigned int)tx_ret) {
    #line 439 
    case (unsigned int)0: 
                          #line 439 
    ;
    #line 440 
    break;
    #line 441 
    case (unsigned int)4: 
                          #line 441 
    ;
    #line 442 
    if (local->ieee_802_1x != 0) {
      #line 442 
      if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) 
        #line 443 
        if ((unsigned int)meta->ethertype != 34958U) 
          #line 444 
          if (((unsigned long)meta->flags & 1UL) == 0UL) {
            #line 446 
            printk((char *)"\001",(char *)(& dev->name),(int)meta->ethertype);
            #line 449 
            hostap_dump_tx_80211((char *)(& dev->name),skb);
            #line 451 
            ret = NETDEV_TX_OK;
            #line 452 
            (iface->stats.tx_dropped) ++;
            #line 453 
            goto fail;
          }
    }
    #line 455 
    break;
    #line 456 
    case (unsigned int)1: 
                          #line 456 
    ;
    #line 457 
    ret = NETDEV_TX_OK;
    #line 458 
    (iface->stats.tx_dropped) ++;
    #line 459 
    goto fail;
    #line 460 
    case (unsigned int)2: 
                          #line 460 
    ;
    #line 461 
    goto fail;
    #line 462 
    case (unsigned int)3: 
                          #line 462 
    ;
    #line 465 
    ret = NETDEV_TX_OK;
    #line 466 
    goto tx_exit;
  }
  #line 472 
  if (((((unsigned int)fc & 3U) == 2U && local->ap != (struct ap_data *)0) && (unsigned int)(local->ap)->tx_callback_idx != 0U) && (unsigned int)meta->tx_cb_idx == 0U) {
    #line 474 
    meta->tx_cb_idx = (local->ap)->tx_callback_idx;
    #line 477 
    fc = (unsigned short)((unsigned int)fc & 65532U);
    #line 478 
    hdr->frame_control = fc;
  }
  #line 481 
  if (! ieee80211_is_data((unsigned short)((int)hdr->frame_control))) {
    #line 482 
    no_encrypt = 1;
    #line 483 
    tx.crypt = (struct lib80211_crypt_data *)0;
  }
  #line 486 
  if (((local->ieee_802_1x != 0 && (unsigned int)meta->ethertype == 34958U) && tx.crypt != (struct lib80211_crypt_data *)0) && ((int)fc & 16384) == 0) {
    #line 488 
    no_encrypt = 1;
    #line 491 
    tx.crypt = (struct lib80211_crypt_data *)0;
  }
  #line 494 
  if (tx.crypt != (struct lib80211_crypt_data *)0 && ((tx.crypt)->ops == (struct lib80211_crypto_ops *)0 || ((tx.crypt)->ops)->encrypt_mpdu == (int (*)(struct sk_buff *, int , void *))0)) 
    #line 495 
    tx.crypt = (struct lib80211_crypt_data *)0;
  else 
    #line 496 
    if ((tx.crypt != (struct lib80211_crypt_data *)0 || local->crypt_info.crypt[local->crypt_info.tx_keyidx] != (struct lib80211_crypt_data *)0) && no_encrypt == 0) {
      #line 501 
      fc = (unsigned short)((unsigned int)fc | 16384U);
      #line 502 
      hdr->frame_control = fc;
    }
    else 
      #line 503 
      if (local->drop_unencrypted != 0) {
        #line 503 
        if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) 
          #line 504 
          if ((unsigned int)meta->ethertype != 34958U) {
            #line 506 
            if (net_ratelimit() != 0) 
                                      #line 507 
                                      printk((char *)"\001",(char *)(& dev->name));
            #line 510 
            (iface->stats.tx_dropped) ++;
            #line 511 
            ret = NETDEV_TX_OK;
            #line 512 
            goto fail;
          }
      }
  #line 515 
  if (tx.crypt != (struct lib80211_crypt_data *)0) {
    #line 516 
    skb = hostap_tx_encrypt(skb,tx.crypt);
    #line 517 
    if (skb == (struct sk_buff *)0) {
      #line 518 
      printk((char *)"\001",(char *)(& dev->name));
      #line 520 
      ret = NETDEV_TX_OK;
      #line 521 
      goto fail;
    }
    #line 523 
    meta = (struct hostap_skb_tx_data *)(& skb->cb);
    #line 524 
    if (meta->magic != 4035589794U) {
      #line 525 
      printk((char *)"\001",(char *)(& dev->name),meta->magic,4035589794U);
      #line 529 
      ret = NETDEV_TX_OK;
      #line 530 
      (iface->stats.tx_dropped) ++;
      #line 531 
      goto fail;
    }
  }
  #line 535 
  if ((local->func)->tx == (int (*)(struct sk_buff *, struct net_device *))0) 
    #line 535 
    goto _LOR;
  else {
    #line 535 
    if ((*((local->func)->tx))(skb,dev) != 0) {
      #line 535 
      _LOR: {
              #line 536 
              ret = NETDEV_TX_OK;
              #line 537 
              (iface->stats.tx_dropped) ++;
            }
    }
    else {
      #line 539 
      ret = NETDEV_TX_OK;
      #line 540 
      (iface->stats.tx_packets) ++;
      #line 541 
      iface->stats.tx_bytes += (unsigned long)skb->len;
    }
  }
  #line 544 
  fail: 
        #line 544 
  ;
  #line 545 
  if (ret == (unsigned int)NETDEV_TX_OK && skb != (struct sk_buff *)0) 
    #line 546 
    consume_skb(skb);
  #line 547 
  tx_exit: 
           #line 547 
  ;
  #line 548 
  if (tx.sta_ptr != (void *)0) 
                               #line 549 
                               hostap_handle_sta_release(tx.sta_ptr);
  #line 550 
  return ret;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 182 
  ldv_atomic_inc(v);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 189 
  ldv_atomic_dec(v);
  #line 190 
  return;
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_tx.i.aux"
static int cif_strcmp_0(char *cs, char *ct)
{
  #line 649 
  return ldv_strcmp(cs,ct);
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 663  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_local_info_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 654 
static void cif___ldv_spin_lock_lock_of_local_info_0(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 554 
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 388  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void *kmalloc_array_0(size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1829 
  list->next = ((struct sk_buff *)list);
  #line 1829 
  list->prev = ((struct sk_buff *)list);
  #line 1830 
  list->qlen = 0U;
  #line 1831 
  return;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list)
{
  #line 1843 
  spinlock_check(& list->lock);
  {
    #line 1843 
    struct lock_class_key __key;
    #line 1843 
    __raw_spin_lock_init(& list->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&list->lock)->rlock",& __key);
  }
  #line 1844 
  __skb_queue_head_init(list);
  #line 1845 
  return;
}

#line 3814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3814 
void netif_carrier_off(struct net_device *);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_zero_addr(u8 *addr)
{
  #line 251 
  memset((void *)addr,0,6UL);
  #line 252 
  return;
}

#line 441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
#line 441 
void wireless_send_event(struct net_device *, unsigned int, union iwreq_data *, char *);
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 252 
int hostap_add_sta(struct ap_data *ap, u8 *sta_addr);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
void hostap_info_init(local_info_t *local);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
void hostap_info_process(local_info_t *local, struct sk_buff *skb);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_info_commtallies16(local_info_t *local, unsigned char *buf, int left)
{
  #line 17 
  struct hfa384x_comm_tallies *tallies;
  #line 19 
  if ((unsigned int)left <= 41U) {
    #line 20 
    printk((char *)"\001",(char *)(& (local->dev)->name),left);
    #line 22 
    return;
  }
  #line 25 
  tallies = (struct hfa384x_comm_tallies *)buf;
  #line 28 
  local->comm_tallies.tx_unicast_frames += (unsigned int)tallies->tx_unicast_frames;
  #line 29 
  local->comm_tallies.tx_multicast_frames += (unsigned int)tallies->tx_multicast_frames;
  #line 30 
  local->comm_tallies.tx_fragments += (unsigned int)tallies->tx_fragments;
  #line 31 
  local->comm_tallies.tx_unicast_octets += (unsigned int)tallies->tx_unicast_octets;
  #line 32 
  local->comm_tallies.tx_multicast_octets += (unsigned int)tallies->tx_multicast_octets;
  #line 33 
  local->comm_tallies.tx_deferred_transmissions += (unsigned int)tallies->tx_deferred_transmissions;
  #line 34 
  local->comm_tallies.tx_single_retry_frames += (unsigned int)tallies->tx_single_retry_frames;
  #line 35 
  local->comm_tallies.tx_multiple_retry_frames += (unsigned int)tallies->tx_multiple_retry_frames;
  #line 36 
  local->comm_tallies.tx_retry_limit_exceeded += (unsigned int)tallies->tx_retry_limit_exceeded;
  #line 37 
  local->comm_tallies.tx_discards += (unsigned int)tallies->tx_discards;
  #line 38 
  local->comm_tallies.rx_unicast_frames += (unsigned int)tallies->rx_unicast_frames;
  #line 39 
  local->comm_tallies.rx_multicast_frames += (unsigned int)tallies->rx_multicast_frames;
  #line 40 
  local->comm_tallies.rx_fragments += (unsigned int)tallies->rx_fragments;
  #line 41 
  local->comm_tallies.rx_unicast_octets += (unsigned int)tallies->rx_unicast_octets;
  #line 42 
  local->comm_tallies.rx_multicast_octets += (unsigned int)tallies->rx_multicast_octets;
  #line 43 
  local->comm_tallies.rx_fcs_errors += (unsigned int)tallies->rx_fcs_errors;
  #line 44 
  local->comm_tallies.rx_discards_no_buffer += (unsigned int)tallies->rx_discards_no_buffer;
  #line 45 
  local->comm_tallies.tx_discards_wrong_sa += (unsigned int)tallies->tx_discards_wrong_sa;
  #line 46 
  local->comm_tallies.rx_discards_wep_undecryptable += (unsigned int)tallies->rx_discards_wep_undecryptable;
  #line 47 
  local->comm_tallies.rx_message_in_msg_fragments += (unsigned int)tallies->rx_message_in_msg_fragments;
  #line 48 
  local->comm_tallies.rx_message_in_bad_msg_fragments += (unsigned int)tallies->rx_message_in_bad_msg_fragments;
  #line 49 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_info_commtallies32(local_info_t *local, unsigned char *buf, int left)
{
  #line 57 
  struct hfa384x_comm_tallies32 *tallies;
  #line 59 
  if ((unsigned int)left <= 83U) {
    #line 60 
    printk((char *)"\001",(char *)(& (local->dev)->name),left);
    #line 62 
    return;
  }
  #line 65 
  tallies = (struct hfa384x_comm_tallies32 *)buf;
  #line 68 
  local->comm_tallies.tx_unicast_frames += tallies->tx_unicast_frames;
  #line 69 
  local->comm_tallies.tx_multicast_frames += tallies->tx_multicast_frames;
  #line 70 
  local->comm_tallies.tx_fragments += tallies->tx_fragments;
  #line 71 
  local->comm_tallies.tx_unicast_octets += tallies->tx_unicast_octets;
  #line 72 
  local->comm_tallies.tx_multicast_octets += tallies->tx_multicast_octets;
  #line 73 
  local->comm_tallies.tx_deferred_transmissions += tallies->tx_deferred_transmissions;
  #line 74 
  local->comm_tallies.tx_single_retry_frames += tallies->tx_single_retry_frames;
  #line 75 
  local->comm_tallies.tx_multiple_retry_frames += tallies->tx_multiple_retry_frames;
  #line 76 
  local->comm_tallies.tx_retry_limit_exceeded += tallies->tx_retry_limit_exceeded;
  #line 77 
  local->comm_tallies.tx_discards += tallies->tx_discards;
  #line 78 
  local->comm_tallies.rx_unicast_frames += tallies->rx_unicast_frames;
  #line 79 
  local->comm_tallies.rx_multicast_frames += tallies->rx_multicast_frames;
  #line 80 
  local->comm_tallies.rx_fragments += tallies->rx_fragments;
  #line 81 
  local->comm_tallies.rx_unicast_octets += tallies->rx_unicast_octets;
  #line 82 
  local->comm_tallies.rx_multicast_octets += tallies->rx_multicast_octets;
  #line 83 
  local->comm_tallies.rx_fcs_errors += tallies->rx_fcs_errors;
  #line 84 
  local->comm_tallies.rx_discards_no_buffer += tallies->rx_discards_no_buffer;
  #line 85 
  local->comm_tallies.tx_discards_wrong_sa += tallies->tx_discards_wrong_sa;
  #line 86 
  local->comm_tallies.rx_discards_wep_undecryptable += tallies->rx_discards_wep_undecryptable;
  #line 87 
  local->comm_tallies.rx_message_in_msg_fragments += tallies->rx_message_in_msg_fragments;
  #line 88 
  local->comm_tallies.rx_message_in_bad_msg_fragments += tallies->rx_message_in_bad_msg_fragments;
  #line 89 
  return;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_info_commtallies(local_info_t *local, unsigned char *buf, int left)
{
  #line 97 
  if (local->tallies32 != 0) 
                             #line 98 
                             prism2_info_commtallies32(local,buf,left); else 
                                                                    #line 100 
                                                                    prism2_info_commtallies16(local,buf,left);
  #line 101 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static char *hfa384x_linkstatus_str(u16 linkstatus)
{
  #line 108 
  switch ((int)linkstatus) {
    #line 109 
    case 1: 
            #line 109 
    ;
    #line 110 
    return (char *)"Connected";
    #line 111 
    case 2: 
            #line 111 
    ;
    #line 112 
    return (char *)"Disconnected";
    #line 113 
    case 3: 
            #line 113 
    ;
    #line 114 
    return (char *)"Access point change";
    #line 115 
    case 4: 
            #line 115 
    ;
    #line 116 
    return (char *)"Access point out of range";
    #line 117 
    case 5: 
            #line 117 
    ;
    #line 118 
    return (char *)"Access point in range";
    #line 119 
    case 6: 
            #line 119 
    ;
    #line 120 
    return (char *)"Association failed";
    #line 121 
    default: 
             #line 121 
    ;
    #line 122 
    return (char *)"Unknown";
  }
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_info_linkstatus(local_info_t *local, unsigned char *buf, int left)
{
  #line 132 
  u16 val;
  #line 133 
  int non_sta_mode;
  #line 137 
  local->last_join_time = 0UL;
  #line 139 
  if (left != 2) {
    #line 140 
    printk((char *)"\001",(char *)(& (local->dev)->name),left);
    #line 142 
    return;
  }
  #line 145 
  non_sta_mode = ((unsigned int)local->iw_mode + 4294967293U <= 1U || local->iw_mode == 6) != 0;
  #line 149 
  val = (unsigned short)((int)*buf | ((int)*(buf + 1U) << 8));
  #line 150 
  if (non_sta_mode == 0 || (unsigned int)val != 2U) {
    #line 151 
    ;
    #line 151 
    ;
    #line 151 
    printk((char *)"\001",(char *)(& (local->dev)->name),(int)val,hfa384x_linkstatus_str((unsigned short)((int)val)));
  }
  #line 155 
  if (non_sta_mode != 0) {
    #line 156 
    netif_carrier_on(local->dev);
    #line 157 
    netif_carrier_on(local->ddev);
    #line 158 
    return;
  }
  #line 162 
  cif_set_bit(0L,& local->pending_info);
  #line 163 
  local->prev_link_status = (int)val;
  #line 164 
  cif_schedule_work(& local->info_queue);
  #line 165 
  return;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_host_roaming(local_info_t *local)
{
  #line 170 
  struct hfa384x_join_request req;
  #line 172 
  struct hfa384x_hostscan_result *selected;
  #line 172 
  struct hfa384x_hostscan_result *entry;
  #line 173 
  int i;
  #line 174 
  unsigned long flags;
  #line 171 
  struct net_device *dev = local->dev;
  {
    #line 177 
    unsigned long __dummy;
    #line 177 
    unsigned long __dummy2;
    }
  #line 176 
  if (1 != 0) {
    {
      #line 177 
      unsigned long __dummy_0;
      #line 177 
      unsigned long __dummy2_0;
      }
    #line 177 
    if (1 != 0) 
      #line 177 
      if ((long)((jiffies - local->last_join_time) + 18446744073709549116UL) < 0L) 
        #line 176 
        if (local->last_join_time != 0UL) {
          #line 178 
          printk((char *)"\001",(char *)(& dev->name));
          #line 181 
          return;
        }
  }
  #line 192 
  cif___ldv_spin_lock_lock_of_local_info_0(& local->lock);
  #line 193 
  if (local->last_scan_results == (struct hfa384x_hostscan_result *)0 || local->last_scan_results_count == 0) {
    #line 195 
    cif_spin_unlock_irqrestore_lock_of_local_info_0(& local->lock,flags);
    #line 196 
    printk((char *)"\001",(char *)(& dev->name));
    #line 198 
    return;
  }
  #line 201 
  selected = local->last_scan_results;
  #line 203 
  if ((((((unsigned int)local->preferred_ap[0] != 0U || (unsigned int)local->preferred_ap[1] != 0U) || (unsigned int)local->preferred_ap[2] != 0U) || (unsigned int)local->preferred_ap[3] != 0U) || (unsigned int)local->preferred_ap[4] != 0U) || (unsigned int)local->preferred_ap[5] != 0U) {
    #line 207 
    printk((char *)"\001",(char *)(& dev->name),(u8 *)(& local->preferred_ap));
    #line 209 
    i = 0;
    #line 209 
    while (local->last_scan_results_count > i) {
      {
        #line 210 
        entry = local->last_scan_results + (unsigned long)i;
        #line 211 
        if (memcmp((void *)(& local->preferred_ap),(void *)(& entry->bssid),6UL) == 0) {
          #line 213 
          printk((char *)"\001",(char *)(& dev->name));
          #line 215 
          selected = entry;
          #line 216 
          break;
        }
      }
      #line 209 
      i ++;
    }
  }
  #line 221 
  memcpy((void *)(& req.bssid),(void *)(& selected->bssid),6UL);
  #line 222 
  req.channel = selected->chid;
  #line 223 
  cif_spin_unlock_irqrestore_lock_of_local_info_0(& local->lock,flags);
  #line 225 
  printk((char *)"\001",(char *)(& dev->name),(u8 *)(& req.bssid),(int)req.channel);
  #line 228 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64738,
                                    (void *)(& req),8) != 0) 
    #line 230 
    printk((char *)"\001",(char *)(& dev->name));
  #line 232 
  local->last_join_time = jiffies;
  #line 233 
  return;
}

#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void hostap_report_scan_complete(local_info_t *local)
{
  #line 238 
  union iwreq_data wrqu;
  #line 242 
  wrqu.data.length = (unsigned short)0U;
  #line 243 
  wrqu.data.flags = (unsigned short)0U;
  #line 244 
  wireless_send_event(local->dev,35609U,& wrqu,(char *)0);
  #line 248 
  local->scan_timestamp = 0UL;
  #line 249 
  return;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_info_scanresults(local_info_t *local, unsigned char *buf, int left)
{
  #line 256 
  u16 *pos;
  #line 257 
  int new_count;
  #line 257 
  int i;
  #line 258 
  unsigned long flags;
  #line 259 
  struct hfa384x_scan_result *res;
  #line 260 
  struct hfa384x_hostscan_result *results;
  #line 260 
  struct hfa384x_hostscan_result *prev;
  #line 262 
  if (left <= 3) {
    #line 263 
    printk((char *)"\001",(char *)(& (local->dev)->name),left);
    #line 265 
    return;
  }
  #line 268 
  pos = (u16 *)buf;
  #line 269 
  pos ++;
  #line 270 
  pos ++;
  #line 271 
  left += -4;
  #line 273 
  new_count = (int)((unsigned long)left / 62UL);
  #line 274 
  results = (struct hfa384x_hostscan_result *)kmalloc_array_0((unsigned long)new_count,64UL,2592U);
  #line 277 
  if (results == (struct hfa384x_hostscan_result *)0) 
                                                      #line 278 
                                                      return;
  #line 281 
  res = (struct hfa384x_scan_result *)pos;
  #line 282 
  i = 0;
  #line 282 
  while (i < new_count) {
    #line 283 
    memcpy((void *)(results + (unsigned long)i),(void *)(res + (unsigned long)i),62UL);
    #line 285 
    (results + (unsigned long)i)->atim = (unsigned short)0U;
    #line 282 
    i ++;
  }
  #line 288 
  cif___ldv_spin_lock_lock_of_local_info_0(& local->lock);
  #line 289 
  local->last_scan_type = 0;
  #line 290 
  prev = local->last_scan_results;
  #line 291 
  local->last_scan_results = results;
  #line 292 
  local->last_scan_results_count = new_count;
  #line 293 
  cif_spin_unlock_irqrestore_lock_of_local_info_0(& local->lock,flags);
  #line 294 
  kfree((void *)prev);
  #line 296 
  hostap_report_scan_complete(local);
  #line 299 
  cif_set_bit(1L,& local->pending_info);
  #line 300 
  cif_schedule_work(& local->info_queue);
  #line 301 
  return;
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void prism2_info_hostscanresults(local_info_t *local, unsigned char *buf, int left)
{
  #line 308 
  int i;
  #line 308 
  int result_size;
  #line 308 
  int copy_len;
  #line 308 
  int new_count;
  #line 309 
  struct hfa384x_hostscan_result *results;
  #line 309 
  struct hfa384x_hostscan_result *prev;
  #line 310 
  unsigned long flags;
  #line 311 
  __le16 *pos;
  #line 312 
  u8 *ptr;
  #line 314 
  __wake_up(& local->hostscan_wq,1U,1,(void *)0);
  #line 316 
  if (left <= 3) {
    #line 317 
    printk((char *)"\001",(char *)(& (local->dev)->name),left);
    #line 319 
    return;
  }
  #line 322 
  pos = (__le16 *)buf;
  #line 323 
  result_size = (int)*pos;
  #line 323 
  copy_len = result_size;
  #line 324 
  if (result_size == 0) {
    #line 325 
    printk((char *)"\001",(char *)(& (local->dev)->name));
    #line 327 
    return;
  }
  #line 329 
  if ((unsigned int)copy_len > 64U) 
                                    #line 330 
                                    copy_len = 64;
  #line 332 
  pos ++;
  #line 333 
  pos ++;
  #line 334 
  left += -4;
  #line 335 
  ptr = (u8 *)pos;
  #line 337 
  new_count = left / result_size;
  #line 338 
  results = (struct hfa384x_hostscan_result *)kcalloc((unsigned long)new_count,64UL,2592U);
  #line 340 
  if (results == (struct hfa384x_hostscan_result *)0) 
                                                      #line 341 
                                                      return;
  #line 343 
  i = 0;
  #line 343 
  while (i < new_count) {
    #line 344 
    memcpy((void *)(results + (unsigned long)i),(void *)ptr,(unsigned long)copy_len);
    #line 345 
    ptr += (unsigned long)result_size;
    #line 346 
    left -= result_size;
    #line 343 
    i ++;
  }
  #line 349 
  if (left != 0) 
                 #line 350 
                 printk((char *)"\001",(char *)(& (local->dev)->name),left,result_size);
  #line 354 
  cif___ldv_spin_lock_lock_of_local_info_0(& local->lock);
  #line 355 
  local->last_scan_type = 1;
  #line 356 
  prev = local->last_scan_results;
  #line 357 
  local->last_scan_results = results;
  #line 358 
  local->last_scan_results_count = new_count;
  #line 359 
  cif_spin_unlock_irqrestore_lock_of_local_info_0(& local->lock,flags);
  #line 360 
  kfree((void *)prev);
  #line 362 
  hostap_report_scan_complete(local);
  #line 363 
  return;
}

#line 368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
void hostap_info_process(local_info_t *local, struct sk_buff *skb)
{
  #line 370 
  struct hfa384x_info_frame *info;
  #line 371 
  unsigned char *buf;
  #line 372 
  int left;
  #line 374 
  int i;
  #line 377 
  info = (struct hfa384x_info_frame *)skb->data;
  #line 378 
  buf = skb->data + 4UL;
  #line 379 
  left = (int)(skb->len + 4294967292U);
  #line 381 
  switch ((int)info->type) {
    #line 382 
    case 61696: 
                #line 382 
    ;
    #line 383 
    prism2_info_commtallies(local,buf,left);
    #line 384 
    break;
    #line 387 
    case 61952: 
                #line 387 
    ;
    #line 388 
    prism2_info_linkstatus(local,buf,left);
    #line 389 
    break;
    #line 391 
    case 61697: 
                #line 391 
    ;
    #line 392 
    prism2_info_scanresults(local,buf,left);
    #line 393 
    break;
    #line 395 
    case 61699: 
                #line 395 
    ;
    #line 396 
    prism2_info_hostscanresults(local,buf,left);
    #line 397 
    break;
    #line 401 
    default: 
             #line 401 
    ;
    #line 402 
    printk((char *)"\001",(char *)(& (local->dev)->name),(int)info->len,(int)info->type);
    #line 405 
    printk((char *)"\001");
    #line 406 
    i = 0;
    #line 406 
    while (1) {
      #line 406 
      int tmp;
      #line 406 
      if (100 < left) 
                      #line 406 
                      tmp = 100; else 
                                      #line 406 
                                      tmp = left;
      #line 406 
      ;
      #line 406 
      if (! (tmp > i)) 
                       #line 406 
                       break;
      #line 407 
      printk((char *)" %02x",(int)*(buf + (unsigned long)i));
      #line 406 
      i ++;
    }
    #line 408 
    printk((char *)"\n");
    #line 409 
    break;
  }
  #line 411 
  return;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void handle_info_queue_linkstatus(local_info_t *local)
{
  #line 419 
  int connected;
  #line 420 
  union iwreq_data wrqu;
  #line 418 
  int val = local->prev_link_status;
  #line 422 
  connected = ((val == 1 || val == 3) || val == 5) != 0;
  #line 427 
  if ((*((local->func)->get_rid))(local->dev,(unsigned short)64834,
                                  (void *)(& local->bssid),6,1) < 0) 
    #line 429 
    printk((char *)"\001",(char *)(& (local->dev)->name));
  else {
    #line 432 
    printk((char *)"\001",(char *)(& (local->dev)->name),(unsigned char *)(& local->bssid));
    #line 435 
    if (((unsigned long)local->wds_type & 2UL) != 0UL) 
                                                       #line 436 
                                                       hostap_add_sta(local->ap,(u8 *)(& local->bssid));
  }
  #line 440 
  if (connected != 0) {
    #line 441 
    netif_carrier_on(local->dev);
    #line 442 
    netif_carrier_on(local->ddev);
    #line 443 
    memcpy((void *)(& wrqu.ap_addr.sa_data),(void *)(& local->bssid),6UL);
  }
  else {
    #line 445 
    netif_carrier_off(local->dev);
    #line 446 
    netif_carrier_off(local->ddev);
    #line 447 
    eth_zero_addr((u8 *)(& wrqu.ap_addr.sa_data));
  }
  #line 449 
  wrqu.ap_addr.sa_family = (unsigned short)1U;
  #line 457 
  if (connected != 0 || local->prev_linkstatus_connected != 0) 
                                                               #line 458 
                                                               wireless_send_event(local->dev,35605U,& wrqu,(char *)0);
  #line 459 
  local->prev_linkstatus_connected = connected;
  #line 460 
  return;
}

#line 463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void handle_info_queue_scanresults(local_info_t *local)
{
  #line 465 
  if (local->host_roaming == 1 && local->iw_mode == 2) 
                                                       #line 466 
                                                       prism2_host_roaming(local);
  #line 468 
  if (local->host_roaming == 2 && local->iw_mode == 2) {
    #line 469 
    if (! is_zero_ether_addr((u8 *)(& local->preferred_ap))) 
                                                             #line 477 
                                                             prism2_host_roaming(local);
  }
  #line 478 
  return;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
static void handle_info_queue(struct work_struct *work)
{
  #line 486 
  void *__mptr;
  #line 486 
  __mptr = (void *)work;
  #line 486 
  local_info_t *local = ((local_info_t *)(__mptr + 18446744073709548904U));
  #line 488 
  if ((int)test_and_clear_bit(0L,& local->pending_info) != 0) 
                                                              #line 490 
                                                              handle_info_queue_linkstatus(local);
  #line 492 
  if ((int)test_and_clear_bit(1L,& local->pending_info) != 0) 
                                                              #line 494 
                                                              handle_info_queue_scanresults(local);
  #line 495 
  return;
}

#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_info.c"
void hostap_info_init(local_info_t *local)
{
  #line 501 
  skb_queue_head_init(& local->info_list);
  {
    #line 503 
    struct lock_class_key __key;
    #line 503 
    __init_work(& local->info_queue,0);
    #line 503 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 503 
    local->info_queue.data = __constr_expr_34;
    #line 503 
    lockdep_init_map(& local->info_queue.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 503 
    INIT_LIST_HEAD(& local->info_queue.entry);
    #line 503 
    local->info_queue.func = & handle_info_queue;
  }
  #line 505 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
#line 98 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 119 
  ldv_set_bit(nr,addr);
  #line 120 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 133 
  ldv_init_list_head(list);
  #line 134 
  return;
}

#line 388  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void *kmalloc_array_0(size_t n, size_t size, gfp_t flags)
{
  #line 391 
  return ldv_kmalloc_array(n,size,flags);
}

#line 395  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 398 
  return ldv_kcalloc(n,size,flags);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 650 
  return emg_schedule_work(work);
}

#line 654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void cif___ldv_spin_lock_lock_of_local_info_0(spinlock_t *lock)
{
  #line 657 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 659 
  __ldv_spin_lock(lock);
  #line 660 
  return;
}

#line 663  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_info.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_local_info_0(spinlock_t *lock, unsigned long flags)
{
  #line 666 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 668 
  spin_unlock_irqrestore_0(lock,flags);
  #line 669 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3047 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3049 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static int cif_strcmp_1(char *cs, char *ct);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static size_t cif_strlen_0(char *s);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwlock_api_smp.h"
#line 26 
unsigned long _raw_write_lock_irqsave(rwlock_t *);
#line 40 
#line 40 
void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_local_info_1(spinlock_t *lock, unsigned long flags);
#line 35 
#line 685 
static void cif___ldv_spin_lock_lock_of_local_info_1(spinlock_t *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
#line 625 
void module_put(struct module *);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 387  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/proc_fs.h"
#line 55 
void remove_proc_entry(char *, struct proc_dir_entry *);
#line 2221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_put_zero(struct sk_buff *skb, unsigned int len)
{
  #line 2223 
  void *tmp = skb_put(skb,len);
  #line 2225 
  memset(tmp,0,(unsigned long)len);
  #line 2227 
  return tmp;
}

#line 2480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  #line 2482 
  skb->network_header = (unsigned short)(skb->data - skb->head);
  #line 2483 
  return;
}

#line 2491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_mac_header(struct sk_buff *skb)
{
  #line 2493 
  return skb->head + (unsigned long)skb->mac_header;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  #line 2794 
  return netdev_alloc_skb((struct net_device *)0,length);
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file_net.h"
#line 8 
extern struct net init_net;
#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2657 
#line 2657 
int dev_open(struct net_device *, struct netlink_ext_ack *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 2669 
#line 2669 
int register_netdevice(struct net_device *);
#line 2670 
#line 2670 
void unregister_netdevice_queue(struct net_device *, struct list_head *);
#line 2672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void unregister_netdevice(struct net_device *dev)
{
  #line 2674 
  unregister_netdevice_queue(dev,(struct list_head *)0);
  #line 2675 
  return;
}

#line 2679 
#line 669  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 4116 
#line 4116 
void ether_setup(struct net_device *);
#line 4132 
#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 35 
int eth_header(struct sk_buff *, struct net_device *, unsigned short, void *, void *, unsigned int);
#line 38 
#line 38 
int eth_header_cache(struct neighbour *, struct hh_cache *, __be16);
#line 40 
#line 40 
void eth_header_cache_update(struct hh_cache *, struct net_device *, unsigned char *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 661  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_inherit(struct net_device *dst, struct net_device *src)
{
  #line 302 
  dst->addr_assign_type = src->addr_assign_type;
  #line 303 
  ether_addr_copy(dst->dev_addr,src->dev_addr);
  #line 304 
  return;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_a4(__le16 fc)
{
  #line 286 
  __le16 tmp = (unsigned short)768U;
  #line 287 
  return (_Bool)(((int)fc & (int)tmp) == (int)tmp);
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_ctl(__le16 fc)
{
  #line 360 
  return (_Bool)(((int)fc & 12) == 4);
}

#line 566  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_cts(__le16 fc)
{
  #line 568 
  return (_Bool)(((int)fc & 252) == 196);
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_ack(__le16 fc)
{
  #line 578 
  return (_Bool)(((int)fc & 252) == 212);
}

#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
struct proc_dir_entry *hostap_proc;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
u16 hostap_tx_callback_register(local_info_t *local, void (*func)(struct sk_buff *, int , void *), void *data);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_tx_callback_unregister(local_info_t *local, u16 idx);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_dump_rx_header(char *name, struct hfa384x_rx_frame *rx);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_dump_tx_header(char *name, struct hfa384x_tx_frame *tx);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
struct header_ops hostap_80211_ops;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_setup_dev(struct net_device *dev, local_info_t *local, int type);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_set_multicast_list_queue(struct work_struct *work);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
struct net_device *hostap_add_interface(struct local_info *local, int type, int rtnl_locked, char *prefix, char *name);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_remove_interface(struct net_device *dev, int rtnl_locked, int remove_from_list);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
struct net_device *hostap_add_interface(struct local_info *local, int type, int rtnl_locked, char *prefix, char *name)
{
  #line 50 
  struct net_device *dev;
  #line 50 
  struct net_device *mdev;
  #line 51 
  struct hostap_interface *iface;
  #line 52 
  int ret;
  #line 54 
  dev = cif_alloc_etherdev_mqs(352,1U,1U);
  #line 55 
  if (dev == (struct net_device *)0) 
                                     #line 56 
                                     return (struct net_device *)0;
  #line 58 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 59 
  iface->dev = dev;
  #line 60 
  iface->local = local;
  #line 61 
  iface->type = type;
  #line 62 
  list_add(& iface->list,& local->hostap_interfaces);
  #line 64 
  mdev = local->dev;
  #line 65 
  eth_hw_addr_inherit(dev,mdev);
  #line 66 
  dev->base_addr = mdev->base_addr;
  #line 67 
  dev->irq = mdev->irq;
  #line 68 
  dev->mem_start = mdev->mem_start;
  #line 69 
  dev->mem_end = mdev->mem_end;
  #line 71 
  hostap_setup_dev(dev,local,type);
  #line 72 
  dev->needs_free_netdev = (_Bool)1;
  #line 74 
  sprintf((char *)(& dev->name),(char *)"%s%s",prefix,name);
  #line 75 
  if (rtnl_locked == 0) 
                        #line 76 
                        rtnl_lock();
  #line 78 
  dev->dev.parent = mdev->dev.parent;
  #line 79 
  ret = register_netdevice(dev);
  #line 81 
  if (rtnl_locked == 0) 
                        #line 82 
                        rtnl_unlock();
  #line 84 
  if (ret < 0) {
    #line 85 
    printk((char *)"\001",(char *)(& dev->name));
    #line 87 
    cif_free_netdev(dev);
    #line 88 
    return (struct net_device *)0;
  }
  #line 91 
  printk((char *)"\001",(char *)(& mdev->name),(char *)(& dev->name));
  #line 94 
  return dev;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_remove_interface(struct net_device *dev, int rtnl_locked, int remove_from_list)
{
  #line 101 
  struct hostap_interface *iface;
  #line 103 
  if (dev == (struct net_device *)0) 
                                     #line 104 
                                     return;
  #line 106 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 108 
  if (remove_from_list != 0) 
                             #line 109 
                             list_del(& iface->list);
  #line 112 
  if ((iface->local)->ddev == dev) 
                                   #line 113 
                                   (iface->local)->ddev = (struct net_device *)0;
  else 
    #line 114 
    if ((iface->local)->apdev == dev) 
                                      #line 115 
                                      (iface->local)->apdev = (struct net_device *)0;
    else 
      #line 116 
      if ((iface->local)->stadev == dev) 
                                         #line 117 
                                         (iface->local)->stadev = (struct net_device *)0;
  #line 119 
  if (rtnl_locked != 0) 
                        #line 120 
                        unregister_netdevice(dev); else 
                                                        #line 122 
                                                        cif_unregister_netdev(dev);
  #line 123 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
__inline static int prism2_wds_special_addr(u8 *addr)
{
  #line 131 
  if ((((((unsigned int)*addr != 0U || (unsigned int)*(addr + 1U) != 0U) || (unsigned int)*(addr + 2U) != 0U) || (unsigned int)*(addr + 3U) != 0U) || (unsigned int)*(addr + 4U) != 0U) || (unsigned int)*(addr + 5U) != 0U) 
    #line 132 
    return 0;
  #line 134 
  return 1;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int prism2_wds_add(local_info_t *local, u8 *remote_addr, int rtnl_locked)
{
  #line 141 
  struct net_device *dev;
  #line 142 
  struct list_head *ptr;
  #line 143 
  struct hostap_interface *iface;
  #line 143 
  struct hostap_interface *empty;
  #line 143 
  struct hostap_interface *match;
  #line 145 
  match = (struct hostap_interface *)0;
  #line 145 
  empty = match;
  #line 146 
  _raw_read_lock_bh(& local->iface_lock);
  #line 147 
  ptr = local->hostap_interfaces.next;
  #line 147 
  while (& local->hostap_interfaces != ptr) {
    {
      #line 148 
      void *__mptr;
      #line 148 
      __mptr = (void *)ptr;
      #line 148 
      iface = ((struct hostap_interface *)__mptr);
      #line 149 
      if (iface->type != (unsigned int)4) 
                                          #line 150 
                                          goto __Cont;
      #line 152 
      if (prism2_wds_special_addr((u8 *)(& iface->u.wds.remote_addr)) != 0) 
        #line 153 
        empty = iface;
      else {
        #line 154 
        if ((int)ether_addr_equal((u8 *)(& iface->u.wds.remote_addr),remote_addr) != 0) {
          #line 155 
          match = iface;
          #line 156 
          break;
        }
      }
    }
    #line 147 
    __Cont: 
            #line 147 
    ptr = ptr->next;
  }
  #line 159 
  if (match == (struct hostap_interface *)0 && empty != (struct hostap_interface *)0) {
    #line 159 
    if (prism2_wds_special_addr(remote_addr) == 0) {
      #line 161 
      memcpy((void *)(& empty->u.wds.remote_addr),(void *)remote_addr,6UL);
      #line 162 
      _raw_read_unlock_bh(& local->iface_lock);
      #line 163 
      printk((char *)"\001",(char *)(& (local->dev)->name),(char *)(& (empty->dev)->name));
      #line 165 
      return 0;
    }
  }
  #line 167 
  _raw_read_unlock_bh(& local->iface_lock);
  #line 169 
  if (prism2_wds_special_addr(remote_addr) == 0) {
    #line 170 
    if (match != (struct hostap_interface *)0) 
                                               #line 171 
                                               return -17;
    #line 172 
    hostap_add_sta(local->ap,remote_addr);
  }
  #line 175 
  if (local->wds_connections >= local->wds_max_connections) 
                                                            #line 176 
                                                            return -105;
  #line 179 
  if (cif_strlen_0((char *)(& (local->dev)->name)) > 10UL) {
    #line 180 
    printk((char *)"\001",(char *)(& (local->dev)->name));
    #line 182 
    return -22;
  }
  #line 185 
  dev = hostap_add_interface(local,4,rtnl_locked,(char *)(& (local->ddev)->name),(char *)"wds%d");
  #line 187 
  if (dev == (struct net_device *)0) 
                                     #line 188 
                                     return -12;
  #line 190 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 191 
  memcpy((void *)(& iface->u.wds.remote_addr),(void *)remote_addr,6UL);
  #line 193 
  (local->wds_connections) ++;
  #line 195 
  return 0;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int prism2_wds_del(local_info_t *local, u8 *remote_addr, int rtnl_locked, int do_not_remove)
{
  #line 202 
  unsigned long flags;
  #line 203 
  struct list_head *ptr;
  #line 204 
  struct hostap_interface *iface;
  #line 230 
  int tmp_1;
  #line 204 
  struct hostap_interface *selected = (struct hostap_interface *)0;
  {
    #line 206 
    unsigned long __dummy;
    #line 206 
    unsigned long __dummy2;
    }
  #line 206 
  flags = _raw_write_lock_irqsave(& local->iface_lock);
  #line 207 
  ptr = local->hostap_interfaces.next;
  #line 207 
  while (& local->hostap_interfaces != ptr) {
    {
      #line 208 
      void *__mptr;
      #line 208 
      __mptr = (void *)ptr;
      #line 208 
      iface = ((struct hostap_interface *)__mptr);
      #line 209 
      if (iface->type != (unsigned int)4) 
                                          #line 210 
                                          goto __Cont;
      #line 212 
      if ((int)ether_addr_equal((u8 *)(& iface->u.wds.remote_addr),remote_addr) != 0) {
        #line 213 
        selected = iface;
        #line 214 
        break;
      }
    }
    #line 207 
    __Cont: 
            #line 207 
    ptr = ptr->next;
  }
  #line 217 
  if (selected != (struct hostap_interface *)0 && do_not_remove == 0) 
    #line 218 
    list_del(& selected->list);
  {
    #line 219 
    unsigned long __dummy_0;
    #line 219 
    unsigned long __dummy2_0;
    }
  #line 219 
  _raw_write_unlock_irqrestore(& local->iface_lock,flags);
  #line 221 
  if (selected != (struct hostap_interface *)0) 
    #line 222 
    if (do_not_remove != 0) 
                            #line 223 
                            eth_zero_addr((u8 *)(& selected->u.wds.remote_addr));
    else {
      #line 225 
      hostap_remove_interface(selected->dev,rtnl_locked,0);
      #line 226 
      (local->wds_connections) --;
    }
  #line 230 
  if (selected != (struct hostap_interface *)0) 
                                                #line 230 
                                                tmp_1 = 0; else 
                                                                #line 230 
                                                                tmp_1 = -19;
  #line 230 
  return tmp_1;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
u16 hostap_tx_callback_register(local_info_t *local, void (*func)(struct sk_buff *, int , void *), void *data)
{
  #line 238 
  unsigned long flags;
  #line 239 
  struct hostap_tx_callback_info *entry;
  #line 241 
  entry = (struct hostap_tx_callback_info *)kmalloc_0(32UL,3264U);
  #line 242 
  if (entry == (struct hostap_tx_callback_info *)0) 
                                                    #line 243 
                                                    return (unsigned short)0U;
  #line 245 
  entry->func = func;
  #line 246 
  entry->data = data;
  #line 248 
  cif___ldv_spin_lock_lock_of_local_info_1(& local->lock);
  #line 249 
  if (local->tx_callback != (struct hostap_tx_callback_info *)0) 
                                                                 #line 249 
                                                                 entry->idx = (unsigned short)((unsigned int)(local->tx_callback)->idx + 1U); else 
                                                                    #line 249 
                                                                    entry->idx = (unsigned short)1U;
  #line 250 
  entry->next = local->tx_callback;
  #line 251 
  local->tx_callback = entry;
  #line 252 
  cif_spin_unlock_irqrestore_lock_of_local_info_1(& local->lock,flags);
  #line 254 
  return entry->idx;
}

#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_tx_callback_unregister(local_info_t *local, u16 idx)
{
  #line 260 
  unsigned long flags;
  #line 261 
  struct hostap_tx_callback_info *cb;
  #line 278 
  int tmp;
  #line 261 
  struct hostap_tx_callback_info *prev = (struct hostap_tx_callback_info *)0;
  #line 263 
  cif___ldv_spin_lock_lock_of_local_info_1(& local->lock);
  #line 264 
  cb = local->tx_callback;
  #line 265 
  while (cb != (struct hostap_tx_callback_info *)0 && (int)cb->idx != (int)idx) {
    #line 266 
    prev = cb;
    #line 267 
    cb = cb->next;
  }
  #line 269 
  if (cb != (struct hostap_tx_callback_info *)0) {
    #line 270 
    if (prev == (struct hostap_tx_callback_info *)0) 
                                                     #line 271 
                                                     local->tx_callback = cb->next; else 
                                                                    #line 273 
                                                                    prev->next = cb->next;
    #line 274 
    kfree((void *)cb);
  }
  #line 276 
  cif_spin_unlock_irqrestore_lock_of_local_info_1(& local->lock,flags);
  #line 278 
  if (cb != (struct hostap_tx_callback_info *)0) 
                                                 #line 278 
                                                 tmp = 0; else 
                                                               #line 278 
                                                               tmp = -1;
  #line 278 
  return tmp;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_word(struct net_device *dev, int rid, u16 val)
{
  #line 285 
  struct hostap_interface *iface;
  #line 286 
  __le16 tmp = val;
  #line 287 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 288 
  return (*(((iface->local)->func)->set_rid))(dev,
                                             (unsigned short)((int)((unsigned short)rid)),
                                             (void *)(& tmp),2);
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_string(struct net_device *dev, int rid, char *val)
{
  #line 294 
  struct hostap_interface *iface;
  #line 295 
  char buf[34U];
  #line 296 
  int len;
  #line 298 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 299 
  len = (int)cif_strlen_0(val);
  #line 300 
  if (len > 32) 
                #line 301 
                return -1;
  #line 302 
  memset((void *)(& buf),0,34UL);
  #line 303 
  buf[0] = (char)len;
  #line 304 
  memcpy((void *)((char *)(& buf) + 2U),(void *)val,(unsigned long)len);
  #line 306 
  return (*(((iface->local)->func)->set_rid))(dev,
                                             (unsigned short)((int)((unsigned short)rid)),
                                             (void *)(& buf),34);
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
u16 hostap_get_porttype(local_info_t *local)
{
  #line 312 
  if (local->iw_mode == 1 && local->pseudo_adhoc != 0) 
                                                       #line 313 
                                                       return (unsigned short)3U;
  #line 314 
  if (local->iw_mode == 1) 
                           #line 315 
                           return (unsigned short)0U;
  #line 316 
  if (local->iw_mode == 2) 
                           #line 317 
                           return (unsigned short)1U;
  #line 318 
  if (local->iw_mode == 4) 
                           #line 319 
                           return (unsigned short)2U;
  #line 320 
  if (local->iw_mode == 6) 
                           #line 321 
                           return (unsigned short)3U;
  #line 322 
  return (unsigned short)6U;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_encryption(local_info_t *local)
{
  #line 328 
  u16 val;
  #line 328 
  u16 old_val;
  #line 329 
  int i;
  #line 329 
  int keylen;
  #line 329 
  int len;
  #line 329 
  int idx;
  #line 330 
  char keybuf[14U];
  #line 331 
  enum ldv_15919 encrypt_type;
  #line 333 
  idx = local->crypt_info.tx_keyidx;
  #line 334 
  if (local->crypt_info.crypt[idx] == (struct lib80211_crypt_data *)0 || (local->crypt_info.crypt[idx])->ops == (struct lib80211_crypto_ops *)0) 
    #line 336 
    encrypt_type = NONE;
  else {
    #line 337 
    if (cif_strcmp_1(((local->crypt_info.crypt[idx])->ops)->name,(char *)"WEP") == 0) 
      #line 338 
      encrypt_type = WEP; else 
                               #line 340 
                               encrypt_type = OTHER;
  }
  #line 342 
  if ((*((local->func)->get_rid))(local->dev,(unsigned short)64552,
                                    (void *)(& val),2,1) < 0) {
    #line 344 
    printk((char *)"\001");
    #line 345 
    goto fail;
  }
  #line 347 
  u16 *tmp_2 = & val;
  #line 348 
  old_val = val;
  #line 350 
  if (encrypt_type != (unsigned int)NONE || local->privacy_invoked != 0) 
    #line 351 
    val = (unsigned short)((unsigned int)val | 1U); else 
                                                         #line 353 
                                                         val = (unsigned short)((unsigned int)val & 65534U);
  #line 355 
  if ((local->open_wep != 0 || encrypt_type == (unsigned int)NONE) || (local->ieee_802_1x != 0 || local->wpa != 0) && local->host_decrypt != 0) 
    #line 357 
    val = (unsigned short)((unsigned int)val & 65533U); else 
                                                             #line 359 
                                                             val = (unsigned short)((unsigned int)val | 2U);
  #line 361 
  if ((encrypt_type != (unsigned int)NONE || local->privacy_invoked != 0) && (encrypt_type == (unsigned int)OTHER || local->host_encrypt != 0)) 
    #line 363 
    val = (unsigned short)((unsigned int)val | 16U); else 
                                                          #line 365 
                                                          val = (unsigned short)((unsigned int)val & 65519U);
  #line 366 
  if ((encrypt_type != (unsigned int)NONE || local->privacy_invoked != 0) && (encrypt_type == (unsigned int)OTHER || local->host_decrypt != 0)) 
    #line 368 
    val = (unsigned short)((unsigned int)val | 128U); else 
                                                           #line 370 
                                                           val = (unsigned short)((unsigned int)val & 65407U);
  #line 372 
  if ((int)val != (int)old_val) {
    #line 372 
    if (hostap_set_word(local->dev,64552,(unsigned short)((int)val)) != 0) {
      #line 374 
      printk((char *)"\001",(int)val);
      #line 376 
      goto fail;
    }
  }
  #line 379 
  if (encrypt_type != (unsigned int)WEP) 
                                         #line 380 
                                         return 0;
  #line 384 
  keylen = 6;
  #line 385 
  len = (*(((local->crypt_info.crypt[idx])->ops)->get_key))((void *)(& keybuf),14,(u8 *)0U,(local->crypt_info.crypt[idx])->priv);
  #line 387 
  if ((unsigned int)idx <= 3U && len > 5) 
                                          #line 388 
                                          keylen = 14;
  #line 390 
  i = 0;
  #line 390 
  while (i <= 3) {
    {
      #line 391 
      memset((void *)(& keybuf),0,14UL);
      #line 392 
      if (local->crypt_info.crypt[i] != (struct lib80211_crypt_data *)0) 
        #line 393 
        (*(((local->crypt_info.crypt[i])->ops)->get_key))((void *)(& keybuf),14,(u8 *)0U,(local->crypt_info.crypt[i])->priv);
      #line 397 
      if ((*((local->func)->set_rid))(local->dev,
                                      (unsigned short)((int)((unsigned int)((unsigned short)i) + 64548U)),
                                      (void *)(& keybuf),keylen) != 0) {
        #line 400 
        printk((char *)"\001",i,keylen);
        #line 402 
        goto fail;
      }
    }
    #line 390 
    i ++;
  }
  #line 405 
  if (hostap_set_word(local->dev,64547,
                        (unsigned short)((int)((unsigned short)idx))) != 0) {
    #line 406 
    printk((char *)"\001",idx);
    #line 407 
    goto fail;
  }
  #line 410 
  return 0;
  #line 412 
  fail: 
        #line 412 
  ;
  #line 413 
  printk((char *)"\001",(char *)(& (local->dev)->name));
  #line 414 
  return -1;
}

#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_antsel(local_info_t *local)
{
  #line 420 
  u16 val;
  #line 421 
  int ret = 0;
  #line 423 
  if (local->antsel_tx != 0) {
    #line 423 
    if ((*((local->func)->cmd))(local->dev,(unsigned short)48,
                                (unsigned short)18,(u16 *)0U,& val) == 0) {
      #line 427 
      val = (unsigned short)((unsigned int)val & 65529U);
      #line 428 
      switch (local->antsel_tx) {
        #line 429 
        case 1: 
                #line 429 
        ;
        #line 430 
        val = (unsigned short)((unsigned int)val | 2U);
        #line 431 
        break;
        #line 432 
        case 2: 
                #line 432 
        ;
        #line 433 
        break;
        #line 434 
        case 3: 
                #line 434 
        ;
        #line 435 
        val = (unsigned short)((unsigned int)val | 4U);
        #line 436 
        break;
      }
      #line 439 
      if ((*((local->func)->cmd))(local->dev,(unsigned short)49,
                              (unsigned short)18,& val,(u16 *)0U) != 0) {
        #line 441 
        printk((char *)"\001",(char *)(& (local->dev)->name));
        #line 443 
        ret = -1;
      }
    }
  }
  #line 447 
  if (local->antsel_rx != 0) {
    #line 447 
    if ((*((local->func)->cmd))(local->dev,(unsigned short)48,
                                (unsigned short)20,(u16 *)0U,& val) == 0) {
      #line 451 
      val = (unsigned short)((unsigned int)val & 65532U);
      #line 452 
      switch (local->antsel_rx) {
        #line 453 
        case 1: 
                #line 453 
        ;
        #line 454 
        break;
        #line 455 
        case 2: 
                #line 455 
        ;
        #line 456 
        val = (unsigned short)((unsigned int)val | 1U);
        #line 457 
        break;
        #line 458 
        case 3: 
                #line 458 
        ;
        #line 459 
        val = (unsigned short)((unsigned int)val | 3U);
        #line 460 
        break;
      }
      #line 463 
      if ((*((local->func)->cmd))(local->dev,(unsigned short)49,
                                (unsigned short)20,& val,(u16 *)0U) != 0) {
        #line 465 
        printk((char *)"\001",(char *)(& (local->dev)->name));
        #line 467 
        ret = -1;
      }
    }
  }
  #line 471 
  return ret;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_roaming(local_info_t *local)
{
  #line 477 
  u16 val;
  #line 479 
  switch (local->host_roaming) {
    #line 480 
    case 1: 
            #line 480 
    ;
    #line 481 
    val = (unsigned short)2U;
    #line 482 
    break;
    #line 483 
    case 2: 
            #line 483 
    ;
    #line 484 
    val = (unsigned short)3U;
    #line 485 
    break;
    #line 486 
    case 0: 
            #line 486 
    ;
    #line 487 
    default: 
             #line 487 
    ;
    #line 488 
    val = (unsigned short)1U;
    #line 489 
    break;
  }
  #line 492 
  return hostap_set_word(local->dev,64557,(unsigned short)((int)val));
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_auth_algs(local_info_t *local)
{
  #line 498 
  int val = local->auth_algs;
  #line 504 
  if (local->sta_fw_ver <= 1791U && (unsigned int)val + 4294967295U > 1U) 
    #line 506 
    val = 1;
  #line 508 
  if (hostap_set_word(local->dev,64554,
                      (unsigned short)((int)((unsigned short)val))) != 0) {
    #line 509 
    printk((char *)"\001",(char *)(& (local->dev)->name),local->auth_algs);
    #line 511 
    return -22;
  }
  #line 514 
  return 0;
}

#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_dump_rx_header(char *name, struct hfa384x_rx_frame *rx)
{
  #line 520 
  u16 status;
  #line 520 
  u16 fc;
  #line 537 
  char *tmp;
  #line 536 
  char *tmp_0;
  #line 522 
  status = rx->status;
  #line 524 
  printk((char *)"\001",name,(int)status,((int)status >> 8) & 7,(int)status >> 13,(int)status & 1,(int)rx->silence,(int)rx->signal,(int)rx->rate,(int)rx->rxflow,jiffies);
  #line 530 
  fc = rx->frame_control;
  #line 537 
  if (((int)fc & 512) != 0) 
                            #line 537 
                            tmp = (char *)" [FromDS]"; else 
                                                            #line 537 
                                                            tmp = (char *)"";
  #line 536 
  if (((int)fc & 256) != 0) 
                            #line 536 
                            tmp_0 = (char *)" [ToDS]"; else 
                                                            #line 536 
                                                            tmp_0 = (char *)"";
  #line 531 
  ;
  #line 531 
  ;
  #line 531 
  ;
  #line 531 
  ;
  #line 531 
  ;
  #line 531 
  ;
  #line 531 
  printk((char *)"\001",(int)fc,((int)fc >> 2) & 3,((int)fc >> 4) & 15,(int)rx->duration_id,(int)rx->seq_ctrl,(int)rx->data_len,tmp_0,tmp);
  #line 540 
  printk((char *)"\001",(u8 *)(& rx->addr1),(u8 *)(& rx->addr2),(u8 *)(& rx->addr3),(u8 *)(& rx->addr4));
  #line 543 
  ;
  #line 543 
  ;
  #line 543 
  printk((char *)"\001",(u8 *)(& rx->dst_addr),(u8 *)(& rx->src_addr),(int)__builtin_bswap16((unsigned short)((int)rx->len)));
  #line 546 
  return;
}

#line 549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_dump_tx_header(char *name, struct hfa384x_tx_frame *tx)
{
  #line 551 
  u16 fc;
  #line 565 
  char *tmp;
  #line 564 
  char *tmp_0;
  #line 553 
  printk((char *)"\001",name,(int)tx->status,(int)tx->retry_count,(int)tx->tx_rate,(int)tx->tx_control,jiffies);
  #line 558 
  fc = tx->frame_control;
  #line 565 
  if (((int)fc & 512) != 0) 
                            #line 565 
                            tmp = (char *)" [FromDS]"; else 
                                                            #line 565 
                                                            tmp = (char *)"";
  #line 564 
  if (((int)fc & 256) != 0) 
                            #line 564 
                            tmp_0 = (char *)" [ToDS]"; else 
                                                            #line 564 
                                                            tmp_0 = (char *)"";
  #line 559 
  ;
  #line 559 
  ;
  #line 559 
  ;
  #line 559 
  ;
  #line 559 
  ;
  #line 559 
  ;
  #line 559 
  printk((char *)"\001",(int)fc,((int)fc >> 2) & 3,((int)fc >> 4) & 15,(int)tx->duration_id,(int)tx->seq_ctrl,(int)tx->data_len,tmp_0,tmp);
  #line 568 
  printk((char *)"\001",(u8 *)(& tx->addr1),(u8 *)(& tx->addr2),(u8 *)(& tx->addr3),(u8 *)(& tx->addr4));
  #line 571 
  ;
  #line 571 
  ;
  #line 571 
  printk((char *)"\001",(u8 *)(& tx->dst_addr),(u8 *)(& tx->src_addr),(int)__builtin_bswap16((unsigned short)((int)tx->len)));
  #line 574 
  return;
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int hostap_80211_header_parse(struct sk_buff *skb, unsigned char *haddr)
{
  #line 580 
  ;
  #line 580 
  memcpy((void *)haddr,(void *)(skb_mac_header(skb) + 10U),6UL);
  #line 581 
  return 6;
}

#line 585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_80211_get_hdrlen(__le16 fc)
{
  #line 587 
  if ((int)ieee80211_is_data((unsigned short)((int)fc)) != 0) {
    #line 587 
    if ((int)ieee80211_has_a4((unsigned short)((int)fc)) != 0) 
                                                               #line 588 
                                                               return 30; else 
                                                                    #line 587 
                                                                    goto _LAND;
  }
  else {
    #line 587 
    _LAND: 
    #line 589 
    if ((int)ieee80211_is_cts((unsigned short)((int)fc)) != 0) 
                                                               #line 589 
                                                               goto _LOR;
    else {
      #line 589 
      if ((int)ieee80211_is_ack((unsigned short)((int)fc)) != 0) 
                                                                 #line 589 
                                                                 _LOR: 
                                                                    #line 590 
                                                                    return 10;
      else {
        #line 591 
        if ((int)ieee80211_is_ctl((unsigned short)((int)fc)) != 0) 
                                                                   #line 592 
                                                                   return 16;
      }
    }
  }
  #line 594 
  return 24;
}

#line 598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int prism2_close(struct net_device *dev)
{
  #line 600 
  struct hostap_interface *iface;
  #line 601 
  local_info_t *local;
  #line 605 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 606 
  local = iface->local;
  #line 608 
  if (local->ddev == dev) 
                          #line 609 
                          prism2_sta_deauth(local,(unsigned short)3);
  #line 612 
  if (local->hostapd == 0 && local->dev == dev) 
    #line 612 
    if ((local->func)->card_present == (int (*)(local_info_t *))0) 
                                                                   #line 612 
                                                                   goto _LOR;
    else {
      #line 613 
      if ((*((local->func)->card_present))(local) != 0) {
        #line 612 
        _LOR: 
              #line 613 
        ;
        #line 613 
        if (local->hw_ready != 0) 
          #line 614 
          if (local->ap != (struct ap_data *)0) 
            #line 614 
            if (local->iw_mode == 3) 
                                     #line 615 
                                     hostap_deauth_all_stas(dev,local->ap,1);
      }
    }
  #line 618 
  if (local->dev == dev) 
                         #line 619 
                         (*((local->func)->hw_shutdown))(dev,2);
  #line 622 
  if ((int)netif_running(dev) != 0) {
    #line 623 
    netif_stop_queue(dev);
    #line 624 
    netif_device_detach(dev);
  }
  #line 627 
  cancel_work_sync(& local->reset_queue);
  #line 628 
  cancel_work_sync(& local->set_multicast_list_queue);
  #line 629 
  cancel_work_sync(& local->set_tim_queue);
  #line 631 
  cancel_work_sync(& local->info_queue);
  #line 633 
  cancel_work_sync(& local->comms_qual_update);
  #line 635 
  module_put(local->hw_module);
  #line 637 
  (local->num_dev_open) --;
  #line 639 
  if (((local->dev != dev && ((local->dev)->flags & 1U) != 0U) && local->master_dev_auto_open != 0) && local->num_dev_open == 1) 
    #line 644 
    dev_close(local->dev);
  #line 647 
  return 0;
}

#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int prism2_open(struct net_device *dev)
{
  #line 653 
  struct hostap_interface *iface;
  #line 654 
  local_info_t *local;
  #line 658 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 659 
  local = iface->local;
  #line 661 
  if (local->no_pri != 0) {
    #line 662 
    printk((char *)"\001",(char *)(& dev->name));
    #line 664 
    return -19;
  }
  #line 667 
  if ((local->func)->card_present != (int (*)(local_info_t *))0) {
    #line 667 
    if ((*((local->func)->card_present))(local) == 0) 
                                                      #line 669 
                                                      return -19; else 
                                                                    #line 667 
                                                                    goto _LAND;
  }
  else {
    #line 667 
    _LAND: 
           #line 667 
    ;
    #line 667 
    if (local->hw_downloading != 0) 
                                    #line 669 
                                    return -19;
  }
  #line 671 
  if (! try_module_get(local->hw_module)) 
                                          #line 672 
                                          return -19;
  #line 673 
  (local->num_dev_open) ++;
  #line 675 
  if (local->dev_enabled == 0) {
    #line 675 
    if ((*((local->func)->hw_enable))(dev,1) != 0) {
      #line 676 
      printk((char *)"\001",(char *)(& dev->name));
      #line 678 
      prism2_close(dev);
      #line 679 
      return -19;
    }
  }
  #line 681 
  if (local->dev_enabled == 0) ;
  #line 683 
  local->dev_enabled = 1;
  #line 685 
  if (local->dev != dev && ((local->dev)->flags & 1U) == 0U) {
    #line 688 
    local->master_dev_auto_open = 1;
    #line 689 
    dev_open(local->dev,(struct netlink_ext_ack *)0);
  }
  #line 692 
  netif_device_attach(dev);
  #line 693 
  netif_start_queue(dev);
  #line 695 
  return 0;
}

#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int prism2_set_mac_address(struct net_device *dev, void *p)
{
  #line 701 
  struct hostap_interface *iface;
  #line 702 
  local_info_t *local;
  #line 703 
  struct list_head *ptr;
  #line 704 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 706 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 707 
  local = iface->local;
  #line 709 
  if ((*((local->func)->set_rid))(dev,(unsigned short)64513,
                                    (void *)(& addr->sa_data),6) < 0) 
    #line 711 
    return -22;
  else {
    #line 710 
    if ((*((local->func)->reset_port))(dev) != 0) 
                                                  #line 711 
                                                  return -22;
  }
  #line 713 
  _raw_read_lock_bh(& local->iface_lock);
  #line 714 
  ptr = local->hostap_interfaces.next;
  #line 714 
  while (& local->hostap_interfaces != ptr) {
    {
      #line 715 
      void *__mptr;
      #line 715 
      __mptr = (void *)ptr;
      #line 715 
      iface = ((struct hostap_interface *)__mptr);
      #line 716 
      memcpy((void *)(iface->dev)->dev_addr,(void *)(& addr->sa_data),6UL);
    }
    #line 714 
    ptr = ptr->next;
  }
  #line 718 
  memcpy((void *)(local->dev)->dev_addr,(void *)(& addr->sa_data),6UL);
  #line 719 
  _raw_read_unlock_bh(& local->iface_lock);
  #line 721 
  return 0;
}

#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_set_multicast_list_queue(struct work_struct *work)
{
  #line 730 
  void *__mptr;
  #line 730 
  __mptr = (void *)work;
  #line 729 
  local_info_t *local = ((local_info_t *)(__mptr + 18446744073709550528U));
  #line 731 
  struct net_device *dev = local->dev;
  #line 733 
  if (hostap_set_word(dev,64645,
                        (unsigned short)((int)((unsigned short)local->is_promisc))) != 0) {
    #line 736 
    char *tmp_0;
    #line 736 
    if (local->is_promisc != 0) 
                                #line 736 
                                tmp_0 = (char *)"en"; else 
                                                           #line 736 
                                                           tmp_0 = (char *)"dis";
    #line 735 
    ;
    #line 735 
    printk((char *)"\001",(char *)(& dev->name),tmp_0);
  }
  #line 737 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static void hostap_set_multicast_list(struct net_device *dev)
{
  #line 743 
  return;
}

#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static void prism2_tx_timeout(struct net_device *dev)
{
  #line 766 
  struct hostap_interface *iface;
  #line 767 
  local_info_t *local;
  #line 768 
  struct hfa384x_regs regs;
  #line 770 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 771 
  local = iface->local;
  #line 773 
  printk((char *)"\001",(char *)(& dev->name));
  #line 774 
  netif_stop_queue(local->dev);
  #line 776 
  (*((local->func)->read_regs))(dev,& regs);
  #line 777 
  printk((char *)"\001",(char *)(& dev->name),(int)regs.cmd,(int)regs.evstat,(int)regs.offset0,(int)regs.offset1,(int)regs.swsupport0);
  #line 782 
  (*((local->func)->schedule_reset))(local);
  #line 783 
  return;
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
struct header_ops hostap_80211_ops = {.create = & eth_header, .parse = & hostap_80211_header_parse, .cache = & eth_header_cache, .cache_update = & eth_header_cache_update};
#line 794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static struct net_device_ops hostap_netdev_ops = {.ndo_open = & prism2_open, .ndo_stop = & prism2_close, .ndo_start_xmit = & hostap_data_start_xmit, .ndo_set_rx_mode = & hostap_set_multicast_list, .ndo_set_mac_address = & prism2_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & hostap_ioctl, .ndo_tx_timeout = & prism2_tx_timeout};
#line 806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static struct net_device_ops hostap_mgmt_netdev_ops = {.ndo_open = & prism2_open, .ndo_stop = & prism2_close, .ndo_start_xmit = & hostap_mgmt_start_xmit, .ndo_set_rx_mode = & hostap_set_multicast_list, .ndo_set_mac_address = & prism2_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & hostap_ioctl, .ndo_tx_timeout = & prism2_tx_timeout};
#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static struct net_device_ops hostap_master_ops = {.ndo_open = & prism2_open, .ndo_stop = & prism2_close, .ndo_start_xmit = & hostap_master_start_xmit, .ndo_set_rx_mode = & hostap_set_multicast_list, .ndo_set_mac_address = & prism2_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & hostap_ioctl, .ndo_tx_timeout = & prism2_tx_timeout};
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
void hostap_setup_dev(struct net_device *dev, local_info_t *local, int type)
{
  #line 833 
  struct hostap_interface *iface;
  #line 835 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 836 
  ether_setup(dev);
  #line 837 
  dev->min_mtu = 256U;
  #line 838 
  dev->max_mtu = 2290U;
  #line 839 
  dev->priv_flags &= 4294965247U;
  #line 842 
  if (iface != (struct hostap_interface *)0) {
    #line 845 
    iface->wireless_data.spy_data = & iface->spy_data;
    #line 846 
    dev->wireless_data = & iface->wireless_data;
  }
  #line 848 
  dev->wireless_handlers = & hostap_iw_handler_def;
  #line 849 
  dev->watchdog_timeo = 500;
  #line 851 
  switch (type) {
    #line 852 
    case 2: 
            #line 852 
    ;
    #line 853 
    dev->priv_flags |= 524288U;
    #line 854 
    dev->netdev_ops = & hostap_mgmt_netdev_ops;
    #line 855 
    dev->type = (unsigned short)801U;
    #line 856 
    dev->header_ops = & hostap_80211_ops;
    #line 857 
    break;
    #line 858 
    case 0: 
            #line 858 
    ;
    #line 859 
    dev->netdev_ops = & hostap_master_ops;
    #line 860 
    break;
    #line 861 
    default: 
             #line 861 
    ;
    #line 862 
    dev->priv_flags |= 524288U;
    #line 863 
    dev->netdev_ops = & hostap_netdev_ops;
  }
  #line 866 
  dev->mtu = (unsigned int)local->mtu;
  #line 869 
  dev->ethtool_ops = & prism2_ethtool_ops;
  #line 870 
  return;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int hostap_enable_hostapd(local_info_t *local, int rtnl_locked)
{
  #line 875 
  struct net_device *dev = local->dev;
  #line 877 
  if (local->apdev != (struct net_device *)0) 
                                              #line 878 
                                              return -17;
  #line 880 
  printk((char *)"\001",(char *)(& dev->name));
  #line 882 
  local->apdev = hostap_add_interface(local,2,rtnl_locked,(char *)(& (local->ddev)->name),(char *)"ap");
  #line 885 
  if (local->apdev == (struct net_device *)0) 
                                              #line 886 
                                              return -12;
  #line 888 
  return 0;
}

#line 892  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int hostap_disable_hostapd(local_info_t *local, int rtnl_locked)
{
  #line 894 
  struct net_device *dev = local->dev;
  #line 896 
  printk((char *)"\001",(char *)(& dev->name));
  #line 898 
  hostap_remove_interface(local->apdev,rtnl_locked,1);
  #line 899 
  local->apdev = (struct net_device *)0;
  #line 901 
  return 0;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int hostap_enable_hostapd_sta(local_info_t *local, int rtnl_locked)
{
  #line 907 
  struct net_device *dev = local->dev;
  #line 909 
  if (local->stadev != (struct net_device *)0) 
                                               #line 910 
                                               return -17;
  #line 912 
  printk((char *)"\001",(char *)(& dev->name));
  #line 914 
  local->stadev = hostap_add_interface(local,3,rtnl_locked,(char *)(& (local->ddev)->name),(char *)"sta");
  #line 917 
  if (local->stadev == (struct net_device *)0) 
                                               #line 918 
                                               return -12;
  #line 920 
  return 0;
}

#line 924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int hostap_disable_hostapd_sta(local_info_t *local, int rtnl_locked)
{
  #line 926 
  struct net_device *dev = local->dev;
  #line 928 
  printk((char *)"\001",(char *)(& dev->name));
  #line 930 
  hostap_remove_interface(local->stadev,rtnl_locked,1);
  #line 931 
  local->stadev = (struct net_device *)0;
  #line 933 
  return 0;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_hostapd(local_info_t *local, int val, int rtnl_locked)
{
  #line 939 
  int ret;
  #line 941 
  if ((unsigned int)val > 1U) 
                              #line 942 
                              return -22;
  #line 944 
  if (local->hostapd == val) 
                             #line 945 
                             return 0;
  #line 947 
  if (val != 0) {
    #line 948 
    ret = hostap_enable_hostapd(local,rtnl_locked);
    #line 949 
    if (ret == 0) 
                  #line 950 
                  local->hostapd = 1;
  }
  else {
    #line 952 
    local->hostapd = 0;
    #line 953 
    ret = hostap_disable_hostapd(local,rtnl_locked);
    #line 954 
    if (ret != 0) 
                  #line 955 
                  local->hostapd = 1;
  }
  #line 958 
  return ret;
}

#line 962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int hostap_set_hostapd_sta(local_info_t *local, int val, int rtnl_locked)
{
  #line 964 
  int ret;
  #line 966 
  if ((unsigned int)val > 1U) 
                              #line 967 
                              return -22;
  #line 969 
  if (local->hostapd_sta == val) 
                                 #line 970 
                                 return 0;
  #line 972 
  if (val != 0) {
    #line 973 
    ret = hostap_enable_hostapd_sta(local,rtnl_locked);
    #line 974 
    if (ret == 0) 
                  #line 975 
                  local->hostapd_sta = 1;
  }
  else {
    #line 977 
    local->hostapd_sta = 0;
    #line 978 
    ret = hostap_disable_hostapd_sta(local,rtnl_locked);
    #line 979 
    if (ret != 0) 
                  #line 980 
                  local->hostapd_sta = 1;
  }
  #line 984 
  return ret;
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int prism2_update_comms_qual(struct net_device *dev)
{
  #line 990 
  struct hostap_interface *iface;
  #line 991 
  local_info_t *local;
  #line 993 
  struct hfa384x_comms_quality sq;
  #line 992 
  int ret = 0;
  #line 995 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 996 
  local = iface->local;
  #line 997 
  if (local->sta_fw_ver == 0U) 
                               #line 998 
                               ret = -1;
  else 
    #line 999 
    if (local->sta_fw_ver > 66304U) {
      #line 1000 
      if ((*((local->func)->get_rid))(local->dev,(unsigned short)64849,
                                    (void *)(& sq),6,1) >= 0) {
        #line 1003 
        local->comms_qual = (int)((short)sq.comm_qual);
        #line 1004 
        local->avg_signal = (int)((short)sq.signal_level);
        #line 1005 
        local->avg_noise = (int)((short)sq.noise_level);
        #line 1006 
        local->last_comms_qual_update = jiffies;
      }
      else 
           #line 1008 
           ret = -1;
    }
    else {
      #line 1010 
      if ((*((local->func)->get_rid))(local->dev,(unsigned short)64835,
                                    (void *)(& sq),6,1) >= 0) {
        #line 1012 
        local->comms_qual = (int)sq.comm_qual;
        #line 1013 
        local->avg_signal = ((int)sq.signal_level * 100) / 255 + 156;
        #line 1015 
        local->avg_noise = ((int)sq.noise_level * 100) / 255 + 156;
        #line 1017 
        local->last_comms_qual_update = jiffies;
      }
      else 
           #line 1019 
           ret = -1;
    }
  #line 1022 
  return ret;
}

#line 1026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int prism2_sta_send_mgmt(local_info_t *local, u8 *dst, u16 stype, u8 *body, size_t bodylen)
{
  #line 1029 
  struct sk_buff *skb;
  #line 1030 
  struct hostap_ieee80211_mgmt *mgmt;
  #line 1031 
  struct hostap_skb_tx_data *meta;
  #line 1032 
  struct net_device *dev = local->dev;
  #line 1034 
  skb = dev_alloc_skb((unsigned int)bodylen + 24U);
  #line 1035 
  if (skb == (struct sk_buff *)0) 
                                  #line 1036 
                                  return -12;
  #line 1038 
  mgmt = (struct hostap_ieee80211_mgmt *)skb_put_zero(skb,24U);
  #line 1039 
  mgmt->frame_control = stype;
  #line 1040 
  memcpy((void *)(& mgmt->da),(void *)dst,6UL);
  #line 1041 
  memcpy((void *)(& mgmt->sa),(void *)dev->dev_addr,6UL);
  #line 1042 
  memcpy((void *)(& mgmt->bssid),(void *)dst,6UL);
  #line 1043 
  if (body != (u8 *)0U) 
                        #line 1044 
                        skb_put_data(skb,(void *)body,(unsigned int)bodylen);
  #line 1046 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 1047 
  memset((void *)meta,0,40UL);
  #line 1048 
  meta->magic = 4035589794U;
  #line 1049 
  meta->iface = (struct hostap_interface *)netdev_priv(dev);
  #line 1051 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = dev;
  #line 1052 
  skb_reset_mac_header(skb);
  #line 1053 
  skb_reset_network_header(skb);
  #line 1054 
  dev_queue_xmit(skb);
  #line 1056 
  return 0;
}

#line 1060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
int prism2_sta_deauth(local_info_t *local, u16 reason)
{
  #line 1062 
  union iwreq_data wrqu;
  #line 1063 
  int ret;
  #line 1064 
  __le16 val = reason;
  #line 1066 
  if (local->iw_mode != 2) 
                           #line 1069 
                           return 0;
  else {
    #line 1066 
    if ((int)is_zero_ether_addr((u8 *)(& local->bssid)) != 0) 
                                                              #line 1069 
                                                              return 0;
    else {
      #line 1067 
      if ((int)ether_addr_equal((u8 *)(& local->bssid),(u8 *)"DDDDDD") != 0) 
        #line 1069 
        return 0;
    }
  }
  #line 1071 
  ret = prism2_sta_send_mgmt(local,(u8 *)(& local->bssid),(unsigned short)192,(u8 *)(& val),2UL);
  #line 1073 
  eth_zero_addr((u8 *)(& wrqu.ap_addr.sa_data));
  #line 1074 
  wireless_send_event(local->dev,35605U,& wrqu,(char *)0);
  #line 1075 
  return ret;
}

#line 1081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static int hostap_init(void)
{
  #line 1083 
  if (init_net.proc_net != (struct proc_dir_entry *)0) {
    #line 1084 
    hostap_proc = proc_mkdir((char *)"hostap",init_net.proc_net);
    #line 1085 
    if (hostap_proc == (struct proc_dir_entry *)0) 
                                                   #line 1086 
                                                   printk((char *)"\001");
  }
  else 
       #line 1089 
       hostap_proc = (struct proc_dir_entry *)0;
  #line 1091 
  return 0;
}

#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_main.c"
static void hostap_exit(void)
{
  #line 1097 
  if (hostap_proc != (struct proc_dir_entry *)0) {
    #line 1098 
    hostap_proc = (struct proc_dir_entry *)0;
    #line 1099 
    remove_proc_entry((char *)"hostap",init_net.proc_net);
  }
  #line 1101 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
#line 93 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 97 
#line 97 
void emg_free_netdev(struct net_device *arg0);
#line 99 
#line 99 
void emg_unregister_netdev(struct net_device *arg0);
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
int emg_wrapper_prism2_close(struct net_device *arg0)
{
  #line 104 
  return prism2_close(arg0);
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
void emg_hostap_exit(void)
{
  #line 109 
  hostap_exit();
  #line 110 
  return;
}

#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
int emg_hostap_init(void)
{
  #line 113 
  return hostap_init();
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 134 
  ldv_set_bit(nr,addr);
  #line 135 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 141 
  ldv_clear_bit(nr,addr);
  #line 142 
  return;
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static size_t cif_strlen_0(char *s)
{
  #line 162 
  return ldv_strlen(s);
}

#line 387  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 390 
  return ldv_kmalloc(size,flags);
}

#line 661  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 665 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 669  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 673 
  emg_free_netdev(dev);
  #line 674 
  return;
}

#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 681 
  emg_unregister_netdev(dev);
  #line 682 
  return;
}

#line 685  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif___ldv_spin_lock_lock_of_local_info_1(spinlock_t *lock)
{
  #line 688 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 690 
  __ldv_spin_lock(lock);
  #line 691 
  return;
}

#line 694  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_local_info_1(spinlock_t *lock, unsigned long flags)
{
  #line 697 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 699 
  spin_unlock_irqrestore_1(lock,flags);
  #line 700 
  return;
}

#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_main.i.aux"
static int cif_strcmp_1(char *cs, char *ct)
{
  #line 706 
  return ldv_strcmp(cs,ct);
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_3812 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_0(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_0(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_3814 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_move(struct list_head *list, struct list_head *head)
{
  #line 201 
  __list_del_entry_0(list);
  #line 202 
  list_add_0(list,head);
  #line 203 
  return;
}

#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 664  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static int cif_strcmp_2(char *cs, char *ct);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void atomic_dec_0(atomic_t *v);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void cif_spin_lock_lock_of_local_info(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void cif_spin_unlock_lock_of_local_info(spinlock_t *lock);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void *kmalloc_1(size_t size, gfp_t flags);
#line 1105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1105 
struct sk_buff *skb_clone(struct sk_buff *, gfp_t);
#line 2652 
#line 2652 
void skb_trim(struct sk_buff *, unsigned int);
#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3660 
#line 3660 
int netif_rx(struct sk_buff *);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
int prism2_rx_80211(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats, int type);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
void hostap_80211_rx(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211.h"
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
void hostap_dump_rx_80211(char *name, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats);
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/iw_handler.h"
#line 466 
void wireless_spy_update(struct net_device *, unsigned char *, struct iw_quality *);
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 219 
void hostap_rx(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats);
#line 239 
#line 239 
int hostap_update_sta_ps(local_info_t *local, struct ieee80211_hdr *hdr);
#line 243 
#line 243 
ap_rx_ret hostap_handle_sta_rx(local_info_t *local, struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats, int wds);
#line 247 
#line 247 
int hostap_handle_sta_crypto(local_info_t *local, struct ieee80211_hdr *hdr, struct lib80211_crypt_data **crypt, void **sta_ptr);
#line 250 
#line 250 
int hostap_is_sta_assoc(struct ap_data *ap, u8 *sta_addr);
#line 251 
#line 251 
int hostap_is_sta_authorized(struct ap_data *ap, u8 *sta_addr);
#line 253 
#line 253 
int hostap_update_rx_stats(struct ap_data *ap, struct ieee80211_hdr *hdr, struct hostap_80211_rx_status *rx_stats);
#line 257 
#line 257 
void hostap_wds_link_oper(local_info_t *local, u8 *addr, wds_oper_type type);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
static long freq_list_0[14U] = {2412L, 2417L, 2422L, 2427L, 2432L, 2437L, 2442L, 2447L, 2452L, 2457L, 2462L, 2467L, 2472L, 2484L};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static unsigned char rfc1042_header_0[6U] = {(unsigned char)170U, (unsigned char)170U, (unsigned char)3U};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static unsigned char bridge_tunnel_header_0[6U] = {(unsigned char)170U, (unsigned char)170U, (unsigned char)3U, [5] = (unsigned char)248U};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
void hostap_dump_rx_80211(char *name, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 24 
  struct ieee80211_hdr *hdr;
  #line 25 
  u16 fc;
  #line 41 
  char *tmp;
  #line 40 
  char *tmp_0;
  #line 27 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 29 
  printk((char *)"\001",name,(int)rx_stats->signal,(int)rx_stats->noise,(int)rx_stats->rate,skb->len,jiffies);
  #line 34 
  if (skb->len <= 1U) 
                      #line 35 
                      return;
  #line 37 
  fc = hdr->frame_control;
  #line 41 
  if (((int)fc & 512) != 0) 
                            #line 41 
                            tmp = (char *)" [FromDS]"; else 
                                                            #line 41 
                                                            tmp = (char *)"";
  #line 40 
  if (((int)fc & 256) != 0) 
                            #line 40 
                            tmp_0 = (char *)" [ToDS]"; else 
                                                            #line 40 
                                                            tmp_0 = (char *)"";
  #line 38 
  ;
  #line 38 
  ;
  #line 38 
  ;
  #line 38 
  printk((char *)"\001",(int)fc,((int)fc >> 2) & 3,((int)fc >> 4) & 15,tmp_0,tmp);
  #line 44 
  if (skb->len <= 23U) {
    #line 45 
    printk((char *)"\n");
    #line 46 
    return;
  }
  #line 49 
  printk((char *)" dur=0x%04x seq=0x%04x\n",(int)hdr->duration_id,(int)hdr->seq_ctrl);
  #line 52 
  printk((char *)"\001",(u8 *)(& hdr->addr1));
  #line 53 
  printk((char *)" A2=%pM",(u8 *)(& hdr->addr2));
  #line 54 
  printk((char *)" A3=%pM",(u8 *)(& hdr->addr3));
  #line 55 
  if (skb->len > 29U) 
                      #line 56 
                      printk((char *)" A4=%pM",(u8 *)(& hdr->addr4));
  #line 57 
  printk((char *)"\n");
  #line 58 
  return;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
int prism2_rx_80211(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats, int type)
{
  #line 66 
  struct hostap_interface *iface;
  #line 67 
  local_info_t *local;
  #line 68 
  int hdrlen;
  #line 68 
  int phdrlen;
  #line 68 
  int head_need;
  #line 68 
  int tail_need;
  #line 69 
  u16 fc;
  #line 70 
  int prism_header;
  #line 70 
  int ret;
  #line 71 
  struct ieee80211_hdr *fhdr;
  #line 73 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 74 
  local = iface->local;
  #line 76 
  if ((unsigned int)dev->type == 802U) 
    #line 77 
    if (local->monitor_type == (unsigned int)1) {
      #line 78 
      prism_header = 1;
      #line 79 
      phdrlen = 144;
    }
    else {
      #line 81 
      prism_header = 2;
      #line 82 
      phdrlen = 64;
    }
  else 
    #line 84 
    if ((unsigned int)dev->type == 803U) {
      #line 85 
      prism_header = 3;
      #line 86 
      phdrlen = 24;
    }
    else {
      #line 88 
      prism_header = 0;
      #line 89 
      phdrlen = 0;
    }
  #line 92 
  fhdr = (struct ieee80211_hdr *)skb->data;
  #line 93 
  fc = fhdr->frame_control;
  #line 95 
  if (type == 1 && ((int)fc & 3) != 0) {
    #line 96 
    printk((char *)"\001",(char *)(& dev->name),(int)fc & 3);
    #line 98 
    dev_kfree_skb_any(skb);
    #line 99 
    return 0;
  }
  #line 102 
  hdrlen = hostap_80211_get_hdrlen((unsigned short)((int)fhdr->frame_control));
  #line 106 
  head_need = phdrlen;
  #line 107 
  tail_need = 0;
  #line 112 
  head_need = (int)((unsigned int)head_need - skb_headroom(skb));
  #line 113 
  tail_need -= skb_tailroom(skb);
  #line 115 
  if (head_need > 0 || tail_need > 0) {
    #line 116 
    int tmp_2;
    #line 116 
    int tmp_3;
    #line 116 
    if (0 > tail_need) 
                       #line 116 
                       tmp_2 = 0; else 
                                       #line 116 
                                       tmp_2 = tail_need;
    #line 116 
    if (0 > head_need) 
                       #line 116 
                       tmp_3 = 0; else 
                                       #line 116 
                                       tmp_3 = head_need;
    #line 116 
    ;
    #line 116 
    if (pskb_expand_head(skb,tmp_3,tmp_2,2592U) != 0) {
      #line 119 
      printk((char *)"\001",(char *)(& dev->name));
      #line 121 
      dev_kfree_skb_any(skb);
      #line 122 
      return 0;
    }
  }
  #line 133 
  if (prism_header == 1) {
    #line 134 
    struct linux_wlan_ng_prism_hdr *hdr;
    #line 135 
    hdr = (struct linux_wlan_ng_prism_hdr *)skb_push(skb,(unsigned int)phdrlen);
    #line 136 
    memset((void *)hdr,0,(unsigned long)phdrlen);
    #line 137 
    hdr->msgcode = 68U;
    #line 138 
    hdr->msglen = 144U;
    #line 139 
    memcpy((void *)(& hdr->devname),(void *)(& dev->name),16UL);
    #line 143 
    hdr->hosttime.did = 4164U;
    #line 143 
    hdr->hosttime.status = (unsigned short)0U;
    #line 143 
    hdr->hosttime.len = (unsigned short)4U;
    #line 143 
    hdr->hosttime.data = (unsigned int)jiffies;
    #line 144 
    hdr->mactime.did = 8260U;
    #line 144 
    hdr->mactime.status = (unsigned short)0U;
    #line 144 
    hdr->mactime.len = (unsigned short)4U;
    #line 144 
    hdr->mactime.data = rx_stats->mac_time;
    #line 145 
    hdr->channel.did = 12356U;
    #line 145 
    hdr->channel.status = (unsigned short)1U;
    #line 145 
    hdr->channel.len = (unsigned short)4U;
    #line 145 
    hdr->channel.data = 0U;
    #line 146 
    hdr->rssi.did = 16452U;
    #line 146 
    hdr->rssi.status = (unsigned short)1U;
    #line 146 
    hdr->rssi.len = (unsigned short)4U;
    #line 146 
    hdr->rssi.data = 0U;
    #line 147 
    hdr->sq.did = 20548U;
    #line 147 
    hdr->sq.status = (unsigned short)1U;
    #line 147 
    hdr->sq.len = (unsigned short)4U;
    #line 147 
    hdr->sq.data = 0U;
    #line 148 
    hdr->signal.did = 24644U;
    #line 148 
    hdr->signal.status = (unsigned short)0U;
    #line 148 
    hdr->signal.len = (unsigned short)4U;
    #line 148 
    hdr->signal.data = (unsigned int)rx_stats->signal;
    #line 149 
    hdr->noise.did = 28740U;
    #line 149 
    hdr->noise.status = (unsigned short)0U;
    #line 149 
    hdr->noise.len = (unsigned short)4U;
    #line 149 
    hdr->noise.data = (unsigned int)rx_stats->noise;
    #line 150 
    hdr->rate.did = 32836U;
    #line 150 
    hdr->rate.status = (unsigned short)0U;
    #line 150 
    hdr->rate.len = (unsigned short)4U;
    #line 150 
    hdr->rate.data = (unsigned int)rx_stats->rate / 5U;
    #line 151 
    hdr->istx.did = 36932U;
    #line 151 
    hdr->istx.status = (unsigned short)0U;
    #line 151 
    hdr->istx.len = (unsigned short)4U;
    #line 151 
    hdr->istx.data = 0U;
    #line 152 
    hdr->frmlen.did = 41028U;
    #line 152 
    hdr->frmlen.status = (unsigned short)0U;
    #line 152 
    hdr->frmlen.len = (unsigned short)4U;
    #line 152 
    hdr->frmlen.data = skb->len - (unsigned int)phdrlen;
  }
  else 
    #line 154 
    if (prism_header == 2) {
      #line 155 
      struct linux_wlan_ng_cap_hdr *hdr_0;
      #line 156 
      hdr_0 = (struct linux_wlan_ng_cap_hdr *)skb_push(skb,(unsigned int)phdrlen);
      #line 157 
      memset((void *)hdr_0,0,(unsigned long)phdrlen);
      #line 158 
      hdr_0->version = 17834368U;
      #line 159 
      hdr_0->length = __builtin_bswap32((unsigned int)phdrlen);
      #line 160 
      hdr_0->mactime = (__be64)__builtin_bswap64((unsigned long)rx_stats->mac_time);
      #line 161 
      hdr_0->hosttime = (__be64)__builtin_bswap64(jiffies);
      #line 162 
      hdr_0->phytype = 67108864U;
      #line 163 
      hdr_0->channel = __builtin_bswap32((unsigned int)local->channel);
      #line 164 
      hdr_0->datarate = __builtin_bswap32((unsigned int)rx_stats->rate);
      #line 165 
      hdr_0->antenna = 0U;
      #line 166 
      hdr_0->priority = 0U;
      #line 167 
      hdr_0->ssi_type = 50331648U;
      #line 168 
      hdr_0->ssi_signal = __builtin_bswap32((unsigned int)rx_stats->signal);
      #line 169 
      hdr_0->ssi_noise = __builtin_bswap32((unsigned int)rx_stats->noise);
      #line 170 
      hdr_0->preamble = 0U;
      #line 171 
      hdr_0->encoding = 16777216U;
    }
    else 
      #line 172 
      if (prism_header == 3) {
        #line 173 
        struct hostap_radiotap_rx *hdr_1;
        #line 174 
        hdr_1 = (struct hostap_radiotap_rx *)skb_push(skb,(unsigned int)phdrlen);
        #line 175 
        memset((void *)hdr_1,0,(unsigned long)phdrlen);
        #line 176 
        hdr_1->hdr.it_len = (unsigned short)phdrlen;
        #line 177 
        hdr_1->hdr.it_present = 109U;
        #line 183 
        hdr_1->tsft = (unsigned long long)rx_stats->mac_time;
        #line 184 
        hdr_1->chan_freq = (unsigned short)freq_list_0[local->channel + -1];
        #line 185 
        hdr_1->chan_flags = (unsigned short)160U;
        #line 187 
        hdr_1->rate = (unsigned char)((unsigned int)rx_stats->rate / 5U);
        #line 188 
        hdr_1->dbm_antsignal = (signed char)rx_stats->signal;
        #line 189 
        hdr_1->dbm_antnoise = (signed char)rx_stats->noise;
      }
  #line 192 
  ret = (int)(skb->len - (unsigned int)phdrlen);
  #line 193 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = dev;
  #line 194 
  skb_reset_mac_header(skb);
  #line 195 
  skb_pull(skb,(unsigned int)hdrlen);
  #line 196 
  if (prism_header != 0) 
                         #line 197 
                         skb_pull(skb,(unsigned int)phdrlen);
  #line 198 
  skb->pkt_type = (unsigned char)3U;
  #line 199 
  skb->protocol = (unsigned short)1024U;
  #line 200 
  memset((void *)(& skb->cb),0,48UL);
  #line 201 
  netif_rx(skb);
  #line 203 
  return ret;
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static void monitor_rx(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 211 
  int len;
  #line 213 
  len = prism2_rx_80211(dev,skb,rx_stats,0);
  #line 214 
  (dev->stats.rx_packets) ++;
  #line 215 
  dev->stats.rx_bytes += (unsigned long)len;
  #line 216 
  return;
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static struct prism2_frag_entry *prism2_frag_cache_find(local_info_t *local, unsigned int seq, unsigned int frag, u8 *src, u8 *dst)
{
  #line 224 
  struct prism2_frag_entry *entry;
  #line 225 
  int i;
  #line 227 
  i = 0;
  #line 227 
  while (i <= 3) {
    {
      #line 228 
      entry = & local->frag_cache[i];
      {
        #line 230 
        unsigned long __dummy;
        #line 230 
        unsigned long __dummy2;
        }
      #line 229 
      if (1 != 0) {
        {
          #line 230 
          unsigned long __dummy_0;
          #line 230 
          unsigned long __dummy2_0;
          }
        #line 230 
        if (1 != 0) 
          #line 230 
          if ((long)((entry->first_frag_time - jiffies) + 500UL) < 0L) 
            #line 229 
            if (entry->skb != (struct sk_buff *)0) {
              #line 231 
              printk((char *)"\001",(char *)(& (local->dev)->name),entry->seq,entry->last_frag);
              #line 234 
              consume_skb(entry->skb);
              #line 235 
              entry->skb = (struct sk_buff *)0;
            }
      }
      #line 238 
      if ((entry->skb != (struct sk_buff *)0 && entry->seq == seq) && (entry->last_frag + 1U == frag || frag == 4294967295U)) {
        #line 239 
        if (memcmp((void *)(& entry->src_addr),(void *)src,6UL) == 0) {
          #line 240 
          if (memcmp((void *)(& entry->dst_addr),(void *)dst,6UL) == 0) 
            #line 242 
            return entry;
        }
      }
    }
    #line 227 
    i ++;
  }
  #line 245 
  return (struct prism2_frag_entry *)0;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static struct sk_buff *prism2_frag_cache_get(local_info_t *local, struct ieee80211_hdr *hdr)
{
  #line 254 
  u16 sc;
  #line 255 
  unsigned int frag;
  #line 255 
  unsigned int seq;
  #line 256 
  struct prism2_frag_entry *entry;
  #line 253 
  struct sk_buff *skb = (struct sk_buff *)0;
  #line 258 
  sc = hdr->seq_ctrl;
  #line 259 
  frag = (unsigned int)sc & 15U;
  #line 260 
  seq = (unsigned int)((int)sc >> 4);
  #line 262 
  if (frag == 0U) {
    #line 264 
    skb = dev_alloc_skb((local->dev)->mtu + 54U);
    #line 269 
    if (skb == (struct sk_buff *)0) 
                                    #line 270 
                                    return (struct sk_buff *)0;
    #line 272 
    entry = & local->frag_cache[local->frag_next_idx];
    #line 273 
    (local->frag_next_idx) ++;
    #line 274 
    if (local->frag_next_idx > 3U) 
                                   #line 275 
                                   local->frag_next_idx = 0U;
    #line 277 
    if (entry->skb != (struct sk_buff *)0) 
                                           #line 278 
                                           consume_skb(entry->skb);
    #line 280 
    entry->first_frag_time = jiffies;
    #line 281 
    entry->seq = seq;
    #line 282 
    entry->last_frag = frag;
    #line 283 
    entry->skb = skb;
    #line 284 
    memcpy((void *)(& entry->src_addr),(void *)(& hdr->addr2),6UL);
    #line 285 
    memcpy((void *)(& entry->dst_addr),(void *)(& hdr->addr1),6UL);
  }
  else {
    #line 289 
    entry = prism2_frag_cache_find(local,seq,frag,(u8 *)(& hdr->addr2),(u8 *)(& hdr->addr1));
    #line 291 
    if (entry != (struct prism2_frag_entry *)0) {
      #line 292 
      entry->last_frag = frag;
      #line 293 
      skb = entry->skb;
    }
  }
  #line 297 
  return skb;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static int prism2_frag_cache_invalidate(local_info_t *local, struct ieee80211_hdr *hdr)
{
  #line 305 
  u16 sc;
  #line 306 
  unsigned int seq;
  #line 307 
  struct prism2_frag_entry *entry;
  #line 309 
  sc = hdr->seq_ctrl;
  #line 310 
  seq = (unsigned int)((int)sc >> 4);
  #line 312 
  entry = prism2_frag_cache_find(local,seq,4294967295U,(u8 *)(& hdr->addr2),(u8 *)(& hdr->addr1));
  #line 314 
  if (entry == (struct prism2_frag_entry *)0) {
    #line 315 
    printk((char *)"\001",(char *)(& (local->dev)->name),seq);
    #line 318 
    return -1;
  }
  #line 321 
  entry->skb = (struct sk_buff *)0;
  #line 322 
  return 0;
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static struct hostap_bss_info *__hostap_get_bss(local_info_t *local, u8 *bssid, u8 *ssid, size_t ssid_len)
{
  #line 329 
  struct list_head *ptr;
  #line 330 
  struct hostap_bss_info *bss;
  #line 332 
  ptr = local->bss_list.next;
  #line 332 
  while (& local->bss_list != ptr) {
    {
      #line 333 
      void *__mptr;
      #line 333 
      __mptr = (void *)ptr;
      #line 333 
      bss = ((struct hostap_bss_info *)__mptr);
      #line 334 
      if (memcmp((void *)(& bss->bssid),(void *)bssid,6UL) == 0) 
        #line 334 
        if (ssid == (u8 *)0U) 
                              #line 334 
                              goto _LOR;
        else 
          #line 335 
          if (bss->ssid_len == ssid_len) {
            #line 336 
            if (memcmp((void *)ssid,(void *)(& bss->ssid),ssid_len) == 0) {
              #line 334 
              _LOR: {
                      #line 338 
                      list_move(& bss->list,& local->bss_list);
                      #line 339 
                      return bss;
                    }
            }
          }
    }
    #line 332 
    ptr = ptr->next;
  }
  #line 343 
  return (struct hostap_bss_info *)0;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static struct hostap_bss_info *__hostap_add_bss(local_info_t *local, u8 *bssid, u8 *ssid, size_t ssid_len)
{
  #line 350 
  struct hostap_bss_info *bss;
  #line 352 
  if (local->num_bss_info > 63) {
    #line 353 
    void *__mptr;
    #line 353 
    __mptr = (void *)local->bss_list.prev;
    #line 353 
    bss = ((struct hostap_bss_info *)__mptr);
    #line 355 
    list_del_0(& bss->list);
    #line 356 
    (local->num_bss_info) --;
  }
  else {
    #line 358 
    bss = (struct hostap_bss_info *)kmalloc_1(232UL,2592U);
    #line 359 
    if (bss == (struct hostap_bss_info *)0) 
                                            #line 360 
                                            return (struct hostap_bss_info *)0;
  }
  #line 363 
  memset((void *)bss,0,232UL);
  #line 364 
  memcpy((void *)(& bss->bssid),(void *)bssid,6UL);
  #line 365 
  memcpy((void *)(& bss->ssid),(void *)ssid,ssid_len);
  #line 366 
  bss->ssid_len = ssid_len;
  #line 367 
  (local->num_bss_info) ++;
  #line 368 
  list_add_0(& bss->list,& local->bss_list);
  #line 369 
  return bss;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static void __hostap_expire_bss(local_info_t *local)
{
  #line 375 
  struct hostap_bss_info *bss;
  #line 377 
  while (local->num_bss_info > 0) {
    #line 378 
    void *__mptr;
    #line 378 
    __mptr = (void *)local->bss_list.prev;
    #line 378 
    bss = ((struct hostap_bss_info *)__mptr);
    {
      #line 380 
      unsigned long __dummy;
      #line 380 
      unsigned long __dummy2;
      }
    #line 380 
    if (1 == 0) 
                #line 381 
                break;
    else {
      {
        #line 380 
        unsigned long __dummy_0;
        #line 380 
        unsigned long __dummy2_0;
        }
      #line 380 
      if (1 == 0) 
                  #line 381 
                  break;
      else 
        #line 380 
        if ((long)((bss->last_update - jiffies) + 15000UL) >= 0L) 
                                                                  #line 381 
                                                                  break;
    }
    #line 383 
    list_del_0(& bss->list);
    #line 384 
    (local->num_bss_info) --;
    #line 385 
    kfree((void *)bss);
  }
  #line 387 
  return;
}

#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static void hostap_rx_sta_beacon(local_info_t *local, struct sk_buff *skb, int stype)
{
  #line 395 
  struct hostap_ieee80211_mgmt *mgmt;
  #line 396 
  int left;
  #line 397 
  u8 *pos;
  #line 400 
  struct hostap_bss_info *bss;
  #line 396 
  int chan = 0;
  #line 398 
  u8 *ssid = (u8 *)0U;
  #line 398 
  u8 *wpa = (u8 *)0U;
  #line 398 
  u8 *rsn = (u8 *)0U;
  #line 399 
  size_t ssid_len = 0UL;
  #line 399 
  size_t wpa_len = 0UL;
  #line 399 
  size_t rsn_len = 0UL;
  #line 402 
  if (skb->len <= 35U) 
                       #line 403 
                       return;
  #line 405 
  mgmt = (struct hostap_ieee80211_mgmt *)skb->data;
  #line 406 
  pos = (u8 *)(& mgmt->u.beacon.variable);
  #line 407 
  left = (int)((long)skb->len - (pos - skb->data));
  #line 409 
  while (left > 1) {
    #line 410 
    if ((int)*(pos + 1U) + 1 >= left) 
                                      #line 411 
                                      return;
    #line 412 
    switch ((int)*pos) {
      #line 413 
      case 0: 
              #line 413 
      ;
      #line 414 
      ssid = pos + 2U;
      #line 415 
      ssid_len = (unsigned long)*(pos + 1U);
      #line 416 
      break;
      #line 417 
      case 221: 
                #line 417 
      ;
      #line 418 
      if (((((unsigned int)*(pos + 1U) > 3U && (unsigned int)*(pos + 2U) == 0U) && (unsigned int)*(pos + 3U) == 80U) && (unsigned int)*(pos + 4U) == 242U) && (unsigned int)*(pos + 5U) == 1U) {
        #line 421 
        wpa = pos;
        #line 422 
        wpa_len = (unsigned long)((int)*(pos + 1U) + 2);
      }
      #line 424 
      break;
      #line 425 
      case 48: 
               #line 425 
      ;
      #line 426 
      rsn = pos;
      #line 427 
      rsn_len = (unsigned long)((int)*(pos + 1U) + 2);
      #line 428 
      break;
      #line 429 
      case 3: 
              #line 429 
      ;
      #line 430 
      if ((unsigned int)*(pos + 1U) != 0U) 
                                           #line 431 
                                           chan = (int)*(pos + 2U);
      #line 432 
      break;
    }
    #line 434 
    left -= (int)*(pos + 1U) + 2;
    #line 435 
    pos += (unsigned long)((int)*(pos + 1U) + 2);
  }
  #line 438 
  if (wpa_len > 64UL) 
                      #line 439 
                      wpa_len = 64UL;
  #line 440 
  if (rsn_len > 64UL) 
                      #line 441 
                      rsn_len = 64UL;
  #line 442 
  if (ssid_len > 32UL) 
                       #line 443 
                       ssid_len = 32UL;
  #line 445 
  cif_spin_lock_lock_of_local_info(& local->lock);
  #line 446 
  bss = __hostap_get_bss(local,(u8 *)(& mgmt->bssid),ssid,ssid_len);
  #line 447 
  if (bss == (struct hostap_bss_info *)0) 
                                          #line 448 
                                          bss = __hostap_add_bss(local,(u8 *)(& mgmt->bssid),ssid,ssid_len);
  #line 449 
  if (bss != (struct hostap_bss_info *)0) {
    #line 450 
    bss->last_update = jiffies;
    #line 451 
    (bss->count) ++;
    #line 452 
    bss->capab_info = mgmt->u.beacon.capab_info;
    #line 453 
    if (wpa != (u8 *)0U) {
      #line 454 
      memcpy((void *)(& bss->wpa_ie),(void *)wpa,wpa_len);
      #line 455 
      bss->wpa_ie_len = wpa_len;
    }
    else 
         #line 457 
         bss->wpa_ie_len = 0UL;
    #line 458 
    if (rsn != (u8 *)0U) {
      #line 459 
      memcpy((void *)(& bss->rsn_ie),(void *)rsn,rsn_len);
      #line 460 
      bss->rsn_ie_len = rsn_len;
    }
    else 
         #line 462 
         bss->rsn_ie_len = 0UL;
    #line 463 
    bss->chan = chan;
  }
  #line 465 
  __hostap_expire_bss(local);
  #line 466 
  cif_spin_unlock_lock_of_local_info(& local->lock);
  #line 467 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static int hostap_rx_frame_mgmt(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats, u16 type, u16 stype)
{
  #line 475 
  if (local->iw_mode == 3) 
                           #line 476 
                           hostap_update_sta_ps(local,(struct ieee80211_hdr *)skb->data);
  #line 478 
  if (local->hostapd != 0 && (unsigned int)type == 0U) {
    #line 479 
    if ((unsigned int)stype == 128U && local->iw_mode == 3) {
      #line 481 
      struct sk_buff *skb2;
      #line 484 
      skb2 = skb_clone(skb,2592U);
      #line 485 
      if (skb2 != (struct sk_buff *)0) 
                                       #line 486 
                                       hostap_rx(skb2->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev,skb2,rx_stats);
    }
    #line 491 
    (local->apdevstats.rx_packets) ++;
    #line 492 
    local->apdevstats.rx_bytes += (unsigned long)skb->len;
    #line 493 
    if (local->apdev == (struct net_device *)0) 
                                                #line 494 
                                                return -1;
    #line 495 
    prism2_rx_80211(local->apdev,skb,rx_stats,1);
    #line 496 
    return 0;
  }
  #line 499 
  if (local->iw_mode == 3) {
    #line 500 
    if ((unsigned int)type != 0U && (unsigned int)type != 4U) {
      #line 502 
      printk((char *)"\001",(char *)(& (skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev)->name),(int)type >> 2,(int)stype >> 4);
      #line 505 
      return -1;
    }
    #line 508 
    hostap_rx(skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev,skb,rx_stats);
    #line 509 
    return 0;
  }
  else 
    #line 510 
    if ((unsigned int)type == 0U && ((unsigned int)stype == 128U || (unsigned int)stype == 80U)) {
      #line 513 
      hostap_rx_sta_beacon(local,skb,(int)stype);
      #line 514 
      return -1;
    }
    else 
      #line 515 
      if ((unsigned int)type == 0U && ((unsigned int)stype == 16U || (unsigned int)stype == 48U)) 
        #line 521 
        return -1;
      else {
        #line 523 
        printk((char *)"\001",(char *)(& (skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev)->name),(int)type >> 2,(int)stype >> 4);
        #line 526 
        return -1;
      }
}

#line 532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static struct net_device *prism2_rx_get_wds(local_info_t *local, u8 *addr)
{
  #line 536 
  struct list_head *ptr;
  #line 548 
  struct net_device *tmp_1;
  #line 535 
  struct hostap_interface *iface = (struct hostap_interface *)0;
  #line 538 
  _raw_read_lock_bh(& local->iface_lock);
  #line 539 
  ptr = local->hostap_interfaces.next;
  #line 539 
  while (& local->hostap_interfaces != ptr) {
    {
      #line 540 
      void *__mptr;
      #line 540 
      __mptr = (void *)ptr;
      #line 540 
      iface = ((struct hostap_interface *)__mptr);
      #line 541 
      if (iface->type == (unsigned int)4) {
        #line 541 
        if (memcmp((void *)(& iface->u.wds.remote_addr),(void *)addr,6UL) == 0) 
          #line 543 
          break;
      }
      #line 544 
      iface = (struct hostap_interface *)0;
    }
    #line 539 
    ptr = ptr->next;
  }
  #line 546 
  _raw_read_unlock_bh(& local->iface_lock);
  #line 548 
  if (iface != (struct hostap_interface *)0) 
                                             #line 548 
                                             tmp_1 = iface->dev; else 
                                                                   #line 548 
                                                                   tmp_1 = (struct net_device *)0;
  #line 548 
  return tmp_1;
}

#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static int hostap_rx_frame_wds(local_info_t *local, struct ieee80211_hdr *hdr, u16 fc, struct net_device **wds)
{
  #line 558 
  if (((int)fc & 768) != 768 && (local->iw_mode != 3 || ((int)fc & 256) == 0)) 
    #line 561 
    return 0;
  #line 565 
  if (! ether_addr_equal((u8 *)(& hdr->addr1),(local->dev)->dev_addr)) 
    #line 565 
    if ((((((unsigned int)hdr->addr1[0] != 255U || (unsigned int)hdr->addr1[1] != 255U) || (unsigned int)hdr->addr1[2] != 255U) || (unsigned int)hdr->addr1[3] != 255U) || (unsigned int)hdr->addr1[4] != 255U) || (unsigned int)hdr->addr1[5] != 255U) 
      #line 575 
      return -1;
  #line 579 
  *wds = prism2_rx_get_wds(local,(u8 *)(& hdr->addr2));
  #line 580 
  if (*wds == (struct net_device *)0 && ((int)fc & 512) != 0) 
    #line 580 
    if (local->iw_mode != 2 || ((unsigned long)local->wds_type & 2UL) == 0UL) 
      #line 580 
      goto _LOR;
    else {
      #line 582 
      if (memcmp((void *)(& hdr->addr2),(void *)(& local->bssid),6UL) != 0) {
        #line 580 
        _LOR: {
                #line 586 
                printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr2));
                #line 589 
                if (local->ap != (struct ap_data *)0 && (local->ap)->autom_ap_wds != 0) 
                  #line 590 
                  hostap_wds_link_oper(local,(u8 *)(& hdr->addr2),(enum ldv_15516)WDS_ADD);
                #line 591 
                return -1;
              }
      }
    }
  #line 594 
  if ((*wds != (struct net_device *)0 && ((int)fc & 512) == 0) && local->ap != (struct ap_data *)0) {
    #line 594 
    if (hostap_is_sta_assoc(local->ap,(u8 *)(& hdr->addr2)) != 0) 
                                                                  #line 601 
                                                                  *wds = (struct net_device *)0;
  }
  #line 604 
  return 0;
}

#line 608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static int hostap_is_eapol_frame(local_info_t *local, struct sk_buff *skb)
{
  #line 611 
  u16 fc;
  #line 611 
  u16 ethertype;
  #line 612 
  struct ieee80211_hdr *hdr;
  #line 613 
  u8 *pos;
  #line 610 
  struct net_device *dev = local->dev;
  #line 615 
  if (skb->len <= 23U) 
                       #line 616 
                       return 0;
  #line 618 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 619 
  fc = hdr->frame_control;
  #line 622 
  if (((int)fc & 768) == 256) {
    #line 623 
    if ((int)ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr) != 0) {
      #line 624 
      if (! ((int)ether_addr_equal((u8 *)(& hdr->addr3),dev->dev_addr) != 0)) 
        #line 622 
        goto _LAND_0;
    }
    else 
         #line 622 
         goto _LAND_0;
  }
  else {
    #line 622 
    _LAND_0: 
             #line 627 
    ;
    #line 627 
    if (((int)fc & 768) == 512) {
      #line 628 
      if (! ((int)ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr) != 0)) 
        #line 632 
        return 0;
    }
    else 
         #line 632 
         return 0;
  }
  #line 634 
  if (skb->len <= 31U) 
                       #line 635 
                       return 0;
  #line 638 
  pos = skb->data + 24U;
  #line 639 
  ethertype = (unsigned short)(((int)*(pos + 6U) << 8) | (int)*(pos + 7U));
  #line 640 
  if ((unsigned int)ethertype == 34958U) 
                                         #line 641 
                                         return 1;
  #line 643 
  return 0;
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static int hostap_rx_frame_decrypt(local_info_t *local, struct sk_buff *skb, struct lib80211_crypt_data *crypt)
{
  #line 652 
  struct ieee80211_hdr *hdr;
  #line 653 
  int res;
  #line 653 
  int hdrlen;
  #line 655 
  if (crypt == (struct lib80211_crypt_data *)0 || (crypt->ops)->decrypt_mpdu == (int (*)(struct sk_buff *, int , void *))0) 
    #line 656 
    return 0;
  #line 658 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 659 
  hdrlen = hostap_80211_get_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 661 
  if (local->tkip_countermeasures != 0) {
    #line 661 
    if (cif_strcmp_2((crypt->ops)->name,(char *)"TKIP") == 0) {
      #line 663 
      if (net_ratelimit() != 0) 
                                #line 664 
                                printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr2));
      #line 668 
      return -1;
    }
  }
  #line 671 
  atomic_inc_0(& crypt->refcnt);
  #line 672 
  res = (*((crypt->ops)->decrypt_mpdu))(skb,hdrlen,crypt->priv);
  #line 673 
  atomic_dec_0(& crypt->refcnt);
  #line 674 
  if (res < 0) {
    #line 675 
    printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr2),res);
    #line 677 
    (local->comm_tallies.rx_discards_wep_undecryptable) ++;
    #line 678 
    return -1;
  }
  #line 681 
  return res;
}

#line 687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
static int hostap_rx_frame_decrypt_msdu(local_info_t *local, struct sk_buff *skb, int keyidx, struct lib80211_crypt_data *crypt)
{
  #line 690 
  struct ieee80211_hdr *hdr;
  #line 691 
  int res;
  #line 691 
  int hdrlen;
  #line 693 
  if (crypt == (struct lib80211_crypt_data *)0 || (crypt->ops)->decrypt_msdu == (int (*)(struct sk_buff *, int , int , void *))0) 
    #line 694 
    return 0;
  #line 696 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 697 
  hdrlen = hostap_80211_get_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 699 
  atomic_inc_0(& crypt->refcnt);
  #line 700 
  res = (*((crypt->ops)->decrypt_msdu))(skb,keyidx,hdrlen,crypt->priv);
  #line 701 
  atomic_dec_0(& crypt->refcnt);
  #line 702 
  if (res < 0) {
    #line 703 
    printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr2),keyidx);
    #line 706 
    return -1;
  }
  #line 709 
  return 0;
}

#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_80211_rx.c"
void hostap_80211_rx(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 719 
  struct hostap_interface *iface;
  #line 720 
  local_info_t *local;
  #line 721 
  struct ieee80211_hdr *hdr;
  #line 722 
  size_t hdrlen;
  #line 723 
  u16 fc;
  #line 723 
  u16 type;
  #line 723 
  u16 stype;
  #line 723 
  u16 sc;
  #line 725 
  unsigned int frag;
  #line 726 
  u8 *payload;
  #line 728 
  u16 ethertype;
  #line 731 
  u8 dst[6U];
  #line 732 
  u8 src[6U];
  #line 724 
  struct net_device *wds = (struct net_device *)0;
  #line 727 
  struct sk_buff *skb2 = (struct sk_buff *)0;
  #line 729 
  int frame_authorized = 0;
  #line 730 
  int from_assoc_ap = 0;
  #line 733 
  struct lib80211_crypt_data *crypt = (struct lib80211_crypt_data *)0;
  #line 734 
  void *sta = (void *)0;
  #line 735 
  int keyidx = 0;
  #line 737 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 738 
  local = iface->local;
  #line 739 
  (iface->stats.rx_packets) ++;
  #line 740 
  iface->stats.rx_bytes += (unsigned long)skb->len;
  #line 744 
  dev = local->ddev;
  #line 745 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 747 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 749 
  if (skb->len <= 9U) 
                      #line 750 
                      goto rx_dropped;
  #line 752 
  fc = hdr->frame_control;
  #line 753 
  type = (unsigned short)((unsigned int)fc & 12U);
  #line 754 
  stype = (unsigned short)((unsigned int)fc & 240U);
  #line 755 
  sc = hdr->seq_ctrl;
  #line 756 
  frag = (unsigned int)sc & 15U;
  #line 757 
  hdrlen = (unsigned long)hostap_80211_get_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 763 
  if (iface->spy_data.spy_number > 0) {
    #line 764 
    struct iw_quality wstats;
    #line 765 
    wstats.level = rx_stats->signal;
    #line 766 
    wstats.noise = rx_stats->noise;
    #line 767 
    wstats.updated = (unsigned char)30U;
    #line 770 
    wireless_spy_update(dev,(unsigned char *)(& hdr->addr2),& wstats);
  }
  #line 773 
  hostap_update_rx_stats(local->ap,hdr,rx_stats);
  #line 775 
  if (local->iw_mode == 6) {
    #line 776 
    monitor_rx(dev,skb,rx_stats);
    #line 777 
    return;
  }
  #line 780 
  if (local->host_decrypt != 0) {
    #line 781 
    int idx = 0;
    #line 782 
    if ((unsigned long)skb->len >= hdrlen + 3UL) 
                                                 #line 783 
                                                 idx = (int)*(skb->data + (hdrlen + 3UL)) >> 6;
    #line 784 
    crypt = local->crypt_info.crypt[idx];
    #line 785 
    sta = (void *)0;
    #line 794 
    if (((int)hdr->addr1[0] & 1) == 0 || local->bcrx_sta_key != 0) 
                                                                   #line 795 
                                                                   hostap_handle_sta_crypto(local,hdr,& crypt,& sta);
    #line 800 
    if (crypt != (struct lib80211_crypt_data *)0 && (crypt->ops == (struct lib80211_crypto_ops *)0 || (crypt->ops)->decrypt_mpdu == (int (*)(struct sk_buff *, int , void *))0)) 
      #line 802 
      crypt = (struct lib80211_crypt_data *)0;
    #line 804 
    if (crypt == (struct lib80211_crypt_data *)0 && ((int)fc & 16384) != 0) {
      #line 814 
      (local->comm_tallies.rx_discards_wep_undecryptable) ++;
      #line 815 
      goto rx_dropped;
    }
  }
  #line 819 
  if ((unsigned int)type != 8U) {
    #line 820 
    if ((((unsigned int)type == 0U && (unsigned int)stype == 176U) && ((int)fc & 16384) != 0) && local->host_decrypt != 0) {
      #line 823 
      keyidx = hostap_rx_frame_decrypt(local,skb,crypt);
      #line 822 
      if (keyidx < 0) {
        #line 825 
        printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2));
        #line 829 
        goto rx_dropped;
      }
    }
    #line 832 
    if (hostap_rx_frame_mgmt(local,skb,rx_stats,(unsigned short)((int)type),
                             (unsigned short)((int)stype)) != 0) 
      #line 833 
      goto rx_dropped; else 
                            #line 835 
                            goto rx_exit;
  }
  #line 839 
  if (skb->len <= 23U) 
                       #line 840 
                       goto rx_dropped;
  #line 842 
  switch ((int)fc & 768) {
    #line 843 
    case 512: 
              #line 843 
    ;
    #line 844 
    memcpy((void *)(& dst),(void *)(& hdr->addr1),6UL);
    #line 845 
    memcpy((void *)(& src),(void *)(& hdr->addr3),6UL);
    #line 846 
    break;
    #line 847 
    case 256: 
              #line 847 
    ;
    #line 848 
    memcpy((void *)(& dst),(void *)(& hdr->addr3),6UL);
    #line 849 
    memcpy((void *)(& src),(void *)(& hdr->addr2),6UL);
    #line 850 
    break;
    #line 851 
    case 768: 
              #line 851 
    ;
    #line 852 
    if (skb->len <= 29U) 
                         #line 853 
                         goto rx_dropped;
    #line 854 
    memcpy((void *)(& dst),(void *)(& hdr->addr3),6UL);
    #line 855 
    memcpy((void *)(& src),(void *)(& hdr->addr4),6UL);
    #line 856 
    break;
    #line 857 
    default: 
             #line 857 
    ;
    #line 858 
    memcpy((void *)(& dst),(void *)(& hdr->addr1),6UL);
    #line 859 
    memcpy((void *)(& src),(void *)(& hdr->addr2),6UL);
    #line 860 
    break;
  }
  #line 863 
  if (hostap_rx_frame_wds(local,hdr,(unsigned short)((int)fc),& wds) != 0) 
    #line 864 
    goto rx_dropped;
  #line 865 
  if (wds != (struct net_device *)0) {
    #line 866 
    dev = wds;
    #line 866 
    skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = dev;
  }
  #line 868 
  if (((local->iw_mode == 3 && wds == (struct net_device *)0) && ((int)fc & 768) == 512) && local->stadev != (struct net_device *)0) {
    #line 871 
    if (memcmp((void *)(& hdr->addr2),(void *)(& local->assoc_ap_addr),6UL) == 0) {
      #line 874 
      dev = local->stadev;
      #line 874 
      skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = dev;
      #line 875 
      from_assoc_ap = 1;
    }
  }
  #line 878 
  if ((unsigned int)local->iw_mode + 4294967293U <= 1U && from_assoc_ap == 0) {
    #line 881 
    switch ((unsigned int)hostap_handle_sta_rx(local,dev,skb,rx_stats,
                             wds != (struct net_device *)0)) {
      #line 883 
      case (unsigned int)3: 
                            #line 883 
      ;
      #line 884 
      frame_authorized = 0;
      #line 885 
      break;
      #line 886 
      case (unsigned int)0: 
                            #line 886 
      ;
      #line 887 
      frame_authorized = 1;
      #line 888 
      break;
      #line 889 
      case (unsigned int)1: 
                            #line 889 
      ;
      #line 890 
      goto rx_dropped;
      #line 891 
      case (unsigned int)2: 
                            #line 891 
      ;
      #line 892 
      goto rx_exit;
    }
  }
  #line 898 
  if (((unsigned int)stype != 0U && (unsigned int)stype != 16U) && ((unsigned int)stype != 32U && (unsigned int)stype != 48U)) {
    #line 902 
    if ((unsigned int)stype != 64U) 
                                    #line 903 
                                    printk((char *)"\001",(char *)(& dev->name),(int)type >> 2,(int)stype >> 4);
    #line 906 
    goto rx_dropped;
  }
  #line 911 
  if (local->host_decrypt != 0 && ((int)fc & 16384) != 0) {
    #line 912 
    keyidx = hostap_rx_frame_decrypt(local,skb,crypt);
    #line 911 
    if (keyidx < 0) 
                    #line 913 
                    goto rx_dropped;
  }
  #line 914 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 918 
  if ((local->host_decrypt != 0 && ((int)fc & 16384) != 0) && (frag != 0U || ((int)fc & 1024) != 0)) {
    #line 920 
    int flen;
    #line 921 
    struct sk_buff *frag_skb = prism2_frag_cache_get(local,hdr);
    #line 923 
    if (frag_skb == (struct sk_buff *)0) {
      #line 924 
      printk((char *)"\001",(char *)(& dev->name),((int)fc & 1024) != 0,(int)sc >> 4,frag);
      #line 928 
      goto rx_dropped;
    }
    #line 931 
    flen = (int)skb->len;
    #line 932 
    if (frag != 0U) 
                    #line 933 
                    flen = (int)((size_t)flen - hdrlen);
    #line 935 
    if (frag_skb->tail + (unsigned int)flen > frag_skb->end) {
      #line 936 
      printk((char *)"\001",(char *)(& dev->name));
      #line 939 
      prism2_frag_cache_invalidate(local,hdr);
      #line 940 
      goto rx_dropped;
    }
    #line 943 
    if (frag == 0U) {
      #line 946 
      ;
      #line 946 
      ;
      #line 946 
      skb_copy_from_linear_data(skb,skb_put(frag_skb,(unsigned int)flen),(unsigned int)flen);
    }
    else {
      #line 951 
      ;
      #line 951 
      ;
      #line 951 
      ;
      #line 951 
      skb_copy_from_linear_data_offset(skb,(int)hdrlen,skb_put(frag_skb,(unsigned int)flen),(unsigned int)flen);
    }
    #line 955 
    consume_skb(skb);
    #line 956 
    skb = (struct sk_buff *)0;
    #line 958 
    if (((int)fc & 1024) != 0) 
                               #line 962 
                               goto rx_exit;
    #line 967 
    skb = frag_skb;
    #line 968 
    hdr = (struct ieee80211_hdr *)skb->data;
    #line 969 
    prism2_frag_cache_invalidate(local,hdr);
  }
  #line 975 
  if (local->host_decrypt != 0 && ((int)fc & 16384) != 0) {
    #line 975 
    if (hostap_rx_frame_decrypt_msdu(local,skb,keyidx,crypt) != 0) 
                                                                   #line 977 
                                                                   goto rx_dropped;
  }
  #line 979 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 980 
  if ((crypt != (struct lib80211_crypt_data *)0 && ((int)fc & 16384) == 0) && local->open_wep == 0) 
    #line 981 
    if (local->ieee_802_1x != 0) {
      #line 981 
      if (! (hostap_is_eapol_frame(local,skb) != 0)) 
                                                     #line 981 
                                                     goto _LAND;
    }
    else {
      #line 981 
      _LAND: {
               #line 988 
               printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr2));
               #line 991 
               goto rx_dropped;
             }
    }
  #line 995 
  if (local->drop_unencrypted != 0 && ((int)fc & 16384) == 0) {
    #line 995 
    if (hostap_is_eapol_frame(local,skb) == 0) {
      #line 997 
      if (net_ratelimit() != 0) 
                                #line 998 
                                printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2));
      #line 1002 
      goto rx_dropped;
    }
  }
  #line 1007 
  payload = skb->data + hdrlen;
  #line 1008 
  ethertype = (unsigned short)(((int)*(payload + 6U) << 8) | (int)*(payload + 7U));
  #line 1012 
  if (local->ieee_802_1x != 0 && local->iw_mode == 3) 
    #line 1013 
    if ((unsigned int)ethertype == 34958U) {
      #line 1016 
      if (local->hostapd != 0 && local->apdev != (struct net_device *)0) {
        #line 1019 
        prism2_rx_80211(local->apdev,skb,rx_stats,1);
        #line 1021 
        (local->apdevstats.rx_packets) ++;
        #line 1022 
        local->apdevstats.rx_bytes += (unsigned long)skb->len;
        #line 1023 
        goto rx_exit;
      }
    }
    else 
      #line 1025 
      if (frame_authorized == 0) {
        #line 1026 
        printk((char *)"\001",(char *)(& dev->name),(int)ethertype);
        #line 1030 
        goto rx_dropped;
      }
  #line 1035 
  if ((unsigned long)skb->len - hdrlen > 7UL) {
    #line 1035 
    if (memcmp((void *)payload,(void *)(& rfc1042_header_0),6UL) == 0) {
      #line 1037 
      if ((unsigned int)ethertype != 33011U && (unsigned int)ethertype != 33079U) 
        #line 1035 
        goto _LOR; else 
                        #line 1035 
                        goto _LAND_1;
    }
    else {
      #line 1035 
      _LAND_1: 
      #line 1037 
      if (memcmp((void *)payload,(void *)(& bridge_tunnel_header_0),6UL) == 0) {
        #line 1035 
        _LOR: {
                #line 1041 
                skb_pull(skb,(unsigned int)hdrlen + 6U);
                #line 1042 
                memcpy(skb_push(skb,6U),(void *)(& src),6UL);
                #line 1043 
                memcpy(skb_push(skb,6U),(void *)(& dst),6UL);
              }
      }
      else 
           #line 1035 
           goto _LAND_0;
    }
  }
  else {
    #line 1035 
    _LAND_0: {
               #line 1045 
               __be16 len;
               #line 1047 
               skb_pull(skb,(unsigned int)hdrlen);
               #line 1048 
               len = __builtin_bswap16((unsigned short)((int)((unsigned short)skb->len)));
               #line 1049 
               memcpy(skb_push(skb,2U),(void *)(& len),2UL);
               #line 1050 
               memcpy(skb_push(skb,6U),(void *)(& src),6UL);
               #line 1051 
               memcpy(skb_push(skb,6U),(void *)(& dst),6UL);
             }
  }
  #line 1054 
  if ((wds != (struct net_device *)0 && ((int)fc & 768) == 256) && skb->len > 19U) {
    #line 1059 
    skb_copy_from_linear_data_offset(skb,(int)(skb->len + 4294967290U),(void *)(skb->data + 6U),6U);
    #line 1062 
    skb_trim(skb,skb->len + 4294967290U);
  }
  #line 1065 
  (dev->stats.rx_packets) ++;
  #line 1066 
  dev->stats.rx_bytes += (unsigned long)skb->len;
  #line 1068 
  if ((local->iw_mode == 3 && wds == (struct net_device *)0) && (local->ap)->bridge_packets != 0) 
    #line 1070 
    if (((int)dst[0] & 1) != 0) {
      #line 1073 
      ((local->ap)->bridged_multicast) ++;
      #line 1074 
      skb2 = skb_clone(skb,2592U);
      #line 1075 
      if (skb2 == (struct sk_buff *)0) 
                                       #line 1076 
                                       printk((char *)"\001",(char *)(& dev->name));
    }
    else {
      #line 1078 
      if (hostap_is_sta_authorized(local->ap,(u8 *)(& dst)) != 0) {
        #line 1081 
        ((local->ap)->bridged_unicast) ++;
        #line 1082 
        skb2 = skb;
        #line 1083 
        skb = (struct sk_buff *)0;
      }
    }
  #line 1087 
  if (skb2 != (struct sk_buff *)0) {
    #line 1089 
    skb2->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = dev;
    #line 1090 
    skb2->protocol = (unsigned short)256U;
    #line 1091 
    skb_reset_mac_header(skb2);
    #line 1092 
    skb_reset_network_header(skb2);
    #line 1094 
    dev_queue_xmit(skb2);
  }
  #line 1097 
  if (skb != (struct sk_buff *)0) {
    #line 1098 
    skb->protocol = eth_type_trans(skb,dev);
    #line 1099 
    memset((void *)(& skb->cb),0,48UL);
    #line 1100 
    netif_rx(skb);
  }
  #line 1103 
  rx_exit: 
           #line 1103 
  ;
  #line 1104 
  if (sta != (void *)0) 
                        #line 1105 
                        hostap_handle_sta_release(sta);
  #line 1106 
  return;
  #line 1108 
  rx_dropped: 
              #line 1108 
  ;
  #line 1109 
  consume_skb(skb);
  #line 1111 
  (dev->stats.rx_dropped) ++;
  #line 1112 
  goto rx_exit;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 182 
  ldv_atomic_inc(v);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void atomic_dec_0(atomic_t *v)
{
  #line 189 
  ldv_atomic_dec(v);
  #line 190 
  return;
}

#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void *kmalloc_1(size_t size, gfp_t flags)
{
  #line 384 
  return ldv_kmalloc(size,flags);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void cif_spin_lock_lock_of_local_info(spinlock_t *lock)
{
  #line 649 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 651 
  spin_lock(lock);
  #line 652 
  return;
}

#line 655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static void cif_spin_unlock_lock_of_local_info(spinlock_t *lock)
{
  #line 658 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 660 
  spin_unlock(lock);
  #line 661 
  return;
}

#line 664  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_80211_rx.i.aux"
static int cif_strcmp_2(char *cs, char *ct)
{
  #line 667 
  return ldv_strcmp(cs,ct);
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_1(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_4568 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_1(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_1(new,head,head->next);
  #line 80 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_1(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_1(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_4570 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_1(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_1(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_1(struct list_head *entry)
{
  #line 139 
  __list_del_entry_1(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static size_t cif_strlen_1(char *s);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_4622 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 237 
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void atomic_inc_1(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void atomic_dec_1(atomic_t *v);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_sta_table_lock_of_ap_data(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 672  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_bh_lock_of_mac_restrictions(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_bh_sta_table_lock_of_ap_data(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_bh_lock_of_local_info_1(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 663  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_sta_table_lock_of_ap_data(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_bh_lock_of_mac_restrictions(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_bh_sta_table_lock_of_ap_data(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 733  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_bh_lock_of_local_info_1(spinlock_t *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 188 
#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 708  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static bool cif_flush_work(struct work_struct *work);
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static bool cif_schedule_work_0(struct work_struct *work);
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 120 
void seq_puts(struct seq_file *, char *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void *kmalloc_2(size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 1493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_queue_empty(struct sk_buff_head *list)
{
  #line 1495 
  return list->next == (struct sk_buff *)list;
}

#line 1812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static __u32 skb_queue_len(struct sk_buff_head *list_)
{
  #line 1814 
  return list_->qlen;
}

#line 2011 
#line 2011 
void skb_queue_tail(struct sk_buff_head *, struct sk_buff *);
#line 2045 
#line 2045 
struct sk_buff *skb_dequeue(struct sk_buff_head *);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2756 
#line 2756 
void skb_queue_purge(struct sk_buff_head *);
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_has_protected(__le16 fc)
{
  #line 332 
  return (_Bool)(((int)fc & 16384) != 0);
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_assoc_resp(__le16 fc)
{
  #line 418 
  return (_Bool)(((int)fc & 252) == 16);
}

#line 436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_reassoc_resp(__le16 fc)
{
  #line 438 
  return (_Bool)(((int)fc & 252) == 48);
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_beacon(__le16 fc)
{
  #line 468 
  return (_Bool)(((int)fc & 252) == 128);
}

#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ieee80211.h"
__inline static bool ieee80211_is_auth(__le16 fc)
{
  #line 498 
  return (_Bool)(((int)fc & 252) == 176);
}

#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_init_data(local_info_t *local);
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_init_ap_proc(local_info_t *local);
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_free_data(struct ap_data *ap);
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_check_sta_fw_version(struct ap_data *ap, int sta_fw_ver);
#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.h"
#line 2823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_handle_sta_tx_exc(local_info_t *local, struct sk_buff *skb);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap.h"
static long freq_list_1[14U] = {2412L, 2417L, 2422L, 2427L, 2432L, 2437L, 2442L, 2447L, 2452L, 2457L, 2462L, 2467L, 2472L, 2484L};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int other_ap_policy[8U] = {[1] = -1, -1, -1, -1, -1, -1, -1};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_max_inactivity[8U] = {300, -1, -1, -1, -1, -1, -1, -1};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_bridge_packets[8U] = {1, -1, -1, -1, -1, -1, -1, -1};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int autom_ap_wds[8U] = {[1] = -1, -1, -1, -1, -1, -1, -1};
#line 56 
#line 909 
static struct sta_info *ap_get_sta(struct ap_data *ap, u8 *sta);
#line 57 
#line 162 
static void hostap_event_expired_sta(struct net_device *dev, struct sta_info *sta);
#line 59 
#line 1063 
static void handle_add_proc_queue(struct work_struct *work);
#line 62 
#line 1951 
static void handle_wds_oper_queue(struct work_struct *work);
#line 63 
#line 923 
static void prism2_send_mgmt(struct net_device *dev, u16 type_subtype, char *body, int body_len, u8 *addr, u16 tx_cb_idx);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_debug_proc_show(struct seq_file *m, void *v)
{
  #line 72 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 74 
  seq_printf(m,(char *)"BridgedUnicastFrames=%u\n",ap->bridged_unicast);
  #line 75 
  seq_printf(m,(char *)"BridgedMulticastFrames=%u\n",ap->bridged_multicast);
  #line 76 
  seq_printf(m,(char *)"max_inactivity=%u\n",ap->max_inactivity / 250U);
  #line 77 
  seq_printf(m,(char *)"bridge_packets=%u\n",ap->bridge_packets);
  #line 78 
  seq_printf(m,(char *)"nullfunc_ack=%u\n",ap->nullfunc_ack);
  #line 79 
  seq_printf(m,(char *)"autom_ap_wds=%u\n",ap->autom_ap_wds);
  #line 80 
  seq_printf(m,(char *)"auth_algs=%u\n",(ap->local)->auth_algs);
  #line 81 
  seq_printf(m,(char *)"tx_drop_nonassoc=%u\n",ap->tx_drop_nonassoc);
  #line 82 
  return 0;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_sta_hash_add(struct ap_data *ap, struct sta_info *sta)
{
  #line 88 
  sta->hnext = ap->sta_hash[(int)sta->addr[5]];
  #line 89 
  ap->sta_hash[(int)sta->addr[5]] = sta;
  #line 90 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_sta_hash_del(struct ap_data *ap, struct sta_info *sta)
{
  #line 94 
  struct sta_info *s;
  #line 96 
  s = ap->sta_hash[(int)sta->addr[5]];
  #line 97 
  if (s == (struct sta_info *)0) 
                                 #line 97 
                                 return;
  #line 98 
  if ((int)ether_addr_equal((u8 *)(& s->addr),(u8 *)(& sta->addr)) != 0) {
    #line 99 
    ap->sta_hash[(int)sta->addr[5]] = s->hnext;
    #line 100 
    return;
  }
  #line 103 
  while (1) {
    #line 103 
    if (s->hnext != (struct sta_info *)0) {
      #line 103 
      if (ether_addr_equal((u8 *)(& (s->hnext)->addr),(u8 *)(& sta->addr))) 
        #line 103 
        break;
    }
    else 
         #line 103 
         break;
    #line 104 
    s = s->hnext;
  }
  #line 105 
  if (s->hnext != (struct sta_info *)0) 
                                        #line 106 
                                        s->hnext = (s->hnext)->hnext; else 
                                                                    #line 108 
                                                                    printk((char *)"AP: could not remove STA %pM from hash table\n",(u8 *)(& sta->addr));
  #line 110 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_free_sta(struct ap_data *ap, struct sta_info *sta)
{
  #line 114 
  if (sta->ap != 0 && sta->local != (local_info_t *)0) 
                                                       #line 115 
                                                       hostap_event_expired_sta((sta->local)->dev,sta);
  #line 117 
  if (ap->proc != (struct proc_dir_entry *)0) {
    #line 118 
    char name[20U];
    #line 119 
    sprintf((char *)(& name),(char *)"%pM",(u8 *)(& sta->addr));
    #line 120 
    remove_proc_entry((char *)(& name),ap->proc);
  }
  #line 123 
  if (sta->crypt != (struct lib80211_crypt_data *)0) {
    #line 124 
    (*(((sta->crypt)->ops)->deinit))((sta->crypt)->priv);
    #line 125 
    kfree((void *)sta->crypt);
    #line 126 
    sta->crypt = (struct lib80211_crypt_data *)0;
  }
  #line 129 
  skb_queue_purge(& sta->tx_buf);
  #line 131 
  (ap->num_sta) --;
  #line 133 
  if ((unsigned int)sta->aid != 0U) 
                                    #line 134 
                                    ap->sta_aid[(int)sta->aid + -1] = (struct sta_info *)0;
  #line 136 
  if (sta->ap == 0) 
                    #line 137 
                    kfree((void *)sta->u.sta.challenge);
  #line 138 
  cif_del_timer_sync(& sta->timer);
  #line 141 
  kfree((void *)sta);
  #line 142 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_set_tim(local_info_t *local, int aid, int set)
{
  #line 147 
  if ((local->func)->set_tim != (int (*)(struct net_device *, int , int ))0) 
    #line 148 
    (*((local->func)->set_tim))(local->dev,aid,set);
  #line 149 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_event_new_sta(struct net_device *dev, struct sta_info *sta)
{
  #line 154 
  union iwreq_data wrqu;
  #line 155 
  memset((void *)(& wrqu),0,16UL);
  #line 156 
  memcpy((void *)(& wrqu.addr.sa_data),(void *)(& sta->addr),6UL);
  #line 157 
  wrqu.addr.sa_family = (unsigned short)1U;
  #line 158 
  wireless_send_event(dev,35843U,& wrqu,(char *)0);
  #line 159 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_event_expired_sta(struct net_device *dev, struct sta_info *sta)
{
  #line 165 
  union iwreq_data wrqu;
  #line 166 
  memset((void *)(& wrqu),0,16UL);
  #line 167 
  memcpy((void *)(& wrqu.addr.sa_data),(void *)(& sta->addr),6UL);
  #line 168 
  wrqu.addr.sa_family = (unsigned short)1U;
  #line 169 
  wireless_send_event(dev,35844U,& wrqu,(char *)0);
  #line 170 
  return;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_handle_timer(struct timer_list *t)
{
  #line 177 
  void *__mptr;
  #line 178 
  local_info_t *local;
  #line 179 
  struct ap_data *ap;
  #line 181 
  int was_assoc;
  #line 177 
  __mptr = (void *)t;
  #line 177 
  struct sta_info *sta = ((struct sta_info *)(__mptr + 18446744073709551240U));
  #line 180 
  unsigned long next_time = 0UL;
  #line 183 
  if ((sta == (struct sta_info *)0 || sta->local == (local_info_t *)0) || (sta->local)->ap == (struct ap_data *)0) {
    #line 184 
    printk((char *)"\001");
    #line 185 
    return;
  }
  #line 188 
  local = sta->local;
  #line 189 
  ap = local->ap;
  #line 190 
  was_assoc = (int)sta->flags & 2;
  #line 192 
  if (atomic_read_0(& sta->users) != 0) 
                                        #line 193 
                                        next_time = jiffies + 250UL;
  else 
    #line 194 
    if (((unsigned long)sta->flags & 16UL) != 0UL && ((unsigned long)sta->flags & 1UL) == 0UL) 
      #line 195 
      next_time = (unsigned long)ap->max_inactivity + jiffies;
  {
    #line 197 
    unsigned long __dummy;
    #line 197 
    unsigned long __dummy2;
    }
  #line 197 
  if (1 != 0) {
    {
      #line 197 
      unsigned long __dummy_0;
      #line 197 
      unsigned long __dummy2_0;
      }
    #line 197 
    if (1 != 0) {
      #line 197 
      if ((long)(jiffies - (sta->last_rx + (unsigned long)ap->max_inactivity)) < 0L) {
        #line 199 
        sta->timeout_next = 0;
        #line 200 
        next_time = sta->last_rx + (unsigned long)ap->max_inactivity;
      }
      else 
           #line 197 
           goto _LAND_0;
    }
    else 
         #line 197 
         goto _LAND_0;
  }
  else 
    #line 197 
    _LAND_0: 
             #line 201 
             if (sta->timeout_next == (unsigned int)1 && ((unsigned long)sta->flags & 64UL) == 0UL) {
               #line 204 
               sta->timeout_next = 0;
               #line 205 
               next_time = (unsigned long)ap->max_inactivity + jiffies;
             }
  #line 208 
  if (next_time != 0UL) {
    #line 209 
    sta->timer.expires = next_time;
    #line 210 
    add_timer(& sta->timer);
    #line 211 
    return;
  }
  #line 214 
  if (sta->ap != 0) 
                    #line 215 
                    sta->timeout_next = 2;
  #line 217 
  if (sta->timeout_next == (unsigned int)2 && ((unsigned long)sta->flags & 16UL) == 0UL) {
    #line 218 
    cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
    #line 219 
    ap_sta_hash_del(ap,sta);
    #line 220 
    list_del_1(& sta->list);
    #line 221 
    cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
    #line 222 
    sta->flags &= 4294967292U;
  }
  else 
    #line 223 
    if (sta->timeout_next == (unsigned int)1) 
                                              #line 224 
                                              sta->flags &= 4294967293U;
  #line 226 
  if ((was_assoc != 0 && ((unsigned long)sta->flags & 2UL) == 0UL) && sta->ap == 0) 
    #line 227 
    hostap_event_expired_sta(local->dev,sta);
  #line 229 
  if (sta->timeout_next == (unsigned int)2 && (unsigned int)sta->aid != 0U) {
    #line 229 
    if (skb_queue_empty(& sta->tx_buf) == 0) {
      #line 231 
      hostap_set_tim(local,(int)sta->aid,0);
      #line 232 
      sta->flags &= 4294967287U;
    }
  }
  #line 235 
  if (sta->ap != 0) {
    #line 236 
    if (ap->autom_ap_wds != 0) {
      #line 237 
      printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& sta->addr));
      #line 240 
      hostap_wds_link_oper(local,(u8 *)(& sta->addr),(enum ldv_15516)WDS_DEL);
    }
  }
  else 
    #line 242 
    if (sta->timeout_next == (unsigned int)0) {
      #line 248 
      sta->flags |= 64U;
      #line 249 
      prism2_send_mgmt(local->dev,(unsigned short)8,(char *)0,0,(u8 *)(& sta->addr),(unsigned short)((int)ap->tx_callback_poll));
    }
    else {
      #line 254 
      __le16 resp;
      #line 255 
      char *tmp_4;
      #line 263 
      int tmp_5;
      #line 253 
      int deauth = sta->timeout_next == (unsigned int)2;
      #line 255 
      ;
      #line 255 
      ;
      #line 255 
      ;
      #line 255 
      if (deauth != 0) 
                       #line 255 
                       tmp_4 = (char *)"deauthentication"; else 
                                                                #line 255 
                                                                tmp_4 = (char *)"disassociation";
      #line 255 
      ;
      #line 255 
      printk((char *)"\001",(char *)(& (local->dev)->name),tmp_4,(u8 *)(& sta->addr),sta->last_rx,jiffies);
      #line 261 
      if (deauth != 0) 
                       #line 261 
                       resp = (unsigned short)2U; else 
                                                       #line 261 
                                                       resp = (unsigned short)4U;
      #line 263 
      ;
      #line 263 
      if (deauth != 0) 
                       #line 263 
                       tmp_5 = 192; else 
                                         #line 263 
                                         tmp_5 = 160;
      #line 263 
      ;
      #line 263 
      prism2_send_mgmt(local->dev,(unsigned short)tmp_5,(char *)(& resp),2,(u8 *)(& sta->addr),(unsigned short)0);
    }
  #line 269 
  if (sta->timeout_next == (unsigned int)2) {
    #line 270 
    if (((unsigned long)sta->flags & 16UL) != 0UL) 
                                                   #line 271 
                                                   printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& sta->addr)); else 
                                                                    #line 276 
                                                                    ap_free_sta(ap,sta);
    #line 277 
    return;
  }
  #line 280 
  if (sta->timeout_next == (unsigned int)0) {
    #line 281 
    sta->timeout_next = 1;
    #line 282 
    sta->timer.expires = jiffies + 250UL;
  }
  else {
    #line 284 
    sta->timeout_next = 2;
    #line 285 
    sta->timer.expires = jiffies + 250UL;
  }
  #line 288 
  add_timer(& sta->timer);
  #line 289 
  return;
}

#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_deauth_all_stas(struct net_device *dev, struct ap_data *ap, int resend)
{
  #line 295 
  u8 addr[6U];
  #line 296 
  __le16 resp;
  #line 297 
  int i;
  #line 299 
  printk((char *)"\001",(char *)(& dev->name));
  #line 300 
  eth_broadcast_addr((u8 *)(& addr));
  #line 302 
  resp = (unsigned short)2U;
  #line 308 
  i = 0;
  #line 308 
  while (i <= 4) {
    #line 309 
    prism2_send_mgmt(dev,(unsigned short)192,(char *)(& resp),2,(u8 *)(& addr),(unsigned short)0);
    #line 313 
    if (resend == 0 || ap->num_sta <= 0) 
                                         #line 314 
                                         return;
    {
      #line 316 
      unsigned long __ms = 50UL;
      #line 316 
      while (1) {
        #line 316 
        unsigned long tmp;
        #line 316 
        tmp = __ms;
        #line 316 
        __ms --;
        #line 316 
        ;
        #line 316 
        if (! (tmp != 0UL)) 
                            #line 316 
                            break;
        #line 316 
        __const_udelay(4295000UL);
      }
    }
    #line 308 
    i ++;
  }
  #line 321 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_control_proc_show(struct seq_file *m, void *v)
{
  #line 324 
  char *policy_txt;
  #line 325 
  struct mac_entry *entry;
  #line 323 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 327 
  if (v == (void *)1) {
    #line 328 
    switch ((unsigned int)ap->mac_restrictions.policy) {
      #line 329 
      case (unsigned int)0: 
                            #line 329 
      ;
      #line 330 
      policy_txt = (char *)"open";
      #line 331 
      break;
      #line 332 
      case (unsigned int)1: 
                            #line 332 
      ;
      #line 333 
      policy_txt = (char *)"allow";
      #line 334 
      break;
      #line 335 
      case (unsigned int)2: 
                            #line 335 
      ;
      #line 336 
      policy_txt = (char *)"deny";
      #line 337 
      break;
      #line 338 
      default: 
               #line 338 
      ;
      #line 339 
      policy_txt = (char *)"unknown";
      #line 340 
      break;
    }
    #line 342 
    seq_printf(m,(char *)"MAC policy: %s\n",policy_txt);
    #line 343 
    seq_printf(m,(char *)"MAC entries: %u\n",ap->mac_restrictions.entries);
    #line 344 
    seq_puts(m,(char *)"MAC list:\n");
    #line 345 
    return 0;
  }
  #line 348 
  entry = (struct mac_entry *)v;
  #line 349 
  seq_printf(m,(char *)"%pM\n",(u8 *)(& entry->addr));
  #line 350 
  return 0;
}

#line 353  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void *ap_control_proc_start(struct seq_file *m, loff_t *_pos)
{
  #line 355 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 356 
  cif_spin_lock_bh_lock_of_mac_restrictions(& ap->mac_restrictions.lock);
  #line 357 
  return (void *)seq_list_start_head(& ap->mac_restrictions.mac_list,*_pos);
}

#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void *ap_control_proc_next(struct seq_file *m, void *v, loff_t *_pos)
{
  #line 362 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 363 
  return (void *)seq_list_next(v,& ap->mac_restrictions.mac_list,_pos);
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_control_proc_stop(struct seq_file *m, void *v)
{
  #line 368 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 369 
  cif_spin_unlock_bh_lock_of_mac_restrictions(& ap->mac_restrictions.lock);
  #line 370 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static struct seq_operations ap_control_proc_seqops = {.start = & ap_control_proc_start, .stop = & ap_control_proc_stop, .next = & ap_control_proc_next, .show = & ap_control_proc_show};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int ap_control_add_mac(struct mac_restrictions *mac_restrictions, u8 *mac)
{
  #line 381 
  struct mac_entry *entry;
  #line 383 
  entry = (struct mac_entry *)kmalloc_2(24UL,3264U);
  #line 384 
  if (entry == (struct mac_entry *)0) 
                                      #line 385 
                                      return -12;
  #line 387 
  memcpy((void *)(& entry->addr),(void *)mac,6UL);
  #line 389 
  cif_spin_lock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 390 
  list_add_tail(& entry->list,& mac_restrictions->mac_list);
  #line 391 
  (mac_restrictions->entries) ++;
  #line 392 
  cif_spin_unlock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 394 
  return 0;
}

#line 398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int ap_control_del_mac(struct mac_restrictions *mac_restrictions, u8 *mac)
{
  #line 400 
  struct list_head *ptr;
  #line 401 
  struct mac_entry *entry;
  #line 403 
  cif_spin_lock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 404 
  ptr = mac_restrictions->mac_list.next;
  #line 404 
  while (& mac_restrictions->mac_list != ptr) {
    {
      #line 406 
      void *__mptr;
      #line 406 
      __mptr = (void *)ptr;
      #line 406 
      entry = ((struct mac_entry *)__mptr);
      #line 408 
      if ((int)ether_addr_equal((u8 *)(& entry->addr),mac) != 0) {
        #line 409 
        list_del_1(ptr);
        #line 410 
        kfree((void *)entry);
        #line 411 
        (mac_restrictions->entries) --;
        #line 412 
        cif_spin_unlock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
        #line 413 
        return 0;
      }
    }
    #line 405 
    ptr = ptr->next;
  }
  #line 416 
  cif_spin_unlock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 417 
  return -1;
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_control_mac_deny(struct mac_restrictions *mac_restrictions, u8 *mac)
{
  #line 431 
  void *__mptr;
  #line 424 
  struct mac_entry *entry;
  #line 425 
  int found = 0;
  #line 427 
  if (mac_restrictions->policy == (unsigned int)0) 
                                                   #line 428 
                                                   return 0;
  #line 430 
  cif_spin_lock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 431 
  __mptr = (void *)mac_restrictions->mac_list.next;
  #line 431 
  entry = ((struct mac_entry *)__mptr);
  #line 431 
  while (& entry->list != & mac_restrictions->mac_list) {
    #line 431 
    void *__mptr_0;
    #line 432 
    if ((int)ether_addr_equal((u8 *)(& entry->addr),mac) != 0) {
      #line 433 
      found = 1;
      #line 434 
      break;
    }
    #line 431 
    __mptr_0 = (void *)entry->list.next;
    #line 431 
    entry = ((struct mac_entry *)__mptr_0);
  }
  #line 437 
  cif_spin_unlock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 439 
  if (mac_restrictions->policy == (unsigned int)1) 
                                                   #line 440 
                                                   return found == 0; else 
                                                                    #line 442 
                                                                    return found;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void ap_control_flush_macs(struct mac_restrictions *mac_restrictions)
{
  #line 448 
  struct list_head *ptr;
  #line 448 
  struct list_head *n;
  #line 449 
  struct mac_entry *entry;
  #line 451 
  if (mac_restrictions->entries == 0U) 
                                       #line 452 
                                       return;
  #line 454 
  cif_spin_lock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 455 
  ptr = mac_restrictions->mac_list.next;
  #line 455 
  n = ptr->next;
  #line 455 
  while (& mac_restrictions->mac_list != ptr) {
    {
      #line 458 
      void *__mptr;
      #line 458 
      __mptr = (void *)ptr;
      #line 458 
      entry = ((struct mac_entry *)__mptr);
      #line 459 
      list_del_1(ptr);
      #line 460 
      kfree((void *)entry);
    }
    #line 456 
    ptr = n;
    #line 457 
    n = ptr->next;
  }
  #line 462 
  mac_restrictions->entries = 0U;
  #line 463 
  cif_spin_unlock_bh_lock_of_mac_restrictions(& mac_restrictions->lock);
  #line 464 
  return;
}

#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int ap_control_kick_mac(struct ap_data *ap, struct net_device *dev, u8 *mac)
{
  #line 469 
  struct sta_info *sta;
  #line 470 
  __le16 resp;
  #line 472 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 473 
  sta = ap_get_sta(ap,mac);
  #line 474 
  if (sta != (struct sta_info *)0) {
    #line 475 
    ap_sta_hash_del(ap,sta);
    #line 476 
    list_del_1(& sta->list);
  }
  #line 478 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 480 
  if (sta == (struct sta_info *)0) 
                                   #line 481 
                                   return -22;
  #line 483 
  resp = (unsigned short)2U;
  #line 484 
  prism2_send_mgmt(dev,(unsigned short)192,(char *)(& resp),2,(u8 *)(& sta->addr),(unsigned short)0);
  #line 487 
  if (((unsigned long)sta->flags & 2UL) != 0UL && sta->ap == 0) 
                                                                #line 488 
                                                                hostap_event_expired_sta(dev,sta);
  #line 490 
  ap_free_sta(ap,sta);
  #line 492 
  return 0;
}

#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void ap_control_kickall(struct ap_data *ap)
{
  #line 500 
  struct list_head *ptr;
  #line 500 
  struct list_head *n;
  #line 501 
  struct sta_info *sta;
  #line 503 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 504 
  ptr = ap->sta_list.next;
  #line 504 
  n = ptr->next;
  #line 504 
  while (& ap->sta_list != ptr) {
    {
      #line 506 
      void *__mptr;
      #line 506 
      __mptr = (void *)ptr;
      #line 506 
      sta = ((struct sta_info *)__mptr);
      #line 507 
      ap_sta_hash_del(ap,sta);
      #line 508 
      list_del_1(& sta->list);
      #line 509 
      if ((((unsigned long)sta->flags & 2UL) != 0UL && sta->ap == 0) && sta->local != (local_info_t *)0) 
        #line 510 
        hostap_event_expired_sta((sta->local)->dev,sta);
      #line 511 
      ap_free_sta(ap,sta);
    }
    #line 504 
    ptr = n;
    #line 505 
    n = ptr->next;
  }
  #line 513 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 514 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_ap_proc_show(struct seq_file *m, void *v)
{
  #line 522 
  int i;
  #line 521 
  struct sta_info *sta = (struct sta_info *)v;
  #line 524 
  if (v == (void *)1) {
    #line 525 
    seq_printf(m,(char *)"# BSSID CHAN SIGNAL NOISE RATE SSID FLAGS\n");
    #line 526 
    return 0;
  }
  #line 529 
  if (sta->ap == 0) 
                    #line 530 
                    return 0;
  #line 532 
  seq_printf(m,(char *)"%pM %d %d %d %d \'",(u8 *)(& sta->addr),sta->u.ap.channel,(int)sta->last_rx_signal,(int)sta->last_rx_silence,(int)sta->last_rx_rate);
  #line 537 
  i = 0;
  #line 537 
  while (sta->u.ap.ssid_len > i) {
    #line 538 
    if ((unsigned int)sta->u.ap.ssid[i] + 224U <= 94U) 
                                                       #line 539 
                                                       seq_putc(m,(char)((int)((char)sta->u.ap.ssid[i]))); else 
                                                                    #line 541 
                                                                    seq_printf(m,(char *)"<%02x>",(int)sta->u.ap.ssid[i]);
    #line 537 
    i ++;
  }
  #line 544 
  seq_putc(m,(char)39);
  #line 545 
  if (((int)sta->capability & 1) != 0) 
                                       #line 546 
                                       seq_puts(m,(char *)" [ESS]");
  #line 547 
  if (((int)sta->capability & 2) != 0) 
                                       #line 548 
                                       seq_puts(m,(char *)" [IBSS]");
  #line 549 
  if (((int)sta->capability & 16) != 0) 
                                        #line 550 
                                        seq_puts(m,(char *)" [WEP]");
  #line 551 
  seq_putc(m,(char)10);
  #line 552 
  return 0;
}

#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void *prism2_ap_proc_start(struct seq_file *m, loff_t *_pos)
{
  #line 557 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 558 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 559 
  return (void *)seq_list_start_head(& ap->sta_list,*_pos);
}

#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void *prism2_ap_proc_next(struct seq_file *m, void *v, loff_t *_pos)
{
  #line 564 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 565 
  return (void *)seq_list_next(v,& ap->sta_list,_pos);
}

#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void prism2_ap_proc_stop(struct seq_file *m, void *v)
{
  #line 570 
  struct ap_data *ap = (struct ap_data *)PDE_DATA(file_inode(m->file));
  #line 571 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 572 
  return;
}

#line 574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static struct seq_operations prism2_ap_proc_seqops = {.start = & prism2_ap_proc_start, .stop = & prism2_ap_proc_stop, .next = & prism2_ap_proc_next, .show = & prism2_ap_proc_show};
#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_check_sta_fw_version(struct ap_data *ap, int sta_fw_ver)
{
  #line 585 
  if (ap == (struct ap_data *)0) 
                                 #line 586 
                                 return;
  #line 588 
  if (sta_fw_ver == 2048) {
    #line 589 
    printk((char *)"\001");
    #line 591 
    ap->nullfunc_ack = 1;
  }
  else 
       #line 593 
       ap->nullfunc_ack = 0;
  #line 595 
  if (sta_fw_ver == 66562) 
                           #line 596 
                           printk((char *)"\001",(char *)(& ((ap->local)->dev)->name));
  #line 599 
  return;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_ap_tx_cb(struct sk_buff *skb, int ok, void *data)
{
  #line 607 
  struct ieee80211_hdr *hdr;
  #line 619 
  int tmp;
  #line 606 
  struct ap_data *ap = (struct ap_data *)data;
  #line 609 
  if ((ap->local)->hostapd == 0 || (ap->local)->apdev == (struct net_device *)0) {
    #line 610 
    consume_skb(skb);
    #line 611 
    return;
  }
  #line 617 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 618 
  hdr->frame_control = (unsigned short)((unsigned int)hdr->frame_control & 65532U);
  #line 619 
  if (ok != 0) 
               #line 619 
               tmp = 2; else 
                             #line 619 
                             tmp = 1;
  #line 619 
  hdr->frame_control = (unsigned short)((int)hdr->frame_control | tmp);
  #line 621 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = (ap->local)->apdev;
  #line 622 
  ;
  #line 622 
  skb_pull(skb,(unsigned int)hostap_80211_get_hdrlen((unsigned short)((int)hdr->frame_control)));
  #line 623 
  skb->pkt_type = (unsigned char)3U;
  #line 624 
  skb->protocol = (unsigned short)1024U;
  #line 625 
  memset((void *)(& skb->cb),0,48UL);
  #line 626 
  netif_rx(skb);
  #line 627 
  return;
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_ap_tx_cb_auth(struct sk_buff *skb, int ok, void *data)
{
  #line 636 
  struct ieee80211_hdr *hdr;
  #line 637 
  u16 auth_alg;
  #line 637 
  u16 auth_transaction;
  #line 637 
  u16 status;
  #line 638 
  __le16 *pos;
  #line 657 
  __le16 *tmp_0;
  #line 658 
  __le16 *tmp_1;
  #line 659 
  __le16 *tmp_2;
  #line 634 
  struct ap_data *ap = (struct ap_data *)data;
  #line 635 
  struct net_device *dev = (ap->local)->dev;
  #line 639 
  struct sta_info *sta = (struct sta_info *)0;
  #line 640 
  char *txt = (char *)0;
  #line 642 
  if ((ap->local)->hostapd != 0) {
    #line 643 
    consume_skb(skb);
    #line 644 
    return;
  }
  #line 647 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 648 
  if (ieee80211_is_auth((unsigned short)((int)hdr->frame_control))) {
    #line 648 
    if (skb->len <= 29U) {
      #line 648 
      _LOR: {
              #line 650 
              printk((char *)"\001",(char *)(& dev->name));
              #line 652 
              consume_skb(skb);
              #line 653 
              return;
            }
    }
  }
  else 
       #line 648 
       goto _LOR;
  #line 656 
  pos = (__le16 *)(skb->data + 24U);
  #line 657 
  tmp_0 = pos;
  #line 657 
  pos ++;
  #line 657 
  auth_alg = *tmp_0;
  #line 658 
  tmp_1 = pos;
  #line 658 
  pos ++;
  #line 658 
  auth_transaction = *tmp_1;
  #line 659 
  tmp_2 = pos;
  #line 659 
  pos ++;
  #line 659 
  status = *tmp_2;
  #line 661 
  if (ok == 0) {
    #line 662 
    txt = (char *)"frame was not ACKed";
    #line 663 
    goto done;
  }
  #line 666 
  cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 667 
  sta = ap_get_sta(ap,(u8 *)(& hdr->addr1));
  #line 668 
  if (sta != (struct sta_info *)0) 
                                   #line 669 
                                   atomic_inc_1(& sta->users);
  #line 670 
  cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 672 
  if (sta == (struct sta_info *)0) {
    #line 673 
    txt = (char *)"STA not found";
    #line 674 
    goto done;
  }
  #line 677 
  if ((unsigned int)status == 0U && ((unsigned int)auth_alg == 0U && (unsigned int)auth_transaction == 2U || (unsigned int)auth_alg == 1U && (unsigned int)auth_transaction == 4U)) {
    #line 680 
    txt = (char *)"STA authenticated";
    #line 681 
    sta->flags |= 1U;
    #line 682 
    sta->last_auth = jiffies;
  }
  else 
    #line 683 
    if ((unsigned int)status != 0U) 
                                    #line 684 
                                    txt = (char *)"authentication failed";
  #line 686 
  done: 
        #line 686 
  ;
  #line 687 
  if (sta != (struct sta_info *)0) 
                                   #line 688 
                                   atomic_dec_1(& sta->users);
  #line 689 
  if (txt != (char *)0) 
                        #line 690 
                        printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr1),(int)auth_alg,(int)auth_transaction,(int)status,txt);
  #line 695 
  consume_skb(skb);
  #line 696 
  return;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_ap_tx_cb_assoc(struct sk_buff *skb, int ok, void *data)
{
  #line 704 
  struct ieee80211_hdr *hdr;
  #line 705 
  u16 status;
  #line 706 
  __le16 *pos;
  #line 743 
  __le16 *tmp_1;
  #line 702 
  struct ap_data *ap = (struct ap_data *)data;
  #line 703 
  struct net_device *dev = (ap->local)->dev;
  #line 707 
  struct sta_info *sta = (struct sta_info *)0;
  #line 708 
  char *txt = (char *)0;
  #line 710 
  if ((ap->local)->hostapd != 0) {
    #line 711 
    consume_skb(skb);
    #line 712 
    return;
  }
  #line 715 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 716 
  if (ieee80211_is_assoc_resp((unsigned short)((int)hdr->frame_control))) {
    #line 716 
    _LAND: 
           #line 717 
    ;
    #line 717 
    if (skb->len <= 27U) {
      #line 716 
      _LOR: {
              #line 719 
              printk((char *)"\001",(char *)(& dev->name));
              #line 721 
              consume_skb(skb);
              #line 722 
              return;
            }
    }
  }
  else {
    #line 717 
    if (ieee80211_is_reassoc_resp((unsigned short)((int)hdr->frame_control))) 
      #line 716 
      goto _LAND; else 
                       #line 716 
                       goto _LOR;
  }
  #line 725 
  if (ok == 0) {
    #line 726 
    txt = (char *)"frame was not ACKed";
    #line 727 
    goto done;
  }
  #line 730 
  cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 731 
  sta = ap_get_sta(ap,(u8 *)(& hdr->addr1));
  #line 732 
  if (sta != (struct sta_info *)0) 
                                   #line 733 
                                   atomic_inc_1(& sta->users);
  #line 734 
  cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 736 
  if (sta == (struct sta_info *)0) {
    #line 737 
    txt = (char *)"STA not found";
    #line 738 
    goto done;
  }
  #line 741 
  pos = (__le16 *)(skb->data + 24U);
  #line 742 
  pos ++;
  #line 743 
  tmp_1 = pos;
  #line 743 
  pos ++;
  #line 743 
  status = *tmp_1;
  #line 744 
  if ((unsigned int)status == 0U) {
    #line 745 
    if (((unsigned long)sta->flags & 2UL) == 0UL) 
                                                  #line 746 
                                                  hostap_event_new_sta(dev,sta);
    #line 747 
    txt = (char *)"STA associated";
    #line 748 
    sta->flags |= 2U;
    #line 749 
    sta->last_assoc = jiffies;
  }
  else 
       #line 751 
       txt = (char *)"association failed";
  #line 753 
  done: 
        #line 753 
  ;
  #line 754 
  if (sta != (struct sta_info *)0) 
                                   #line 755 
                                   atomic_dec_1(& sta->users);
  #line 756 
  if (txt != (char *)0) 
                        #line 757 
                        printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr1),txt);
  #line 760 
  consume_skb(skb);
  #line 761 
  return;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_ap_tx_cb_poll(struct sk_buff *skb, int ok, void *data)
{
  #line 768 
  struct ieee80211_hdr *hdr;
  #line 769 
  struct sta_info *sta;
  #line 767 
  struct ap_data *ap = (struct ap_data *)data;
  #line 771 
  if (skb->len <= 23U) 
                       #line 772 
                       goto fail;
  #line 773 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 774 
  if (ok != 0) {
    #line 775 
    cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
    #line 776 
    sta = ap_get_sta(ap,(u8 *)(& hdr->addr1));
    #line 777 
    if (sta != (struct sta_info *)0) 
                                     #line 778 
                                     sta->flags &= 4294967231U;
    #line 779 
    cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  }
  else 
       #line 781 
       printk((char *)"\001",(char *)(& ((ap->local)->dev)->name),(u8 *)(& hdr->addr1));
  #line 786 
  fail: 
        #line 786 
  ;
  #line 787 
  consume_skb(skb);
  #line 788 
  return;
}

#line 792  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_init_data(local_info_t *local)
{
  #line 803 
  int tmp;
  #line 804 
  int tmp_0;
  #line 806 
  int tmp_1;
  #line 807 
  int tmp_2;
  #line 794 
  struct ap_data *ap = local->ap;
  #line 796 
  if (ap == (struct ap_data *)0) {
    #line 797 
    printk((char *)"\001");
    #line 798 
    return;
  }
  #line 800 
  memset((void *)ap,0,3544UL);
  #line 801 
  ap->local = local;
  #line 803 
  if (other_ap_policy[local->card_idx] >= 0) 
                                             #line 803 
                                             tmp = local->card_idx; else 
                                                                    #line 803 
                                                                    tmp = 0;
  #line 803 
  ap->ap_policy = (enum ldv_15509)other_ap_policy[tmp];
  #line 804 
  if (ap_bridge_packets[local->card_idx] >= 0) 
                                               #line 804 
                                               tmp_0 = local->card_idx; else 
                                                                    #line 804 
                                                                    tmp_0 = 0;
  #line 804 
  ap->bridge_packets = ap_bridge_packets[tmp_0];
  #line 806 
  if (ap_max_inactivity[local->card_idx] >= 0) 
                                               #line 806 
                                               tmp_1 = local->card_idx; else 
                                                                    #line 806 
                                                                    tmp_1 = 0;
  #line 805 
  ap->max_inactivity = (unsigned int)(ap_max_inactivity[tmp_1] * 250);
  #line 807 
  if (autom_ap_wds[local->card_idx] >= 0) 
                                          #line 807 
                                          tmp_2 = local->card_idx; else 
                                                                    #line 807 
                                                                    tmp_2 = 0;
  #line 807 
  ap->autom_ap_wds = autom_ap_wds[tmp_2];
  #line 809 
  spinlock_check(& ap->sta_table_lock);
  {
    #line 809 
    struct lock_class_key __key;
    #line 809 
    __raw_spin_lock_init(& ap->sta_table_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ap->sta_table_lock)->rlock",& __key);
  }
  #line 810 
  INIT_LIST_HEAD_0(& ap->sta_list);
  {
    #line 813 
    struct lock_class_key __key_0;
    #line 813 
    __init_work(& (local->ap)->add_sta_proc_queue,0);
    #line 813 
    atomic_long_t __constr_expr_34 = {.counter = 137438953408LL};
    #line 813 
    (local->ap)->add_sta_proc_queue.data = __constr_expr_34;
    #line 813 
    lockdep_init_map(& (local->ap)->add_sta_proc_queue.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 813 
    INIT_LIST_HEAD_0(& (local->ap)->add_sta_proc_queue.entry);
    #line 813 
    (local->ap)->add_sta_proc_queue.func = & handle_add_proc_queue;
  }
  #line 815 
  ap->tx_callback_idx = hostap_tx_callback_register(local,& hostap_ap_tx_cb,(void *)ap);
  #line 817 
  if ((unsigned int)ap->tx_callback_idx == 0U) 
                                               #line 818 
                                               printk((char *)"\001",(char *)(& (local->dev)->name));
  {
    #line 821 
    struct lock_class_key __key_1;
    #line 821 
    __init_work(& (local->ap)->wds_oper_queue,0);
    #line 821 
    atomic_long_t __constr_expr_35 = {.counter = 137438953408LL};
    #line 821 
    (local->ap)->wds_oper_queue.data = __constr_expr_35;
    #line 821 
    lockdep_init_map(& (local->ap)->wds_oper_queue.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 821 
    INIT_LIST_HEAD_0(& (local->ap)->wds_oper_queue.entry);
    #line 821 
    (local->ap)->wds_oper_queue.func = & handle_wds_oper_queue;
  }
  #line 823 
  ap->tx_callback_auth = hostap_tx_callback_register(local,& hostap_ap_tx_cb_auth,(void *)ap);
  #line 825 
  ap->tx_callback_assoc = hostap_tx_callback_register(local,& hostap_ap_tx_cb_assoc,(void *)ap);
  #line 827 
  ap->tx_callback_poll = hostap_tx_callback_register(local,& hostap_ap_tx_cb_poll,(void *)ap);
  #line 829 
  if (((unsigned int)ap->tx_callback_auth == 0U || (unsigned int)ap->tx_callback_assoc == 0U) || (unsigned int)ap->tx_callback_poll == 0U) 
    #line 831 
    printk((char *)"\001",(char *)(& (local->dev)->name));
  #line 834 
  spinlock_check(& ap->mac_restrictions.lock);
  {
    #line 834 
    struct lock_class_key __key_2;
    #line 834 
    __raw_spin_lock_init(& ap->mac_restrictions.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&ap->mac_restrictions.lock)->rlock",& __key_2);
  }
  #line 835 
  INIT_LIST_HEAD_0(& ap->mac_restrictions.mac_list);
  #line 838 
  ap->initialized = 1;
  #line 839 
  return;
}

#line 842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_init_ap_proc(local_info_t *local)
{
  #line 844 
  struct ap_data *ap = local->ap;
  #line 846 
  ap->proc = local->proc;
  #line 847 
  if (ap->proc == (struct proc_dir_entry *)0) 
                                              #line 848 
                                              return;
  #line 851 
  proc_create_single_data((char *)"ap_debug",(unsigned short)0,ap->proc,& ap_debug_proc_show,(void *)ap);
  #line 855 
  proc_create_seq_private((char *)"ap_control",(unsigned short)0,ap->proc,& ap_control_proc_seqops,0U,(void *)ap);
  #line 857 
  proc_create_seq_private((char *)"ap",(unsigned short)0,ap->proc,& prism2_ap_proc_seqops,0U,(void *)ap);
  #line 858 
  return;
}

#line 863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_free_data(struct ap_data *ap)
{
  #line 882 
  void *__mptr;
  #line 882 
  void *__mptr_0;
  #line 865 
  struct sta_info *n;
  #line 865 
  struct sta_info *sta;
  #line 867 
  if (ap == (struct ap_data *)0 || ap->initialized == 0) {
    #line 868 
    printk((char *)"\001");
    #line 870 
    return;
  }
  #line 873 
  cif_flush_work(& ap->add_sta_proc_queue);
  #line 876 
  cif_flush_work(& ap->wds_oper_queue);
  #line 877 
  if (ap->crypt != (struct lib80211_crypto_ops *)0) 
                                                    #line 878 
                                                    (*((ap->crypt)->deinit))(ap->crypt_priv);
  #line 879 
  ap->crypt_priv = (void *)0;
  #line 879 
  ap->crypt = (struct lib80211_crypto_ops *)0;
  #line 882 
  __mptr = (void *)ap->sta_list.next;
  #line 882 
  sta = ((struct sta_info *)__mptr);
  #line 882 
  __mptr_0 = (void *)sta->list.next;
  #line 883 
  n = ((struct sta_info *)__mptr_0);
  #line 882 
  while (& sta->list != & ap->sta_list) {
    #line 882 
    void *__mptr_1;
    #line 883 
    ap_sta_hash_del(ap,sta);
    #line 884 
    list_del_1(& sta->list);
    #line 885 
    if ((((unsigned long)sta->flags & 2UL) != 0UL && sta->ap == 0) && sta->local != (local_info_t *)0) 
      #line 886 
      hostap_event_expired_sta((sta->local)->dev,sta);
    #line 887 
    ap_free_sta(ap,sta);
    #line 882 
    sta = n;
    #line 882 
    __mptr_1 = (void *)n->list.next;
    #line 882 
    n = ((struct sta_info *)__mptr_1);
  }
  #line 891 
  if (ap->proc != (struct proc_dir_entry *)0) 
                                              #line 892 
                                              remove_proc_entry((char *)"ap_debug",ap->proc);
  #line 897 
  if (ap->proc != (struct proc_dir_entry *)0) {
    #line 898 
    remove_proc_entry((char *)"ap",ap->proc);
    #line 899 
    remove_proc_entry((char *)"ap_control",ap->proc);
  }
  #line 901 
  ap_control_flush_macs(& ap->mac_restrictions);
  #line 904 
  ap->initialized = 0;
  #line 905 
  return;
}

#line 909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static struct sta_info *ap_get_sta(struct ap_data *ap, u8 *sta)
{
  #line 911 
  struct sta_info *s;
  #line 913 
  s = ap->sta_hash[(int)*(sta + 5U)];
  #line 914 
  while (1) {
    #line 914 
    if (s != (struct sta_info *)0) {
      #line 914 
      if (ether_addr_equal((u8 *)(& s->addr),sta)) 
                                                   #line 914 
                                                   break;
    }
    else 
         #line 914 
         break;
    #line 915 
    s = s->hnext;
  }
  #line 916 
  return s;
}

#line 923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void prism2_send_mgmt(struct net_device *dev, u16 type_subtype, char *body, int body_len, u8 *addr, u16 tx_cb_idx)
{
  #line 927 
  struct hostap_interface *iface;
  #line 928 
  local_info_t *local;
  #line 929 
  struct ieee80211_hdr *hdr;
  #line 930 
  u16 fc;
  #line 931 
  struct sk_buff *skb;
  #line 932 
  struct hostap_skb_tx_data *meta;
  #line 933 
  int hdrlen;
  #line 935 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 936 
  local = iface->local;
  #line 937 
  dev = local->dev;
  #line 938 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 940 
  if ((dev->flags & 1U) == 0U) {
    #line 941 
    printk((char *)"\001",(char *)(& dev->name));
    #line 943 
    return;
  }
  #line 946 
  skb = dev_alloc_skb((unsigned int)body_len + 30U);
  #line 947 
  if (skb == (struct sk_buff *)0) {
    #line 948 
    printk((char *)"\001",(char *)(& dev->name));
    #line 950 
    return;
  }
  #line 953 
  fc = type_subtype;
  #line 954 
  hdrlen = hostap_80211_get_hdrlen((unsigned short)((int)type_subtype));
  #line 955 
  hdr = (struct ieee80211_hdr *)skb_put_zero(skb,(unsigned int)hdrlen);
  #line 956 
  if (body != (char *)0) 
                         #line 957 
                         skb_put_data(skb,(void *)body,(unsigned int)body_len);
  #line 963 
  memcpy((void *)(& hdr->addr1),(void *)addr,6UL);
  #line 964 
  if ((int)ieee80211_is_data((unsigned short)((int)hdr->frame_control)) != 0) {
    #line 965 
    fc = (unsigned short)((unsigned int)fc | 512U);
    #line 966 
    memcpy((void *)(& hdr->addr2),(void *)dev->dev_addr,6UL);
    #line 967 
    memcpy((void *)(& hdr->addr3),(void *)dev->dev_addr,6UL);
  }
  else {
    #line 968 
    if ((int)ieee80211_is_ctl((unsigned short)((int)hdr->frame_control)) != 0) {
      #line 970 
      eth_zero_addr((u8 *)(& hdr->addr2));
      #line 971 
      eth_zero_addr((u8 *)(& hdr->addr3));
    }
    else {
      #line 973 
      memcpy((void *)(& hdr->addr2),(void *)dev->dev_addr,6UL);
      #line 974 
      memcpy((void *)(& hdr->addr3),(void *)dev->dev_addr,6UL);
    }
  }
  #line 977 
  hdr->frame_control = fc;
  #line 979 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 980 
  memset((void *)meta,0,40UL);
  #line 981 
  meta->magic = 4035589794U;
  #line 982 
  meta->iface = iface;
  #line 983 
  meta->tx_cb_idx = tx_cb_idx;
  #line 985 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = dev;
  #line 986 
  skb_reset_mac_header(skb);
  #line 987 
  skb_reset_network_header(skb);
  #line 988 
  dev_queue_xmit(skb);
  #line 989 
  return;
}

#line 993  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_sta_proc_show(struct seq_file *m, void *v)
{
  #line 996 
  int i;
  #line 1014 
  char *tmp;
  #line 1013 
  char *tmp_0;
  #line 1012 
  char *tmp_1;
  #line 1011 
  char *tmp_2;
  #line 1010 
  char *tmp_3;
  #line 1009 
  char *tmp_4;
  #line 1008 
  char *tmp_5;
  #line 1007 
  int tmp_6;
  #line 1003 
  char *tmp_7;
  #line 1038 
  char *tmp_9;
  #line 995 
  struct sta_info *sta = (struct sta_info *)m->private;
  #line 1002 
  ;
  #line 1002 
  ;
  #line 1014 
  if (((unsigned long)sta->flags & 64UL) != 0UL) 
                                                 #line 1014 
                                                 tmp = (char *)" POLL"; else 
                                                                    #line 1014 
                                                                    tmp = (char *)"";
  #line 1013 
  if (((unsigned long)sta->flags & 32UL) != 0UL) 
                                                 #line 1013 
                                                 tmp_0 = (char *)" AUTHORIZED"; else 
                                                                    #line 1013 
                                                                    tmp_0 = (char *)"";
  #line 1012 
  if (((unsigned long)sta->flags & 16UL) != 0UL) 
                                                 #line 1012 
                                                 tmp_1 = (char *)" PERM"; else 
                                                                    #line 1012 
                                                                    tmp_1 = (char *)"";
  #line 1011 
  if (((unsigned long)sta->flags & 8UL) != 0UL) 
                                                #line 1011 
                                                tmp_2 = (char *)" TIM"; else 
                                                                    #line 1011 
                                                                    tmp_2 = (char *)"";
  #line 1010 
  if (((unsigned long)sta->flags & 4UL) != 0UL) 
                                                #line 1010 
                                                tmp_3 = (char *)" PS"; else 
                                                                    #line 1010 
                                                                    tmp_3 = (char *)"";
  #line 1009 
  if (((unsigned long)sta->flags & 2UL) != 0UL) 
                                                #line 1009 
                                                tmp_4 = (char *)" ASSOC"; else 
                                                                    #line 1009 
                                                                    tmp_4 = (char *)"";
  #line 1008 
  if (((unsigned long)sta->flags & 1UL) != 0UL) 
                                                #line 1008 
                                                tmp_5 = (char *)" AUTH"; else 
                                                                    #line 1008 
                                                                    tmp_5 = (char *)"";
  #line 1002 
  ;
  #line 1002 
  ;
  #line 1007 
  tmp_6 = atomic_read_0(& sta->users);
  #line 1002 
  ;
  #line 1003 
  if (sta->ap != 0) 
                    #line 1003 
                    tmp_7 = (char *)"AP"; else 
                                               #line 1003 
                                               tmp_7 = (char *)"STA";
  #line 1002 
  ;
  #line 1002 
  seq_printf(m,(char *)"%s=%pM\nusers=%d\naid=%d\n",tmp_7,(u8 *)(& sta->addr),tmp_6,(int)sta->aid,sta->flags,tmp_5,tmp_4,tmp_3,tmp_2,tmp_1,tmp_0,tmp,(int)sta->capability,(int)sta->listen_interval);
  #line 1018 
  i = 0;
  #line 1018 
  while ((unsigned int)i <= 31U) {
    #line 1019 
    if ((unsigned int)sta->supported_rates[i] != 0U) {
      #line 1021 
      char *tmp_8;
      #line 1021 
      if (((int)sta->supported_rates[i] & 1) != 0) 
                                                   #line 1021 
                                                   tmp_8 = (char *)".5"; else 
                                                                    #line 1021 
                                                                    tmp_8 = (char *)"";
      #line 1020 
      ;
      #line 1020 
      ;
      #line 1020 
      seq_printf(m,(char *)"%d%sMbps ",((int)sta->supported_rates[i] & 127) / 2,tmp_8);
    }
    #line 1018 
    i ++;
  }
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1038 
  if ((unsigned int)sta->last_rx_rate % 10U != 0U) 
                                                   #line 1038 
                                                   tmp_9 = (char *)".5"; else 
                                                                    #line 1038 
                                                                    tmp_9 = (char *)"";
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  ;
  #line 1023 
  seq_printf(m,(char *)"\njiffies=%lu\nlast_auth=%lu\nlast_assoc=%lu\n",jiffies,sta->last_auth,sta->last_assoc,sta->last_rx,sta->last_tx,sta->rx_packets,sta->tx_packets,sta->rx_bytes,sta->tx_bytes,skb_queue_len(& sta->tx_buf),(int)sta->last_rx_silence,(int)sta->last_rx_signal,(int)((unsigned int)sta->last_rx_rate / 10U),tmp_9,(int)sta->tx_rate,sta->tx_count[0],sta->tx_count[1],sta->tx_count[2],sta->tx_count[3],sta->rx_count[0],sta->rx_count[1],sta->rx_count[2],sta->rx_count[3]);
  #line 1042 
  if ((sta->crypt != (struct lib80211_crypt_data *)0 && (sta->crypt)->ops != (struct lib80211_crypto_ops *)0) && ((sta->crypt)->ops)->print_stats != (void (*)(struct seq_file *, void *))0) 
    #line 1043 
    (*(((sta->crypt)->ops)->print_stats))(m,(sta->crypt)->priv);
  #line 1045 
  if (sta->ap != 0) {
    #line 1046 
    if (sta->u.ap.channel >= 0) 
                                #line 1047 
                                seq_printf(m,(char *)"channel=%d\n",sta->u.ap.channel);
    #line 1048 
    seq_puts(m,(char *)"ssid=");
    #line 1049 
    i = 0;
    #line 1049 
    while (sta->u.ap.ssid_len > i) {
      #line 1050 
      if ((unsigned int)sta->u.ap.ssid[i] + 224U <= 94U) 
                                                         #line 1051 
                                                         seq_putc(m,(char)((int)((char)sta->u.ap.ssid[i]))); else 
                                                                    #line 1053 
                                                                    seq_printf(m,(char *)"<%02x>",(int)sta->u.ap.ssid[i]);
      #line 1049 
      i ++;
    }
    #line 1055 
    seq_putc(m,(char)10);
  }
  #line 1059 
  return 0;
}

#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_add_proc_queue(struct work_struct *work)
{
  #line 1065 
  void *__mptr;
  #line 1067 
  struct sta_info *sta;
  #line 1068 
  char name[20U];
  #line 1069 
  struct add_sta_proc_data *entry;
  #line 1069 
  struct add_sta_proc_data *prev;
  #line 1065 
  __mptr = (void *)work;
  #line 1065 
  struct ap_data *ap = ((struct ap_data *)(__mptr + 18446744073709549304U));
  #line 1071 
  entry = ap->add_sta_proc_entries;
  #line 1072 
  ap->add_sta_proc_entries = (struct add_sta_proc_data *)0;
  #line 1074 
  while (entry != (struct add_sta_proc_data *)0) {
    #line 1075 
    cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
    #line 1076 
    sta = ap_get_sta(ap,(u8 *)(& entry->addr));
    #line 1077 
    if (sta != (struct sta_info *)0) 
                                     #line 1078 
                                     atomic_inc_1(& sta->users);
    #line 1079 
    cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
    #line 1081 
    if (sta != (struct sta_info *)0) {
      #line 1082 
      sprintf((char *)(& name),(char *)"%pM",(u8 *)(& sta->addr));
      #line 1083 
      sta->proc = proc_create_single_data((char *)(& name),(unsigned short)0,ap->proc,& prism2_sta_proc_show,(void *)sta);
      #line 1087 
      atomic_dec_1(& sta->users);
    }
    #line 1090 
    prev = entry;
    #line 1091 
    entry = entry->next;
    #line 1092 
    kfree((void *)prev);
  }
  #line 1094 
  return;
}

#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static struct sta_info *ap_add_sta(struct ap_data *ap, u8 *addr)
{
  #line 1099 
  struct sta_info *sta;
  #line 1101 
  sta = (struct sta_info *)kzalloc_0(472UL,2592U);
  #line 1102 
  if (sta == (struct sta_info *)0) {
    #line 1103 
    printk((char *)"\001");
    #line 1104 
    return (struct sta_info *)0;
  }
  #line 1108 
  sta->local = ap->local;
  #line 1109 
  skb_queue_head_init(& sta->tx_buf);
  #line 1110 
  memcpy((void *)(& sta->addr),(void *)addr,6UL);
  #line 1112 
  atomic_inc_1(& sta->users);
  #line 1113 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 1114 
  list_add_1(& sta->list,& ap->sta_list);
  #line 1115 
  (ap->num_sta) ++;
  #line 1116 
  ap_sta_hash_add(ap,sta);
  #line 1117 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 1119 
  if (ap->proc != (struct proc_dir_entry *)0) {
    #line 1120 
    struct add_sta_proc_data *entry;
    #line 1123 
    entry = (struct add_sta_proc_data *)kmalloc_2(16UL,2592U);
    #line 1124 
    if (entry != (struct add_sta_proc_data *)0) {
      #line 1125 
      memcpy((void *)(& entry->addr),(void *)(& sta->addr),6UL);
      #line 1126 
      entry->next = ap->add_sta_proc_entries;
      #line 1127 
      ap->add_sta_proc_entries = entry;
      #line 1128 
      cif_schedule_work_0(& ap->add_sta_proc_queue);
    }
    else 
         #line 1130 
         printk((char *)"\001");
  }
  {
    #line 1134 
    struct lock_class_key __key;
    #line 1134 
    init_timer_key(& sta->timer,& ap_handle_timer,0U,(char *)"(&sta->timer)",& __key);
  }
  #line 1135 
  sta->timer.expires = (unsigned long)ap->max_inactivity + jiffies;
  #line 1136 
  if ((ap->local)->hostapd == 0) 
                                 #line 1137 
                                 add_timer(& sta->timer);
  #line 1140 
  return sta;
}

#line 1144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_tx_rate_ok(int rateidx, struct sta_info *sta, local_info_t *local)
{
  #line 1147 
  if ((int)sta->tx_max_rate < rateidx || (((int)sta->tx_supp_rates >> rateidx) & 1) == 0) 
    #line 1149 
    return 0;
  #line 1151 
  if ((unsigned int)local->tx_rate_control != 0U && (((int)local->tx_rate_control >> rateidx) & 1) == 0) 
    #line 1153 
    return 0;
  #line 1155 
  return 1;
}

#line 1159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void prism2_check_tx_rates(struct sta_info *sta)
{
  #line 1161 
  int i;
  #line 1163 
  sta->tx_supp_rates = (unsigned char)0U;
  #line 1164 
  i = 0;
  #line 1164 
  while ((unsigned int)i <= 31U) {
    #line 1165 
    if (((int)sta->supported_rates[i] & 127) == 2) 
                                                   #line 1166 
                                                   sta->tx_supp_rates = (unsigned char)((unsigned int)sta->tx_supp_rates | 1U);
    #line 1167 
    if (((int)sta->supported_rates[i] & 127) == 4) 
                                                   #line 1168 
                                                   sta->tx_supp_rates = (unsigned char)((unsigned int)sta->tx_supp_rates | 2U);
    #line 1169 
    if (((int)sta->supported_rates[i] & 127) == 11) 
                                                    #line 1170 
                                                    sta->tx_supp_rates = (unsigned char)((unsigned int)sta->tx_supp_rates | 4U);
    #line 1171 
    if (((int)sta->supported_rates[i] & 127) == 22) 
                                                    #line 1172 
                                                    sta->tx_supp_rates = (unsigned char)((unsigned int)sta->tx_supp_rates | 8U);
    #line 1164 
    i ++;
  }
  #line 1174 
  sta->tx_rate_idx = ((unsigned char)0U);
  #line 1174 
  sta->tx_rate = ((unsigned char)0U);
  #line 1174 
  sta->tx_max_rate = ((unsigned char)0U);
  #line 1175 
  if (((unsigned long)sta->tx_supp_rates & 1UL) != 0UL) {
    #line 1176 
    sta->tx_max_rate = (unsigned char)0U;
    #line 1177 
    if (ap_tx_rate_ok(0,sta,sta->local) != 0) {
      #line 1178 
      sta->tx_rate = (unsigned char)10U;
      #line 1179 
      sta->tx_rate_idx = (unsigned char)0U;
    }
  }
  #line 1182 
  if (((unsigned long)sta->tx_supp_rates & 2UL) != 0UL) {
    #line 1183 
    sta->tx_max_rate = (unsigned char)1U;
    #line 1184 
    if (ap_tx_rate_ok(1,sta,sta->local) != 0) {
      #line 1185 
      sta->tx_rate = (unsigned char)20U;
      #line 1186 
      sta->tx_rate_idx = (unsigned char)1U;
    }
  }
  #line 1189 
  if (((unsigned long)sta->tx_supp_rates & 4UL) != 0UL) {
    #line 1190 
    sta->tx_max_rate = (unsigned char)2U;
    #line 1191 
    if (ap_tx_rate_ok(2,sta,sta->local) != 0) {
      #line 1192 
      sta->tx_rate = (unsigned char)55U;
      #line 1193 
      sta->tx_rate_idx = (unsigned char)2U;
    }
  }
  #line 1196 
  if (((unsigned long)sta->tx_supp_rates & 8UL) != 0UL) {
    #line 1197 
    sta->tx_max_rate = (unsigned char)3U;
    #line 1198 
    if (ap_tx_rate_ok(3,sta,sta->local) != 0) {
      #line 1199 
      sta->tx_rate = (unsigned char)110U;
      #line 1200 
      sta->tx_rate_idx = (unsigned char)3U;
    }
  }
  #line 1203 
  return;
}

#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_crypt_init(struct ap_data *ap)
{
  #line 1210 
  ap->crypt = lib80211_get_crypto_ops((char *)"WEP");
  #line 1212 
  if (ap->crypt != (struct lib80211_crypto_ops *)0) 
    #line 1213 
    if ((ap->crypt)->init != (void *(*)(int ))0) {
      #line 1214 
      ap->crypt_priv = (*((ap->crypt)->init))(0);
      #line 1215 
      if (ap->crypt_priv == (void *)0) 
                                       #line 1216 
                                       ap->crypt = (struct lib80211_crypto_ops *)0;
      else {
        #line 1218 
        u8 key[13U];
        #line 1219 
        get_random_bytes((void *)(& key),13);
        #line 1220 
        (*((ap->crypt)->set_key))((void *)(& key),13,(u8 *)0U,ap->crypt_priv);
      }
    }
  #line 1226 
  if (ap->crypt == (struct lib80211_crypto_ops *)0) 
                                                    #line 1227 
                                                    printk((char *)"\001");
  #line 1228 
  return;
}

#line 1241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static char *ap_auth_make_challenge(struct ap_data *ap)
{
  #line 1243 
  char *tmpbuf;
  #line 1244 
  struct sk_buff *skb;
  #line 1246 
  if (ap->crypt == (struct lib80211_crypto_ops *)0) {
    #line 1247 
    ap_crypt_init(ap);
    #line 1248 
    if (ap->crypt == (struct lib80211_crypto_ops *)0) 
                                                      #line 1249 
                                                      return (char *)0;
  }
  #line 1252 
  tmpbuf = (char *)kmalloc_2(128UL,2592U);
  #line 1253 
  if (tmpbuf == (char *)0) {
    #line 1254 
    printk((char *)"\001");
    #line 1255 
    return (char *)0;
  }
  #line 1258 
  skb = dev_alloc_skb((unsigned int)(((ap->crypt)->extra_mpdu_prefix_len + 128) + (ap->crypt)->extra_mpdu_postfix_len));
  #line 1261 
  if (skb == (struct sk_buff *)0) {
    #line 1262 
    kfree((void *)tmpbuf);
    #line 1263 
    return (char *)0;
  }
  #line 1266 
  skb_reserve(skb,(ap->crypt)->extra_mpdu_prefix_len);
  #line 1267 
  skb_put_zero(skb,128U);
  #line 1268 
  if ((*((ap->crypt)->encrypt_mpdu))(skb,0,ap->crypt_priv) != 0) {
    #line 1269 
    consume_skb(skb);
    #line 1270 
    kfree((void *)tmpbuf);
    #line 1271 
    return (char *)0;
  }
  #line 1274 
  skb_copy_from_linear_data_offset(skb,(ap->crypt)->extra_mpdu_prefix_len,(void *)tmpbuf,128U);
  #line 1276 
  consume_skb(skb);
  #line 1278 
  return tmpbuf;
}

#line 1283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_authen(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 1288 
  size_t hdrlen;
  #line 1290 
  char body[136U];
  #line 1291 
  int len;
  #line 1291 
  int olen;
  #line 1292 
  u16 auth_alg;
  #line 1292 
  u16 auth_transaction;
  #line 1292 
  u16 status_code;
  #line 1293 
  __le16 *pos;
  #line 1296 
  struct lib80211_crypt_data *crypt;
  #line 1286 
  struct net_device *dev = local->dev;
  #line 1287 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1289 
  struct ap_data *ap = local->ap;
  #line 1290 
  char *challenge = (char *)0;
  #line 1294 
  u16 resp = (unsigned short)0U;
  #line 1295 
  struct sta_info *sta = (struct sta_info *)0;
  #line 1297 
  char *txt = (char *)"";
  #line 1299 
  len = (int)(skb->len + 4294967272U);
  #line 1301 
  hdrlen = (unsigned long)hostap_80211_get_hdrlen((unsigned short)((int)hdr->frame_control));
  #line 1303 
  if (len <= 5) {
    #line 1304 
    printk((char *)"\001",(char *)(& dev->name),len,(u8 *)(& hdr->addr2));
    #line 1306 
    return;
  }
  #line 1309 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1310 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 1311 
  if (sta != (struct sta_info *)0) 
                                   #line 1312 
                                   atomic_inc_1(& sta->users);
  #line 1313 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1315 
  if (sta != (struct sta_info *)0 && sta->crypt != (struct lib80211_crypt_data *)0) 
    #line 1316 
    crypt = sta->crypt;
  else {
    #line 1318 
    int idx = 0;
    #line 1319 
    if ((unsigned long)skb->len >= hdrlen + 3UL) 
                                                 #line 1320 
                                                 idx = (int)*(skb->data + (hdrlen + 3UL)) >> 6;
    #line 1321 
    crypt = local->crypt_info.crypt[idx];
  }
  #line 1324 
  pos = (__le16 *)(skb->data + 24U);
  #line 1325 
  auth_alg = *pos;
  #line 1326 
  pos ++;
  #line 1327 
  auth_transaction = *pos;
  #line 1328 
  pos ++;
  #line 1329 
  status_code = *pos;
  #line 1330 
  pos ++;
  #line 1332 
  if ((int)ether_addr_equal(dev->dev_addr,(u8 *)(& hdr->addr2)) != 0) 
    #line 1332 
    goto _LOR;
  else {
    #line 1332 
    if (ap_control_mac_deny(& ap->mac_restrictions,(u8 *)(& hdr->addr2)) != 0) {
      #line 1332 
      _LOR: {
              #line 1334 
              txt = (char *)"authentication denied";
              #line 1335 
              resp = (unsigned short)1U;
              #line 1336 
              goto fail;
            }
    }
  }
  #line 1339 
  if (! (((unsigned long)local->auth_algs & 1UL) != 0UL && (unsigned int)auth_alg == 0U || ((unsigned long)local->auth_algs & 2UL) != 0UL && (crypt != (struct lib80211_crypt_data *)0 && (unsigned int)auth_alg == 1U))) {
    #line 1344 
    txt = (char *)"unsupported algorithm";
    #line 1345 
    resp = (unsigned short)13U;
    #line 1346 
    goto fail;
  }
  #line 1349 
  if (len > 7) {
    #line 1350 
    u8 *u = (u8 *)pos;
    #line 1351 
    if ((unsigned int)*u == 16U) {
      #line 1352 
      if ((unsigned int)*(u + 1U) != 128U) {
        #line 1353 
        txt = (char *)"invalid challenge len";
        #line 1354 
        resp = (unsigned short)15U;
        #line 1355 
        goto fail;
      }
      #line 1357 
      if (len <= 135) {
        #line 1358 
        txt = (char *)"challenge underflow";
        #line 1359 
        resp = (unsigned short)15U;
        #line 1360 
        goto fail;
      }
      #line 1362 
      challenge = (char *)(u + 2U);
    }
  }
  #line 1366 
  if (sta != (struct sta_info *)0 && sta->ap != 0) {
    {
      #line 1367 
      unsigned long __dummy;
      #line 1367 
      unsigned long __dummy2;
      }
    #line 1367 
    if (1 != 0) {
      {
        #line 1367 
        unsigned long __dummy_0;
        #line 1367 
        unsigned long __dummy2_0;
        }
      #line 1367 
      if (1 != 0) {
        #line 1367 
        if ((long)((sta->u.ap.last_beacon + (unsigned long)(((int)sta->listen_interval * 2500) / 1024)) - jiffies) < 0L) {
          #line 1369 
          printk((char *)"\001",(char *)(& dev->name),(u8 *)(& sta->addr));
          #line 1372 
          sta->ap = 0;
          #line 1373 
          sta->flags = 0U;
          #line 1374 
          sta->u.sta.challenge = (char *)0;
        }
        else 
             #line 1367 
             goto _LAND_0;
      }
      else 
           #line 1367 
           goto _LAND_0;
    }
    else {
      #line 1367 
      _LAND_0: {
                 #line 1376 
                 txt = (char *)"AP trying to authenticate?";
                 #line 1377 
                 resp = (unsigned short)1U;
                 #line 1378 
                 goto fail;
               }
    }
  }
  #line 1382 
  if (! ((unsigned int)auth_alg == 0U && (unsigned int)auth_transaction == 1U || (unsigned int)auth_alg == 1U && ((unsigned int)auth_transaction == 1U || ((unsigned int)auth_transaction == 3U && sta != (struct sta_info *)0) && sta->u.sta.challenge != (char *)0))) {
    #line 1388 
    txt = (char *)"unknown authentication transaction number";
    #line 1389 
    resp = (unsigned short)14U;
    #line 1390 
    goto fail;
  }
  #line 1393 
  if (sta == (struct sta_info *)0) {
    #line 1394 
    txt = (char *)"new STA";
    #line 1396 
    if ((local->ap)->num_sta > 1023) {
      #line 1398 
      txt = (char *)"no more room for new STAs";
      #line 1399 
      resp = (unsigned short)1U;
      #line 1400 
      goto fail;
    }
    #line 1403 
    sta = ap_add_sta(local->ap,(u8 *)(& hdr->addr2));
    #line 1404 
    if (sta == (struct sta_info *)0) {
      #line 1405 
      txt = (char *)"ap_add_sta failed";
      #line 1406 
      resp = (unsigned short)1U;
      #line 1407 
      goto fail;
    }
  }
  #line 1411 
  switch ((int)auth_alg) {
    #line 1412 
    case 0: 
            #line 1412 
    ;
    #line 1413 
    txt = (char *)"authOK";
    #line 1419 
    sta->flags |= 1U;
    #line 1420 
    break;
    #line 1422 
    case 1: 
            #line 1422 
    ;
    #line 1423 
    if ((unsigned int)auth_transaction == 1U) {
      #line 1424 
      if (sta->u.sta.challenge == (char *)0) {
        #line 1425 
        sta->u.sta.challenge = ap_auth_make_challenge(local->ap);
        #line 1427 
        if (sta->u.sta.challenge == (char *)0) {
          #line 1428 
          resp = (unsigned short)1U;
          #line 1429 
          goto fail;
        }
      }
    }
    else {
      #line 1433 
      if (sta->u.sta.challenge == (char *)0 || challenge == (char *)0) 
        #line 1433 
        goto _LOR_0;
      else {
        #line 1434 
        if (memcmp((void *)sta->u.sta.challenge,(void *)challenge,128UL) != 0) 
          #line 1433 
          goto _LOR_0;
        else {
          #line 1437 
          if (! ieee80211_has_protected((unsigned short)((int)hdr->frame_control))) {
            #line 1433 
            _LOR_0: {
                      #line 1438 
                      txt = (char *)"challenge response incorrect";
                      #line 1439 
                      resp = (unsigned short)15U;
                      #line 1440 
                      goto fail;
                    }
          }
        }
      }
      #line 1443 
      txt = (char *)"challenge OK - authOK";
      #line 1449 
      sta->flags |= 1U;
      #line 1450 
      kfree((void *)sta->u.sta.challenge);
      #line 1451 
      sta->u.sta.challenge = (char *)0;
    }
    #line 1453 
    break;
  }
  #line 1456 
  fail: 
        #line 1456 
  ;
  #line 1457 
  pos = (__le16 *)(& body);
  #line 1458 
  *pos = auth_alg;
  #line 1459 
  pos ++;
  #line 1460 
  *pos = (unsigned short)((unsigned int)auth_transaction + 1U);
  #line 1461 
  pos ++;
  #line 1462 
  *pos = resp;
  #line 1463 
  pos ++;
  #line 1464 
  olen = 6;
  #line 1466 
  if ((((unsigned int)resp == 0U && sta != (struct sta_info *)0) && sta->u.sta.challenge != (char *)0) && ((unsigned int)auth_alg == 1U && (unsigned int)auth_transaction == 1U)) {
    #line 1470 
    u8 *tmp_7;
    #line 1471 
    u8 *tmp_8;
    #line 1469 
    u8 *tmp_6 = (u8 *)pos;
    #line 1470 
    tmp_7 = tmp_6;
    #line 1470 
    tmp_6 ++;
    #line 1470 
    *tmp_7 = (unsigned char)16U;
    #line 1471 
    tmp_8 = tmp_6;
    #line 1471 
    tmp_6 ++;
    #line 1471 
    *tmp_8 = (unsigned char)128U;
    #line 1472 
    pos ++;
    #line 1473 
    memcpy((void *)pos,(void *)sta->u.sta.challenge,128UL);
    #line 1474 
    olen += 130;
  }
  #line 1477 
  prism2_send_mgmt(dev,(unsigned short)176,(char *)(& body),olen,(u8 *)(& hdr->addr2),(unsigned short)((int)ap->tx_callback_auth));
  #line 1480 
  if (sta != (struct sta_info *)0) {
    #line 1481 
    sta->last_rx = jiffies;
    #line 1482 
    atomic_dec_1(& sta->users);
  }
  #line 1485 
  if ((unsigned int)resp != 0U) 
                                #line 1486 
                                printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2),(int)auth_alg,(int)auth_transaction,(int)status_code,len,(int)hdr->frame_control,(int)resp,txt);
  #line 1487 
  return;
}

#line 1496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_assoc(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats, int reassoc)
{
  #line 1676 
  int tmp_9;
  #line 1501 
  char body[12U];
  #line 1501 
  char *p;
  #line 1501 
  char *lpos;
  #line 1502 
  int len;
  #line 1502 
  int left;
  #line 1503 
  __le16 *pos;
  #line 1508 
  u8 prev_ap[6U];
  #line 1512 
  int tmp;
  #line 1680 
  int tmp_8;
  #line 1675 
  int tmp_10;
  #line 1499 
  struct net_device *dev = local->dev;
  #line 1500 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1504 
  u16 resp = (unsigned short)0U;
  #line 1505 
  struct sta_info *sta = (struct sta_info *)0;
  #line 1506 
  int send_deauth = 0;
  #line 1507 
  char *txt = (char *)"";
  #line 1510 
  len = (int)(skb->len + 4294967272U);
  #line 1510 
  left = len;
  #line 1512 
  if (reassoc != 0) 
                    #line 1512 
                    tmp = 10; else 
                                   #line 1512 
                                   tmp = 4;
  #line 1512 
  ;
  #line 1512 
  if (tmp > len) {
    #line 1513 
    printk((char *)"\001",(char *)(& dev->name),len,reassoc,(u8 *)(& hdr->addr2));
    #line 1516 
    return;
  }
  #line 1519 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1520 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 1521 
  if (sta == (struct sta_info *)0 || ((unsigned long)sta->flags & 1UL) == 0UL) {
    #line 1522 
    cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
    #line 1523 
    txt = (char *)"trying to associate before authentication";
    #line 1524 
    send_deauth = 1;
    #line 1525 
    resp = (unsigned short)1U;
    #line 1526 
    sta = (struct sta_info *)0;
    #line 1527 
    goto fail;
  }
  #line 1529 
  atomic_inc_1(& sta->users);
  #line 1530 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1532 
  pos = (__le16 *)(skb->data + 24U);
  #line 1533 
  sta->capability = *pos;
  #line 1534 
  pos ++;
  #line 1534 
  left += -2;
  #line 1535 
  sta->listen_interval = *pos;
  #line 1536 
  pos ++;
  #line 1536 
  left += -2;
  #line 1538 
  if (reassoc != 0) {
    #line 1539 
    memcpy((void *)(& prev_ap),(void *)pos,6UL);
    #line 1540 
    pos ++;
    #line 1540 
    pos ++;
    #line 1540 
    pos ++;
    #line 1540 
    left += -6;
  }
  else 
       #line 1542 
       eth_zero_addr((u8 *)(& prev_ap));
  #line 1544 
  if (left > 1) {
    #line 1545 
    unsigned int ileft;
    #line 1546 
    unsigned char *u = (unsigned char *)pos;
    #line 1548 
    if ((unsigned int)*u == 0U) {
      #line 1549 
      u ++;
      #line 1549 
      left --;
      #line 1550 
      ileft = (unsigned int)*u;
      #line 1551 
      u ++;
      #line 1551 
      left --;
      #line 1553 
      if (ileft > (unsigned int)left || ileft > 32U) {
        #line 1554 
        txt = (char *)"SSID overflow";
        #line 1555 
        resp = (unsigned short)1U;
        #line 1556 
        goto fail;
      }
      #line 1559 
      ;
      #line 1559 
      if ((unsigned long)ileft != cif_strlen_1((char *)(& local->essid))) 
        #line 1559 
        goto _LOR;
      else {
        #line 1559 
        if (memcmp((void *)(& local->essid),(void *)u,(unsigned long)ileft) != 0) {
          #line 1559 
          _LOR: {
                  #line 1561 
                  txt = (char *)"not our SSID";
                  #line 1562 
                  resp = (unsigned short)12U;
                  #line 1563 
                  goto fail;
                }
        }
      }
      #line 1566 
      u += (unsigned long)ileft;
      #line 1567 
      left = (int)((unsigned int)left - ileft);
    }
    #line 1570 
    if (left > 1 && (unsigned int)*u == 1U) {
      #line 1571 
      u ++;
      #line 1571 
      left --;
      #line 1572 
      ileft = (unsigned int)*u;
      #line 1573 
      u ++;
      #line 1573 
      left --;
      #line 1575 
      if ((ileft > (unsigned int)left || ileft == 0U) || ileft > 32U) {
        #line 1577 
        txt = (char *)"SUPP_RATES len error";
        #line 1578 
        resp = (unsigned short)1U;
        #line 1579 
        goto fail;
      }
      #line 1582 
      memset((void *)(& sta->supported_rates),0,32UL);
      #line 1584 
      memcpy((void *)(& sta->supported_rates),(void *)u,(unsigned long)ileft);
      #line 1585 
      prism2_check_tx_rates(sta);
      #line 1587 
      u += (unsigned long)ileft;
      #line 1588 
      left = (int)((unsigned int)left - ileft);
    }
    #line 1591 
    if (left > 0) {
      #line 1592 
      printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2),left);
      #line 1595 
      while (left > 0) {
        #line 1596 
        printk((char *)"<%02x>",(int)*u);
        #line 1597 
        u ++;
        #line 1597 
        left --;
      }
      #line 1599 
      printk((char *)"]\n");
    }
  }
  else {
    #line 1602 
    txt = (char *)"frame underflow";
    #line 1603 
    resp = (unsigned short)1U;
    #line 1604 
    goto fail;
  }
  #line 1608 
  if ((unsigned int)sta->aid != 0U) 
                                    #line 1609 
                                    txt = (char *)"OK, old AID";
  else {
    #line 1611 
    cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
    #line 1612 
    sta->aid = (unsigned short)1U;
    #line 1612 
    while ((unsigned int)sta->aid <= 128U) {
      #line 1613 
      if ((local->ap)->sta_aid[(int)sta->aid + -1] == (struct sta_info *)0) 
        #line 1614 
        break;
      #line 1612 
      sta->aid = (u16)((int)sta->aid + 1);
    }
    #line 1615 
    if ((unsigned int)sta->aid > 128U) {
      #line 1616 
      sta->aid = (unsigned short)0U;
      #line 1617 
      cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
      #line 1618 
      resp = (unsigned short)17U;
      #line 1619 
      txt = (char *)"no room for more AIDs";
    }
    else {
      #line 1621 
      (local->ap)->sta_aid[(int)sta->aid + -1] = sta;
      #line 1622 
      cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
      #line 1623 
      txt = (char *)"OK, new AID";
    }
  }
  #line 1627 
  fail: 
        #line 1627 
  ;
  #line 1628 
  pos = (__le16 *)(& body);
  #line 1630 
  if (send_deauth != 0) {
    #line 1631 
    *pos = (unsigned short)9U;
    #line 1632 
    pos ++;
  }
  else {
    #line 1651 
    char *tmp_2;
    #line 1653 
    char *tmp_3;
    #line 1638 
    *pos = (unsigned short)1U;
    #line 1639 
    pos ++;
    #line 1642 
    *pos = resp;
    #line 1643 
    pos ++;
    #line 1645 
    if (sta != (struct sta_info *)0 && (unsigned int)sta->aid != 0U) 
      #line 1645 
      *pos = (unsigned short)((unsigned int)sta->aid | 49152U); else 
                                                                  #line 1645 
                                                                  *pos = (unsigned short)49152U;
    #line 1647 
    pos ++;
    #line 1650 
    p = (char *)pos;
    #line 1651 
    tmp_2 = p;
    #line 1651 
    p ++;
    #line 1651 
    *tmp_2 = (char)1;
    #line 1652 
    lpos = p;
    #line 1653 
    tmp_3 = p;
    #line 1653 
    p ++;
    #line 1653 
    *tmp_3 = (char)0;
    #line 1654 
    if (((unsigned long)local->tx_rate_control & 1UL) != 0UL) {
      #line 1655 
      char *tmp_4;
      #line 1655 
      tmp_4 = p;
      #line 1655 
      p ++;
      #line 1655 
      if (((unsigned long)local->basic_rates & 1UL) != 0UL) 
                                                            #line 1655 
                                                            *tmp_4 = (char)(-126); else 
                                                                    #line 1655 
                                                                    *tmp_4 = (char)2;
      #line 1656 
      *lpos = (char)((int)*lpos + 1);
    }
    #line 1658 
    if (((unsigned long)local->tx_rate_control & 2UL) != 0UL) {
      #line 1659 
      char *tmp_5;
      #line 1659 
      tmp_5 = p;
      #line 1659 
      p ++;
      #line 1659 
      if (((unsigned long)local->basic_rates & 2UL) != 0UL) 
                                                            #line 1659 
                                                            *tmp_5 = (char)(-124); else 
                                                                    #line 1659 
                                                                    *tmp_5 = (char)4;
      #line 1660 
      *lpos = (char)((int)*lpos + 1);
    }
    #line 1662 
    if (((unsigned long)local->tx_rate_control & 4UL) != 0UL) {
      #line 1663 
      char *tmp_6;
      #line 1663 
      tmp_6 = p;
      #line 1663 
      p ++;
      #line 1663 
      if (((unsigned long)local->basic_rates & 4UL) != 0UL) 
                                                            #line 1663 
                                                            *tmp_6 = (char)(-117); else 
                                                                    #line 1663 
                                                                    *tmp_6 = (char)11;
      #line 1665 
      *lpos = (char)((int)*lpos + 1);
    }
    #line 1667 
    if (((unsigned long)local->tx_rate_control & 8UL) != 0UL) {
      #line 1668 
      char *tmp_7;
      #line 1668 
      tmp_7 = p;
      #line 1668 
      p ++;
      #line 1668 
      if (((unsigned long)local->basic_rates & 8UL) != 0UL) 
                                                            #line 1668 
                                                            *tmp_7 = (char)(-106); else 
                                                                    #line 1668 
                                                                    *tmp_7 = (char)22;
      #line 1670 
      *lpos = (char)((int)*lpos + 1);
    }
    #line 1672 
    pos = (__le16 *)p;
  }
  #line 1680 
  if (send_deauth == 0) 
                        #line 1680 
                        tmp_8 = (int)(local->ap)->tx_callback_assoc; else 
                                                                    #line 1680 
                                                                    tmp_8 = 0;
  #line 1675 
  ;
  #line 1675 
  ;
  #line 1675 
  if (send_deauth == 0) {
    #line 1676 
    if (reassoc != 0) 
                      #line 1676 
                      tmp_9 = 48; else 
                                       #line 1676 
                                       tmp_9 = 16;
    #line 1675 
    tmp_10 = tmp_9;
  }
  else 
       #line 1675 
       tmp_10 = 192;
  #line 1675 
  ;
  #line 1675 
  prism2_send_mgmt(dev,(unsigned short)tmp_10,(char *)(& body),(int)((u8 *)pos - (u8 *)(& body)),(u8 *)(& hdr->addr2),(unsigned short)tmp_8);
  #line 1683 
  if (sta != (struct sta_info *)0) {
    #line 1684 
    if ((unsigned int)resp == 0U) 
                                  #line 1685 
                                  sta->last_rx = jiffies;
    #line 1689 
    atomic_dec_1(& sta->users);
  }
  #line 1691 
  return;
}

#line 1705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_deauth(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 1711 
  int len;
  #line 1712 
  u16 reason_code;
  #line 1713 
  __le16 *pos;
  #line 1708 
  struct net_device *dev = local->dev;
  #line 1709 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1710 
  char *body = (char *)(skb->data + 24U);
  #line 1714 
  struct sta_info *sta = (struct sta_info *)0;
  #line 1716 
  len = (int)(skb->len + 4294967272U);
  #line 1718 
  if (len <= 1) {
    #line 1719 
    printk((char *)"handle_deauth - too short payload (len=%d)\n",len);
    #line 1720 
    return;
  }
  #line 1723 
  pos = (__le16 *)body;
  #line 1724 
  reason_code = *pos;
  #line 1726 
  printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2),len,(int)reason_code);
  #line 1730 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1731 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 1732 
  if (sta != (struct sta_info *)0) {
    #line 1733 
    if (((unsigned long)sta->flags & 2UL) != 0UL && sta->ap == 0) 
                                                                  #line 1734 
                                                                  hostap_event_expired_sta(local->dev,sta);
    #line 1735 
    sta->flags &= 4294967292U;
  }
  #line 1737 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1738 
  if (sta == (struct sta_info *)0) 
                                   #line 1739 
                                   printk((char *)"%s: deauthentication from %pM, ",(char *)(& dev->name),(u8 *)(& hdr->addr2),(int)reason_code);
  #line 1742 
  return;
}

#line 1747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_disassoc(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 1753 
  int len;
  #line 1754 
  u16 reason_code;
  #line 1755 
  __le16 *pos;
  #line 1750 
  struct net_device *dev = local->dev;
  #line 1751 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1752 
  char *body = (char *)(skb->data + 24U);
  #line 1756 
  struct sta_info *sta = (struct sta_info *)0;
  #line 1758 
  len = (int)(skb->len + 4294967272U);
  #line 1760 
  if (len <= 1) {
    #line 1761 
    printk((char *)"handle_disassoc - too short payload (len=%d)\n",len);
    #line 1762 
    return;
  }
  #line 1765 
  pos = (__le16 *)body;
  #line 1766 
  reason_code = *pos;
  #line 1768 
  printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2),len,(int)reason_code);
  #line 1772 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1773 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 1774 
  if (sta != (struct sta_info *)0) {
    #line 1775 
    if (((unsigned long)sta->flags & 2UL) != 0UL && sta->ap == 0) 
                                                                  #line 1776 
                                                                  hostap_event_expired_sta(local->dev,sta);
    #line 1777 
    sta->flags &= 4294967293U;
  }
  #line 1779 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1780 
  if (sta == (struct sta_info *)0) 
                                   #line 1781 
                                   printk((char *)"%s: disassociation from %pM, ",(char *)(& dev->name),(u8 *)(& hdr->addr2),(int)reason_code);
  #line 1784 
  return;
}

#line 1789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_handle_data_nullfunc(local_info_t *local, struct ieee80211_hdr *hdr)
{
  #line 1792 
  struct net_device *dev = local->dev;
  #line 1799 
  printk((char *)"\001");
  #line 1800 
  prism2_send_mgmt(dev,(unsigned short)212,(char *)0,0,(u8 *)(& hdr->addr2),(unsigned short)0);
  #line 1802 
  return;
}

#line 1806  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void ap_handle_dropped_data(local_info_t *local, struct ieee80211_hdr *hdr)
{
  #line 1810 
  struct sta_info *sta;
  #line 1811 
  __le16 reason;
  #line 1826 
  int tmp;
  #line 1809 
  struct net_device *dev = local->dev;
  #line 1813 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1814 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 1815 
  if (sta != (struct sta_info *)0) 
                                   #line 1816 
                                   atomic_inc_1(& sta->users);
  #line 1817 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1819 
  if (sta != (struct sta_info *)0 && ((unsigned long)sta->flags & 2UL) != 0UL) {
    #line 1820 
    printk((char *)"\001");
    #line 1821 
    atomic_dec_1(& sta->users);
    #line 1822 
    return;
  }
  #line 1825 
  reason = (unsigned short)7U;
  #line 1826 
  ;
  #line 1826 
  if (sta == (struct sta_info *)0 || ((unsigned long)sta->flags & 2UL) == 0UL) 
    #line 1826 
    tmp = 192; else 
                    #line 1826 
                    tmp = 160;
  #line 1826 
  ;
  #line 1826 
  prism2_send_mgmt(dev,(unsigned short)tmp,(char *)(& reason),2,(u8 *)(& hdr->addr2),(unsigned short)0);
  #line 1831 
  if (sta != (struct sta_info *)0) 
                                   #line 1832 
                                   atomic_dec_1(& sta->users);
  #line 1833 
  return;
}

#line 1839  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void pspoll_send_buffered(local_info_t *local, struct sta_info *sta, struct sk_buff *skb)
{
  #line 1842 
  struct hostap_skb_tx_data *meta;
  #line 1844 
  if (((unsigned long)sta->flags & 4UL) == 0UL) {
    #line 1847 
    dev_queue_xmit(skb);
    #line 1848 
    return;
  }
  #line 1853 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 1854 
  meta->flags = (unsigned char)((unsigned int)meta->flags | 2U);
  #line 1855 
  if (skb_queue_empty(& sta->tx_buf) == 0) 
                                           #line 1857 
                                           meta->flags = (unsigned char)((unsigned int)meta->flags | 4U);
  #line 1859 
  dev_queue_xmit(skb);
  #line 1860 
  return;
}

#line 1864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_pspoll(local_info_t *local, struct ieee80211_hdr *hdr, struct hostap_80211_rx_status *rx_stats)
{
  #line 1869 
  struct sta_info *sta;
  #line 1870 
  u16 aid;
  #line 1871 
  struct sk_buff *skb;
  #line 1868 
  struct net_device *dev = local->dev;
  #line 1876 
  if (! ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr)) {
    #line 1877 
    printk((char *)"\001",(u8 *)(& hdr->addr1));
    #line 1880 
    return;
  }
  #line 1883 
  aid = hdr->duration_id;
  #line 1884 
  if (((unsigned long)aid & 49152UL) != 49152UL) {
    #line 1885 
    printk((char *)"\001");
    #line 1886 
    return;
  }
  #line 1888 
  aid = (unsigned short)((unsigned int)aid & 16383U);
  #line 1889 
  if ((unsigned int)aid + 65535U > 127U) {
    #line 1890 
    printk((char *)"\001",(int)aid);
    #line 1891 
    return;
  }
  #line 1895 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1896 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 1897 
  if (sta != (struct sta_info *)0) 
                                   #line 1898 
                                   atomic_inc_1(& sta->users);
  #line 1899 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 1901 
  if (sta == (struct sta_info *)0) {
    #line 1902 
    printk((char *)"\001");
    #line 1903 
    return;
  }
  #line 1905 
  if ((int)sta->aid != (int)aid) {
    #line 1906 
    printk((char *)"\001",(int)aid,(int)sta->aid);
    #line 1908 
    return;
  }
  #line 1920 
  while (1) {
    #line 1920 
    skb = skb_dequeue(& sta->tx_buf);
    #line 1920 
    if (! (skb != (struct sk_buff *)0)) 
                                        #line 1920 
                                        break;
    #line 1925 
    pspoll_send_buffered(local,sta,skb);
    #line 1927 
    if (((unsigned long)sta->flags & 4UL) != 0UL) 
                                                  #line 1932 
                                                  break;
  }
  #line 1936 
  if (skb_queue_empty(& sta->tx_buf) != 0) {
    #line 1938 
    int tmp = ((unsigned long)sta->flags & 8UL) == 0UL;
    #line 1941 
    hostap_set_tim(local,(int)aid,0);
    #line 1942 
    sta->flags &= 4294967287U;
  }
  #line 1945 
  atomic_dec_1(& sta->users);
  #line 1946 
  return;
}

#line 1951  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_wds_oper_queue(struct work_struct *work)
{
  #line 1953 
  void *__mptr;
  #line 1956 
  struct wds_oper_data *entry;
  #line 1956 
  struct wds_oper_data *prev;
  #line 1953 
  __mptr = (void *)work;
  #line 1953 
  struct ap_data *ap = ((struct ap_data *)(__mptr + 18446744073709549216U));
  #line 1955 
  local_info_t *local = ap->local;
  #line 1958 
  cif_spin_lock_bh_lock_of_local_info_1(& local->lock);
  #line 1959 
  entry = (local->ap)->wds_oper_entries;
  #line 1960 
  (local->ap)->wds_oper_entries = (struct wds_oper_data *)0;
  #line 1961 
  cif_spin_unlock_bh_lock_of_local_info_1(& local->lock);
  #line 1963 
  while (entry != (struct wds_oper_data *)0) {
    #line 1964 
    char *tmp_0;
    #line 1964 
    ;
    #line 1964 
    if (entry->type == (unsigned int)WDS_ADD) 
                                              #line 1964 
                                              tmp_0 = (char *)"adding"; else 
                                                                    #line 1964 
                                                                    tmp_0 = (char *)"removing";
    #line 1964 
    ;
    #line 1964 
    printk((char *)"\001",(char *)(& (local->dev)->name),tmp_0,(u8 *)(& entry->addr));
    #line 1969 
    if (entry->type == (unsigned int)WDS_ADD) 
                                              #line 1970 
                                              prism2_wds_add(local,(u8 *)(& entry->addr),0);
    else 
      #line 1971 
      if (entry->type == (unsigned int)WDS_DEL) 
                                                #line 1972 
                                                prism2_wds_del(local,(u8 *)(& entry->addr),0,1);
    #line 1974 
    prev = entry;
    #line 1975 
    entry = entry->next;
    #line 1976 
    kfree((void *)prev);
  }
  #line 1978 
  return;
}

#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_beacon(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 1987 
  int len;
  #line 1987 
  int left;
  #line 1988 
  u16 beacon_int;
  #line 1988 
  u16 capability;
  #line 1989 
  __le16 *pos;
  #line 1985 
  struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
  #line 1986 
  char *body = (char *)(skb->data + 24U);
  #line 1990 
  char *ssid = (char *)0;
  #line 1991 
  unsigned char *supp_rates = (unsigned char *)0U;
  #line 1992 
  int ssid_len = 0;
  #line 1992 
  int supp_rates_len = 0;
  #line 1993 
  struct sta_info *sta = (struct sta_info *)0;
  #line 1994 
  int new_sta = 0;
  #line 1994 
  int channel = -1;
  #line 1996 
  len = (int)(skb->len + 4294967272U);
  #line 1998 
  if (len <= 11) {
    #line 1999 
    printk((char *)"\001",len);
    #line 2001 
    return;
  }
  #line 2004 
  pos = (__le16 *)body;
  #line 2005 
  left = len;
  #line 2008 
  pos += 4U;
  #line 2008 
  left += -8;
  #line 2010 
  beacon_int = *pos;
  #line 2011 
  pos ++;
  #line 2011 
  left += -2;
  #line 2013 
  capability = *pos;
  #line 2014 
  pos ++;
  #line 2014 
  left += -2;
  #line 2016 
  if ((local->ap)->ap_policy != (unsigned int)AP_OTHER_AP_EVEN_IBSS && ((int)capability & 2) != 0) 
    #line 2018 
    return;
  #line 2020 
  if (left > 1) {
    #line 2021 
    unsigned int ileft;
    #line 2022 
    unsigned char *u = (unsigned char *)pos;
    #line 2024 
    if ((unsigned int)*u == 0U) {
      #line 2025 
      u ++;
      #line 2025 
      left --;
      #line 2026 
      ileft = (unsigned int)*u;
      #line 2027 
      u ++;
      #line 2027 
      left --;
      #line 2029 
      if (ileft > (unsigned int)left || ileft > 32U) {
        #line 2030 
        printk((char *)"\001");
        #line 2031 
        return;
      }
      #line 2034 
      if ((local->ap)->ap_policy == (unsigned int)AP_OTHER_AP_SAME_SSID) {
        #line 2034 
        ;
        #line 2034 
        if ((unsigned long)ileft != cif_strlen_1((char *)(& local->essid))) 
          #line 2038 
          return;
        else {
          #line 2035 
          if (memcmp((void *)(& local->essid),(void *)u,(unsigned long)ileft) != 0) 
            #line 2038 
            return;
        }
      }
      #line 2041 
      ssid = (char *)u;
      #line 2042 
      ssid_len = (int)ileft;
      #line 2044 
      u += (unsigned long)ileft;
      #line 2045 
      left = (int)((unsigned int)left - ileft);
    }
    #line 2048 
    if ((unsigned int)*u == 1U) {
      #line 2049 
      u ++;
      #line 2049 
      left --;
      #line 2050 
      ileft = (unsigned int)*u;
      #line 2051 
      u ++;
      #line 2051 
      left --;
      #line 2053 
      if ((ileft > (unsigned int)left || ileft == 0U) || ileft > 8U) {
        #line 2054 
        printk((char *)"\001");
        #line 2055 
        return;
      }
      #line 2058 
      supp_rates = u;
      #line 2059 
      supp_rates_len = (int)ileft;
      #line 2061 
      u += (unsigned long)ileft;
      #line 2062 
      left = (int)((unsigned int)left - ileft);
    }
    #line 2065 
    if ((unsigned int)*u == 3U) {
      #line 2066 
      u ++;
      #line 2066 
      left --;
      #line 2067 
      ileft = (unsigned int)*u;
      #line 2068 
      u ++;
      #line 2068 
      left --;
      #line 2070 
      if (ileft > (unsigned int)left || ileft != 1U) {
        #line 2071 
        printk((char *)"\001");
        #line 2072 
        return;
      }
      #line 2075 
      channel = (int)*u;
      #line 2077 
      u += (unsigned long)ileft;
      #line 2078 
      left = (int)((unsigned int)left - ileft);
    }
  }
  #line 2082 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2083 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 2084 
  if (sta != (struct sta_info *)0) 
                                   #line 2085 
                                   atomic_inc_1(& sta->users);
  #line 2086 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2088 
  if (sta == (struct sta_info *)0) {
    #line 2090 
    new_sta = 1;
    #line 2091 
    sta = ap_add_sta(local->ap,(u8 *)(& hdr->addr2));
    #line 2092 
    if (sta == (struct sta_info *)0) {
      #line 2093 
      printk((char *)"\001");
      #line 2095 
      return;
    }
    #line 2097 
    hostap_event_new_sta(local->dev,sta);
    #line 2101 
    sta->flags = 3U;
    #line 2103 
    if ((local->ap)->autom_ap_wds != 0) 
                                        #line 2104 
                                        hostap_wds_link_oper(local,(u8 *)(& sta->addr),(enum ldv_15516)WDS_ADD);
  }
  #line 2108 
  sta->ap = 1;
  #line 2109 
  if (ssid != (char *)0) {
    #line 2110 
    sta->u.ap.ssid_len = ssid_len;
    #line 2111 
    memcpy((void *)(& sta->u.ap.ssid),(void *)ssid,(unsigned long)ssid_len);
    #line 2112 
    sta->u.ap.ssid[ssid_len] = (unsigned char)0U;
  }
  else {
    #line 2114 
    sta->u.ap.ssid_len = 0;
    #line 2115 
    sta->u.ap.ssid[0] = (unsigned char)0U;
  }
  #line 2117 
  sta->u.ap.channel = channel;
  #line 2118 
  (sta->rx_packets) ++;
  #line 2119 
  sta->rx_bytes += (unsigned long)len;
  #line 2120 
  sta->last_rx = jiffies;
  #line 2120 
  sta->u.ap.last_beacon = jiffies;
  #line 2121 
  sta->capability = capability;
  #line 2122 
  sta->listen_interval = beacon_int;
  #line 2124 
  atomic_dec_1(& sta->users);
  #line 2126 
  if (new_sta != 0) {
    #line 2127 
    memset((void *)(& sta->supported_rates),0,32UL);
    #line 2128 
    memcpy((void *)(& sta->supported_rates),(void *)supp_rates,(unsigned long)supp_rates_len);
    #line 2129 
    prism2_check_tx_rates(sta);
  }
  #line 2131 
  return;
}

#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void handle_ap_item(local_info_t *local, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 2143 
  u16 fc;
  #line 2143 
  u16 type;
  #line 2143 
  u16 stype;
  #line 2144 
  struct ieee80211_hdr *hdr;
  #line 2141 
  struct net_device *dev = local->dev;
  #line 2148 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 2149 
  fc = hdr->frame_control;
  #line 2150 
  type = (unsigned short)((unsigned int)fc & 12U);
  #line 2151 
  stype = (unsigned short)((unsigned int)fc & 240U);
  #line 2154 
  if (local->hostapd == 0 && (unsigned int)type == 8U) {
    #line 2155 
    printk((char *)"\001");
    #line 2157 
    if (((int)fc & 256) == 0 || ((int)fc & 512) != 0) {
      #line 2159 
      if ((unsigned int)stype == 64U) {
        #line 2163 
        ap_handle_dropped_data(local,hdr);
        #line 2164 
        goto done;
      }
      #line 2166 
      printk((char *)"\001",(int)fc);
      #line 2168 
      goto done;
    }
    #line 2171 
    if (! ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr)) {
      #line 2172 
      printk((char *)"\001",(u8 *)(& hdr->addr1));
      #line 2174 
      goto done;
    }
    #line 2177 
    if ((local->ap)->nullfunc_ack != 0 && (unsigned int)stype == 64U) 
      #line 2179 
      ap_handle_data_nullfunc(local,hdr); else 
                                               #line 2181 
                                               ap_handle_dropped_data(local,hdr);
    #line 2182 
    goto done;
  }
  #line 2185 
  if ((unsigned int)type == 0U && (unsigned int)stype == 128U) {
    #line 2186 
    handle_beacon(local,skb,rx_stats);
    #line 2187 
    goto done;
  }
  #line 2191 
  if ((unsigned int)type == 4U && (unsigned int)stype == 160U) {
    #line 2192 
    handle_pspoll(local,hdr,rx_stats);
    #line 2193 
    goto done;
  }
  #line 2196 
  if (local->hostapd != 0) {
    #line 2197 
    printk((char *)"\001",(int)type,(int)stype);
    #line 2199 
    goto done;
  }
  #line 2203 
  if ((unsigned int)type != 0U) {
    #line 2204 
    printk((char *)"\001");
    #line 2205 
    goto done;
  }
  #line 2208 
  if (! ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr)) {
    #line 2209 
    printk((char *)"\001",(u8 *)(& hdr->addr1));
    #line 2211 
    goto done;
  }
  #line 2214 
  if (! ether_addr_equal((u8 *)(& hdr->addr3),dev->dev_addr)) {
    #line 2215 
    printk((char *)"\001",(u8 *)(& hdr->addr3));
    #line 2217 
    goto done;
  }
  #line 2220 
  switch ((int)stype) {
    #line 2221 
    case 0: 
            #line 2221 
    ;
    #line 2222 
    handle_assoc(local,skb,rx_stats,0);
    #line 2223 
    break;
    #line 2224 
    case 16: 
             #line 2224 
    ;
    #line 2225 
    printk((char *)"\001");
    #line 2226 
    break;
    #line 2227 
    case 32: 
             #line 2227 
    ;
    #line 2228 
    handle_assoc(local,skb,rx_stats,1);
    #line 2229 
    break;
    #line 2230 
    case 48: 
             #line 2230 
    ;
    #line 2231 
    printk((char *)"\001");
    #line 2232 
    break;
    #line 2233 
    case 144: 
              #line 2233 
    ;
    #line 2234 
    printk((char *)"\001");
    #line 2235 
    break;
    #line 2236 
    case 160: 
              #line 2236 
    ;
    #line 2237 
    handle_disassoc(local,skb,rx_stats);
    #line 2238 
    break;
    #line 2239 
    case 176: 
              #line 2239 
    ;
    #line 2240 
    handle_authen(local,skb,rx_stats);
    #line 2241 
    break;
    #line 2242 
    case 192: 
              #line 2242 
    ;
    #line 2243 
    handle_deauth(local,skb,rx_stats);
    #line 2244 
    break;
    #line 2245 
    default: 
             #line 2245 
    ;
    #line 2246 
    printk((char *)"\001",(int)stype >> 4);
    #line 2248 
    break;
  }
  #line 2252 
  done: 
        #line 2252 
  ;
  #line 2253 
  consume_skb(skb);
  #line 2254 
  return;
}

#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_rx(struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats)
{
  #line 2261 
  struct hostap_interface *iface;
  #line 2262 
  local_info_t *local;
  #line 2263 
  struct ieee80211_hdr *hdr;
  #line 2265 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2266 
  local = iface->local;
  #line 2268 
  if (skb->len <= 15U) 
                       #line 2269 
                       goto drop;
  #line 2271 
  (dev->stats.rx_packets) ++;
  #line 2273 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 2275 
  if ((local->ap)->ap_policy == (unsigned int)AP_OTHER_AP_SKIP_ALL) {
    #line 2275 
    if ((int)ieee80211_is_beacon((unsigned short)((int)hdr->frame_control)) != 0) 
      #line 2277 
      goto drop;
  }
  #line 2279 
  skb->protocol = (unsigned short)5632U;
  #line 2280 
  handle_ap_item(local,skb,rx_stats);
  #line 2281 
  return;
  #line 2283 
  drop: 
        #line 2283 
  ;
  #line 2284 
  consume_skb(skb);
  #line 2285 
  return;
}

#line 2289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void schedule_packet_send(local_info_t *local, struct sta_info *sta)
{
  #line 2291 
  struct sk_buff *skb;
  #line 2292 
  struct ieee80211_hdr *hdr;
  #line 2293 
  struct hostap_80211_rx_status rx_stats;
  #line 2295 
  if (skb_queue_empty(& sta->tx_buf) != 0) 
                                           #line 2296 
                                           return;
  #line 2298 
  skb = dev_alloc_skb(16U);
  #line 2299 
  if (skb == (struct sk_buff *)0) {
    #line 2300 
    printk((char *)"\001",(char *)(& (local->dev)->name));
    #line 2302 
    return;
  }
  #line 2305 
  hdr = (struct ieee80211_hdr *)skb_put(skb,16U);
  #line 2308 
  hdr->frame_control = (unsigned short)164U;
  #line 2310 
  memcpy((void *)(& hdr->addr1),(void *)(local->dev)->dev_addr,6UL);
  #line 2311 
  memcpy((void *)(& hdr->addr2),(void *)(& sta->addr),6UL);
  #line 2312 
  hdr->duration_id = (unsigned short)((unsigned int)sta->aid | 49152U);
  #line 2318 
  skb->__anonCompField_sk_buff_87.__anonCompField___anonunion_498_86.__anonCompField___anonstruct_499_85.dev = local->dev;
  #line 2320 
  memset((void *)(& rx_stats),0,8UL);
  #line 2321 
  hostap_rx(local->dev,skb,& rx_stats);
  #line 2322 
  return;
}

#line 2325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int prism2_ap_get_sta_qual(local_info_t *local, struct sockaddr *addr, struct iw_quality *qual, int buf_size, int aplist)
{
  #line 2330 
  struct list_head *ptr;
  #line 2329 
  struct ap_data *ap = local->ap;
  #line 2331 
  int count = 0;
  #line 2333 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2335 
  ptr = ap->sta_list.next;
  #line 2335 
  while (ptr != (struct list_head *)0 && & ap->sta_list != ptr) {
    {
      #line 2337 
      struct sta_info *sta = (struct sta_info *)ptr;
      #line 2339 
      if (aplist != 0 && sta->ap == 0) 
                                       #line 2340 
                                       goto __Cont;
      #line 2341 
      (addr + (unsigned long)count)->sa_family = (unsigned short)1U;
      #line 2342 
      memcpy((void *)(& (addr + (unsigned long)count)->sa_data),(void *)(& sta->addr),6UL);
      #line 2343 
      if ((int)sta->last_rx_silence == 0) 
        #line 2344 
        if ((int)sta->last_rx_signal > 26) 
                                           #line 2344 
                                           (qual + (unsigned long)count)->qual = (unsigned char)((((int)sta->last_rx_signal + -27) * 92) / 127); else 
                                                                    #line 2344 
                                                                    (qual + (unsigned long)count)->qual = (unsigned char)0U;
      else 
           #line 2347 
           (qual + (unsigned long)count)->qual = (unsigned char)((unsigned int)((int)((unsigned char)sta->last_rx_signal) - (int)((unsigned char)sta->last_rx_silence)) + 221U);
      #line 2349 
      (qual + (unsigned long)count)->level = (unsigned char)((unsigned int)((unsigned char)(((int)sta->last_rx_signal * 100) / 255)) + 156U);
      #line 2350 
      (qual + (unsigned long)count)->noise = (unsigned char)((unsigned int)((unsigned char)(((int)sta->last_rx_silence * 100) / 255)) + 156U);
      #line 2351 
      (qual + (unsigned long)count)->updated = sta->last_rx_updated;
      #line 2353 
      sta->last_rx_updated = (unsigned char)8U;
      #line 2355 
      count ++;
      #line 2356 
      if (count >= buf_size) 
                             #line 2357 
                             break;
    }
    #line 2335 
    __Cont: 
            #line 2335 
    ptr = ptr->next;
  }
  #line 2359 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2361 
  return count;
}

#line 2367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int prism2_ap_translate_scan(struct net_device *dev, struct iw_request_info *info, char *buffer)
{
  #line 2370 
  struct hostap_interface *iface;
  #line 2371 
  local_info_t *local;
  #line 2372 
  struct ap_data *ap;
  #line 2373 
  struct list_head *ptr;
  #line 2374 
  struct iw_event iwe;
  #line 2378 
  char buf[64U];
  #line 2375 
  char *current_ev = buffer;
  #line 2376 
  char *end_buf = buffer + 4096U;
  #line 2381 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2382 
  local = iface->local;
  #line 2383 
  ap = local->ap;
  #line 2385 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2387 
  ptr = ap->sta_list.next;
  #line 2387 
  while (ptr != (struct list_head *)0 && & ap->sta_list != ptr) {
    {
      #line 2389 
      struct sta_info *sta = (struct sta_info *)ptr;
      #line 2392 
      memset((void *)(& iwe),0,24UL);
      #line 2393 
      iwe.cmd = (unsigned short)35605U;
      #line 2394 
      iwe.u.ap_addr.sa_family = (unsigned short)1U;
      #line 2395 
      memcpy((void *)(& iwe.u.ap_addr.sa_data),(void *)(& sta->addr),6UL);
      #line 2396 
      iwe.len = (unsigned short)24U;
      #line 2397 
      current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,24);
      #line 2402 
      memset((void *)(& iwe),0,24UL);
      #line 2403 
      iwe.cmd = (unsigned short)35591U;
      #line 2404 
      if (sta->ap != 0) 
                        #line 2405 
                        iwe.u.mode = 3U; else 
                                              #line 2407 
                                              iwe.u.mode = 2U;
      #line 2408 
      iwe.len = (unsigned short)12U;
      #line 2409 
      current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,12);
      #line 2413 
      memset((void *)(& iwe),0,24UL);
      #line 2414 
      iwe.cmd = (unsigned short)35841U;
      #line 2415 
      if ((int)sta->last_rx_silence == 0) 
        #line 2416 
        if ((int)sta->last_rx_signal > 26) 
                                           #line 2416 
                                           iwe.u.qual.qual = (unsigned char)((((int)sta->last_rx_signal + -27) * 92) / 127); else 
                                                                    #line 2416 
                                                                    iwe.u.qual.qual = (unsigned char)0U;
      else 
           #line 2419 
           iwe.u.qual.qual = (unsigned char)((unsigned int)((int)((unsigned char)sta->last_rx_signal) - (int)((unsigned char)sta->last_rx_silence)) + 221U);
      #line 2421 
      iwe.u.qual.level = (unsigned char)((unsigned int)((unsigned char)(((int)sta->last_rx_signal * 100) / 255)) + 156U);
      #line 2422 
      iwe.u.qual.noise = (unsigned char)((unsigned int)((unsigned char)(((int)sta->last_rx_silence * 100) / 255)) + 156U);
      #line 2423 
      iwe.u.qual.updated = sta->last_rx_updated;
      #line 2424 
      iwe.len = (unsigned short)12U;
      #line 2425 
      current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,12);
      #line 2429 
      if (sta->ap != 0) {
        #line 2430 
        memset((void *)(& iwe),0,24UL);
        #line 2431 
        iwe.cmd = (unsigned short)35611U;
        #line 2432 
        iwe.u.data.length = (unsigned short)sta->u.ap.ssid_len;
        #line 2433 
        iwe.u.data.flags = (unsigned short)1U;
        #line 2434 
        current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)(& sta->u.ap.ssid));
        #line 2438 
        memset((void *)(& iwe),0,24UL);
        #line 2439 
        iwe.cmd = (unsigned short)35627U;
        #line 2440 
        if (((int)sta->capability & 16) != 0) 
                                              #line 2441 
                                              iwe.u.data.flags = (unsigned short)2048U; else 
                                                                    #line 2444 
                                                                    iwe.u.data.flags = (unsigned short)32768U;
        #line 2445 
        current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)(& sta->u.ap.ssid));
        #line 2449 
        if ((unsigned int)sta->u.ap.channel + 4294967295U <= 13U) {
          #line 2451 
          memset((void *)(& iwe),0,24UL);
          #line 2452 
          iwe.cmd = (unsigned short)35589U;
          #line 2453 
          iwe.u.freq.m = (int)(freq_list_1[sta->u.ap.channel + -1] * (long)100000U);
          #line 2455 
          iwe.u.freq.e = (short)1;
          #line 2456 
          current_ev = iwe_stream_add_event(info,current_ev,end_buf,& iwe,16);
        }
        #line 2461 
        memset((void *)(& iwe),0,24UL);
        #line 2462 
        iwe.cmd = (unsigned short)35842U;
        #line 2463 
        sprintf((char *)(& buf),(char *)"beacon_interval=%d",(int)sta->listen_interval);
        #line 2465 
        iwe.u.data.length = (unsigned short)cif_strlen_1((char *)(& buf));
        #line 2466 
        current_ev = iwe_stream_add_point(info,current_ev,end_buf,& iwe,(char *)(& buf));
      }
      #line 2471 
      sta->last_rx_updated = (unsigned char)8U;
    }
    #line 2387 
    ptr = ptr->next;
  }
  #line 2476 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2478 
  return (int)(current_ev - buffer);
}

#line 2482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_hostapd_add_sta(struct ap_data *ap, struct prism2_hostapd_param *param)
{
  #line 2485 
  struct sta_info *sta;
  #line 2487 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2488 
  sta = ap_get_sta(ap,(u8 *)(& param->sta_addr));
  #line 2489 
  if (sta != (struct sta_info *)0) 
                                   #line 2490 
                                   atomic_inc_1(& sta->users);
  #line 2491 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2493 
  if (sta == (struct sta_info *)0) {
    #line 2494 
    sta = ap_add_sta(ap,(u8 *)(& param->sta_addr));
    #line 2495 
    if (sta == (struct sta_info *)0) 
                                     #line 2496 
                                     return -1;
  }
  #line 2499 
  if ((((unsigned long)sta->flags & 2UL) == 0UL && sta->ap == 0) && sta->local != (local_info_t *)0) 
    #line 2500 
    hostap_event_new_sta((sta->local)->dev,sta);
  #line 2502 
  sta->flags |= 3U;
  #line 2503 
  sta->last_rx = jiffies;
  #line 2504 
  sta->aid = param->u.add_sta.aid;
  #line 2505 
  sta->capability = param->u.add_sta.capability;
  #line 2506 
  sta->tx_supp_rates = param->u.add_sta.tx_supp_rates;
  #line 2507 
  if (((unsigned long)sta->tx_supp_rates & 1UL) != 0UL) 
                                                        #line 2508 
                                                        sta->supported_rates[0] = (unsigned char)2U;
  #line 2509 
  if (((unsigned long)sta->tx_supp_rates & 2UL) != 0UL) 
                                                        #line 2510 
                                                        sta->supported_rates[1] = (unsigned char)4U;
  #line 2511 
  if (((unsigned long)sta->tx_supp_rates & 4UL) != 0UL) 
                                                        #line 2512 
                                                        sta->supported_rates[2] = (unsigned char)11U;
  #line 2513 
  if (((unsigned long)sta->tx_supp_rates & 8UL) != 0UL) 
                                                        #line 2514 
                                                        sta->supported_rates[3] = (unsigned char)22U;
  #line 2515 
  prism2_check_tx_rates(sta);
  #line 2516 
  atomic_dec_1(& sta->users);
  #line 2517 
  return 0;
}

#line 2521  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_hostapd_remove_sta(struct ap_data *ap, struct prism2_hostapd_param *param)
{
  #line 2524 
  struct sta_info *sta;
  #line 2526 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2527 
  sta = ap_get_sta(ap,(u8 *)(& param->sta_addr));
  #line 2528 
  if (sta != (struct sta_info *)0) {
    #line 2529 
    ap_sta_hash_del(ap,sta);
    #line 2530 
    list_del_1(& sta->list);
  }
  #line 2532 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2534 
  if (sta == (struct sta_info *)0) 
                                   #line 2535 
                                   return -2;
  #line 2537 
  if ((((unsigned long)sta->flags & 2UL) != 0UL && sta->ap == 0) && sta->local != (local_info_t *)0) 
    #line 2538 
    hostap_event_expired_sta((sta->local)->dev,sta);
  #line 2539 
  ap_free_sta(ap,sta);
  #line 2541 
  return 0;
}

#line 2545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_hostapd_get_info_sta(struct ap_data *ap, struct prism2_hostapd_param *param)
{
  #line 2548 
  struct sta_info *sta;
  #line 2550 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2551 
  sta = ap_get_sta(ap,(u8 *)(& param->sta_addr));
  #line 2552 
  if (sta != (struct sta_info *)0) 
                                   #line 2553 
                                   atomic_inc_1(& sta->users);
  #line 2554 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2556 
  if (sta == (struct sta_info *)0) 
                                   #line 2557 
                                   return -2;
  #line 2559 
  param->u.get_info_sta.inactive_sec = (unsigned int)((jiffies - sta->last_rx) / 250UL);
  #line 2561 
  atomic_dec_1(& sta->users);
  #line 2563 
  return 1;
}

#line 2567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_hostapd_set_flags_sta(struct ap_data *ap, struct prism2_hostapd_param *param)
{
  #line 2570 
  struct sta_info *sta;
  #line 2572 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2573 
  sta = ap_get_sta(ap,(u8 *)(& param->sta_addr));
  #line 2574 
  if (sta != (struct sta_info *)0) {
    #line 2575 
    sta->flags |= param->u.set_flags_sta.flags_or;
    #line 2576 
    sta->flags &= param->u.set_flags_sta.flags_and;
  }
  #line 2578 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2580 
  if (sta == (struct sta_info *)0) 
                                   #line 2581 
                                   return -2;
  #line 2583 
  return 0;
}

#line 2587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int prism2_hostapd_sta_clear_stats(struct ap_data *ap, struct prism2_hostapd_param *param)
{
  #line 2590 
  struct sta_info *sta;
  #line 2591 
  int rate;
  #line 2593 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2594 
  sta = ap_get_sta(ap,(u8 *)(& param->sta_addr));
  #line 2595 
  if (sta != (struct sta_info *)0) {
    #line 2596 
    sta->tx_packets = 0UL;
    #line 2596 
    sta->rx_packets = 0UL;
    #line 2597 
    sta->tx_bytes = 0UL;
    #line 2597 
    sta->rx_bytes = 0UL;
    #line 2598 
    rate = 0;
    #line 2598 
    while (rate <= 3) {
      #line 2599 
      sta->tx_count[rate] = 0U;
      #line 2600 
      sta->rx_count[rate] = 0U;
      #line 2598 
      rate ++;
    }
  }
  #line 2603 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 2605 
  if (sta == (struct sta_info *)0) 
                                   #line 2606 
                                   return -2;
  #line 2608 
  return 0;
}

#line 2612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int prism2_hostapd(struct ap_data *ap, struct prism2_hostapd_param *param)
{
  #line 2614 
  switch (param->cmd) {
    #line 2615 
    case (u32)1: 
                 #line 2615 
    ;
    #line 2616 
    ap_control_kickall(ap);
    #line 2617 
    return 0;
    #line 2618 
    case (u32)2: 
                 #line 2618 
    ;
    #line 2619 
    return prism2_hostapd_add_sta(ap,param);
    #line 2620 
    case (u32)3: 
                 #line 2620 
    ;
    #line 2621 
    return prism2_hostapd_remove_sta(ap,param);
    #line 2622 
    case (u32)4: 
                 #line 2622 
    ;
    #line 2623 
    return prism2_hostapd_get_info_sta(ap,param);
    #line 2624 
    case (u32)8: 
                 #line 2624 
    ;
    #line 2625 
    return prism2_hostapd_set_flags_sta(ap,param);
    #line 2626 
    case (u32)15: 
                  #line 2626 
    ;
    #line 2627 
    return prism2_hostapd_sta_clear_stats(ap,param);
    #line 2628 
    default: 
             #line 2628 
    ;
    #line 2629 
    printk((char *)"\001",param->cmd);
    #line 2631 
    return -95;
  }
}

#line 2638  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static int ap_update_sta_tx_rate(struct sta_info *sta, struct net_device *dev)
{
  #line 2641 
  struct hostap_interface *iface;
  #line 2642 
  local_info_t *local;
  #line 2640 
  int ret = (int)sta->tx_rate;
  #line 2644 
  iface = (struct hostap_interface *)netdev_priv(dev);
  #line 2645 
  local = iface->local;
  #line 2647 
  (sta->tx_count[(int)sta->tx_rate_idx]) ++;
  #line 2648 
  (sta->tx_since_last_failure) ++;
  #line 2649 
  sta->tx_consecutive_exc = 0U;
  #line 2650 
  if (sta->tx_since_last_failure > 49U && (int)sta->tx_rate_idx < (int)sta->tx_max_rate) {
    #line 2653 
    int old_rate;
    #line 2653 
    int new_rate;
    #line 2654 
    new_rate = (int)sta->tx_rate_idx;
    #line 2654 
    old_rate = new_rate;
    #line 2655 
    while ((int)sta->tx_max_rate > new_rate) {
      #line 2656 
      new_rate ++;
      #line 2657 
      if (ap_tx_rate_ok(new_rate,sta,local) != 0) {
        #line 2658 
        sta->tx_rate_idx = (unsigned char)new_rate;
        #line 2659 
        break;
      }
    }
    #line 2662 
    if ((int)sta->tx_rate_idx != old_rate) {
      #line 2663 
      switch ((int)sta->tx_rate_idx) {
        #line 2664 
        case 0: 
                #line 2664 
        ;
        #line 2664 
        sta->tx_rate = (unsigned char)10U;
        #line 2664 
        break;
        #line 2665 
        case 1: 
                #line 2665 
        ;
        #line 2665 
        sta->tx_rate = (unsigned char)20U;
        #line 2665 
        break;
        #line 2666 
        case 2: 
                #line 2666 
        ;
        #line 2666 
        sta->tx_rate = (unsigned char)55U;
        #line 2666 
        break;
        #line 2667 
        case 3: 
                #line 2667 
        ;
        #line 2667 
        sta->tx_rate = (unsigned char)110U;
        #line 2667 
        break;
        #line 2668 
        default: 
                 #line 2668 
        ;
        #line 2668 
        sta->tx_rate = (unsigned char)0U;
        #line 2668 
        break;
      }
      #line 2670 
      printk((char *)"\001",(char *)(& dev->name),(u8 *)(& sta->addr),(int)sta->tx_rate);
    }
    #line 2673 
    sta->tx_since_last_failure = 0U;
  }
  #line 2676 
  return ret;
}

#line 2682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
ap_tx_ret hostap_handle_sta_tx(local_info_t *local, struct hostap_tx_data *tx)
{
  #line 2686 
  int set_tim;
  #line 2686 
  int ret;
  #line 2687 
  struct ieee80211_hdr *hdr;
  #line 2688 
  struct hostap_skb_tx_data *meta;
  #line 2684 
  struct sta_info *sta = (struct sta_info *)0;
  #line 2685 
  struct sk_buff *skb = tx->skb;
  #line 2690 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 2691 
  ret = 0;
  #line 2692 
  if ((local->ap == (struct ap_data *)0 || skb->len <= 9U) || (meta->iface)->type == (unsigned int)3) 
    #line 2694 
    goto out;
  #line 2696 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 2698 
  if (((int)hdr->addr1[0] & 1) != 0) {
    #line 2700 
    if ((local->ap)->num_sta <= 0) 
                                   #line 2701 
                                   ret = 1;
    #line 2702 
    goto out;
  }
  #line 2706 
  cif_spin_lock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2707 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr1));
  #line 2708 
  if (sta != (struct sta_info *)0) 
                                   #line 2709 
                                   atomic_inc_1(& sta->users);
  #line 2710 
  cif_spin_unlock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2712 
  if ((((local->iw_mode == 3 && sta == (struct sta_info *)0) && ((unsigned long)meta->flags & 1UL) == 0UL) && (meta->iface)->type != (unsigned int)0) && (meta->iface)->type != (unsigned int)2) {
    #line 2727 
    ((local->ap)->tx_drop_nonassoc) ++;
    #line 2728 
    ret = 1;
    #line 2729 
    goto out;
  }
  #line 2732 
  if (sta == (struct sta_info *)0) 
                                   #line 2733 
                                   goto out;
  #line 2735 
  if (((unsigned long)sta->flags & 32UL) == 0UL) 
                                                 #line 2736 
                                                 ret = 4;
  #line 2739 
  if (local->fw_tx_rate_control == 0) {
    #line 2740 
    meta->rate = ((unsigned char)ap_update_sta_tx_rate(sta,local->dev));
    #line 2740 
    (local->ap)->last_tx_rate = (int)((unsigned char)ap_update_sta_tx_rate(sta,local->dev));
  }
  #line 2743 
  if (local->iw_mode != 3) 
                           #line 2744 
                           goto out;
  #line 2746 
  if (((unsigned long)sta->flags & 4UL) == 0UL) 
                                                #line 2747 
                                                goto out;
  #line 2749 
  if (((unsigned long)meta->flags & 4UL) != 0UL) 
                                                 #line 2751 
                                                 hdr->frame_control = (unsigned short)((unsigned int)hdr->frame_control | 8192U);
  #line 2755 
  if (((unsigned long)meta->flags & 2UL) != 0UL) 
                                                 #line 2758 
                                                 goto out;
  #line 2761 
  if (skb_queue_len(& sta->tx_buf) > 31U) {
    #line 2762 
    printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& sta->addr));
    #line 2769 
    hostap_set_tim(local,(int)sta->aid,1);
    #line 2770 
    sta->flags |= 8U;
    #line 2771 
    ret = 1;
    #line 2772 
    goto out;
  }
  #line 2776 
  set_tim = skb_queue_empty(& sta->tx_buf);
  #line 2777 
  skb_queue_tail(& sta->tx_buf,skb);
  #line 2781 
  if (set_tim != 0) {
    #line 2782 
    int tmp_2 = ((unsigned long)sta->flags & 8UL) != 0UL;
    #line 2785 
    hostap_set_tim(local,(int)sta->aid,1);
    #line 2786 
    sta->flags |= 8U;
  }
  #line 2789 
  ret = 3;
  #line 2791 
  out: 
       #line 2791 
  ;
  #line 2792 
  if (sta != (struct sta_info *)0) {
    #line 2793 
    if (ret == 0 || ret == 4) {
      #line 2795 
      (sta->tx_packets) ++;
      #line 2796 
      sta->tx_bytes += (unsigned long)skb->len;
      #line 2797 
      sta->last_tx = jiffies;
    }
    #line 2800 
    if (((ret == 0 || ret == 4) && sta->crypt != (struct lib80211_crypt_data *)0) && tx->host_encrypt != 0) {
      #line 2803 
      tx->crypt = sta->crypt;
      #line 2804 
      tx->sta_ptr = (void *)sta;
    }
    else 
         #line 2808 
         atomic_dec_1(& sta->users);
  }
  #line 2811 
  return (enum ldv_15486)ret;
}

#line 2815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_handle_sta_release(void *ptr)
{
  #line 2817 
  struct sta_info *sta = (struct sta_info *)ptr;
  #line 2818 
  atomic_dec_1(& sta->users);
  #line 2819 
  return;
}

#line 2823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_handle_sta_tx_exc(local_info_t *local, struct sk_buff *skb)
{
  #line 2825 
  struct sta_info *sta;
  #line 2826 
  struct ieee80211_hdr *hdr;
  #line 2827 
  struct hostap_skb_tx_data *meta;
  #line 2829 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 2830 
  meta = (struct hostap_skb_tx_data *)(& skb->cb);
  #line 2832 
  cif_spin_lock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2833 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr1));
  #line 2834 
  if (sta == (struct sta_info *)0) {
    #line 2835 
    cif_spin_unlock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
    #line 2836 
    printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& hdr->addr1),jiffies);
    #line 2839 
    return;
  }
  #line 2842 
  sta->tx_since_last_failure = 0U;
  #line 2843 
  (sta->tx_consecutive_exc) ++;
  #line 2845 
  if ((sta->tx_consecutive_exc > 1U && (unsigned int)sta->tx_rate_idx != 0U) && (int)meta->rate <= (int)sta->tx_rate) {
    #line 2848 
    int old;
    #line 2848 
    int rate;
    #line 2849 
    rate = (int)sta->tx_rate_idx;
    #line 2849 
    old = rate;
    #line 2850 
    while (rate > 0) {
      #line 2851 
      rate --;
      #line 2852 
      if (ap_tx_rate_ok(rate,sta,local) != 0) {
        #line 2853 
        sta->tx_rate_idx = (unsigned char)rate;
        #line 2854 
        break;
      }
    }
    #line 2857 
    if ((int)sta->tx_rate_idx != old) {
      #line 2858 
      switch ((int)sta->tx_rate_idx) {
        #line 2859 
        case 0: 
                #line 2859 
        ;
        #line 2859 
        sta->tx_rate = (unsigned char)10U;
        #line 2859 
        break;
        #line 2860 
        case 1: 
                #line 2860 
        ;
        #line 2860 
        sta->tx_rate = (unsigned char)20U;
        #line 2860 
        break;
        #line 2861 
        case 2: 
                #line 2861 
        ;
        #line 2861 
        sta->tx_rate = (unsigned char)55U;
        #line 2861 
        break;
        #line 2862 
        case 3: 
                #line 2862 
        ;
        #line 2862 
        sta->tx_rate = (unsigned char)110U;
        #line 2862 
        break;
        #line 2863 
        default: 
                 #line 2863 
        ;
        #line 2863 
        sta->tx_rate = (unsigned char)0U;
        #line 2863 
        break;
      }
      #line 2865 
      printk((char *)"\001",(char *)(& (local->dev)->name),(u8 *)(& sta->addr),(int)sta->tx_rate);
    }
    #line 2869 
    sta->tx_consecutive_exc = 0U;
  }
  #line 2871 
  cif_spin_unlock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2872 
  return;
}

#line 2875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
static void hostap_update_sta_ps2(local_info_t *local, struct sta_info *sta, int pwrmgt, int type, int stype)
{
  #line 2878 
  if (pwrmgt != 0 && ((unsigned long)sta->flags & 4UL) == 0UL) 
                                                               #line 2879 
                                                               sta->flags |= 4U;
  else 
    #line 2883 
    if (pwrmgt == 0 && ((unsigned long)sta->flags & 4UL) != 0UL) {
      #line 2884 
      sta->flags &= 4294967291U;
      #line 2888 
      if (type != 4 || stype != 160) 
                                     #line 2890 
                                     schedule_packet_send(local,sta);
    }
  #line 2892 
  return;
}

#line 2897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int hostap_update_sta_ps(local_info_t *local, struct ieee80211_hdr *hdr)
{
  #line 2899 
  struct sta_info *sta;
  #line 2900 
  u16 fc;
  #line 2902 
  cif_spin_lock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2903 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 2904 
  if (sta != (struct sta_info *)0) 
                                   #line 2905 
                                   atomic_inc_1(& sta->users);
  #line 2906 
  cif_spin_unlock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2908 
  if (sta == (struct sta_info *)0) 
                                   #line 2909 
                                   return -1;
  #line 2911 
  fc = hdr->frame_control;
  #line 2912 
  hostap_update_sta_ps2(local,sta,(int)fc & 4096,(int)fc & 12,(int)fc & 240);
  #line 2916 
  atomic_dec_1(& sta->users);
  #line 2917 
  return 0;
}

#line 2923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
ap_rx_ret hostap_handle_sta_rx(local_info_t *local, struct net_device *dev, struct sk_buff *skb, struct hostap_80211_rx_status *rx_stats, int wds)
{
  #line 2928 
  int ret;
  #line 2929 
  struct sta_info *sta;
  #line 2930 
  u16 fc;
  #line 2930 
  u16 type;
  #line 2930 
  u16 stype;
  #line 2931 
  struct ieee80211_hdr *hdr;
  #line 2933 
  if (local->ap == (struct ap_data *)0) 
                                        #line 2934 
                                        return AP_RX_CONTINUE;
  #line 2936 
  hdr = (struct ieee80211_hdr *)skb->data;
  #line 2938 
  fc = hdr->frame_control;
  #line 2939 
  type = (unsigned short)((unsigned int)fc & 12U);
  #line 2940 
  stype = (unsigned short)((unsigned int)fc & 240U);
  #line 2942 
  cif_spin_lock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2943 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 2944 
  if (sta != (struct sta_info *)0) 
                                   #line 2945 
                                   atomic_inc_1(& sta->users);
  #line 2946 
  cif_spin_unlock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 2948 
  if (sta != (struct sta_info *)0 && ((unsigned long)sta->flags & 32UL) == 0UL) 
    #line 2949 
    ret = 3; else 
                  #line 2951 
                  ret = 0;
  #line 2954 
  if (((int)fc & 256) != 0) {
    #line 2955 
    if (wds == 0 && (sta == (struct sta_info *)0 || ((unsigned long)sta->flags & 2UL) == 0UL)) {
      #line 2956 
      if (local->hostapd != 0) 
                               #line 2957 
                               prism2_rx_80211(local->apdev,skb,rx_stats,2);
      else {
        #line 2961 
        printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2),(int)type >> 2,(int)stype >> 4);
        #line 2966 
        hostap_rx(dev,skb,rx_stats);
      }
      #line 2969 
      ret = 2;
      #line 2970 
      goto out;
    }
  }
  else 
    #line 2972 
    if (((int)fc & 512) != 0) {
      #line 2973 
      if (wds == 0) {
        #line 2976 
        if ((int)ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr) != 0) {
          #line 2977 
          printk((char *)"\001");
          #line 2979 
          hostap_dump_rx_80211((char *)(& dev->name),skb,rx_stats);
        }
        #line 2981 
        ret = 1;
        #line 2982 
        goto out;
      }
    }
    else 
      #line 2984 
      if ((unsigned int)stype == 64U && sta == (struct sta_info *)0) {
        #line 2984 
        if ((int)ether_addr_equal((u8 *)(& hdr->addr1),dev->dev_addr) != 0) {
          #line 2987 
          if (local->hostapd != 0) 
                                   #line 2988 
                                   prism2_rx_80211(local->apdev,skb,rx_stats,2);
          else {
            #line 2997 
            printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2));
            #line 3000 
            hostap_rx(dev,skb,rx_stats);
          }
          #line 3003 
          ret = 2;
          #line 3004 
          goto out;
        }
        else 
             #line 2984 
             goto _LAND;
      }
      else {
        #line 2984 
        _LAND: 
               #line 3005 
        ;
        #line 3005 
        if (! ((unsigned int)stype == 64U)) {
          #line 3014 
          if ((int)ether_addr_equal((u8 *)(& hdr->addr3),dev->dev_addr) != 0) {
            #line 3015 
            printk((char *)"\001",(char *)(& dev->name),(u8 *)(& hdr->addr2),(int)type >> 2,(int)stype >> 4);
            #line 3019 
            hostap_dump_rx_80211((char *)(& dev->name),skb,rx_stats);
          }
          #line 3021 
          ret = 1;
          #line 3022 
          goto out;
        }
      }
  #line 3025 
  if (sta != (struct sta_info *)0) {
    #line 3026 
    hostap_update_sta_ps2(local,sta,(int)fc & 4096,(int)type,(int)stype);
    #line 3029 
    (sta->rx_packets) ++;
    #line 3030 
    sta->rx_bytes += (unsigned long)skb->len;
    #line 3031 
    sta->last_rx = jiffies;
  }
  #line 3034 
  if (((local->ap)->nullfunc_ack != 0 && (unsigned int)stype == 64U) && ((int)fc & 256) != 0) {
    #line 3036 
    if (local->hostapd != 0) 
                             #line 3037 
                             prism2_rx_80211(local->apdev,skb,rx_stats,3); else 
                                                                    #line 3046 
                                                                    hostap_rx(dev,skb,rx_stats);
    #line 3049 
    ret = 2;
    #line 3050 
    goto out;
  }
  #line 3053 
  out: 
       #line 3053 
  ;
  #line 3054 
  if (sta != (struct sta_info *)0) 
                                   #line 3055 
                                   atomic_dec_1(& sta->users);
  #line 3057 
  return (enum ldv_15501)ret;
}

#line 3062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int hostap_handle_sta_crypto(local_info_t *local, struct ieee80211_hdr *hdr, struct lib80211_crypt_data **crypt, void **sta_ptr)
{
  #line 3067 
  struct sta_info *sta;
  #line 3069 
  cif_spin_lock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 3070 
  sta = ap_get_sta(local->ap,(u8 *)(& hdr->addr2));
  #line 3071 
  if (sta != (struct sta_info *)0) 
                                   #line 3072 
                                   atomic_inc_1(& sta->users);
  #line 3073 
  cif_spin_unlock_sta_table_lock_of_ap_data(& (local->ap)->sta_table_lock);
  #line 3075 
  if (sta == (struct sta_info *)0) 
                                   #line 3076 
                                   return -1;
  #line 3078 
  if (sta->crypt != (struct lib80211_crypt_data *)0) {
    #line 3079 
    *crypt = sta->crypt;
    #line 3080 
    *sta_ptr = (void *)sta;
  }
  else 
       #line 3084 
       atomic_dec_1(& sta->users);
  #line 3086 
  return 0;
}

#line 3091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int hostap_is_sta_assoc(struct ap_data *ap, u8 *sta_addr)
{
  #line 3093 
  struct sta_info *sta;
  #line 3094 
  int ret = 0;
  #line 3096 
  cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3097 
  sta = ap_get_sta(ap,sta_addr);
  #line 3098 
  if ((sta != (struct sta_info *)0 && ((unsigned long)sta->flags & 2UL) != 0UL) && sta->ap == 0) 
    #line 3099 
    ret = 1;
  #line 3100 
  cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3102 
  return ret;
}

#line 3107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int hostap_is_sta_authorized(struct ap_data *ap, u8 *sta_addr)
{
  #line 3109 
  struct sta_info *sta;
  #line 3110 
  int ret = 0;
  #line 3112 
  cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3113 
  sta = ap_get_sta(ap,sta_addr);
  #line 3114 
  if (((sta != (struct sta_info *)0 && ((unsigned long)sta->flags & 2UL) != 0UL) && sta->ap == 0) && (((unsigned long)sta->flags & 32UL) != 0UL || (ap->local)->ieee_802_1x == 0)) 
    #line 3117 
    ret = 1;
  #line 3118 
  cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3120 
  return ret;
}

#line 3125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int hostap_add_sta(struct ap_data *ap, u8 *sta_addr)
{
  #line 3127 
  struct sta_info *sta;
  #line 3128 
  int ret = 1;
  #line 3130 
  if (ap == (struct ap_data *)0) 
                                 #line 3131 
                                 return -1;
  #line 3133 
  cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3134 
  sta = ap_get_sta(ap,sta_addr);
  #line 3135 
  if (sta != (struct sta_info *)0) 
                                   #line 3136 
                                   ret = 0;
  #line 3137 
  cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3139 
  if (ret == 1) {
    #line 3140 
    sta = ap_add_sta(ap,sta_addr);
    #line 3141 
    if (sta == (struct sta_info *)0) 
                                     #line 3142 
                                     return -1;
    #line 3143 
    sta->flags = 3U;
    #line 3144 
    sta->ap = 1;
    #line 3145 
    memset((void *)(& sta->supported_rates),0,32UL);
    #line 3149 
    sta->supported_rates[0] = (unsigned char)130U;
    #line 3150 
    sta->supported_rates[1] = (unsigned char)132U;
    #line 3151 
    sta->supported_rates[2] = (unsigned char)11U;
    #line 3152 
    sta->supported_rates[3] = (unsigned char)22U;
    #line 3153 
    sta->tx_supp_rates = (unsigned char)15U;
    #line 3155 
    sta->tx_rate = (unsigned char)110U;
    #line 3156 
    sta->tx_rate_idx = ((unsigned char)3U);
    #line 3156 
    sta->tx_max_rate = ((unsigned char)3U);
  }
  #line 3159 
  return ret;
}

#line 3164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
int hostap_update_rx_stats(struct ap_data *ap, struct ieee80211_hdr *hdr, struct hostap_80211_rx_status *rx_stats)
{
  #line 3168 
  struct sta_info *sta;
  #line 3191 
  int tmp;
  #line 3170 
  if (ap == (struct ap_data *)0) 
                                 #line 3171 
                                 return -1;
  #line 3173 
  cif_spin_lock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3174 
  sta = ap_get_sta(ap,(u8 *)(& hdr->addr2));
  #line 3175 
  if (sta != (struct sta_info *)0) {
    #line 3176 
    sta->last_rx_silence = (signed char)rx_stats->noise;
    #line 3177 
    sta->last_rx_signal = (signed char)rx_stats->signal;
    #line 3178 
    sta->last_rx_rate = (unsigned char)rx_stats->rate;
    #line 3179 
    sta->last_rx_updated = (unsigned char)15U;
    #line 3180 
    if ((unsigned int)rx_stats->rate == 10U) 
                                             #line 3181 
                                             (sta->rx_count[0]) ++;
    else 
      #line 3182 
      if ((unsigned int)rx_stats->rate == 20U) 
                                               #line 3183 
                                               (sta->rx_count[1]) ++;
      else 
        #line 3184 
        if ((unsigned int)rx_stats->rate == 55U) 
                                                 #line 3185 
                                                 (sta->rx_count[2]) ++;
        else 
          #line 3186 
          if ((unsigned int)rx_stats->rate == 110U) 
                                                    #line 3187 
                                                    (sta->rx_count[3]) ++;
  }
  #line 3189 
  cif_spin_unlock_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3191 
  if (sta != (struct sta_info *)0) 
                                   #line 3191 
                                   tmp = 0; else 
                                                 #line 3191 
                                                 tmp = -1;
  #line 3191 
  return tmp;
}

#line 3195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_update_rates(local_info_t *local)
{
  #line 3204 
  void *__mptr;
  #line 3197 
  struct sta_info *sta;
  #line 3198 
  struct ap_data *ap = local->ap;
  #line 3200 
  if (ap == (struct ap_data *)0) 
                                 #line 3201 
                                 return;
  #line 3203 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3204 
  __mptr = (void *)ap->sta_list.next;
  #line 3204 
  sta = ((struct sta_info *)__mptr);
  #line 3204 
  while (& sta->list != & ap->sta_list) {
    #line 3204 
    void *__mptr_0;
    #line 3205 
    prism2_check_tx_rates(sta);
    #line 3204 
    __mptr_0 = (void *)sta->list.next;
    #line 3204 
    sta = ((struct sta_info *)__mptr_0);
  }
  #line 3207 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3208 
  return;
}

#line 3211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void *ap_crypt_get_ptrs(struct ap_data *ap, u8 *addr, int permanent, struct lib80211_crypt_data ***crypt)
{
  #line 3214 
  struct sta_info *sta;
  #line 3216 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3217 
  sta = ap_get_sta(ap,addr);
  #line 3218 
  if (sta != (struct sta_info *)0) 
                                   #line 3219 
                                   atomic_inc_1(& sta->users);
  #line 3220 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3222 
  if (sta == (struct sta_info *)0 && permanent != 0) 
                                                     #line 3223 
                                                     sta = ap_add_sta(ap,addr);
  #line 3225 
  if (sta == (struct sta_info *)0) 
                                   #line 3226 
                                   return (void *)0;
  #line 3228 
  if (permanent != 0) 
                      #line 3229 
                      sta->flags |= 16U;
  #line 3231 
  *crypt = & sta->crypt;
  #line 3233 
  return (void *)sta;
}

#line 3237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_add_wds_links(local_info_t *local)
{
  #line 3243 
  void *__mptr;
  #line 3240 
  struct sta_info *sta;
  #line 3239 
  struct ap_data *ap = local->ap;
  #line 3242 
  cif_spin_lock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3243 
  __mptr = (void *)ap->sta_list.next;
  #line 3243 
  sta = ((struct sta_info *)__mptr);
  #line 3243 
  while (& sta->list != & ap->sta_list) {
    #line 3243 
    void *__mptr_0;
    #line 3244 
    if (sta->ap != 0) 
                      #line 3245 
                      hostap_wds_link_oper(local,(u8 *)(& sta->addr),(enum ldv_15516)WDS_ADD);
    #line 3243 
    __mptr_0 = (void *)sta->list.next;
    #line 3243 
    sta = ((struct sta_info *)__mptr_0);
  }
  #line 3247 
  cif_spin_unlock_bh_sta_table_lock_of_ap_data(& ap->sta_table_lock);
  #line 3249 
  cif_schedule_work_0(& (local->ap)->wds_oper_queue);
  #line 3250 
  return;
}

#line 3253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/wireless/intersil/hostap/hostap_ap.c"
void hostap_wds_link_oper(local_info_t *local, u8 *addr, wds_oper_type type)
{
  #line 3255 
  struct wds_oper_data *entry;
  #line 3257 
  entry = (struct wds_oper_data *)kmalloc_2(24UL,2592U);
  #line 3258 
  if (entry == (struct wds_oper_data *)0) 
                                          #line 3259 
                                          return;
  #line 3260 
  memcpy((void *)(& entry->addr),(void *)addr,6UL);
  #line 3261 
  entry->type = type;
  #line 3262 
  cif_spin_lock_bh_lock_of_local_info_1(& local->lock);
  #line 3263 
  entry->next = (local->ap)->wds_oper_entries;
  #line 3264 
  (local->ap)->wds_oper_entries = entry;
  #line 3265 
  cif_spin_unlock_bh_lock_of_local_info_1(& local->lock);
  #line 3267 
  cif_schedule_work_0(& (local->ap)->wds_oper_queue);
  #line 3268 
  return;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
#line 95 
int emg_del_timer_sync(struct timer_list *arg0);
#line 96 
#line 96 
_Bool emg_flush_work(struct work_struct *arg0);
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 133 
  ldv_init_list_head(list);
  #line 134 
  return;
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static size_t cif_strlen_1(char *s)
{
  #line 147 
  return ldv_strlen(s);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void atomic_inc_1(atomic_t *v)
{
  #line 182 
  ldv_atomic_inc(v);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void atomic_dec_1(atomic_t *v)
{
  #line 189 
  ldv_atomic_dec(v);
  #line 190 
  return;
}

#line 381  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void *kmalloc_2(size_t size, gfp_t flags)
{
  #line 384 
  return ldv_kmalloc(size,flags);
}

#line 416  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 419 
  return ldv_kzalloc(size,flags);
}

#line 646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 650 
  return emg_del_timer_sync(timer);
}

#line 654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_sta_table_lock_of_ap_data(spinlock_t *lock)
{
  #line 657 
  ldv_spin_model_lock((char *)"sta_table_lock_of_ap_data");
  #line 659 
  spin_lock_0(lock);
  #line 660 
  return;
}

#line 663  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_sta_table_lock_of_ap_data(spinlock_t *lock)
{
  #line 666 
  ldv_spin_model_unlock((char *)"sta_table_lock_of_ap_data");
  #line 668 
  spin_unlock_0(lock);
  #line 669 
  return;
}

#line 672  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_bh_lock_of_mac_restrictions(spinlock_t *lock)
{
  #line 675 
  ldv_spin_model_lock((char *)"lock_of_mac_restrictions");
  #line 677 
  spin_lock_bh_1(lock);
  #line 678 
  return;
}

#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_bh_lock_of_mac_restrictions(spinlock_t *lock)
{
  #line 684 
  ldv_spin_model_unlock((char *)"lock_of_mac_restrictions");
  #line 686 
  spin_unlock_bh_1(lock);
  #line 687 
  return;
}

#line 690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_bh_sta_table_lock_of_ap_data(spinlock_t *lock)
{
  #line 693 
  ldv_spin_model_lock((char *)"sta_table_lock_of_ap_data");
  #line 695 
  spin_lock_bh_1(lock);
  #line 696 
  return;
}

#line 699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_bh_sta_table_lock_of_ap_data(spinlock_t *lock)
{
  #line 702 
  ldv_spin_model_unlock((char *)"sta_table_lock_of_ap_data");
  #line 704 
  spin_unlock_bh_1(lock);
  #line 705 
  return;
}

#line 708  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static bool cif_flush_work(struct work_struct *work)
{
  #line 712 
  return emg_flush_work(work);
}

#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static bool cif_schedule_work_0(struct work_struct *work)
{
  #line 720 
  return emg_schedule_work(work);
}

#line 724  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_lock_bh_lock_of_local_info_1(spinlock_t *lock)
{
  #line 727 
  ldv_spin_model_lock((char *)"lock_of_local_info");
  #line 729 
  spin_lock_bh_1(lock);
  #line 730 
  return;
}

#line 733  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/0/concurrency safety/weaver/hostap_ap.i.aux"
static void cif_spin_unlock_bh_lock_of_local_info_1(spinlock_t *lock)
{
  #line 736 
  ldv_spin_model_unlock((char *)"lock_of_local_info");
  #line 738 
  spin_unlock_bh_1(lock);
  #line 739 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
#line 183 
void *emg_entry_point_insmod(void *arg0);
#line 27 
#line 212 
int main(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 34 
  struct net_device *emg_2_netdev;
  #line 36 
  if (ldv_undef_int() != 0) {
    #line 38 
    emg_2_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 42 
    return emg_2_netdev;
  }
  else 
       #line 46 
       return (struct net_device *)0;
}

#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer(struct timer_list *arg0)
{
  #line 57 
  struct timer_list *emg_3_timer_list;
  #line 60 
  emg_3_timer_list = arg0;
  #line 61 
  ;
  #line 61 
  return 0;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 74 
  struct timer_list *emg_4_timer_list;
  #line 77 
  emg_4_timer_list = arg0;
  #line 78 
  ;
  #line 78 
  return 0;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_flush_work(struct work_struct *arg0)
{
  #line 91 
  struct work_struct *emg_5_work_struct;
  #line 93 
  if (ldv_undef_int() != 0) {
    #line 95 
    emg_5_work_struct = arg0;
    #line 99 
    if (emg_5_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 100 
      (*(emg_5_work_struct->func))(emg_5_work_struct);
    #line 105 
    return (_Bool)1;
  }
  else 
       #line 109 
       return (_Bool)0;
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 120 
  struct net_device *emg_6_netdev;
  #line 123 
  emg_6_netdev = arg0;
  #line 124 
  ldv_free((void *)emg_6_netdev);
  #line 127 
  return;
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 135 
  struct work_struct *emg_7_work_struct;
  #line 137 
  if (ldv_undef_int() != 0) {
    #line 139 
    emg_7_work_struct = arg0;
    #line 143 
    if (emg_7_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 144 
      (*(emg_7_work_struct->func))(emg_7_work_struct);
    #line 149 
    return (_Bool)1;
  }
  else 
       #line 153 
       return (_Bool)0;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 164 
  struct net_device *emg_8_netdev;
  #line 167 
  emg_8_netdev = arg0;
  #line 171 
  emg_wrapper_prism2_close(emg_8_netdev);
  #line 178 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 186 
  int emg_1_ret;
  #line 189 
  emg_1_ret = emg_hostap_init();
  #line 190 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 193 
  if (ldv_undef_int() != 0) {
    #line 195 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 199 
    emg_hostap_exit();
  }
  else 
       #line 203 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 207 
  return (void *)0;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/wireless/intersil/hostap/hostap.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 214 
  ldv_initialize();
  #line 216 
  emg_entry_point_insmod((void *)0);
  #line 218 
  return 0;
}

